from typing import Any, Callable, ClassVar, Iterator, List

from typing import overload
import CustomButton
import CustomLinkLabel
import CustomStyleEngine
import CustomStyleServices
import StyleManager

IDABORT: int
IDCANCEL: int
IDCLOSE: int
IDCONTINUE: int
IDHELP: int
IDIGNORE: int
IDNO: int
IDOK: int
IDRETRY: int
IDTRYAGAIN: int
IDYES: int
MB_ABORTRETRYIGNORE: int
MB_APPLMODAL: int
MB_DEFBUTTON1: int
MB_DEFBUTTON2: int
MB_DEFBUTTON3: int
MB_DEFBUTTON4: int
MB_HELP: int
MB_ICONASTERISK: int
MB_ICONERROR: int
MB_ICONEXCLAMATION: int
MB_ICONHAND: int
MB_ICONINFORMATION: int
MB_ICONQUESTION: int
MB_ICONSTOP: int
MB_ICONWARNING: int
MB_NOFOCUS: int
MB_OK: int
MB_OKCANCEL: int
MB_RETRYCANCEL: int
MB_SYSTEMMODAL: int
MB_TASKMODAL: int
MB_YESNO: int
MB_YESNOCANCEL: int
Screen: Screen
bkAbort: int
bkAll: int
bkCancel: int
bkClose: int
bkCustom: int
bkHelp: int
bkIgnore: int
bkNo: int
bkOK: int
bkRetry: int
bkYes: int
caFree: str
caHide: str
caMinimize: str
caNone: str
cl3DDkShadow: int
cl3DLight: int
clActiveBorder: int
clActiveCaption: int
clAppWorkSpace: int
clAqua: int
clBackground: int
clBlack: int
clBlue: int
clBtnFace: int
clBtnHighlight: int
clBtnShadow: int
clBtnText: int
clCaptionText: int
clCream: int
clDefault: int
clDkGray: int
clFuchsia: int
clGradientActiveCaption: int
clGradientInactiveCaption: int
clGray: int
clGrayText: int
clGreen: int
clHighlight: int
clHighlightText: int
clHotLight: int
clInactiveBorder: int
clInactiveCaption: int
clInactiveCaptionText: int
clInfoBk: int
clInfoText: int
clLime: int
clLtGray: int
clMaroon: int
clMedGray: int
clMenu: int
clMenuBar: int
clMenuHighlight: int
clMenuText: int
clMoneyGreen: int
clNavy: int
clNone: int
clOlive: int
clPurple: int
clRed: int
clScrollBar: int
clSilver: int
clSkyBlue: int
clTeal: int
clWhite: int
clWindow: int
clWindowFrame: int
clWindowText: int
clYellow: int
crAppStart: int
crArrow: int
crCross: int
crDefault: int
crDrag: int
crHSplit: int
crHandPoint: int
crHelp: int
crHourGlass: int
crIBeam: int
crMultiDrag: int
crNo: int
crNoDrop: int
crNone: int
crSQLWait: int
crSize: int
crSizeAll: int
crSizeNESW: int
crSizeNS: int
crSizeNWSE: int
crSizeWE: int
crUpArrow: int
crVSplit: int
fmCreate: int
fmOpenRead: int
fmOpenReadWrite: int
fmOpenWrite: int
fmShareCompat: int
fmShareDenyNone: int
fmShareDenyRead: int
fmShareDenyWrite: int
fmShareExclusive: int
fsBorder: str
fsSurface: str
tfBottom: str
tfCalcRect: str
tfCenter: str
tfEditControl: str
tfEndEllipsis: str
tfPathEllipsis: str
tfExpandTabs: str
tfExternalLeading: str
tfLeft: str
tfModifyString: str
tfNoClip: str
tfNoPrefix: str
tfRight: str
tfRtlReading: str
tfSingleLine: str
tfTop: str
tfVerticalCenter: str
tfWordBreak: str
tfHidePrefix: str
tfNoFullWidthCharBreak: str
tfPrefixOnly: str
tfTabStop: str
tfWordEllipsis: str
tfComposited: str
gdFixed: str
gdFocused: str
gdSelected: str
mdNearest: str
mdNull: str
mdPrimary: str
poDesigned: str
poDefault: str
poDefaultPosOnly: str
poDefaultSizeOnly: str
poScreenCenter: str
poDesktopCenter: str
poMainFormCenter: str
poOwnerFormCenter: str
mrAbort: int
mrAll: int
mrCancel: int
mrIgnore: int
mrNo: int
mrNoToAll: int
mrNone: int
mrOk: int
mrRetry: int
mrYes: int
mrYesToAll: int
ssAlt: str
ssCtrl: str
ssDouble: str
ssLeft: str
ssMiddle: str
ssRight: str
ssShift: str
msMasked: str
msReEnter: str
msDBSetText: str
bsNone: str
bsSingle: str
bsSizeable: str
bsDialog: str
bsToolWindow: str
bsSizeToolWin: str
doColumnTitles: str
doAutoColResize: str
doKeyColFixed: str
keyEdit: str
keyAdd: str
keyDelete: str
keyUnique: str
bdsSelected: str
bdsSelected: str
bdsHot: str
bdsFocused: str
bdsDown: str
bdsDragged: str
bdsInsertLeft: str
bdsInsertTop: str
bdsInsertRight: str
bdsInsertBottom: str
cbfVertical: str
cbfHorizontal: str
boAllowReorder: str
boAllowCopyingButtons: str
boFullSize: str
boGradientFill: str
boShowCaptions: str
boVerticalCategoryCaptions: str
boBoldCaptions: str
boUsePlusMinus: str
boCaptionOnlyBorder: str
gboAllowReorder: str
gboFullSize: str
gboGroupStyle: str
gboShowCaptions: str
epSelectedLeft: str
epUnselectedLeft: str
epSelectedRight: str
epUnselectedRight: str
etNone: str
etFirstIsSel: str
etFirstNotSel: str
etLastIsSel: str
etLastNotSel: str
etNotSelToSel: str
etSelToNotSel: str
etNotSelToNotSel: str
tsStandard: str
tsOwnerDraw: str
tsSoftTabs: str
tsModernTabs: str
tsModernPopout: str
tsIDETabs: str
bfNone: int
bfInfo: int
bfWarning: int
bfError: int
fsLeftRightTopBottom: str
fsRightLeftTopBottom: str
fsLeftRightBottomTop: str
fsRightLeftBottomTop: str
fsTopBottomLeftRight: str
fsBottomTopLeftRight: str
fsTopBottomRightLeft: str
fsBottomTopRightLeft: str
emAddRows: str
emAddColumns: str
emFixedSize: str
bhsStandard: str
bhsBalloon: str
ebLeft: str
ebTop: str
ebRight: str
ebBottom: str
esNone: str
esRaised: str
esLowered: str
boLeftToRight: str
boRightToLeft: str
boTopToBottom: str
boBottomToTop: str
beLeft: str
beRight: str
beEither: str
cXPFrameOuter: int
cXPBtnFrameColor: int
cXPSelectedColor: int
pbHorizontal: str
pbVertical: str
pbstNormal: str
pbstMarquee: str
pbsNormal: str
pbsError: str
pbsPaused: str
udLeft: str
udRight: str
udHorizontal: str
udVertical: str
btNext: str
btPrev: str
updNone: str
updUp: str
updDown: str
hkShift: str
hkCtrl: str
hkAlt: str
hkExt: str
hcNone: str
hcShift: str
hcCtrl: str
hcAlt: str
hcShiftCtrl: str
hcShiftAlt: str
hcCtrlAlt: str
hcShiftCtrlAlt: str
aviNone: str
aviFindFolder: str
aviFindFile: str
aviFindComputer: str
aviCopyFiles: str
aviCopyFile: str
aviRecycleFile: str
aviEmptyRecycle: str
aviDeleteFile: str
hsText: str
hsOwnerDraw: str
tsTrackBegin: str
tsTrackMove: str
tsTrackEnd: str
hsButtons: str
hsFlat: str
CN_BANDCHANGE: int
bmNone: str
bmClick: str
bmDblClick: str
soHorizontal: str
soVertical: str
sbFirst: str
sbLast: str
bsNormal: str
bsInvisible: str
bsGrayed: str
bsDepressed: str
bsHot: str
csExDropDown: str
csExSimple: str
csExDropDownList: str
csExCaseSensitive: str
csExNoEditImage: str
csExNoEditImageIndent: str
csExNoSizeLimit: str
csExPathWordBreak: str
acoAutoSuggest: str
acoAutoAppend: str
acoSearch: str
acoFilterPrefixes: str
acoUseTab: str
acoUpDownKeyDropsList: str
acoRtlReading: str
osText: str
osPlusMinusText: str
osPictureText: str
osPlusMinusPictureText: str
osTreeText: str
osTreePictureText: str
obPlus: str
obMinus: str
obOpen: str
obClose: str
obLeaf: str
otStandard: str
otOwnerDraw: str
ooDrawTreeRoot: str
ooDrawFocusRect: str
ooStretchBitmaps: str
CM_TABFONTCHANGED: int
ftReadOnly: str
ftHidden: str
ftSystem: str
ftVolumeID: str
ftDirectory: str
ftArchive:str
ftNormal: str
dtUnknown: str
dtNoDrive: str
dtFloppy: str
dtFixed: str
dtNetwork: str
dtCDROM: str
dtRAM: str
tcLowerCase: str
tcUpperCase: str
ofReadOnly: str
ofOverwritePrompt: str
ofHideReadOnly: str
ofNoChangeDir: str
ofShowHelp: str
ofNoValidate: str
ofAllowMultiSelect: str
ofExtensionDifferent: str
ofPathMustExist: str
ofFileMustExist: str
ofCreatePrompt: str
ofShareAware: str
ofNoReadOnlyReturn: str
ofNoTestFileCreate: str
ofNoNetworkButton: str
ofNoLongNames: str
ofOldStyleDialog: str
ofNoDereferenceLinks: str
ofEnableIncludeNotify: str
ofEnableSizing: str
ofDontAddToRecent: str
ofForceShowHidden: str
ofExNoPlacesBar: str
prAllPages: str
prSelection: str
prPageNums: str
poPrintToFile: str
poPageNums: str
poSelection: str
poWarning: str
poHelp: str
poDisablePrintToFile: str
psoDefaultMinMargins: str
psoDisableMargins: str
psoDisableOrientation: str
psoDisablePagePainting: str
psoDisablePaper: str
psoDisablePrinter: str
psoMargins: str
psoMinMargins: str
psoShowHelp: str
psoWarning: str
psoNoNetworkButton: str
pkDotMatrix: str
pkHPPCL: str
ptEnvelope: str
ptPaper: str
pmDefault: str
pmMillimeters: str
pmInches: str
mtWarning: str
mtError: str
mtInformation: str
mtConfirmation: str
mtCustom: str
mbYes: str
mbNo: str
mbOK: str
mbCancel: str
mbAbort: str
mbRetry: str
mbIgnore: str
mbAll: str
mbNoToAll: str
mbYesToAll: str
mbHelp: str
mbClose: str
fdAnsiOnly: str
fdTrueTypeOnly: str
fdEffects: str
fdFixedPitchOnly: str
fdForceFontExist: str
fdNoFaceSel: str
fdNoOEMFonts: str
fdNoSimulations: str
fdNoSizeSel: str
fdNoStyleSel: str
fdNoVectorFonts: str
fdShowHelp: str
fdWysiwyg: str
fdLimitSize: str
fdScalableOnly: str
fdApplyButton: str
fdScreen: str
fdPrinter: str
fdBoth: str
cdFullOpen: str
cdPreventFullOpen: str
cdShowHelp: str
cdSolidColor: str
cdAnyColor: str
gkText: str
gkHorizontalBar: str
gkVerticalBar: str
gkPie: str
gkNeedle: str
go16x1: str
go8x2: str
go4x4: str
go2x8: str
go1x16: str
tcLowerCase: str
tcUpperCase: str
tcAsIs: str
tdiNone: int 
tdiWarning: int
tdiError: int
tdiInformation: int
tdiShield: int
tfEnableHyperlinks: str
tfUseHiconMain: str
tfUseHiconFooter: str
tfAllowDialogCancellation: str
tfUseCommandLinks: str
tfUseCommandLinksNoIcon: str
tfExpandFooterArea: str
tfExpandedByDefault: str
tfVerificationFlagChecked: str
tfShowProgressBar: str
tfShowMarqueeProgressBar: str
tfCallbackTimer: str
tfPositionRelativeToWindow: str
tfRtlLayout: str
tfNoDefaultRadioButton: str
tfCanBeMinimized: str
tfSizeToContent: str
tcbOk: str
tcbYes: str
tcbNo: str
tcbCancel: str
tcbRetry: str
tcbClose: str
sbiText: str
sbiAudio: str
svmDocked: str
svmOverlay: str
svcCollapse: str
svcCompact: str
svpLeft: str
svpRight: str
svsOpened: str
svsOpening: str
svsClosed: str
svsClosing: str
alNone: str
alTop: str
alBottom: str
alLeft: str
alRight: str
alClient: str
alCustom: str
goFixedVertLine: str
goFixedHorzLine: str
goVertLine: str
goHorzLine: str
goRangeSelect: str
goDrawFocusSelected: str
goRowSizing: str
goColSizing: str
goRowMoving: str
goColMoving: str
goEditing: str
goTabs: str
goRowSelect: str
goAlwaysShowEditor: str
goThumbTracking: str
goFixedColClick: str
goFixedRowClick: str
goFixedHotTrack: str
goFixedColDefAlign: str
goFixedRowDefAlign: str
gdSelected: str
gdFocused: str
gdFixed: str
gdRowSelected: str
gdHotTrack: str
gdPressed: str
sdLeft: str
sdRight: str
sdUp: str
sdDown: str
stNone: str
stData: str
stText: str
stBoth: str
msControlSelect: str
msShiftSelect: str
msVisibleOnly: str
msSiblingOnly: str
csPartial: str
csDimmed: str
csExclusion: str
mbLeft: int
mbRight: int
mbMiddle: int
ssNone: int
ssHorizontal: int
ssVertical: int
ssBoth: int
ecNormal: int
ecUpperCase: int
ecLowerCase: int
SW_HIDE: int
SW_SHOWNORMAL: int
SW_NORMAL: int
SW_SHOWMINIMIZED: int
SW_SHOWMAXIMIZED: int
SW_MAXIMIZE: int
SW_SHOWNOACTIVATE: int
SW_SHOW: int
SW_MINIMIZE: int
SW_SHOWMINNOACTIVE: int
SW_SHOWNA: int
SW_RESTORE: int
SW_SHOWDEFAULT: int
SW_FORCEMINIMIZE: int
SW_MAX: int
biSystemMenu: str
biMinimize: str
biMaximize: str
biHelp: str
wsNormal: str
wsMinimized: str
wsMaximized: str
cbUnchecked: str
cbChecked: str
cbGrayed: str
sltURL: str
sltID: str
dtkDate: str
dtkTime: str
dtkDateTime: str
vsIcon: str
vsSmallIcon: str
vsList: str
vsReport: str
VK_LBUTTON: int
VK_RBUTTON: int
VK_CANCEL: int
VK_MBUTTON: int
VK_XBUTTON1: int
VK_XBUTTON2: int
VK_BACK: int
VK_TAB: int
VK_CLEAR: int
VK_RETURN: int
VK_SHIFT: int
VK_CONTROL: int
VK_MENU: int
VK_PAUSE: int
VK_CAPITAL: int
VK_KANA: int
VK_HANGUL: int
VK_JUNJA: int
VK_FINAL: int
VK_HANJA: int
VK_KANJI: int
VK_CONVERT: int
VK_NONCONVERT: int
VK_ACCEPT: int
VK_MODECHANGE: int
VK_ESCAPE: int
VK_SPACE: int
VK_PRIOR: int
VK_NEXT: int
VK_END: int
VK_HOME: int
VK_LEFT: int
VK_UP: int
VK_RIGHT: int
VK_DOWN: int
VK_SELECT: int
VK_PRINT: int
VK_EXECUTE: int
VK_SNAPSHOT: int
VK_INSERT: int
VK_DELETE: int
VK_HELP: int
VK_LWIN: int
VK_RWIN: int
VK_APPS: int
VK_SLEEP: int
VK_NUMPAD0: int
VK_NUMPAD1: int
VK_NUMPAD2: int
VK_NUMPAD3: int
VK_NUMPAD4: int
VK_NUMPAD5: int
VK_NUMPAD6: int
VK_NUMPAD7: int
VK_NUMPAD8: int
VK_NUMPAD9: int
VK_MULTIPLY: int
VK_ADD: int
VK_SEPARATOR: int
VK_SUBTRACT: int
VK_DECIMAL: int
VK_DIVIDE: int
VK_F1: int
VK_F2: int
VK_F3: int
VK_F4: int
VK_F5: int
VK_F6: int
VK_F7: int
VK_F8: int
VK_F9: int
VK_F10: int
VK_F11: int
VK_F12: int
VK_F13: int
VK_F14: int
VK_F15: int
VK_F16: int
VK_F17: int
VK_F18: int
VK_F19: int
VK_F20: int
VK_F21: int
VK_F22: int
VK_F23: int
VK_F24: int
VK_SCROLL: int
VK_LSHIFT: int
VK_RSHIFT: int
VK_LCONTROL: int
VK_RCONTROL: int
VK_LMENU: int
VK_RMENU: int
VK_BROWSER_BACK: int
VK_BROWSER_FORWARD: int
VK_BROWSER_REFRESH: int
VK_BROWSER_STOP: int
VK_BROWSER_SEARCH: int
VK_BROWSER_FAVORITES: int
VK_BROWSER_HOME: int
VK_VOLUME_MUTE: int
VK_VOLUME_DOWN: int
VK_VOLUME_UP: int
VK_MEDIA_NEXT_TRACK: int
VK_MEDIA_PREV_TRACK: int
VK_MEDIA_STOP: int
VK_MEDIA_PLAY_PAUSE: int
VK_LAUNCH_MAIL: int
VK_LAUNCH_MEDIA_SELECT: int
VK_LAUNCH_APP1: int
VK_LAUNCH_APP2: int
VK_OEM_1: int
VK_OEM_PLUS: int
VK_OEM_COMMA: int
VK_OEM_MINUS: int
VK_OEM_PERIOD: int
VK_OEM_2: int
VK_OEM_3: int
VK_OEM_4: int
VK_OEM_5: int
VK_OEM_6: int
VK_OEM_7: int
VK_OEM_8: int
VK_OEM_102: int
VK_PACKET: int
VK_PROCESSKEY: int
VK_ATTN: int
VK_CRSEL: int
VK_EXSEL: int
VK_EREOF: int
VK_PLAY: int
VK_ZOOM: int
VK_NONAME: int
VK_PA1: int
VK_OEM_CLEAR: int
aicBlack: str
aicWhite: str
aisSmall: str
aisMedium: str
aisLarge: str
aisXLarge: str
aitMomentumDots: str
aitRotatingSector: str
aitSectorRing: str
bsSolid: str
bsClear: str
bsHorizontal: str
bsVertical: str
bsFDiagonal: str
bsBDiagonal: str
bsCross: str
bsDiagCross: str
tssOff: str
tssOn: str
spoVertical: str
spoHorizontal: str
sphpDefault: str
sphpLeft: str
sphpCenter: str
sphpRight: str
sphpFill: str
spvpDefault: str
spvpTop: str
spvpCenter: str
spvpBottom: str
spvpFill: str
Desktop: int
StartMenu: int
Programs: int
Startup: int
Personal: int
AppData: int
Fonts: int
SendTo: int
Recent: int
Favorites: int
Cache: int
Cookies: int
History: int
NetHood: int
PrintHood: int
Templates: int
LocADat: int
WindRoot: int
WindSys: int
TempPath: int
RootDir: int
ProgFiles: int
ComFiles: int
ConfigPath: int
DevicePath: int
MediaPath: int
WallPaper: int
dfoIncFolders: str
dfoIncFiles: str
dfoRecurseFolders: str
fsFilterFilesOnly: str
fsFilterFoldersOnly: str
fsAll: str
IEOnly: str
EdgeOnly: str
EdgeIfAvailable: str

class Application(Component):
    '''Application是一个全局对象，代表了整个应用程序的主要控制器。它负责处理应用程序的生命周期管理、消息处理、事件触发等任务。Application对象提供了许多方法和属性，用于控制应用程序的行为，比如启动应用程序、结束应用程序、处理异常、管理窗口等。通过Application对象，开发人员可以轻松地管理整个应用程序的运行过程。'''
    Active: bool
    """Application.Active 属性用于指示应用程序当前是否处于活动状态。活动状态表示应用程序当前是否具有焦点并且可以接收用户输入。当 Active 属性为 True 时，表示应用程序是活动的；当 Active 属性为 False 时，表示应用程序不是活动的。
        通常情况下，当用户在操作系统中切换到其他应用程序时，当前应用程序会失去焦点，即 Active 属性会变为 False。当用户重新切换回应用程序时，Active 属性会变为 True。
        你可以利用 Application.Active 属性来控制应用程序在不同状态下的行为，比如在应用程序失去焦点时暂停某些活动，或者在应用程序重新获得焦点时恢复活动。"""
    ActionUpdateDelay: int
    """属性 ActionUpdateDelay 是属于 TActionManager 组件的一个属性，用于指定动作（Action）在属性更改后更新关联控件的延迟时间。TActionManager 是一个管理动作（Action）的集合并将它们与界面元素关联的组件。
        具体来说，当一个动作（Action）与一个或多个界面控件关联时（比如按钮、菜单项等），动作的状态变化（比如可用性、可见性等）可能会影响关联控件的外观和行为。ActionUpdateDelay 属性允许你设置一个延迟时间（以毫秒为单位），以便在这个延迟期间内，动作的状态变化不会立即反映到关联的控件上，而是在延迟结束后进行更新。
        使用 ActionUpdateDelay 的目的是为了减少频繁的界面更新，特别是在动作状态经常变化的情况下，可以减少界面的闪烁和不必要的性能消耗。例如，如果一个动作的可用性（Enabled）属性在短时间内多次变化，设置了适当的 ActionUpdateDelay 可以确保界面不会过于频繁地响应这些变化，而是在一定延迟后进行更新，提高用户体验和应用程序的性能。
        要使用 ActionUpdateDelay，首先需要将 TActionManager 组件添加到你的窗体或数据模块中，并将动作（Action）与需要关联的控件进行绑定。然后，通过设置 ActionUpdateDelay 属性来控制动作状态变化的更新延迟时间，以满足应用程序的需求和性能要求。
        总之，ActionUpdateDelay 是 TActionManager 组件的一个重要属性，用于优化界面控件与动作之间的状态同步，提高应用程序的用户体验和性能表现。 """
    ActiveFormHandle: Any
    """Application.ActiveFormHandle 属性提供了当前活动窗体的句柄（handle）。窗体的句柄是窗体在 Windows 操作系统中的唯一标识符，通过句柄，可以与窗体进行交互，比如改变其位置、大小、样式等。
        当用户在应用程序中切换窗体时，Application.ActiveFormHandle 属性会自动更新为当前活动窗体的句柄。通过检查该属性，你可以了解到哪个窗体当前处于活动状态，以便在需要时执行特定的操作或调整界面行为。
        这个属性对于管理多个窗体的应用程序特别有用，可以让你根据当前活动窗体的情况来调整应用程序的行为或显示。"""
    AllowTesting: bool
    """Application的AllowTesting属性是一个布尔值，用于指示是否允许在测试模式下运行应用程序。当AllowTesting属性设置为True时，允许在测试模式下运行应用程序，这通常用于自动化测试或单元测试等场景中。
        允许测试模式下运行应用程序意味着可以通过自动化测试框架或其他测试工具来模拟用户输入、测试应用程序的各种功能，并进行自动化测试的验证。
        当AllowTesting属性设置为False时，禁止在测试模式下运行应用程序，这可以避免在正式环境中意外启用测试模式，保证应用程序的稳定性和安全性。
        总之，AllowTesting属性提供了一种控制应用程序是否允许在测试模式下运行的机制，方便开发人员在开发和测试阶段进行应用程序的测试和验证。"""
    AutoDragDocking: bool
    """AutoDragDocking是TApplication类的一个属性，用于指示是否启用自动拖拽停靠功能。
        当AutoDragDocking属性设置为True时，表示启用自动拖拽停靠功能。这意味着当用户将窗口或控件拖拽到停靠区域时，系统会自动检测并执行停靠操作，使窗口或控件与停靠区域对齐，从而实现用户友好的界面布局管理。
        启用自动拖拽停靠功能可以让用户更轻松地重新排列和管理界面布局，提高了应用程序的易用性和可定制性。
        如果AutoDragDocking属性设置为False，则表示禁用自动拖拽停靠功能，用户需要手动管理窗口或控件的停靠操作。
        总之，AutoDragDocking属性是用于控制PythonStudio应用程序是否启用自动拖拽停靠功能的属性，可以通过设置该属性来增强应用程序的用户界面交互体验。"""
    HelpSystem: Any
    """Application.HelpSystem 是一个用于管理帮助系统的属性。它的作用是提供对应用程序帮助系统的访问和控制，允许开发人员集成帮助文档并为用户提供相关的帮助信息。以下是关于 Application.HelpSystem 属性的详细说明：
        帮助文档集成：
        Application.HelpSystem 允许开发人员将帮助文档集成到他们的 PythonStudio 应用程序中。通过设置 HelpSystem 属性，开发人员可以指定要使用的帮助文件和帮助主题，以便用户可以方便地查找和获取帮助信息。
        帮助内容显示：
        一旦帮助系统被集成到应用程序中，开发人员可以使用 Application.HelpSystem 属性来显示特定主题或帮助文件中的内容。这样，当用户需要帮助时，可以通过调用 HelpSystem 属性来显示相关的帮助信息，以解决问题或获取指导。
        帮助上下文：
        帮助系统通常与应用程序的界面和功能相关联，可以根据用户当前的操作或所处的上下文来显示相关的帮助信息。通过 Application.HelpSystem，开发人员可以为不同的界面元素或功能点指定特定的帮助主题，以确保用户能够获取到与其当前操作相关的帮助信息。
        帮助交互：
        帮助系统通常提供用户友好的交互方式，使用户能够轻松地浏览和搜索帮助内容，以解决问题或获取信息。通过 Application.HelpSystem，开发人员可以与用户交互，引导用户查找和使用帮助信息，从而提升用户体验和应用程序的可用性。
        总之，Application.HelpSystem 属性是用于管理帮助系统的属性，在 PythonStudio 应用程序中可以集成帮助文档并为用户提供相关的帮助信息，以解决问题、提供指导和提升用户体验。"""
    CurrentHelpFile: str
    """Application.CurrentHelpFile 是一个属性，用于设置或获取当前正在使用的帮助文件的文件名。它的作用是指定应用程序当前使用的帮助文件，以便在用户需要帮助时，可以从该文件中获取相关的帮助信息。以下是关于 Application.CurrentHelpFile 属性的详细说明：
        指定帮助文件：
        通过设置 Application.CurrentHelpFile 属性，开发人员可以指定应用程序当前使用的帮助文件。这样，当用户需要帮助时，应用程序就会从指定的帮助文件中检索相关的帮助信息，并显示给用户。
        切换帮助文件：
        在应用程序运行过程中，可能会需要切换不同的帮助文件，以便针对不同的功能或场景提供相关的帮助信息。通过修改 Application.CurrentHelpFile 属性，开发人员可以在需要时轻松地切换到不同的帮助文件，以满足用户的需求。
        动态设置：
        Application.CurrentHelpFile 属性可以在运行时动态设置，这意味着开发人员可以根据应用程序的运行状态或用户的操作来动态地指定当前的帮助文件。这样，可以根据具体情况提供个性化的帮助信息，提升用户体验。
        帮助文件路径：
        Application.CurrentHelpFile 属性指定的是帮助文件的文件名，开发人员需要确保指定的文件存在于正确的路径下。通常情况下，帮助文件会与应用程序的其他文件一起打包，或者存放在应用程序的安装目录中，以便应用程序可以方便地访问和使用。
        总之，Application.CurrentHelpFile 属性是用于设置或获取当前正在使用的帮助文件的文件名，在 PythonStudio 应用程序中可以通过该属性指定应用程序当前使用的帮助文件，以提供相关的帮助信息给用户。"""
    DefaultFont: Any
    """Application.DefaultFont 是一个属性，用于设置或获取应用程序的默认字体。它的作用是指定应用程序中使用的默认字体，这样所有未明确指定字体的控件都将使用该默认字体进行显示。以下是关于 Application.DefaultFont 属性的详细说明：
        统一应用程序字体：
        通过设置 Application.DefaultFont 属性，开发人员可以统一应用程序中所有控件的字体显示效果。这样，无论用户在何处使用控件，都将使用相同的默认字体，保持应用程序的一致性和统一性。
        简化界面设计：
        使用 Application.DefaultFont 属性可以简化界面设计过程，因为开发人员只需设置一次默认字体，而不必为每个控件单独指定字体。这样可以减少重复工作，并提高开发效率。
        方便维护：
        维护应用程序时，如果需要更改默认字体，只需修改 Application.DefaultFont 属性即可，而不必逐个修改每个控件的字体设置。这样可以减少出错的可能性，简化维护过程。
        适应用户偏好：
        通过设置默认字体，可以使应用程序适应不同用户的偏好和习惯。例如，可以根据用户反馈或市场调研，选择一种易读且符合大多数用户口味的默认字体，从而提升用户体验和应用程序的可用性。
        总之，Application.DefaultFont 属性是用于设置或获取应用程序的默认字体，在 PythonStudio 应用程序中可以通过该属性指定应用程序中所有控件的默认字体，以保持界面一致性、简化设计和维护工作。"""
    DialogHandle: Any
    """Application.DialogHandle 是一个属性，用于获取应用程序当前正在使用的对话框句柄（handle）。它的作用是提供对当前活动对话框的句柄的访问，以便进行与对话框相关的操作。以下是关于 Application.DialogHandle 属性的详细说明：
        获取对话框句柄：
        通过访问 Application.DialogHandle 属性，开发人员可以获取当前正在显示的对话框的句柄。这样，可以在需要时通过句柄来访问和操作对话框，执行诸如关闭、最小化、最大化等操作。
        与外部组件交互：
        应用程序可能需要与外部组件或其他应用程序进行交互，而这些组件可能以对话框的形式呈现。通过获取对话框句柄，应用程序可以将其传递给外部组件，以便外部组件可以与对话框进行交互或控制。
        自定义对话框行为：
        在某些情况下，开发人员可能需要自定义对话框的行为或外观。通过获取对话框句柄，可以在不修改对话框源代码的情况下，通过向对话框发送消息或调用系统 API 来实现自定义行为，例如修改对话框标题、按钮文本等。
        监视对话框状态：
        应用程序可能需要监视对话框的状态，例如检测对话框是否已关闭或是否处于活动状态。通过获取对话框句柄，可以轮询或注册消息来监视对话框状态的变化，并相应地执行操作。
        总之，Application.DialogHandle 属性是用于获取应用程序当前正在使用的对话框句柄，在 PythonStudio 应用程序中可以通过该属性获取对当前活动对话框的句柄，并进行与对话框相关的操作，例如与外部组件交互、自定义对话框行为、监视对话框状态等。"""
    EnumAllWindowsOnActivateHint: bool
    """Application.EnumAllWindowsOnActivateHint 是一个布尔型属性，用于控制在激活提示时是否枚举所有窗口。它的作用是指示应用程序是否在激活提示（ActivateHint）时枚举所有窗口，以便在激活提示期间显示窗口的提示信息。
        具体来说，当 EnumAllWindowsOnActivateHint 设置为 True 时，激活提示（ActivateHint）时，应用程序会枚举所有窗口，查找并显示所有窗口中可能存在的提示信息。而当 EnumAllWindowsOnActivateHint 设置为 False 时，则不会枚举所有窗口，只会显示当前活动窗口的提示信息。
        这个属性的作用在于控制在激活提示时是否显示其他窗口的提示信息，从而影响用户界面的交互和体验。通常情况下，如果应用程序中有多个窗口，并且这些窗口可能包含有用的提示信息，可以将 EnumAllWindowsOnActivateHint 设置为 True，以便在激活提示时显示所有窗口的提示信息，提高用户的操作效率和体验。
        但如果某些窗口的提示信息并不需要在激活提示时显示，或者窗口较多导致性能问题，可以将其设置为 False，只显示当前活动窗口的提示信息，以提升应用程序的性能和响应速度。"""
    ExeName: str
    """Application.ExeName 是一个只读属性，用于获取当前正在运行的应用程序的可执行文件的完整路径和文件名。具体来说，ExeName 属性返回一个字符串，其中包含当前正在运行的应用程序的完整路径和文件名。
        这个属性的作用是方便开发人员在运行时获取当前应用程序的可执行文件的路径和文件名，以便在需要时访问或操作应用程序的可执行文件。通常情况下，ExeName 属性用于获取应用程序自身的路径和文件名，以便应用程序可以在运行时访问自身的文件、读取配置文件、写入日志文件等操作。"""
    HelpFile: str
    """Application.HelpFile 是一个字符串类型的属性，用于指定当前应用程序的帮助文件的路径和文件名。具体来说，HelpFile 属性用于将帮助文件与应用程序关联起来，以便用户在应用程序中访问帮助内容。
        这个属性的作用是为应用程序提供帮助文档的支持，使用户能够在应用程序中方便地查阅相关的帮助信息。通过指定 HelpFile 属性，开发人员可以将帮助文件与应用程序捆绑在一起，或者将其放置在指定的路径中，以便用户可以通过应用程序界面或快捷键等方式访问帮助内容。
        例如，在用户需要获取关于应用程序功能或操作的信息时，可以通过调用 Application.HelpFile 属性来指定的帮助文件路径，并使用帮助查看器或自定义帮助功能来显示相关的帮助内容。
        总之，Application.HelpFile 属性用于指定当前应用程序的帮助文件的路径和文件名，在 PythonStudio 应用程序中通常用于提供帮助文档的支持，使用户能够在应用程序中方便地查阅相关的帮助信息。"""
    Hint: str
    """Application.Hint 是一个字符串类型的属性，用于设置应用程序的全局提示信息。具体来说，Hint 属性用于指定当鼠标悬停在控件上时显示的提示信息。
        这个属性的作用是为应用程序中的控件提供简洁、直观的提示信息，以帮助用户了解控件的功能或操作。当用户将鼠标悬停在具有设置了 Hint 属性的控件上时，将显示该属性所指定的提示信息，以提供额外的指导和说明。"""
    HintColor: Any
    """Application.HintColor 属性用于设置鼠标悬停在控件上时提示信息的背景颜色。具体来说，Hint 属性用于指定提示信息的背景颜色，以便在显示提示信息时具有更好的可读性和可视性。
        通过设置 Application.HintColor 属性，开发人员可以自定义提示信息的背景颜色，使其与应用程序的整体风格和配色方案保持一致，或者根据需要进行个性化定制。"""
    HintHidePause: int
    """Application.HintHidePause 是一个整数类型的属性，用于设置鼠标悬停在控件上后，提示信息消失前的延迟时间，单位是毫秒。具体来说，HintHidePause 属性用于指定鼠标离开控件后提示信息消失前的等待时间。
        通过设置 Application.HintHidePause 属性，开发人员可以调整提示信息的显示时长，以确保用户有足够的时间阅读和理解提示信息，同时又不至于提示信息过长时间遮挡控件或界面的其他重要内容。"""
    HintPause: int
    """Application.HintPause 是一个整数类型的属性，用于设置鼠标悬停在控件上后，提示信息出现前的延迟时间，单位同样是毫秒。具体来说，HintPause 属性用于指定鼠标悬停在控件上后，等待提示信息出现的时间。
        通过设置 Application.HintPause 属性，开发人员可以控制鼠标悬停在控件上时，提示信息的触发时机，以确保用户有足够的时间来意识到提示信息的存在，同时又不至于出现不必要的延迟。"""
    HintShortCuts: bool
    """Application.HintShortCuts 是一个布尔类型的属性，用于指定是否在提示信息中显示与控件相关的快捷键。当设置为 True 时，如果一个控件有关联的快捷键，那么在提示信息中会显示该快捷键的组合。
        这个属性主要用于提供额外的提示信息，告诉用户如何通过键盘快捷键来执行与控件相关的操作。通常情况下，如果应用程序中使用了快捷键来增强用户体验，那么开启这个属性可以让用户更容易地了解控件与快捷键之间的关联。
        例如，假设一个按钮控件有一个关联的快捷键，比如 Alt + B。如果 Application.HintShortCuts 属性设置为 True，那么当用户将鼠标悬停在该按钮上时，提示信息可能会显示为 "点击此按钮 (Alt + B)"，这样用户就知道可以通过 Alt + B 来执行相应的操作。
        在某些情况下，如果提示信息中显示快捷键会造成混乱或不必要的信息冗余，可以将 Application.HintShortCuts 属性设置为 False，这样就不会在提示信息中显示与控件相关的快捷键。
        总之，Application.HintShortCuts 属性用于控制提示信息中是否显示与控件相关的快捷键，在 PythonStudio 应用程序中用于提供额外的提示信息，帮助用户了解控件与快捷键之间的关联。"""
    HintShortPause: int
    """Application.HintShortPause 是一个整数类型的属性，用于设置在连续显示多个提示信息时，两个提示信息之间的短暂延迟时间。具体来说，HintShortPause 属性指定了在鼠标从一个控件移动到另一个控件并触发新的提示信息时的延迟时间，单位是毫秒。
        这个属性的作用是控制在快速移动鼠标时，避免短时间内连续触发多个提示信息，以提升用户体验并减少信息过载的感觉。
        举例来说，假设一个窗体中有多个控件设置了提示信息 (Hint 属性)，当用户快速将鼠标从一个控件移动到另一个控件时，如果 Application.HintShortPause 属性设置为一定的值（比如 50 毫秒），那么即使鼠标快速移动，系统也会在移动到新的控件后等待一小段时间，再显示新的提示信息，而不会立即触发新的提示信息显示，从而避免提示信息的频繁闪烁。
        通过调整 Application.HintShortPause 属性，开发人员可以根据实际情况优化提示信息的显示，以确保用户在使用应用程序时不会被过多的提示信息干扰或困扰，同时又能方便地获取必要的帮助信息。
        总之，Application.HintShortPause 属性用于设置在连续显示多个提示信息时，两个提示信息之间的短暂延迟时间，以提升用户体验和避免过多的信息显示。"""
    Icon: Any
    """Application.Icon 是一个 TIcon 类型的属性，用于设置应用程序窗口的图标。这个图标通常会显示在应用程序的主窗口的标题栏以及任务栏上，用于标识和区分不同的应用程序。
        设置 Application.Icon 属性可以为应用程序提供一个自定义的图标，而不是使用系统默认的图标。这个图标可以是应用程序的标识性图像，通常是一个小尺寸的图标，用于在窗口标题栏、任务栏、任务管理器等地方显示。
        通过设置应用程序的图标，可以增强应用程序的品牌识别度，使其在用户界面中更具有个性化和专业性。同时，对于多个应用程序同时运行时，不同的图标可以帮助用户更容易地识别和切换到他们想要的应用程序窗口。
        总之，Application.Icon 属性用于设置应用程序窗口的图标，以增强应用程序的品牌识别度和用户界面的个性化。"""
    InRemoteSession: bool
    """Application.InRemoteSession 是一个布尔类型的只读属性，用于检测当前应用程序是否运行在远程桌面会话（Remote Desktop Session）中。
        当 InRemoteSession 属性为 True 时，表示当前应用程序运行在远程桌面会话中；当为 False 时，则表示当前应用程序在本地桌面运行。
        这个属性的作用在于允许应用程序根据当前运行环境的不同采取不同的行为或者调整界面布局。例如，在远程桌面会话中，由于网络带宽和延迟等因素，可能需要调整某些界面元素或者减少一些图形效果以提升性能和用户体验。
        通过检查 InRemoteSession 属性，开发人员可以编写代码来动态适应不同的运行环境，从而使应用程序在远程桌面会话和本地桌面会话中都能够良好地运行和表现。
        总之，Application.InRemoteSession 属性用于检测当前应用程序是否运行在远程桌面会话中，以便根据不同的运行环境采取不同的行为或者调整界面布局。"""
    IsMetropolisUI: bool
    """IsMetropolisUI 不是 Application 对象的属性。可能是存在一些误解。
        PythonStudio 中的 Application 对象通常用于控制应用程序级别的设置和行为，但是没有名为 IsMetropolisUI 的属性。
        如果你需要了解有关 Metropolis UI（现在称为 Windows 新版界面）的信息，你可能需要查看 Windows API 或者相关的 PythonStudio 库和组件。 Metropolis UI 是一种设计风格，用于创建现代化、平铺式的用户界面。 PythonStudio 中可能有一些库或组件支持这种界面设计风格，但是需要进一步的调查和了解。"""
    MainForm: Any
    """Application.MainForm 是一个属性，用于指定应用程序的主窗体。主窗体是应用程序的主要用户界面窗体，通常是用户启动应用程序后首先看到的窗体。
        通过将 MainForm 属性设置为应用程序中的一个窗体对象，你可以指定哪个窗体应该被视为主窗体。这在管理应用程序的整体结构和行为时非常有用。例如，你可以在主窗体上添加菜单、工具栏、状态栏等共享的 UI 元素，以及处理应用程序级别的事件。
        当应用程序启动时，PythonStudio 会自动创建 MainForm 所指定的窗体，并将其显示在屏幕上。此后，用户与主窗体进行交互，直到应用程序退出或者主窗体被关闭。
        总之，Application.MainForm 属性用于指定应用程序的主窗体，是构建应用程序用户界面的重要组成部分。"""
    MainFormHandle: Any
    """Application.MainFormHandle 属性提供了应用程序主窗体的句柄（handle）。窗体的句柄是窗体在 Windows 操作系统中的唯一标识符，通过句柄，可以与窗体进行交互，比如改变其位置、大小、样式等。
        通过 Application.MainFormHandle 属性，你可以获取到应用程序主窗体的句柄，从而可以在需要时与主窗体进行交互或者获取有关主窗体的信息。
        这个属性在编写需要与主窗体进行交互的代码时非常有用，比如在跨窗体通信或者在外部组件中需要获取主窗体句柄的情况下。"""
    MainFormOnTaskBar: bool
    """Application.MainFormOnTaskBar 是一个布尔型属性，用于控制主窗体是否显示在 Windows 任务栏上。默认情况下，这个属性为 True，即主窗体会显示在任务栏上。
        设置 MainFormOnTaskBar 属性为 False 可以将主窗体从任务栏中隐藏。这在某些情况下可能是有用的，比如当你的应用程序有一个隐藏的主窗体，但是你想要显示一个自定义的任务栏按钮或者使用其他方式来管理主窗体的可见性。
        通过控制 MainFormOnTaskBar 属性，你可以灵活地调整应用程序主窗体在任务栏上的显示行为，以满足特定的用户体验需求。"""
    ModalLevel: int
    """Application.ModalLevel 是一个只读属性，用于获取当前模态窗口的层数。模态窗口是一种特殊的窗口，它会阻止用户与应用程序的其他窗口进行交互，直到模态窗口被关闭为止。
        ModalLevel 属性返回一个整数值，表示当前应用程序中模态窗口的层数。如果没有模态窗口，则该属性返回 0。每当打开一个模态窗口时，ModalLevel 的值会增加；当模态窗口关闭时，ModalLevel 的值会相应减少。
        通过查询 ModalLevel 属性，你可以了解当前应用程序中是否存在模态窗口以及它们的层数。这对于在编写复杂的窗体交互逻辑时非常有用，可以帮助你正确处理模态窗口的嵌套和交互行为，确保应用程序的稳定性和用户体验。"""
    ModalPopupMode: Any
    """Application.ModalPopupMode 属性用于设置或获取模态弹出窗口的模式。模态弹出窗口是一种特殊的窗口，它会在打开时阻止用户与应用程序的其他窗口进行交互，直到模态弹出窗口被关闭。
        ModalPopupMode 属性可以设置为以下几种模式之一：
        pmNone：表示没有模态弹出窗口。在这种模式下，用户可以自由地与应用程序的其他窗口进行交互，没有任何限制。
        pmExplicit：表示弹出窗口以显式的方式作为模态窗口打开。在这种模式下，弹出窗口会阻止用户与其他窗口进行交互，直到弹出窗口被关闭。
        pmAuto：表示弹出窗口以自动模态的方式打开。在这种模式下，弹出窗口会自动变为模态，但不会完全阻止用户与其他窗口进行交互。用户仍然可以与其他窗口进行交互，但是弹出窗口会保持在最前面，并且禁用其他窗口的控件，直到关闭弹出窗口。
        通过设置 ModalPopupMode 属性，你可以灵活地控制弹出窗口的模态行为，以满足应用程序的需求和用户体验。"""
    BiDiMode: Any
    """Application.BiDiMode 是一个属性，用于设置应用程序的双向模式（Bidirectional Mode）。双向模式用于处理与双向（如阿拉伯语、希伯来语）或右到左（RTL）语言相关的文本显示和布局。
        该属性的值可以是以下之一：
        bdLeftToRight：表示文本从左到右显示，布局也是从左到右。
        bdRightToLeft：表示文本从右到左显示，布局也是从右到左。
        bdRightToLeftNoAlign：表示文本从右到左显示，但是布局仍然是从左到右。这意味着文本显示方向是从右到左，但是控件的布局仍然是从左到右。这种模式适用于一些特殊情况，比如在一个右到左语言环境下，但是需要在界面中保持某些元素的从左到右布局。
        设置 BiDiMode 属性为适当的值可以确保应用程序能够正确地处理双向文本和布局，以提供更好的用户体验。"""
    BiDiKeyboard: str
    """Application的BiDiMode属性用于设置应用程序的双向（BiDi）模式。BiDi模式是为了支持双向文本（如阿拉伯文、希伯来文等）而设计的一种界面显示模式。
        BiDiMode属性有以下几种取值：
        bdLeftToRight（从左到右）：将应用程序的界面显示模式设置为从左到右的单向模式。这是大多数西方语言的默认显示模式。
        bdRightToLeft（从右到左）：将应用程序的界面显示模式设置为从右到左的单向模式。这适用于一些语言，如阿拉伯文、希伯来文等。
        bdRightToLeftNoAlign（从右到左，不对齐）：将应用程序的界面显示模式设置为从右到左的单向模式，但不进行文本和控件的对齐调整。
        bdRightToLeftControl（从右到左，控件）：将应用程序的界面显示模式设置为从右到左的单向模式，且仅对文本和控件进行对齐调整。
        通过设置BiDiMode属性，开发人员可以轻松地将应用程序适配到不同的语言和文本方向，从而提高应用程序的国际化和本地化水平。
        总之，BiDiMode属性是用于设置PythonStudio应用程序双向模式的属性，可以根据需要选择不同的模式以支持不同的语言和文本方向。"""
    NonBiDiKeyboard: str
    """Application.NonBiDiKeyboard 是一个布尔类型的属性，用于设置或获取应用程序是否忽略双向输入法（Bidirectional Input Method）的键盘布局。
        当 NonBiDiKeyboard 属性设置为 True 时，表示应用程序将忽略双向输入法的键盘布局。这意味着无论当前系统的键盘布局是从左到右还是从右到左，应用程序都会使用从左到右的键盘布局来处理用户的输入。这样做的目的是确保在某些特定场景下（例如，某些控件或文本框只接受从左到右的输入）能够始终使用相同的输入方式，而不受系统当前布局的影响。
        当 NonBiDiKeyboard 属性设置为 False 时，表示应用程序将根据系统当前的键盘布局来处理用户的输入，即根据当前语言环境自动选择从左到右或从右到左的输入方式。
        通过设置 NonBiDiKeyboard 属性，开发人员可以控制应用程序如何处理双向输入法的键盘布局，以确保用户在输入文本时的一致性和预期行为。"""
    ShowHint: bool
    """Application.ShowHint 是一个布尔类型的属性，用于控制是否显示提示信息（Hint）。
        当 ShowHint 属性设置为 True 时，表示应用程序启用了提示信息功能。提示信息是一种在用户将鼠标悬停在控件上一段时间后显示的文本，通常用于提供关于该控件功能或操作的简短说明。提示信息可以帮助用户更好地理解界面的功能和操作方式。
        当 ShowHint 属性设置为 False 时，表示应用程序禁用了提示信息功能，不会显示任何提示信息。
        通过控制 ShowHint 属性，开发人员可以灵活地决定是否在应用程序中使用提示信息，以满足用户的需求和界面设计的要求。"""
    ShowMainForm: bool
    """Application.ShowMainForm 是一个布尔类型的属性，它用于控制主窗体在应用程序启动时是否自动显示。
        当 ShowMainForm 属性设置为 True 时，应用程序在启动后会自动显示主窗体。这是大多数标准应用程序的默认行为，即在应用程序启动时立即显示主界面。
        当 ShowMainForm 属性设置为 False 时，主窗体在应用程序启动时不会自动显示。这在某些特定的应用程序中非常有用，例如需要在显示主窗体之前执行一些初始化操作（如登录验证、加载配置、进行预处理等）的情况。在这种模式下，开发者可以在适当的时机手动调用主窗体的 Show 方法来显示主窗体。
        这个属性提供了对应用程序启动流程的更高程度的控制，允许开发者根据具体需求定制用户界面的呈现时机。例如，一个应用可能需要在启动时先展示一个欢迎屏幕或者加载屏幕，并在一些数据加载或初始化完成后才显示主窗体。通过设置 ShowMainForm 为 False，开发者就可以实现这样的功能。"""
    SingleBufferingInRemoteSessions: bool
    """Application.SingleBufferingInRemoteSessions 是一个布尔类型的属性，用于控制在远程会话中是否使用单缓冲。
        在 Windows 中，远程会话是指用户通过远程桌面等远程连接方式连接到计算机上的一个会话。单缓冲和双缓冲是用于绘制图形界面的两种不同的缓冲方式。
        当 SingleBufferingInRemoteSessions 属性设置为 True 时，表示应用程序在远程会话中使用单缓冲方式绘制图形界面。单缓冲方式会在绘制完成后直接将图形内容呈现到屏幕上，这可能会导致在远程会话中出现闪烁或性能下降的情况。
        当 SingleBufferingInRemoteSessions 属性设置为 False 时，表示应用程序在远程会话中使用双缓冲方式绘制图形界面。双缓冲方式会先将图形内容绘制到一个隐藏的缓冲区中，然后再将整个缓冲区的内容一次性呈现到屏幕上，从而避免了闪烁和性能下降的问题。
        通过控制 SingleBufferingInRemoteSessions 属性，开发者可以根据应用程序的需求来选择合适的绘图方式，以提供更好的用户体验和性能表现，特别是在远程会话中运行应用程序时。"""
    Terminated: bool
    """Application.Terminated 是一个布尔类型的属性，用于指示应用程序是否正在终止中。
        当 Terminated 属性为 True 时，表示应用程序正在终止中。这通常发生在用户关闭应用程序时，或者通过调用 Halt 过程来强制终止应用程序的执行时。
        在 PythonStudio 应用程序中，开发者可以通过检查 Terminated 属性的状态来执行一些清理工作，例如保存未保存的数据、释放资源、关闭文件等。这样可以确保在应用程序终止之前，所有必要的操作都得到了正确的处理，从而保证程序的稳定性和数据的完整性。
        总之，Application.Terminated 属性是一个用于指示应用程序终止状态的标志，开发者可以根据它来执行适当的清理和处理操作。"""
    Title: str
    """Application.Title 是一个字符串类型的属性，用于设置或获取应用程序的标题（或者窗口标题）。
        应用程序的标题通常是显示在应用程序主窗口的标题栏上的文本，它可以用来标识应用程序的名称或版本信息。通过设置 Application.Title 属性，开发者可以动态地更改应用程序的标题，以满足不同的需求。"""
    UpdateFormatSettings: bool
    """Application.UpdateFormatSettings 是一个过程，用于更新应用程序的格式设置。
        格式设置包括日期格式、时间格式、货币格式等，这些设置可以影响到应用程序中涉及到日期、时间、货币等数据的显示和处理方式。调用 Application.UpdateFormatSettings 过程会更新应用程序当前线程的格式设置，使其与系统的当前格式设置保持一致。
        通常情况下，当应用程序启动时，会自动根据系统的当前格式设置进行初始化。但是，如果应用程序运行过程中需要动态地响应系统格式设置的变化，或者需要确保应用程序中的格式设置始终与系统一致，那么可以调用 Application.UpdateFormatSettings 来手动更新格式设置。
        例如，如果用户在应用程序运行期间更改了系统的日期格式，开发者可以在相应的地方调用 Application.UpdateFormatSettings 来更新应用程序中涉及日期的显示和处理方式，以确保其与系统保持一致。
        总之，Application.UpdateFormatSettings 的作用是更新应用程序的格式设置，使其与系统的当前格式设置保持一致，从而确保应用程序中涉及到日期、时间、货币等数据的显示和处理方式正确无误。"""
    UpdateMetricSettings: bool
    """Application.UpdateMetricSettings 是一个过程，用于更新应用程序的度量单位设置。
        度量单位设置指的是应用程序中使用的度量单位，例如长度单位（如英寸或厘米）、重量单位（如磅或千克）等。调用 Application.UpdateMetricSettings 过程会更新应用程序当前线程的度量单位设置，使其与系统的当前度量单位设置保持一致。
        通常情况下，当应用程序启动时，会自动根据系统的当前度量单位设置进行初始化。但是，如果应用程序运行过程中需要动态地响应系统度量单位设置的变化，或者需要确保应用程序中的度量单位设置始终与系统一致，那么可以调用 Application.UpdateMetricSettings 来手动更新度量单位设置。
        例如，如果用户在应用程序运行期间更改了系统的度量单位，开发者可以在相应的地方调用 Application.UpdateMetricSettings 来更新应用程序中涉及到度量单位的处理方式，以确保其与系统保持一致。
        总之，Application.UpdateMetricSettings 的作用是更新应用程序的度量单位设置，使其与系统的当前度量单位设置保持一致，从而确保应用程序中涉及到长度、重量等数据的处理方式正确无误。"""
    OnActionExecute: Any
    """Application.OnActionExecute 是一个事件，用于指定当用户执行某个操作时所触发的处理程序。
        操作可以是用户在应用程序中执行的任何动作，例如点击菜单项、按下工具栏按钮等。当用户执行这些操作时，如果已经为相应的操作指定了处理程序，那么该处理程序就会被调用执行。
        Application.OnActionExecute 事件通常用于全局的操作处理，也就是说，它适用于整个应用程序的操作。通过为该事件指定处理程序，可以在用户执行操作时执行相应的处理逻辑，例如打开特定的窗口、执行特定的操作等。"""
    OnActionUpdate: Any
    """Application.OnActionUpdate 是一个事件，用于指定在某个动作的状态需要更新时所触发的处理程序。
        动作的状态可能会在应用程序运行期间发生变化，例如菜单项的可见性、启用状态等。当动作的状态需要更新时，如果已经为相应的动作指定了 Application.OnActionUpdate 事件处理程序，那么该处理程序就会被调用，用于更新动作的状态。
        Application.OnActionUpdate 事件通常用于全局的动作状态更新，也就是说，它适用于整个应用程序的动作状态。通过为该事件指定处理程序，可以在动作的状态需要更新时执行相应的逻辑，例如根据当前应用程序的状态来决定动作的可见性、启用状态等。"""
    OnActivate: Any
    """Application.OnActivate 是一个事件，用于指定当应用程序激活时所触发的处理程序。
        应用程序的激活指的是当应用程序从非活动状态切换到活动状态时的事件。这通常发生在用户从其他应用程序切换回你的应用程序时，或者当你的应用程序从最小化状态恢复到正常状态时。
        Application.OnActivate 事件通常用于执行在应用程序激活时需要进行的初始化或者处理逻辑。例如，你可以在该事件中重新加载数据、更新界面内容、执行后台任务等。"""
    OnDeactivate: Any
    """Application.OnDeactivate 是一个事件，用于指定当应用程序失去活动状态时所触发的处理程序。
        应用程序失去活动状态指的是当应用程序从活动状态切换到非活动状态时的事件。这通常发生在用户切换到其他应用程序时，或者当你的应用程序最小化到任务栏或系统托盘时。
        Application.OnDeactivate 事件通常用于执行在应用程序失去活动状态时需要进行的处理逻辑。例如，你可以在该事件中保存用户数据、暂停后台任务、隐藏窗口等。"""
    OnException: Any
    """Application 是一个全局对象，代表了应用程序的主体。OnException 是 Application 对象的一个事件，它允许你在应用程序发生异常时进行处理。
        具体来说，当应用程序运行时发生异常（比如访问空指针、数组越界等），PythonStudio 会调用 OnException 事件，而你可以在这个事件中编写处理代码，比如记录异常信息、显示友好的错误消息给用户、进行错误处理等等。通过 OnException 事件，你可以更好地控制和管理异常情况，提高应用程序的稳定性和用户体验。"""
    OnGetActiveFormHandle: Any
    """OnGetActiveFormHandle 是 PythonStudio 中 TApplication 类的一个事件，它主要用于获取应用程序当前激活的窗口（表单）的句柄。在多窗口应用程序中，可能会有多个表单同时存在，这个事件可以帮助你确定当前应用程序中哪个表单是处于活动状态的。
        作用和使用场景:
        当你有一个全局的应用程序级的组件或逻辑需要与当前激活的表单进行交互时，你可以使用 OnGetActiveFormHandle 来获取当前激活表单的句柄。
        在某些情况下，你可能想要将一些操作（比如显示消息框、操作外部资源等）与当前激活的表单关联起来，这个事件可以提供所需的信息。"""
    OnGetMainFormHandle: Any
    """Application 是一个全局对象，代表了整个应用程序。OnGetMainFormHandle 是 Application 对象的一个事件，它的作用是获取主窗体（Main Form）的句柄。
        主窗体是应用程序的主要界面，通常是用户启动应用程序时首先看到的窗口。这个事件可以让你在需要时获取主窗体的句柄，以便进行一些操作，比如将其他窗体置于主窗体之上，或者在主窗体关闭时执行一些清理工作等。
        使用场景：
        当你需要在应用程序的其他部分与主窗体进行交互时，可以使用 OnGetMainFormHandle 来获取主窗体的句柄。
        在某些情况下，可能需要在主窗体关闭时执行一些清理工作，这时可以利用这个事件来获取主窗体的句柄，并在关闭事件中执行相关操作。"""
    OnIdle: Any
    """Application 是一个全局对象，代表了整个应用程序。OnIdle 是 Application 对象的一个事件，它的作用是在应用程序处于空闲状态时被触发。
        作用：
        处理空闲时间任务：当应用程序没有其他事件需要处理时，即处于空闲状态时，OnIdle 事件会被激发。你可以在这个事件中执行一些轻量级的后台任务，如更新界面、检查新消息等，以提升用户体验。
        资源释放和清理：OnIdle 事件还可以用于执行一些资源释放和清理工作，例如释放不再使用的内存、关闭未使用的文件句柄等，以确保应用程序的稳定性和性能。
        使用场景：
        动态更新界面：如果你有一些需要在后台执行的任务，但又不希望阻塞用户界面，可以将这些任务放在 OnIdle 事件中执行。比如，在后台加载一些数据或执行一些复杂的计算。
        定时任务：你可以利用 OnIdle 事件实现一些定时任务，例如定期检查更新、定时保存数据等。
        资源管理：在应用程序处于空闲状态时，可以在 OnIdle 事件中执行一些资源管理的任务，以确保应用程序的性能和稳定性。"""
    OnHelp: Any
    """Application 是一个全局对象，代表了整个应用程序。OnHelp 是 Application 对象的一个事件，它的作用是处理帮助系统的请求。
        作用：
        帮助系统的定制：OnHelp 事件允许你在用户请求帮助时自定义如何提供帮助信息。你可以根据应用程序的需要，自定义帮助系统的行为，比如显示特定的帮助内容或者调用外部的帮助文件。
        提供上下文相关的帮助：通过 OnHelp 事件，你可以根据当前上下文提供相关的帮助信息，帮助用户更快速地解决问题或者了解操作。
        使用场景：
        显示帮助信息：当用户请求帮助时，你可以在 OnHelp 事件中显示特定的帮助信息，以解答用户的疑问或者提供操作指导。
        调用外部帮助文件：你也可以在 OnHelp 事件中调用外部的帮助文件，比如 CHM 文件或者 HTML 文档，以提供更详细的帮助内容。
        上下文相关的帮助：根据当前的应用程序状态或者用户的操作，动态地提供相关的帮助信息，使用户能够更容易地理解和使用应用程序。"""
    OnHint: Any
    """Application 是一个全局对象，代表整个应用程序。OnHint 是 Application 对象的一个事件，它在应用程序的某个组件要显示提示（hint）时被触发。
        作用：
        自定义提示：通过 OnHint 事件，你可以在显示提示信息时进行自定义。你可以根据当前的上下文或应用程序的状态，更改提示内容或处理方式。
        改变提示显示的逻辑：你可以根据需要更改提示的显示逻辑，例如更改提示的显示位置、延迟时间，甚至是否显示提示。
        使用场景：
        修改提示文本：你可以根据特定的条件修改即将显示的提示文本。
        条件性显示提示：你可以控制提示的显示，根据应用程序的当前状态或其他条件决定是否显示提示。
        调整提示显示方式：你可以自定义提示的外观或显示位置，或者调整显示时间和持续时间。"""
    OnMessage: Any
    """Application 是一个全局对象，代表整个应用程序。OnMessage 是 Application 对象的一个事件，它在应用程序接收到窗口消息时被触发。
        作用：
        消息处理：通过 OnMessage 事件，你可以在应用程序接收到窗口消息时进行自定义的消息处理。这包括处理系统消息、自定义消息以及其他窗口消息。
        消息过滤：你可以根据需要过滤掉一些特定的消息，或者根据消息内容进行相应的处理。
        消息转发：在某些情况下，你可能希望将特定的消息转发给特定的控件或窗体进行处理。
        使用场景：
        自定义消息处理：处理特定类型的窗口消息，例如鼠标事件、键盘事件、系统消息等。
        消息日志：在 OnMessage 事件中记录或打印消息，以便调试或跟踪应用程序的行为。
        消息转发：将特定类型的消息转发给应用程序中的其他组件或对象进行处理，以实现更灵活的消息处理机制。"""
    OnMinimize: Any
    """Application.OnMinimize 是一个事件，用于指定当应用程序最小化时要触发的事件处理程序。这个事件在应用程序窗口最小化时自动触发，允许开发人员执行特定的操作或者逻辑。
        通常情况下，当应用程序窗口最小化时，用户可能希望执行一些额外的操作，例如保存当前的工作状态、暂停一些后台任务或者隐藏一些界面元素以节省系统资源等。通过设置 Application.OnMinimize 事件处理程序，开发人员可以在应用程序最小化时执行这些额外的操作。
        例如，可以在 OnMinimize 事件处理程序中编写代码来保存当前的窗口位置和大小，以便在应用程序恢复正常时能够恢复到之前的状态。或者可以暂停一些后台任务，以减少对系统资源的占用，提升系统性能。还可以隐藏一些界面元素，以节省屏幕空间或者减少用户的干扰。
        总之，Application.OnMinimize 事件允许开发人员在应用程序窗口最小化时执行特定的操作或者逻辑，以提升用户体验或者优化应用程序的性能。"""
    OnModalBegin: Any
    """Application.OnModalBegin 是一个事件，用于指定当模态窗口开始显示时要触发的事件处理程序。模态窗口是一种阻塞用户与应用程序其他部分交互的窗口，直到用户关闭该窗口为止。
        当应用程序需要显示一个模态窗口时，例如对话框或者消息框，通常会触发 OnModalBegin 事件。在这个事件处理程序中，开发人员可以执行一些额外的操作或者逻辑，例如禁用主窗口的某些功能、暂停后台任务、调整界面布局等。
        通过设置 Application.OnModalBegin 事件处理程序，开发人员可以在模态窗口显示之前执行必要的准备工作，以确保用户体验的连贯性和应用程序的稳定性。例如，在显示模态对话框之前可能需要保存当前的工作状态，以便在对话框关闭后能够恢复到之前的状态。
        总之，Application.OnModalBegin 事件允许开发人员在模态窗口显示之前执行额外的操作或者逻辑，以确保用户体验的连贯性和应用程序的稳定性。"""
    OnModalEnd: Any
    """Application.OnModalEnd 是一个事件，用于指定当模态窗口结束显示时要触发的事件处理程序。模态窗口是一种阻塞用户与应用程序其他部分交互的窗口，直到用户关闭该窗口为止。
        当模态窗口关闭时，会触发 OnModalEnd 事件。在这个事件处理程序中，开发人员可以执行一些额外的操作或者逻辑，例如重新启用主窗口的某些功能、恢复后台任务、刷新界面布局等。
        通过设置 Application.OnModalEnd 事件处理程序，开发人员可以在模态窗口关闭后执行必要的清理工作，以确保应用程序的状态和界面恢复到正常状态。例如，可以在模态窗口关闭后重新启用主窗口的某些按钮或者菜单项，以便用户可以继续与应用程序进行交互。
        总之，Application.OnModalEnd 事件允许开发人员在模态窗口关闭后执行额外的操作或者逻辑，以确保应用程序的状态和界面能够恢复到正常状态，提升用户体验和应用程序的稳定性。"""
    OnRemoteSessionChanged: Any
    """Application.OnRemoteSessionChanged 是一个事件，用于指定当远程会话状态发生变化时要触发的事件处理程序。远程会话是指用户通过远程桌面或者远程连接方式连接到计算机上的会话。
        当用户通过远程连接方式连接到计算机时，会话状态可能会发生变化，例如从本地会话切换到远程会话，或者从一个远程会话切换到另一个远程会话。在这种情况下，会触发 OnRemoteSessionChanged 事件。
        在 OnRemoteSessionChanged 事件处理程序中，开发人员可以执行一些额外的操作或者逻辑，以响应远程会话状态的变化。例如，可以根据当前会话的类型调整应用程序的行为或者界面布局，以提供更好的用户体验。
        总之，Application.OnRemoteSessionChanged 事件允许开发人员在远程会话状态发生变化时执行特定的操作或者逻辑，以提升应用程序的适应性和用户体验。"""
    OnRestore: Any
    """Application.OnRestore 事件用于指定当应用程序从最小化状态恢复到正常状态时所触发的处理程序。
        当用户将应用程序最小化到任务栏或系统托盘，然后再次将其还原时，就会触发 Application.OnRestore 事件。这个事件通常用于执行在应用程序恢复到正常状态时需要进行的处理逻辑，例如重新加载数据、更新界面内容、执行某些操作等。"""
    OnShowHint: Any
    """Application.OnShowHint 事件用于指定当提示显示时所触发的处理程序。
        提示（Hint）通常是当用户将鼠标悬停在控件上时显示的一条文本，提供了有关该控件功能或其他相关信息的简要说明。Application.OnShowHint 事件允许你自定义提示的显示方式，包括内容、格式等。
        当用户将鼠标悬停在控件上时，如果该控件具有相关的提示文本，并且提示文本还没有显示，则将触发 Application.OnShowHint 事件。在这个事件中，你可以根据需要执行一些逻辑，例如自定义提示的显示样式、记录提示的显示次数等。"""
    OnShortCut: Any
    """Application.OnShortCut 事件用于指定当用户按下键盘快捷键时所触发的处理程序。
        快捷键（Shortcut）是一种用户可以在应用程序中定义的键盘组合，用于执行特定的操作或命令，而无需通过菜单或其他界面元素。Application.OnShortCut 事件允许你捕获和处理这些键盘快捷键的按下事件，并执行相应的操作。
        当用户按下定义的键盘快捷键时，如果该快捷键已经在应用程序中注册并与相应的处理程序相关联，则会触发 Application.OnShortCut 事件。在这个事件中，你可以根据按下的快捷键执行适当的操作，例如打开特定的窗口、执行特定的功能等。"""
    OnSettingChange: Any
    """Application.OnSettingChange 事件用于指定当系统设置发生更改时所触发的处理程序。
        当操作系统的设置发生变化，例如主题、颜色方案、分辨率、字体、输入法、区域设置等发生变化时，Windows 会向所有正在运行的应用程序广播一个消息。这是一个WM_SETTINGCHANGE 消息，表示系统设置已更改。
        Application.OnSettingChange 事件允许你在应用程序中捕获并处理这个系统设置更改事件。当系统设置发生变化时，Application.OnSettingChange 事件会被触发，在这个事件中，你可以根据需要调整应用程序的界面或其他设置，以适应新的系统设置。
        例如，如果系统主题更改，你可能需要重新绘制界面元素以匹配新的主题；如果输入法设置发生变化，你可能需要调整输入法相关的逻辑等。"""
    Handle: Any
    """Application.Handle 是一个整数值，表示当前应用程序的主窗口句柄（handle）。主窗口句柄是应用程序顶层窗口的唯一标识符，用于与操作系统进行交互，例如接收消息、绘制窗口等。
        主窗口句柄在应用程序启动时由 PythonStudio 运行时库自动生成，并在整个应用程序的生命周期中保持不变。它是应用程序与操作系统交互的主要通道之一。
        通过 Application.Handle，你可以获取当前应用程序的主窗口句柄，然后可以使用该句柄执行各种与窗口相关的操作，例如发送消息、设置窗口属性、获取窗口信息等。
        例如，你可以使用 Application.Handle 来向应用程序的主窗口发送自定义消息，以便在应用程序内部进行通信或执行特定的操作。
        总之，Application.Handle 的作用是获取当前应用程序的主窗口句柄，用于与操作系统进行窗口交互。"""
    PopupControlWnd: Any
    """Application.PopupControlWnd 是一个全局变量，用于指示当前弹出菜单或弹出窗口的控件句柄。
        在 Windows 窗口应用程序中，弹出菜单和弹出窗口是常见的用户界面元素，它们通常由用户通过鼠标右键单击或其他交互方式触发，并显示在屏幕上。Application.PopupControlWnd 用于跟踪当前显示的弹出菜单或弹出窗口的控件句柄。
        通过访问 Application.PopupControlWnd，你可以获取当前弹出菜单或弹出窗口所属的控件句柄。这对于在应用程序中处理弹出菜单或弹出窗口相关的事件或交互非常有用。
        例如，你可以使用 Application.PopupControlWnd 来检查当前是否有弹出菜单或弹出窗口显示，以及它们所属的控件是什么，然后根据需要执行相应的操作或逻辑。
        总之，Application.PopupControlWnd 的作用是跟踪当前显示的弹出菜单或弹出窗口的控件句柄，在应用程序中处理弹出菜单或弹出窗口相关的事件或交互时非常有用。"""
    def Create(self, AOwner: Component) -> None:
        """TApplication.Create(AOwner: Component) -> None
        Create 是 Application 对象的一个事件，用于在应用程序启动时执行初始化操作。
        具体来说，当应用程序启动时，Create 事件被触发，允许开发人员在这个事件中执行一些初始化操作，例如设置全局变量、创建全局对象、初始化应用程序配置等。这样可以确保在应用程序的其他部分开始执行之前，必要的初始化工作已经完成。
        通常情况下，Create 事件用于执行应用程序级别的初始化，而不是窗体级别的初始化。例如，你可以在 Create 事件中设置全局的异常处理程序、初始化日志记录器、配置全局的数据库连接等。
        总之，Create 事件是 Application 对象的一个事件，用于在应用程序启动时执行初始化操作，确保应用程序在正常运行之前已经完成必要的准备工作。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Disposes of an instance of a TBasicAction object.
        Destroy 是 Application 对象的一个事件，用于在应用程序关闭时执行清理和释放资源的操作。
        具体来说，当应用程序关闭时，Destroy 事件被触发，允许开发人员在这个事件中执行一些清理操作，例如释放全局对象、关闭数据库连接、保存应用程序状态等。这样可以确保在应用程序关闭之前，必要的清理工作已经完成，避免资源泄漏和未处理的状态。
        通常情况下，Destroy 事件用于执行应用程序级别的清理工作，而不是窗体级别的清理。例如，你可以在 Destroy 事件中释放全局的对象、关闭全局的文件流、保存应用程序的配置等。
        总之，Destroy 事件是 Application 对象的一个事件，用于在应用程序关闭时执行清理和释放资源的操作，确保应用程序在退出时处于一个良好的状态。"""
    def ActivateHint(self, *args, **kwargs) -> Any:
        """Application.ActivateHint 属性用于控制是否激活鼠标悬停提示（Hint）功能。当 ActivateHint 属性设置为 True 时，鼠标悬停在控件上时会显示提示信息，设置为 False 则禁用提示信息的显示。"""
    def ApplyBiDiKeyboardLayout(self, *args, **kwargs) -> Any:
        """ApplyBiDiKeyboardLayout是TApplication类的一个方法，用于将应用程序的键盘布局设置为双向（BiDi）模式。BiDi模式是为了支持双向文本（如阿拉伯文、希伯来文等）而设计的一种键盘布局模式。
        在双向文本中，文本的书写方向不仅可以是从左到右（LTR），还可以是从右到左（RTL）。为了正确处理双向文本输入，应用程序需要正确地配置键盘布局，以便用户在输入时能够方便地切换文本的书写方向。
        ApplyBiDiKeyboardLayout方法的作用就是根据当前的文本显示方向自动设置应用程序的键盘布局，以确保用户在输入双向文本时能够顺利切换书写方向，从而提升应用程序的国际化和本地化水平。
        总之，ApplyBiDiKeyboardLayout方法是用于在PythonStudio应用程序中自动设置双向文本输入所需的键盘布局的方法，以提高应用程序对多语言和多文本方向的支持。"""
    def ApplyNonBiDiKeyboardLayout(self, *args, **kwargs) -> Any:
        """Application的ApplyNonBiDiKeyboardLayout方法用于将应用程序的键盘布局设置为非双向文本（Non-BiDi）模式。非双向文本模式是指应用程序不需要支持双向文本（如阿拉伯文、希伯来文等）输入的情况，只需支持单一方向的文本输入，例如从左到右（LTR）的文本。
        通过调用ApplyNonBiDiKeyboardLayout方法，应用程序可以确保键盘布局适合处理单一方向的文本输入，从而避免在不需要双向文本支持的情况下出现意外的文本输入方向切换。
        这个方法通常用于确保应用程序在不需要双向文本支持的情况下能够正确处理文本输入，提高应用程序的稳定性和用户体验。
        总之，ApplyNonBiDiKeyboardLayout方法是用于将应用程序的键盘布局设置为非双向文本模式的方法，以确保在不需要双向文本支持的情况下正确处理文本输入。"""
    def AddPopupForm(self, *args, **kwargs) -> int:
        """Application的AddPopupForm方法用于向应用程序添加一个弹出窗口（Popup Form）。这个方法的作用是将一个窗体添加到应用程序的弹出窗口列表中。当应用程序处于多文档界面（MDI）模式时，这个方法用于将一个MDI子窗体添加到MDI父窗体的子窗体列表中。这样一来，用户就可以在应用程序中方便地管理多个窗体。"""
    def BringToFront(self, *args, **kwargs) -> Any:
        """Application的BringToFront方法用于将应用程序主窗口置于其他窗口的前面，使其成为焦点窗口。这意味着调用BringToFront方法后，应用程序的主窗口将显示在其他窗口的前面，并且接收用户的输入事件。
        通常情况下，当应用程序的主窗口被其他窗口遮挡或失去焦点时，可以调用BringToFront方法来确保主窗口重新获得焦点，并且显示在其他窗口的前面，以便用户能够与应用程序进行交互。
        这个方法对于确保用户能够及时看到并与应用程序的主界面进行交互非常有用，特别是在需要及时响应用户输入的情况下。
        总之，BringToFront方法是用于将应用程序主窗口置于其他窗口前面的方法，以确保用户能够与应用程序进行交互。"""
    def ControlDestroyed(self, *args, **kwargs) -> Any:
        """Application.ControlDestroyed 是一个事件，用于指定当应用程序中的控件被销毁时所触发的处理程序。
        当一个控件被销毁时，它的资源会被释放，包括内存和句柄等。Application.ControlDestroyed 事件允许你在控件被销毁之前或之后执行一些特定的逻辑或操作。
        通过注册 Application.ControlDestroyed 事件处理程序，你可以捕获控件销毁的时机，并在其中执行一些必要的清理或处理操作，例如释放与该控件相关的资源、更新应用程序状态等。"""
    def CancelHint(self, *args, **kwargs) -> Any:
        """Application的CancelHint方法用于取消当前显示的提示（Hint）。提示是一种在用户将鼠标悬停在控件上时显示的简短描述，通常用于提供关于控件功能或操作的帮助信息。
        当调用CancelHint方法时，当前显示的提示将会立即被取消，即使鼠标仍然悬停在控件上。这可以用于在某些情况下，例如用户操作发生变化或需要立即清除提示时。
        CancelHint方法是Application类的一个实例方法，因此可以在整个应用程序范围内调用，而不限于特定的窗口或控件。
        总之，CancelHint方法用于在PythonStudio应用程序中取消当前显示的提示，以便根据需要立即清除提示信息。"""
    def CreateForm(self, *args, **kwargs) -> Any:
        """Application的CreateForm方法用于创建并显示一个窗体（Form）对象。这个方法通常在应用程序的启动过程中被调用，用于创建主窗体或其他需要在应用程序运行期间显示的窗体。
        CreateForm方法需要传入一个窗体类的引用作为参数，然后它会创建该窗体的一个实例，并将其显示在屏幕上。这个方法负责窗体对象的创建、分配内存以及设置窗体的一些基本属性。
        通常情况下，CreateForm方法在应用程序的主程序文件（通常是.dpr文件）中被调用，用于创建应用程序的主窗体。例如：
        Application.CreateForm(TMainForm, MainForm);
        上面的代码将创建一个名为MainForm的窗体对象，并将其显示在屏幕上。TMainForm是MainForm窗体类的类型，MainForm是该窗体对象的变量名。
        通过调用CreateForm方法，可以方便地在PythonStudio应用程序中创建和管理窗体对象，从而构建出丰富的用户界面。
        总之，CreateForm方法用于在PythonStudio应用程序中创建并显示窗体对象，是构建用户界面的重要方法之一。"""
    def CreateHandle(self, *args, **kwargs) -> Any:
        """Application的CreateHandle方法用于创建应用程序的主窗口句柄（Handle）。窗口句柄是操作系统分配给窗口的唯一标识符，用于在系统中唯一标识和管理窗口。
        CreateHandle方法通常在应用程序启动时被调用，它确保应用程序的主窗口已经具有一个有效的窗口句柄。在创建主窗口之前或在访问主窗口句柄之前，调用CreateHandle方法可以确保主窗口已经被正确地创建并分配了一个句柄。
        在一些特定的情况下，可能需要在应用程序的生命周期中手动调用CreateHandle方法，以确保主窗口句柄的有效性。例如，在某些多线程应用程序中，可能需要在不同的线程中访问主窗口句柄，此时需要确保主窗口句柄已经被正确地创建。
        总之，CreateHandle方法用于在PythonStudio应用程序中创建应用程序的主窗口句柄，确保主窗口句柄的有效性和可用性。"""
    def DoApplicationIdle(self, *args, **kwargs) -> Any:
        """Application的DoApplicationIdle方法用于处理应用程序处于空闲状态时的事件。在应用程序没有其他活动任务需要处理时，例如没有鼠标点击、键盘输入或其他事件需要响应时，就会触发空闲状态。
        DoApplicationIdle方法会在应用程序处于空闲状态时被调用，它允许应用程序执行一些额外的任务，例如更新界面、执行后台任务或进行资源回收等操作。通过在空闲状态时执行一些任务，可以提高应用程序的性能和响应性。
        开发人员可以通过重写Application类的DoApplicationIdle方法，来自定义在应用程序空闲时需要执行的任务。例如，可以在DoApplicationIdle方法中执行一些周期性的数据更新操作，或者执行一些需要在后台完成的任务，以提高用户体验或优化应用程序性能。
        总之，DoApplicationIdle方法用于在PythonStudio应用程序处于空闲状态时执行额外的任务，以提高应用程序的性能和响应性。"""
    def ExecuteAction(self, *args, **kwargs) -> bool:
        """Application的ExecuteAction方法用于执行与特定动作相关联的操作。动作（Action）是一个很重要的概念，在PythonStudio的应用程序中，动作通常代表用户界面上的一个操作，例如点击按钮、选择菜单项等。
        ExecuteAction方法允许开发人员以编程方式触发特定动作所代表的操作。通过调用ExecuteAction方法，并传入相应的动作对象作为参数，可以实现执行与该动作相关联的操作。这可以用于在某些情况下，例如在代码中响应特定的条件或事件，执行与动作相关的操作，而不需要直接操作用户界面上的控件。
        通常情况下，动作是通过在窗体上放置TActionList组件来创建和管理的。TActionList组件允许开发人员在设计时定义一组动作，并将这些动作与用户界面上的控件（例如按钮、菜单项等）关联起来。然后，可以在代码中通过调用ExecuteAction方法来触发这些动作所代表的操作。
        总之，ExecuteAction方法用于在PythonStudio应用程序中执行与特定动作相关联的操作，是通过编程方式响应用户界面上动作的一种方式。"""
    def HandleException(self, *args, **kwargs) -> Any:
        """Application的HandleException方法用于处理应用程序中未被捕获的异常。当应用程序运行时发生未被捕获的异常时，通常会导致程序崩溃并显示标准的异常对话框，提示用户发生了错误并终止应用程序的执行。
        HandleException方法允许开发人员自定义异常处理的行为。通过重写Application类的HandleException方法，开发人员可以捕获并处理应用程序中的未被捕获的异常，而不是让它们导致应用程序崩溃。
        通过自定义HandleException方法，开发人员可以执行一些额外的操作，例如记录异常信息、向用户显示自定义的错误消息、尝试修复异常情况等。这样可以提高应用程序的健壮性和用户体验，同时更好地帮助开发人员调试和解决应用程序中的问题。
        总之，HandleException方法用于在PythonStudio应用程序中处理未被捕获的异常，允许开发人员自定义异常处理的行为，提高应用程序的健壮性和用户体验。"""
    def HandleMessage(self, *args, **kwargs) -> Any:
        """Application的HandleMessage方法是一个重要的消息处理器。它用于处理由操作系统发送给应用程序的消息。
        PythonStudio应用程序是事件驱动的，它们通过处理消息来响应用户的交互和系统事件。HandleMessage方法在应用程序的主消息循环中起到关键作用，它负责接收和分发消息给适当的处理程序。这些消息可以包括用户输入、窗口事件、定时器事件等。
        HandleMessage方法是通过轮询消息队列来实现的。当操作系统有新的消息发送给应用程序时，HandleMessage方法会接收并处理这些消息，然后将它们分发给相应的窗口或控件处理。这样，应用程序就可以响应用户的操作和系统事件，并进行相应的处理。
        开发人员通常不需要直接调用HandleMessage方法，因为它由应用程序框架自动管理。然而，在某些情况下，例如在多线程应用程序中，开发人员可能需要手动调用HandleMessage方法来处理消息队列中的未处理消息。
        总之，HandleMessage方法是PythonStudio应用程序中用于处理操作系统消息的关键方法，它负责接收和分发消息，使应用程序能够响应用户的操作和系统事件。"""
    def HelpCommand(self, *args, **kwargs) -> bool:
        """Application的HelpCommand方法用于向应用程序发送帮助命令。这个方法通常用于请求显示帮助文档或执行其他与帮助相关的操作。
        HelpCommand方法接受一个整数参数，该参数指定要执行的帮助命令。具体的命令值可以根据应用程序的需求和帮助系统的实现而有所不同，但通常情况下，它们用于请求显示特定帮助主题、显示帮助索引、执行搜索等操作。
        通过调用HelpCommand方法，开发人员可以在应用程序中实现帮助功能的自定义行为。例如，在用户点击帮助菜单项或按下帮助快捷键时，可以调用HelpCommand方法来请求显示相应的帮助内容。
        总之，HelpCommand方法是PythonStudio应用程序中用于执行帮助相关操作的方法，它允许开发人员通过编程方式请求显示帮助文档或执行其他帮助功能。"""
    def HelpContext(self, *args, **kwargs) -> bool:
        """Application的HelpContext属性用于设置或获取当前应用程序的帮助上下文标识符。帮助上下文标识符是一个整数值，用于唯一标识帮助系统中的特定主题或页面。
        当用户请求帮助时（例如点击帮助菜单项或按下帮助快捷键），应用程序可以使用HelpContext属性来指定应该显示哪个帮助主题或页面。通过将HelpContext属性设置为相应帮助主题的标识符，应用程序可以确保用户获得与当前操作或上下文相关的帮助信息。
        开发人员可以通过两种方式使用HelpContext属性：
        在设计时设置帮助上下文标识符： 在PythonStudio的可视化设计器中，可以为窗体或控件设置HelpContext属性，以指定与之相关联的帮助主题。这样，在运行时，当用户请求帮助时，应用程序将根据相应控件或窗体的HelpContext属性值来显示帮助内容。
        在运行时动态设置帮助上下文标识符： 在代码中，开发人员可以通过直接修改Application.HelpContext属性来动态设置当前应用程序的帮助上下文。这种方式可以根据应用程序的逻辑和用户的操作动态地确定要显示的帮助内容。
        总之，HelpContext属性是PythonStudio应用程序中用于设置和获取当前帮助上下文标识符的属性，它允许开发人员根据需要指定要显示的帮助主题或页面，从而为用户提供相关的帮助信息。"""
    def HelpJump(self, *args, **kwargs) -> bool:
        """Application 的 HelpJump 方法用于向帮助系统发出跳转命令，将用户引导至指定的帮助主题或页面。
        具体来说，HelpJump 方法允许开发人员在应用程序中根据需要动态地引导用户到帮助系统中的特定主题或页面。这可以通过指定帮助系统中的帮助上下文标识符（context identifier）来实现。
        帮助上下文标识符是一个整数值，用于唯一标识帮助系统中的特定主题或页面。通过调用 HelpJump 方法并传递相应的帮助上下文标识符作为参数，应用程序可以请求帮助系统显示与该标识符相关联的帮助内容。
        通常情况下，HelpJump 方法会在用户请求帮助时（例如点击帮助菜单项或按下帮助快捷键时）被调用，以便将用户引导至与当前操作或上下文相关的帮助内容。
        总之，HelpJump 方法是 PythonStudio 应用程序中用于向帮助系统发出跳转命令的方法，它允许开发人员根据需要将用户引导至帮助系统中的特定主题或页面，以提供相关的帮助信息。"""
    def HelpKeyword(self, *args, **kwargs) -> bool:
        """Application 的 HelpKeyword 属性用于设置或获取当前应用程序的帮助关键字（Help Keyword）。帮助关键字是一个字符串，用于标识帮助系统中的特定主题或页面。
        当用户请求帮助时（例如点击帮助菜单项或按下帮助快捷键），应用程序可以使用 HelpKeyword 属性来指定应该显示哪个帮助主题或页面。通过将 HelpKeyword 属性设置为相应的帮助关键字，应用程序可以确保用户获得与当前操作或上下文相关的帮助信息。
        开发人员可以通过两种方式使用 HelpKeyword 属性：
        在设计时设置帮助关键字： 在 PythonStudio 的可视化设计器中，可以为窗体或控件设置 HelpKeyword 属性，以指定与之相关联的帮助主题。这样，在运行时，当用户请求帮助时，应用程序将根据相应控件或窗体的 HelpKeyword 属性值来显示帮助内容。
        在运行时动态设置帮助关键字： 在代码中，开发人员可以通过直接修改 Application.HelpKeyword 属性来动态设置当前应用程序的帮助关键字。这种方式可以根据应用程序的逻辑和用户的操作动态地确定要显示的帮助内容。
        总之，HelpKeyword 属性是 PythonStudio 应用程序中用于设置和获取当前帮助关键字的属性，它允许开发人员根据需要指定要显示的帮助主题或页面，从而为用户提供相关的帮助信息。"""
    def HelpShowTableOfContents(self, *args, **kwargs) -> bool:
        """Application 的 HelpShowTableOfContents 方法用于显示帮助系统中的目录（Table of Contents）。
        当调用 HelpShowTableOfContents 方法时，帮助系统将会显示应用程序的帮助内容的目录，通常以树形结构展示，用户可以通过该目录浏览和查找应用程序的帮助主题。
        通常情况下，HelpShowTableOfContents 方法会在用户请求帮助时（例如点击帮助菜单项中的“显示目录”选项），或者在应用程序中提供了一个显示帮助目录的按钮时被调用。
        这个方法提供了一种方便的方式让用户快速浏览应用程序的帮助内容，以便找到他们感兴趣的主题或页面。
        总之，HelpShowTableOfContents 方法是 PythonStudio 应用程序中用于显示帮助系统目录的方法，它允许用户浏览和查找应用程序的帮助内容。"""
    def HideHint(self, *args, **kwargs) -> Any:
        """Application 的 HideHint 方法用于隐藏当前正在显示的提示（hint）。提示通常是在用户将鼠标悬停在控件上时显示的小窗口，用于显示与该控件相关的额外信息或说明。
        调用 HideHint 方法会立即隐藏当前正在显示的提示窗口，无论该提示窗口是哪个控件触发的。这可以用于在某些情况下，例如用户执行了某个操作后不再需要显示提示时，或者在特定事件发生时需要强制隐藏提示。
        通常情况下，HideHint 方法在处理用户输入事件或其他与控件交互的事件时被调用，以确保在某些情况下隐藏提示，以提供更好的用户体验。
        总之，HideHint 方法是 PythonStudio 应用程序中用于立即隐藏当前显示的提示窗口的方法，它允许开发人员在需要时控制提示的显示行为，以提供更好的用户体验。"""
    def HintMouseMessage(self, *args, **kwargs) -> Any:
        """Application 的 HintMouseMessage 属性用于指定提示（hint）的触发消息。
        提示是当用户将鼠标悬停在控件上时显示的小窗口，通常用于显示与该控件相关的额外信息或说明。HintMouseMessage 属性指定了哪个消息将被视为触发提示的消息。默认情况下，它通常是 WM_MOUSEMOVE，表示当鼠标移动时触发提示。
        通过更改 HintMouseMessage 属性，开发人员可以指定其他消息来触发提示，例如 WM_MOUSEHOVER 或其他自定义消息。这使开发人员能够根据应用程序的需求来自定义提示的触发行为。
        总之，HintMouseMessage 属性是 PythonStudio 应用程序中用于指定提示触发消息的属性，允许开发人员根据应用程序的需求来自定义提示的触发行为。"""
    def HookMainWindow(self, *args, **kwargs) -> Any:
        """Application 的 HookMainWindow 方法用于将一个窗口钩子（window hook）安装到应用程序的主窗口上。
        窗口钩子是一种机制，允许应用程序在其他窗口处理消息之前或之后拦截和处理这些消息。通过调用 HookMainWindow 方法并传递一个窗口过程函数，开发人员可以安装一个钩子函数到应用程序的主窗口，以便拦截和处理主窗口的消息。
        安装窗口钩子可以用于实现各种功能，例如：
        监听和记录主窗口收到的消息，用于调试或日志记录目的。
        修改或过滤主窗口收到的消息，以实现定制的消息处理逻辑。
        在特定消息发生时执行额外的操作，例如在窗口大小变化时调整其他界面元素的位置。
        需要注意的是，使用窗口钩子可能会影响应用程序的性能和稳定性，因此应该谨慎使用，并确保钩子函数的实现正确且高效。
        总之，HookMainWindow 方法是 PythonStudio 应用程序中用于安装窗口钩子到主窗口的方法，允许开发人员拦截和处理主窗口的消息，以实现各种功能需求。"""
    def HookSynchronizeWakeup(self, *args, **kwargs) -> Any:
        """Application 的 HookSynchronizeWakeup 方法用于安装一个钩子函数，用于在调用 TThread.Synchronize 方法时唤醒线程。
        TThread.Synchronize 方法用于在主线程上执行一个委托（delegate），通常用于在工作线程中执行长时间运行的任务后，将结果传递给主线程更新用户界面。然而，在某些情况下，可能需要在主线程上执行的任务比较频繁，而 TThread.Synchronize 方法会在每次调用时都唤醒主线程，这可能会产生性能开销。
        通过调用 HookSynchronizeWakeup 方法并传递一个钩子函数，开发人员可以安装一个钩子函数，以在调用 TThread.Synchronize 方法时唤醒主线程时进行自定义处理。这允许开发人员对主线程唤醒进行优化或自定义处理，以满足特定需求。
        需要注意的是，HookSynchronizeWakeup 方法的使用需要谨慎，因为对线程同步的修改可能会影响应用程序的稳定性和性能。因此，应该在确实有需要并且清楚其影响的情况下使用该方法。
        总之，HookSynchronizeWakeup 方法是 PythonStudio 应用程序中用于安装一个钩子函数，以在调用 TThread.Synchronize 方法时自定义处理主线程唤醒的方法。"""
    def Initialize(self, *args, **kwargs) -> Any:
        """Application 的 Initialize 方法是应用程序初始化的一部分，它用于执行应用程序的一些初始化操作。
        具体来说，Initialize 方法通常用于以下目的：
        初始化全局变量和对象：在应用程序启动时，可能需要初始化一些全局变量、对象或设置一些全局参数。Initialize 方法提供了一个适当的地方来执行这些初始化操作。
        设置应用程序的一般属性：在 Initialize 方法中，可以设置一些与应用程序相关的一般属性，例如主窗口的标题、图标等。
        执行特定的初始化任务：有时，应用程序可能需要在启动时执行一些特定的初始化任务，例如读取配置文件、连接数据库等。
        注册组件或服务：在 Initialize 方法中，可以注册一些组件或服务，以确保它们在整个应用程序的生命周期内都可用。
        通常情况下，Initialize 方法是在应用程序启动时自动调用的，它是应用程序生命周期中的第一个被调用的方法之一。开发人员可以重写这个方法，并在其中添加自己的初始化代码，以满足应用程序的特定需求。
        总之，Initialize 方法是 PythonStudio 应用程序中用于执行应用程序初始化操作的方法，通常用于初始化全局变量、设置应用程序属性、执行特定任务等。"""
    def IsRightToLeft(self, *args, **kwargs) -> bool:
        """Application 的 IsRightToLeft 属性用于指示当前应用程序的界面布局是否采用从右到左的书写方向，例如阿拉伯语、希伯来语等。这个属性通常用于处理多语言界面或支持从右到左书写的应用程序。
        具体来说，IsRightToLeft 属性的作用是：
        确定界面布局方向：通过检查 IsRightToLeft 属性，可以确定当前应用程序的界面布局是从左到右还是从右到左。这对于处理不同语言和文化环境下的界面布局非常重要。
        影响控件的排列和对齐：如果应用程序采用从右到左的布局，那么控件的排列和对齐方式可能会相应地改变，例如文本框中的文本可能从右向左排列。
        影响图形和图标的显示：在从右到左的布局下，图形和图标的显示方式可能会有所调整，以适应不同的书写方向和语言。
        影响文本显示和输入：对于支持从右到左书写的文本，IsRightToLeft 属性的设置也会影响文本的显示和输入方式。
        总之，IsRightToLeft 属性在 PythonStudio 中用于指示当前应用程序的界面布局是否采用从右到左的书写方向，它影响界面的排列、对齐、图形显示以及文本输入和显示方式。"""
    def Minimize(self, *args, **kwargs) -> Any:
        """Application 的 Minimize 方法用于将当前应用程序的主窗口最小化到任务栏，即将应用程序的窗口图标化显示，从而最小化其占用的屏幕空间。
        具体来说，Minimize 方法的作用包括：
        最小化应用程序窗口：调用 Minimize 方法将导致当前应用程序的主窗口被最小化，并显示在任务栏上。这使用户可以轻松地切换到其他应用程序或窗口而不关闭当前应用程序。
        释放窗口资源：最小化窗口时，应用程序释放了一些屏幕资源，以便其他应用程序可以使用更多的空间。这有助于提高系统的整体性能和响应速度。
        提供用户体验：通过允许用户最小化应用程序，用户可以方便地管理多个同时运行的应用程序，从而提高了用户体验。
        响应窗口管理命令：将应用程序最小化通常是响应用户操作或系统事件的一部分，例如用户点击最小化按钮或系统需要释放资源以提高性能。
        总之，Minimize 方法是 PythonStudio 中 Application 对象的一个方法，用于将当前应用程序的主窗口最小化到任务栏，以提供更好的用户体验和系统性能。"""
    def ModalStarted(self, *args, **kwargs) -> Any:
        """Application 的 ModalStarted 事件是一个事件，当模态对话框或窗口开始显示时触发。模态对话框是一种阻塞用户对主窗口以外的其他窗口的访问，直到对话框被关闭。
        具体来说，ModalStarted 事件的作用包括：
        通知应用程序模态对话框的开始：当模态对话框显示时，ModalStarted 事件会触发，向应用程序发送一个信号，表明模态对话框已经开始显示。
        允许应用程序执行特定的操作：通过处理 ModalStarted 事件，开发人员可以在模态对话框显示之前执行一些特定的操作，例如暂停后台任务、禁用特定的控件或执行必要的准备工作。
        提供用户反馈或响应：应用程序可以利用 ModalStarted 事件来提供用户反馈，例如显示进度条或状态信息，以指示某个操作正在进行中。
        定制模态对话框的行为：通过处理 ModalStarted 事件，开发人员可以定制模态对话框的行为，例如在对话框显示之前执行自定义验证或设置操作。
        总之，ModalStarted 事件是 PythonStudio 中 Application 对象的一个事件，用于通知应用程序模态对话框的开始，并允许应用程序执行特定的操作或提供用户反馈。"""
    def ModalFinished(self, *args, **kwargs) -> Any:
        """Application 的 ModalFinished 事件是一个事件，当模态对话框或窗口关闭时触发。模态对话框是一种阻塞用户对主窗口以外的其他窗口的访问，直到对话框被关闭。
        具体来说，ModalFinished 事件的作用包括：
        通知应用程序模态对话框的结束：当模态对话框关闭时，ModalFinished 事件会触发，向应用程序发送一个信号，表明模态对话框已经结束。
        允许应用程序执行特定的操作：通过处理 ModalFinished 事件，开发人员可以在模态对话框关闭之后执行一些特定的操作，例如恢复后台任务、重新启用禁用的控件或执行清理工作。
        处理对话框返回值：在模态对话框关闭时，应用程序可能需要处理对话框返回的值或结果。ModalFinished 事件提供了一个处理这些返回值的机会。
        更新界面状态：模态对话框关闭后，可能需要更新应用程序的界面状态或重新显示其他窗口。ModalFinished 事件可以用于触发这些更新操作。
        总之，ModalFinished 事件是 PythonStudio 中 Application 对象的一个事件，用于通知应用程序模态对话框的结束，并允许应用程序执行特定的操作或处理对话框返回的值。"""
    def NormalizeAllTopMosts(self, *args, **kwargs) -> Any:
        """Application 的 NormalizeAllTopMosts 方法用于将所有置顶窗口恢复为正常状态，以解决可能由于多个窗口都被设置为置顶而导致的窗口叠加或覆盖的问题。
        具体来说，NormalizeAllTopMosts 方法的作用包括：
        恢复窗口的 Z 轴顺序：当多个窗口都被设置为置顶时，可能会导致窗口之间的叠加或覆盖。调用 NormalizeAllTopMosts 方法会将所有置顶窗口的 Z 轴顺序恢复为正常状态，以确保它们按照正确的层次显示。
        解决窗口遮挡问题：如果某些窗口被其他窗口遮挡或覆盖，调用 NormalizeAllTopMosts 方法可以解决这些问题，确保所有窗口都能够正确显示，并且用户可以正确地与它们进行交互。
        提高用户体验：通过确保窗口的正确叠放顺序，NormalizeAllTopMosts 方法可以提高用户体验，使用户可以更轻松地使用应用程序的各个部分。
        修复窗口显示异常：某些情况下，窗口可能会由于程序错误或其他原因而显示异常。调用 NormalizeAllTopMosts 方法可以作为一种修复措施，帮助恢复窗口的正常显示状态。
        总之，NormalizeAllTopMosts 方法是 PythonStudio 中 Application 对象的一个方法，用于将所有置顶窗口恢复为正常状态，解决窗口叠加或覆盖的问题，提高用户体验并修复窗口显示异常。"""
    def NormalizeTopMosts(self, *args, **kwargs) -> Any:
        """Application 的 NormalizeTopMosts 方法用于将特定窗口置顶并确保其它窗口保持在它之下的正常状态，以解决可能由于多个窗口都被设置为置顶而导致的窗口叠加或覆盖的问题。
        具体来说，NormalizeTopMosts 方法的作用包括：
        将指定窗口置顶：通过调用 NormalizeTopMosts 方法，并指定需要置顶的窗口，可以确保该窗口在其他窗口之上显示，从而保持其可见性。
        确保其他窗口保持在置顶窗口之下：调用 NormalizeTopMosts 方法后，该方法会确保除指定窗口之外的其他窗口仍保持在置顶窗口之下，以防止窗口叠加或覆盖的问题发生。
        解决窗口遮挡问题：通过将指定窗口置顶，并确保其他窗口在它之下，NormalizeTopMosts 方法可以解决窗口之间可能出现的遮挡或覆盖问题，确保用户可以正确地看到和操作窗口。
        提高用户体验：通过确保窗口正确的叠放顺序，NormalizeTopMosts 方法可以提高用户体验，使用户可以更轻松地使用应用程序的各个部分。
        总之，NormalizeTopMosts 方法是 PythonStudio 中 Application 对象的一个方法，用于将指定窗口置顶并确保其他窗口保持在它之下的正常状态，以解决窗口叠加或覆盖的问题，提高用户体验。"""
    def ProcessMessages(self, *args, **kwargs) -> Any:
        """Application 的 ProcessMessages 方法用于处理消息队列中的所有待处理消息，并立即执行它们的相应操作。
        具体来说，ProcessMessages 方法的作用包括：
        处理消息队列中的消息：Windows 程序通常通过消息队列进行通信和事件处理。ProcessMessages 方法会检查消息队列中是否有待处理的消息，并立即处理它们，以确保及时响应用户的操作或系统事件。
        更新界面和响应用户操作：当用户执行某些操作时，比如点击按钮、移动窗口或键入文本，这些操作会产生消息并存储在消息队列中。调用 ProcessMessages 方法会处理这些消息，从而更新应用程序的界面状态，并执行相应的操作响应用户的操作。
        避免界面冻结：在某些情况下，长时间运行的任务可能会导致界面冻结，使用户无法进行操作或者应用程序没有响应。通过在适当的地方调用 ProcessMessages 方法，可以确保在长时间运行的任务中定期处理消息队列，从而避免界面冻结，保持应用程序的响应性。
        在多线程编程中的使用：在多线程编程中，主线程通常会负责处理界面和消息队列。在其他线程执行耗时任务时，可以在适当的地方调用 ProcessMessages 方法以确保主线程仍能够处理消息，保持界面的响应性。
        总之，ProcessMessages 方法是 PythonStudio 中 Application 对象的一个方法，用于处理消息队列中的所有待处理消息，更新界面状态，并确保应用程序的响应性。"""
    def RemovePopupForm(self, *args, **kwargs) -> Any:
        """Application 的 RemovePopupForm 方法用于从应用程序的弹出窗口列表中移除指定的弹出窗口。
        具体来说，RemovePopupForm 方法的作用包括：
        移除指定的弹出窗口：通过调用 RemovePopupForm 方法，并指定需要移除的弹出窗口对象，可以从应用程序的弹出窗口列表中将该窗口移除，不再将其视为一个弹出窗口。
        管理弹出窗口：在某些情况下，应用程序可能会创建多个弹出窗口来显示临时信息、警告或用户交互界面。使用 RemovePopupForm 方法可以对这些弹出窗口进行管理，确保只有当前需要的弹出窗口处于活动状态，提高应用程序的整体可用性和用户体验。
        释放资源：当不再需要某个弹出窗口时，调用 RemovePopupForm 方法可以将其从弹出窗口列表中移除，并释放与该窗口相关的资源，以避免资源泄漏和内存占用过高的问题。
        控制窗口显示：通过移除不需要显示的弹出窗口，可以在用户交互时更精确地控制窗口的显示和隐藏，以确保用户界面的简洁性和清晰度。
        总之，RemovePopupForm 方法是 PythonStudio 中 Application 对象的一个方法，用于从应用程序的弹出窗口列表中移除指定的弹出窗口，以便对弹出窗口进行管理并释放相关资源。"""
    def Restore(self, *args, **kwargs) -> Any:
        """Application 的 Restore 方法用于将应用程序的主窗口从最小化状态还原到正常状态。
        具体来说，Restore 方法的作用包括：
        还原主窗口：当应用程序的主窗口处于最小化状态时，调用 Restore 方法可以将其还原为正常状态，使其重新显示在屏幕上，并恢复到之前的大小和位置。
        响应用户操作：当用户最小化了应用程序的主窗口后，可能会希望通过点击任务栏图标或执行其他操作来将其恢复到正常状态。通过调用 Restore 方法，应用程序可以响应用户的操作，以提供更好的用户体验。
        恢复应用程序状态：在某些情况下，应用程序可能会在最小化时保存一些状态信息，如窗口位置、大小或用户偏好设置。通过调用 Restore 方法，可以触发恢复这些状态信息，使应用程序在还原时表现得与最小化前一致。
        提高用户可见性：通过恢复主窗口的正常状态，可以提高应用程序的可见性和可操作性，使用户能够更轻松地与应用程序进行交互和操作。
        总之，Restore 方法是 PythonStudio 中 Application 对象的一个方法，用于将应用程序的主窗口从最小化状态还原到正常状态，以便用户可以继续与应用程序进行交互和操作。"""
    def RestoreTopMosts(self, *args, **kwargs) -> Any:
        """Application 对象的 RestoreTopMosts 方法用于将应用程序中那些具有 "最顶层" 属性的窗口还原为最顶层状态。这在某些情况下非常有用，尤其是当应用程序需要确保特定窗口总是位于其他窗口之上。
        以下是 RestoreTopMosts 方法的具体作用和使用场景：
        恢复顶层窗口属性：有时，在执行某些操作时，应用程序可能需要暂时取消某些窗口的顶层属性。调用 RestoreTopMosts 方法可以恢复这些窗口的顶层属性，使它们再次位于其他窗口之上。
        应用程序的窗口管理：在窗口管理中，有时需要确保某些窗口（如工具窗口、浮动面板、特殊对话框等）始终在最上层。RestoreTopMosts 方法有助于确保这些窗口在需要时恢复到最顶层状态。
        处理窗口间的干扰：在多窗口应用中，可能会因为其他操作而导致某些窗口失去顶层状态，这可能会干扰用户体验。调用 RestoreTopMosts 可以确保关键窗口保持在最上方。
        确保应用程序的关键窗口可见：对于某些应用场景，如监控、提醒或通知，确保关键窗口始终可见是很重要的。在这种情况下，RestoreTopMosts 方法可以确保关键窗口的可见性。
        总结而言，RestoreTopMosts 是 PythonStudio 中 Application 对象的一种窗口管理工具，用于恢复特定窗口的顶层状态。这在处理多窗口应用、管理窗口层次、确保关键窗口可见性等方面非常有用。"""
    def Run(self, *args, **kwargs) -> Any:
        """Application.Run 方法是用于启动应用程序的消息循环并开始处理事件的关键方法。下面是关于 Application.Run 方法的作用和功能的详细说明：
        启动消息循环：
        Application.Run 方法会启动应用程序的主消息循环。在这个循环中，应用程序会不断接收和处理各种系统消息和事件，比如窗口消息、键盘输入、鼠标事件等。
        处理应用程序事件：
        一旦 Application.Run 被调用，应用程序就开始处理各种事件。这些事件包括窗口的创建、销毁、重绘，用户输入（如键盘和鼠标事件），定时器事件等等。通过消息循环，应用程序能够响应用户的操作和系统的事件。
        管理应用程序生命周期：
        Application.Run 方法负责管理整个应用程序的生命周期。它处理应用程序的启动、事件处理、消息传递以及最终的退出。应用程序的主窗口通常在 Application.Run 中创建和显示，而且直到应用程序关闭之前都会保持运行状态。
        阻塞调用：
        Application.Run 是一个阻塞的调用，意味着它会阻塞当前线程直到应用程序退出。只有当应用程序接收到退出消息（比如关闭主窗口或调用 Application.Terminate）时，Application.Run 才会返回，这样程序就可以继续执行之后的清理和退出操作。
        处理异常：
        Application.Run 也负责处理应用程序中的异常。如果应用程序的事件处理过程中发生了异常并且没有被捕获处理，Application.Run 会负责显示标准的异常处理对话框，并在用户处理完异常后继续运行应用程序。
        总之，Application.Run 是 PythonStudio 中用于启动应用程序主消息循环并处理事件的重要方法。它管理着应用程序的整个生命周期，确保应用程序能够响应用户输入和系统消息，并提供了良好的异常处理机制。"""
    def ShowException(self, *args, **kwargs) -> Any:
        """Application.ShowException 方法用于显示应用程序中未处理的异常信息。以下是关于 Application.ShowException 方法的作用和功能的详细说明：
        显示异常信息：
        当应用程序中的代码抛出异常但未经过捕获处理时，异常会传递到 Application.Run 方法中。在这种情况下，Application.ShowException 负责显示异常信息给用户。通常情况下，它会显示一个标准的异常对话框，其中包含异常类型、异常消息以及可选的堆栈跟踪信息。
        提供友好的用户体验：
        显示异常对话框可以帮助用户了解发生了什么问题，以及可能的原因。这提供了一种友好的用户体验，使用户能够更好地理解并解决异常导致的问题。
        避免程序崩溃：
        当异常没有被捕获处理时，如果不显示异常信息并进行处理，程序可能会因为未处理的异常而崩溃。通过调用 Application.ShowException，程序可以在遇到异常时优雅地显示异常信息，并允许用户进行相应的操作或者提供反馈。
        定制化异常处理：
        Application.ShowException 方法可以根据应用程序的需求进行定制化。开发人员可以重写该方法，以提供自定义的异常处理行为，比如记录异常信息到日志文件、发送异常报告到服务器等。
        总之，Application.ShowException 是 PythonStudio 中用于显示应用程序中未处理异常信息的方法。它提供了一种友好的用户体验，避免程序因未处理的异常而崩溃，并可以根据需要进行定制化的异常处理。"""
    def Terminate(self, *args, **kwargs) -> Any:
        """Application.Terminate 方法用于终止应用程序的运行。以下是关于 Application.Terminate 方法的作用和功能的详细说明：
        退出应用程序：
        调用 Application.Terminate 方法会导致应用程序立即退出。这意味着应用程序的主消息循环会停止，所有的窗口和线程都会被关闭，资源会被释放，然后应用程序会终止执行。
        清理资源：
        在退出应用程序之前，Application.Terminate 方法通常会执行一些清理工作，比如释放动态分配的资源、关闭文件、保存设置等。这确保了应用程序在退出时能够正确地清理资源，避免内存泄漏和其他问题。
        触发 OnTerminate 事件：
        在调用 Application.Terminate 方法后，PythonStudio 应用程序会触发 OnTerminate 事件。可以通过监听这个事件来执行一些在应用程序退出前必须完成的操作，比如保存数据、发送最后的网络请求等。
        退出程序循序：
        在调用 Application.Terminate 方法之后，PythonStudio 应用程序会按照一定的退出程序循序来执行清理和关闭操作。这通常包括关闭主窗口、释放资源、触发 OnTerminate 事件等步骤。
        总之，Application.Terminate 是 PythonStudio 中用于终止应用程序运行并退出的方法。它能够立即结束应用程序的执行，执行必要的清理工作，并触发相应的事件，确保应用程序在退出时能够正确地关闭和释放资源。"""
    def UnhookMainWindow(self, *args, **kwargs) -> Any:
        """Application.UnhookMainWindow 方法用于取消挂钩（unhook）应用程序的主窗口消息处理过程。以下是关于 Application.UnhookMainWindow 方法的作用和功能的详细说明：
        取消挂钩主窗口消息处理过程：
        PythonStudio 应用程序通常会通过挂钩主窗口消息处理过程来处理用户输入、窗口消息等。这个过程允许应用程序拦截和处理特定类型的消息，以便执行相应的操作。调用 Application.UnhookMainWindow 方法会取消挂钩主窗口消息处理过程，从而停止应用程序对消息的拦截和处理。
        恢复默认消息处理过程：
        取消挂钩主窗口消息处理过程后，应用程序会恢复默认的消息处理过程。这意味着窗口消息将由系统默认的窗口过程或者其他已注册的消息处理过程进行处理，而不再由应用程序自定义的处理过程进行处理。
        影响整个应用程序：
        Application.UnhookMainWindow 方法会影响整个应用程序的消息处理过程，而不仅仅是单个窗口。因此，调用该方法会取消挂钩所有窗口的消息处理过程，恢复默认的消息处理方式。
        通常用于结束应用程序：
        通常情况下，Application.UnhookMainWindow 方法会在应用程序准备退出时被调用，以确保所有窗口的消息处理过程被恢复为默认状态。这是应用程序退出的一部分清理工作，以确保在退出时不会影响系统或其他应用程序的正常操作。
        总之，Application.UnhookMainWindow 是 PythonStudio 中用于取消挂钩应用程序主窗口消息处理过程的方法。它恢复默认的消息处理方式，通常在应用程序退出前被调用，以确保整个应用程序的消息处理过程被正确清理和恢复。"""
    def UnhookSynchronizeWakeup(self, *args, **kwargs) -> Any:
        """Application.UnhookSynchronizeWakeup 方法用于取消挂钩应用程序的同步唤醒机制。以下是关于 Application.UnhookSynchronizeWakeup 方法的作用和功能的详细说明：
        取消挂钩同步唤醒机制：
        PythonStudio 应用程序中的同步方法（例如 TThread.Synchronize）通常会使用一种机制来确保在主线程上执行，这种机制涉及到唤醒主线程以执行同步方法。Application.UnhookSynchronizeWakeup 方法用于取消这种唤醒机制的挂钩，从而停止应用程序对同步方法的自动唤醒。
        停止自动唤醒：
        调用 Application.UnhookSynchronizeWakeup 方法会停止应用程序自动唤醒主线程来执行同步方法。这意味着同步方法将不再被自动执行，而需要手动管理同步操作。
        手动管理同步：
        取消挂钩同步唤醒机制后，开发人员需要手动管理同步操作。这可能包括使用其他同步机制（如事件、信号量等）来控制线程之间的同步，或者在必要时手动唤醒主线程来执行同步操作。
        适用于特定情况：
        Application.UnhookSynchronizeWakeup 方法通常用于特定的情况，例如在需要更精细控制同步操作的场景下。取消自动唤醒可以让开发人员更灵活地管理同步行为，但也需要更多的注意和手动管理。
        总之，Application.UnhookSynchronizeWakeup 是 PythonStudio 中用于取消挂钩应用程序同步唤醒机制的方法。它停止应用程序自动唤醒主线程来执行同步方法，需要开发人员手动管理同步操作，适用于特定需要更精细控制同步行为的场景。"""
    def UpdateAction(self, *args, **kwargs) -> bool:
        """Application.UpdateAction 是一个方法，它用于触发应用程序中的动作（Action）更新。以下是关于 Application.UpdateAction 方法的作用和功能的详细说明：
        更新动作状态：
        PythonStudio 中的动作（Action）是一种用于执行特定操作的对象，例如菜单项、工具栏按钮等。动作通常与用户界面元素相关联，并且可以在用户交互时执行相应的操作。Application.UpdateAction 方法用于通知应用程序更新所有关联的动作的状态，以反映当前的应用程序状态。
        触发 OnUpdate 事件：
        动作对象通常具有一个名为 OnUpdate 的事件，该事件在动作状态需要更新时触发。调用 Application.UpdateAction 方法会触发所有关联动作的 OnUpdate 事件，从而允许动作对象检查当前的应用程序状态并相应地更新自己的状态。
        更新动作属性：
        在 OnUpdate 事件中，动作对象可以根据应用程序的状态更新自己的属性，例如启用状态、可见性等。Application.UpdateAction 方法的调用将激活这些事件，从而使动作对象有机会更新自己的属性以反映当前的应用程序状态。
        保持用户界面同步：
        通过调用 Application.UpdateAction 方法，应用程序可以确保用户界面中的动作状态与当前应用程序状态保持同步。这对于根据应用程序状态动态启用或禁用菜单项、工具栏按钮等非常重要，以提供一致的用户体验。
        总之，Application.UpdateAction 方法用于触发应用程序中动作对象的更新，以确保它们的状态与当前应用程序状态保持同步。通过激活动作对象的 OnUpdate 事件，动作对象可以检查应用程序状态并相应地更新自己的属性，从而保持用户界面的一致性和响应性。"""
    def UseRightToLeftAlignment(self, *args, **kwargs) -> bool:
        """Application.UseRightToLeftAlignment 是一个布尔类型的属性，用于指定应用程序是否使用从右向左的对齐方式。以下是关于 Application.UseRightToLeftAlignment 属性的作用和功能的详细说明：
        从右向左对齐：
        在一些语言和文化中，文本和用户界面元素的对齐方式是从右向左的，例如阿拉伯语和希伯来语。通过设置 Application.UseRightToLeftAlignment 为 True，可以指示应用程序在绘制用户界面时使用从右向左的对齐方式。
        全局设置：
        Application.UseRightToLeftAlignment 是一个全局设置，它影响整个应用程序中的所有用户界面元素的对齐方式。一旦设置为 True，应用程序中的所有文本和控件都会以从右向左的方式进行布局和显示。
        适应多语言环境：
        在开发多语言应用程序时，通过使用 Application.UseRightToLeftAlignment 属性，可以轻松地适应从右向左的语言环境。这样，无论用户的操作系统语言设置为何种从右向左的语言，应用程序都能正确地显示和对齐文本和控件。
        用户界面调整：
        在一些特殊情况下，需要根据用户的语言偏好调整用户界面的布局。通过动态设置 Application.UseRightToLeftAlignment 属性，可以实现根据用户的语言设置自动调整用户界面的对齐方式，从而提供更好的用户体验。
        总之，Application.UseRightToLeftAlignment 属性用于指定 PythonStudio 应用程序是否使用从右向左的对齐方式。通过设置此属性，可以全局影响整个应用程序的用户界面布局，以适应从右向左的语言环境，并提供更好的用户体验。"""
    def UseRightToLeftReading(self, *args, **kwargs) -> bool:
        """Application.UseRightToLeftReading 是一个布尔类型的属性，用于指定应用程序是否使用从右向左的阅读顺序。以下是关于 Application.UseRightToLeftReading 属性的作用和功能的详细说明：
        从右向左阅读顺序：
        在一些语言和文化中，阅读顺序是从右向左的，例如阿拉伯语和希伯来语。通过设置 Application.UseRightToLeftReading 为 True，可以指示应用程序在绘制文本时使用从右向左的阅读顺序。
        文本显示：
        当 Application.UseRightToLeftReading 被设置为 True 时，应用程序中的文本将按照从右向左的顺序进行显示。这意味着文本的起始位置将是右边，而结束位置将是左边，与传统的从左向右的阅读顺序相反。
        适应多语言环境：
        在开发多语言应用程序时，通过使用 Application.UseRightToLeftReading 属性，可以轻松地适应从右向左的语言环境。这样，无论用户的操作系统语言设置为何种从右向左的语言，应用程序都能正确地显示和阅读文本。
        用户界面调整：
        在一些特殊情况下，需要根据用户的语言偏好调整用户界面的文本显示方式。通过动态设置 Application.UseRightToLeftReading 属性，可以实现根据用户的语言设置自动调整文本的显示顺序，从而提供更好的用户体验。
        总之，Application.UseRightToLeftReading 属性用于指定 PythonStudio 应用程序是否使用从右向左的阅读顺序。通过设置此属性，可以全局影响整个应用程序的文本显示方式，以适应从右向左的语言环境，并提供更好的用户体验。"""
    def UseRightToLeftScrollBar(self, *args, **kwargs) -> bool:
        """Application.UseRightToLeftScrollBar 是一个布尔类型的属性，用于指定应用程序是否使用从右向左的滚动条。以下是关于 Application.UseRightToLeftScrollBar 属性的作用和功能的详细说明：
        从右向左滚动条：
        在一些语言和文化中，滚动条的滚动方向是从右向左的，例如阿拉伯语和希伯来语。通过设置 Application.UseRightToLeftScrollBar 为 True，可以指示应用程序在绘制滚动条时使用从右向左的滚动方向。
        滚动控件的内容：
        当 Application.UseRightToLeftScrollBar 被设置为 True 时，应用程序中的滚动条将按照从右向左的方向进行滚动。这意味着用户在滚动时，控件的内容将以从右向左的方式进行移动。
        适应多语言环境：
        在开发多语言应用程序时，通过使用 Application.UseRightToLeftScrollBar 属性，可以轻松地适应从右向左的语言环境。这样，无论用户的操作系统语言设置为何种从右向左的语言，应用程序都能正确地显示和操作滚动条。
        用户界面调整：
        在一些特殊情况下，需要根据用户的语言偏好调整用户界面的滚动方式。通过动态设置 Application.UseRightToLeftScrollBar 属性，可以实现根据用户的语言设置自动调整滚动条的滚动方向，从而提供更好的用户体验。
        总之，Application.UseRightToLeftScrollBar 属性用于指定 PythonStudio 应用程序是否使用从右向左的滚动方向。通过设置此属性，可以全局影响整个应用程序的滚动条行为，以适应从右向左的语言环境，并提供更好的用户体验。"""
    def UseMetropolisUI(self, *args, **kwargs) -> Any:
        """Application.UseMetropolisUI 是一个布尔类型的属性，用于启用或禁用 Metropolis 用户界面（UI）主题。以下是关于 Application.UseMetropolisUI 属性的作用和功能的详细说明：
        Metropolis UI 主题：
        Metropolis UI 是一个现代化的用户界面主题，设计风格简洁、扁平化，具有清晰的图标和按钮样式。通过设置 Application.UseMetropolisUI 为 True，可以启用 Metropolis UI 主题，使应用程序的界面看起来更加现代化和吸引人。
        用户界面美化：
        Metropolis UI 主题提供了一套统一的界面风格，包括按钮、文本框、列表框等控件的样式，使得整个应用程序的界面看起来更加统一和美观。通过启用 Application.UseMetropolisUI，可以让应用程序的界面更具吸引力，并提升用户体验。
        跨平台应用：
        Metropolis UI 主题适用于多个平台，包括 Windows、iOS 和 Android 等。通过使用 Application.UseMetropolisUI，开发人员可以在不同平台上保持应用程序的界面风格一致，从而提供更加统一的用户体验。
        主题切换：
        开发人员可以动态地在应用程序中启用或禁用 Metropolis UI 主题，以适应不同用户的喜好或特定的应用场景。通过设置 Application.UseMetropolisUI 属性，可以灵活地切换应用程序的界面风格，以满足不同的需求。
        总之，Application.UseMetropolisUI 属性用于启用或禁用 Metropolis UI 主题，从而美化应用程序的用户界面，提升用户体验，并保持界面风格的一致性。"""
    def MessageBox(self, *args, **kwargs) -> int:
        """Application.MessageBox 是一个用于显示消息框的函数。它的作用是在应用程序中弹出一个消息框，向用户显示特定的消息，并根据用户的响应执行相应的操作。以下是关于 Application.MessageBox 函数的详细说明：
        消息显示：
        Application.MessageBox 可以用来向用户显示各种类型的消息，包括信息、警告、错误等。通过传递不同的消息文本和消息类型参数，可以在消息框中显示不同的内容，以提供给用户相应的提示或警告。
        用户响应：
        当消息框显示给用户时，用户可以根据消息框上的按钮选择来做出响应。通常情况下，消息框上会显示确定按钮、取消按钮等，用户可以点击这些按钮来执行相应的操作。Application.MessageBox 函数会根据用户的选择返回不同的值，开发人员可以根据这些返回值来确定用户的响应并执行相应的逻辑。
        参数设置：
        Application.MessageBox 函数接受多个参数，其中包括消息文本、消息标题、消息类型和按钮选项等。通过设置这些参数，开发人员可以定制消息框的外观和行为，以满足特定的需求。
        模态与非模态：
        Application.MessageBox 函数可以以模态或非模态的方式显示消息框。在模态模式下，用户必须对消息框做出响应后才能继续操作应用程序；而在非模态模式下，用户可以在不关闭消息框的情况下继续操作应用程序。
        总之，Application.MessageBox 函数是用于在 PythonStudio 应用程序中显示消息框的函数，通过向用户显示特定的消息，并根据用户的响应执行相应的操作，可以实现与用户的交互和信息提示。"""
    def InputBox(*args, **kwargs) -> Any:
        """用于创建一个简单的对话框供用户输入文本。
        标题：str
        提示：str
        默认值：str
        结果：str"""
    def SelectDirectory(*args, **kwargs) -> Any:
        """用于显示一个对话框，允许用户选择文件夹并返回所选文件夹的路径。
        标题：str
        根目录：str
        结果：str"""
    def ColorToString(*args, **kwargs) -> Any:
        """用于将颜色值转换为字符串表示形式，例如将clRed这个颜色值传入将返回'clRed'字符串。
        颜色：Color
        结果：str"""
    def PrintText(*args, **kwargs) -> Any:
        """用于向打印机发送一段文本以进行打印。
        文本：str
        x：int
        y：int
        字体：Font"""
    def PrintImage(*args, **kwargs) -> Any:
        """用于向打印机发送一副位图以进行打印。
        位图：Bitmap
        x：int
        y：int
        缩放比例：int"""
    def ShowWindow(*args, **kwargs) -> Any:
        """设置指定窗口的显示状态。
        窗口句柄：HWND
        显示命令：int
        结果：如果窗口之前可见，则返回值为非零。如果窗口之前被隐藏，则返回值为零。"""
    def WinExec(*args, **kwargs) -> Any:
        """用于异步运行一个Windows程序。
        命令行：str
        显示选项：int
        结果：int"""
    def ShellExecute(*args, **kwargs) -> Any:
        """运行一个外部程序（或者是打开一个已注册的文件、打开一个目录、打印一个文件等等），并对外部程序有一定的控制。
        窗口句柄：int
        操作：str
        文件名：str
        参数：str
        目录：str
        显示选项：int
        结果：int"""
    def GetSystemPath(*args, **kwargs) -> Any:
        """获取各种系统路径。路径缩写参见实例或文档。
        路径缩写：int
        结果：str"""


class Action(CustomAction):
    """TAction 是 VCL 动作对象的基类。 TAction 实现与菜单项和控件一起使用的操作。 TAction 操作的已发布属性和事件可以在设计时在对象检查器中进行管理。
    TAction 类与 TCustomAction 几乎相同。 TAction 仅扩展了 TCustomAction 的以下功能：
    将 AutoCheck、Caption、Checked、Enabled、GroupIndex、HelpType、HelpContext、HelpKeyword、Hint、ImageIndex、SecondaryShortCuts、ShortCut 和 Visible 属性的公共范围更改为已发布。
    设置 OnExecute、OnUpdate 和 OnHint 事件的发布范围。
    这些属性和事件的已发布范围提供了使用对象检查器帮助编辑这些属性和事件的值的可能性。
    创建操作时，DisableIfNoHandler 属性设置为 True，也就是说，如果该操作没有 OnExecute 事件处理程序，则该操作将无法访问。
    TAction 是一个通用操作组件。当没有预定义的操作类来实现对用户命令的所需响应时，可以将其添加到操作列表中。与预定义的操作类不同，预定义的操作类具有在用户单击客户端控件时做出响应的内置方法，而 TAction 没有对用户命令的内置响应。相反，在使用 TAction 时，您可以通过编写（使用对象检查器的协助）OnExecute 事件处理程序来在操作“触发”时提供响应，并通过编写 OnUpdate 事件来配置 TAction 的属性以反映当前条件处理程序。
    操作对象用于集中对用户命令（操作）的响应，并表示使用操作列表或操作带的应用程序中的用户界面元素。
    TAction 还可以充当预定义操作类的基类。如果您想保留受支持的属性和事件的已发布范围，您可以从 TAction 派生。如果您想使用一些受支持的属性和事件的公共范围，您可以从 TCustomAction 派生。
    有关增强 TAction 行为的预定义操作，请参阅 Vcl.StdActns、Vcl.DBActns 和 Vcl.ExtActns 单元中的操作类。"""
    __hash__: ClassVar[None] = ...
    ActionComponent: Any
    """指示导致执行此操作的客户端组件。"""
    AutoCheck: bool
    """bool：控制执行操作时 Checked 属性是否切换。
        AutoCheck 会导致 Checked 属性在操作执行时切换。这允许操作的 Checked 属性与客户端的 Checked 属性（或等效属性）保持同步。
        如果客户端有自己的 AutoCheck 属性，则操作的 AutoCheck 属性将传播到客户端的 AutoCheck 属性。"""
    Caption: str
    """str：表示动作的标题。
        Caption 保存设置后用作操作标题的字符串。 Caption 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    Checked: bool
    """bool：指示客户端控件和菜单项是否显示为选中状态。
        Checked 指定操作的选中状态。 Checked 的值可以传播到链接到操作的所有客户端控件和客户端菜单项。
        注意：如果操作的 GroupIndex 值大于 0，则将 Checked 设置为 True 会将 GroupIndex 组中所有其他操作的 Checked 属性设置为 False。
        提示：使用 AutoCheck 属性确保操作的 Checked 属性在执行时切换。"""
    Enabled: bool
    """bool：指定操作的启用状态。
        Enabled 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    GroupIndex: int
    """int：表示一个操作列表中的一组操作。此组中的操作就像单选按钮组一样。
        GroupIndex 的值用于定义操作组。每个组中的操作就像单选按钮组一样。当 GroupIndex 大于 0 时，此值标识某些操作所属的组。GroupIndex 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。
        当该组中任何操作的 Checked 属性设置为 True 时，组中所有其他操作的 Checked 属性都设置为 False。也就是说，一次只能检查组中的一项操作。
        注意：组中的所有操作必须由同一个操作列表列出。"""
    HelpContext: int
    """int：保留标识操作的帮助主题的整数上下文 ID。
        HelpContext 指定整数上下文 ID，用于标识调用操作帮助时要显示的帮助主题。 HelpContext 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。另请参见 IsHelpLinked。
        仅当在 HelpType 属性中选择 htContext 时才使用 HelpContext。

        注意：要使用帮助，您需要在应用程序中启用帮助。当您的应用程序支持使用适当的帮助系统时，它可以显示关联帮助文件中的帮助主题。当客户端控件获得焦点并且用户按 F1 键时，该控件将使用 HelpContext 属性的值来调用显示具有此上下文 ID 的主题的联机帮助。目标主题由 HelpContext 上下文 ID 值唯一标识。"""
    HelpKeyword: str
    """str：包含标识操作的帮助主题的关键字字符串。

        HelpKeyword 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。
        仅当在 HelpType 属性中选择 htKeyword 时才使用 HelpKeyword。

        注意：要使用帮助，您需要在应用程序中启用帮助。当您的应用程序支持使用适当的帮助系统时，它可以显示关联帮助文件中的帮助主题。当客户端控件获得焦点并且用户按 F1 键时，该控件将使用 HelpKeyword 属性的值来调用显示带有此关键字的主题的联机帮助。"""
    HelpType: HelpType
    """HelpType：保留是否使用HelpContext或HelpKeyword属性来标识帮助主题。

        HelpType 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。
        HelpType 可以保留以下常量之一：

        ht上下文？指示使用 HelpContext 属性来标识调用帮助时要显示的帮助主题。
        ht 关键字 ?指示使用 HelpKeyword 属性来标识调用帮助时要显示的帮助主题。"""
    Hint: str
    """str：存储帮助提示文本。

        Hint 保存提示字符串，指示操作的提示文本。
        Hint 包含当用户将鼠标移到屏幕元素上时出现在弹出框（或状态栏）中的文本字符串。
        此提示字符串可以传播到操作的客户端 - 控件、菜单项和其他 GUI 元素。

        注意：VCL 控件支持包含三个部分的提示字符串，这些部分可以显示在不同的位置（请参阅 Vcl.Controls.TControl.Hint）。"""
    ImageIndex: int
    """int：存储图像列表中的索引。

        ImageIndex 是图像列表中从零开始的索引。 TContainedAction 不提供实际的图像列表，只有 GUI 应用程序框架中的操作实现才提供这样的属性。通常，此图像列表包含与使用此操作的控件和菜单项关联的图像。
        ImageIndex 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。

        注意：当ImageIndex为-1时，这意味着列表不包含任何图像。
        在控件的典型实现中，图像绘制在控件的最左侧位置，控件的文本绘制在图像的右侧。如果 ImageIndex 为 -1，则控件不会将文本向右偏移来为图像保留占位符。否则，如果 ImageIndex 不为 -1，则控件的文本始终以向右偏移的方式绘制，以保留绘制图像的位置。"""
    ImageName: str
    """str：显示图像集合中链接项目的名称。"""
    OnExecute: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnHint: Callable[[str,bool],None]
    """可调用[[str, bool], 无]:"""
    OnUpdate: Callable[[Object],None]
    """可调用[[对象]，无]："""
    SecondaryShortCuts: CustomShortCutList
    """CustomShortCutList：存储用于触发操作的快捷方式（除了 ShortCut 之外）。

        可以响应多个快捷键组合来执行操作。 secondaryShortCuts 列出了可以触发该操作的所有快捷键组合（除 ShortCut 属性指定的组合外）。这使您可以提供额外的辅助快捷方式。
        当用户键入 SecondShortCuts 中列出的组合键之一时，将调用该操作的 Execute 方法。"""
    ShortCut: int
    """int：触发操作的快捷方式。

        Shortcut 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    Visible: bool
    """bool：存储动作表示是否可见。

        Visible 指定操作的可见状态（True 表示可见，False 表示不可见）。
        如果将客户端链接到操作的操作链接的 IsVisibleLinked 方法返回 True，则此 Visible 值将传播到操作的客户端。
        如果操作的 Visible 为 False，并且操作链接的 IsVisibleLinked 返回 True，则客户端（控件、菜单项或其他）的 Visible 也设置为 False，并且该客户端也是不可见的。通常，如果操作属于 TCustomViewAction，则操作链接的 IsVisibleLinked 返回 False。否则，当操作属于 TAction 时，操作链接的 IsVisibleLinked 返回 True。也就是说，当需要提供 Visible 设置为 True 的操作的客户端的可见表示时，使用 TCustomViewAction。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TAction.Create(AOwner: 组件) -> 无

        创建并初始化 TAction 对象。
        应用程序通常不会显式创建操作对象。当您在设计时将操作添加到操作管理器或操作列表组件时，操作会自动创建。在运行时实例化 TAction 时，请在调用 Create 后将 TActionList 或 TActionManager 组件分配给新操作的 ActionList 属性。
        Create 将DisableIfNoHandler 设置为True，也就是说，如果该操作没有OnExecute 事件处理程序，则该操作将无法访问。"""
    def Execute(self) -> Any:
        """TBasicAction.Execute()

        生成 OnExecute 事件。"""
    def Update(self) -> Any:
        """TBasicAction.Update()

        提供在应用程序空闲时执行集中代码的机会。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ActionList(CustomActionList):
    """TActionList 维护可由组件和控件（例如菜单项和按钮）使用的操作列表。

    使用操作列表集中对用户命令（操作）的响应。操作列表组件维护应用程序中的客户端控件可用的操作列表。从组件选项板的标准页面将操作列表组件添加到表单或数据模块。双击操作列表可显示操作列表编辑器，您可以在其中添加、删除和重新排列操作。

    注意：虽然可以使用 TActionList 维护应用程序的操作，但使用 Vcl.ActnMan.TActionManager 可能更简单。"""
    __hash__: ClassVar[None] = ...
    ActionCount: Any
    """指示操作列表中的操作数量。"""
    Actions: Any
    """列出由操作列表维护的操作。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有的组件的迭代器"""
    Images: CustomImageList
    """自定义图像列表：用于指定控件显示图像的来源。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExecute: Callable[[BasicAction,bool],None]
    """可调用[[BasicAction，布尔]，无]："""
    OnStateChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnUpdate: Callable[[BasicAction,bool],None]
    """可调用[[BasicAction，布尔]，无]："""
    Owner: Any
    """返回组件所有者"""
    State: ActionListState
    """ActionListState：表示当用户触发客户端对象时，动作列表中的动作是否响应。

        State 可以是 TActionListState 类型中定义的常量之一：
        asNormal、asSuspished 和 asSuspishedEnabled。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ActivityIndicator(CustomActivityIndicator):
    """动画旋转显示表明应用程序正在执行某些活动。

    创建活动指示器，设置颜色、大小和类型，并将 Animate 属性设置为 True 以启动动画。您可以使用 FrameDelay 属性修改动画的速度。"""
    __hash__: ClassVar[None] = ...
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    Animate: bool
    """bool：指定活动指示器当前是否有动画。

        默认值为 False。"""
    FrameDelay: int
    """int：指定活动指示器显示其动画序列的速度。

        将此属性设置为较低的值可加快动画速度。"""
    IndicatorColor: ActivityIndicatorColor
    """ActivityIndi​​catorColor：活动指示器的颜色。

        可能的值为：

        aicBlack：默认。指示器的元素是黑色的。
        aicWhite：指标的元素是白色的。"""
    IndicatorSize: ActivityIndicatorSize
    """ActivityIndi​​catorSize：活动指示器的大小。

        可能的值为：

        aisSmall：24 x 24 像素。
        aisMedium：默认。 32 x 32 像素。
        aisLarge：48 x 48 像素。
        aisXLarge：64 x 64 像素。"""
    IndicatorType: ActivityIndicatorType
    """ActivityIndi​​catorType：活动指示器的类型。

        可能的值为：

        aitMomentumDots ：默认。传统的 Windows 8/10 旋转点序列，以圆形模式加速和减速。
        aitRotatingSector ：分段环的交替扇区按顺序突出显示以指示活动。
        aitSectorRing ：分段环的扇区按顺序突出显示，直到环完全突出显示。在下一次遍历中，每个扇区都以暗淡状态显示。"""
    Parent: Any
    """返回/设置控制父级"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户端区域坐标转换为全局屏幕坐标。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BaseBindScopeComponent(Component):
    """绑定范围组件的基类。 TBaseBindScopeComponent 是 TCustomBindScope 组件的祖先。 TBaseBindScopeComponent 提供添加作用域映射、获取作用域成员和值、返回作用域本身或成员作用域的功能。它还提供用于访问此范围内的绑定表达式和范围映射的属性。"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents(prefix)

        如果方法使用以下模式命名，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例：def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TBaseBindScopeComponent.Create(AOwner: Component) -> 无

        分配内存并构造安全初始化的组件实例。
        Data.Bind.Components.TBaseBindScopeComponent.Create 继承自 System.Classes.TComponent.Create。该行下面的所有内容均引用System.Classes.TComponent.Create。
        分配内存并构造安全初始化的组件实例。
        所有对象都有一个构造对象的 Create 方法。 TComponent 重新定义了 Create，以便对于组件，Create 还可以：

        建立组件与其所有者的关系，如 AOwner 参数所示。
        将 ComponentStyle 属性设置为 csInheritable，这意味着该组件可以由后代表单类型继承。
        无需显式创建在表单设计器中添加的组件。这些组件在应用程序运行时自动创建，并在应用程序关闭时销毁。
        对于以编程方式创建的组件（即不是在表单设计器中创建的组件），请调用 Create 并将所有者组件作为 AOwner 参数传递。当组件被毁坏时，所有者将对其进行处置。如果组件不被拥有，则在需要销毁时使用 Free。

        提示：将 Self 作为 Owner 参数传递时，请考虑 Self 引用的内容。如果一个组件在其一个方法中创建另一个组件，则 Self 引用第一个组件，而不是正在创建的组件，该组件随后由第一个组件拥有。
        注意：TComponent 构造函数部分是虚拟的，以允许类引用的多态实例化。这对于流系统和表单设计器至关重要。声明新组件的 Create 构造函数时，不要忘记使用 override 指令。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """处置组件及其拥有的组件。

        Data.Bind.Components.TBaseBindScopeComponent.Destroy 继承自 System.Classes.TComponent.Destroy。此行以下的所有内容均引用 System.Classes.TComponent.Destroy。
        处置组件及其拥有的组件。
        不要直接调用 Destroy。请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        切勿在组件自己的事件处理程序之一中显式释放组件，也不要从其拥有或包含的组件的事件处理程序中释放组件。
        要销毁表单，请调用其 Release 方法。 Release 会等待所有表单的事件处理程序以及表单组件的事件处理程序执行完毕，然后再销毁表单。

        注意：表单拥有在设计模式下放置在其上的所有控件和非可视组件。当它被释放时，所有这些组件也会自动释放。默认情况下，所有表单均归全局 Application 对象所有。当应用程序终止时，它会释放全局 Application 对象，从而释放所有表单。对于不是组件的对象，以及使用 nil 所有者创建的组件，请务必在完成对象后调用 Free；否则分配给该对象的内存将丢失，直到应用程序终止。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BaseImageList(Component):
    """TBaseImageList 的包装"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Count: int
    """数量"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BeforeDestruction(self, *args, **kwargs) -> Any:
        """在调用第一个析构函数之前执行任何必要的操作。

        BeforeDestruction 在组件的第一个析构函数执行之前立即自动调用。不要在您的应用程序中显式调用它。
        正如在 TComponent 中实现的那样，BeforeDestruction 检查 Destroying 方法是否已被调用，如果没有，则调用它。在组件被销毁之前重写此方法以执行其他操作的后代应首先调用继承的方法以确保进行此检查。"""
    def BeginUpdate(self, *args, **kwargs) -> Any: ...
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Change(self, *args, **kwargs) -> Any: ...
    def EndUpdate(self, *args, **kwargs) -> Any: ...
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父级。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BaseLinkingBindSource(BaseBindScopeComponent):
    """支持链接的作用域基类"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BaseObjectBindSource(BaseLinkingBindSource):
    """是一个绑定源，支持适配器连接不同类型的数据。

    TBaseObjectBindSource 类实现支持适配器连接到不同类型数据的绑定源。可以通过设置属性 (InternalAdapter) 或实现 OnCreateAdapter 事件来提供适配器。"""
    __hash__: ClassVar[None] = ...
    Active: bool
    """bool：指定绑定源适配器是否处于活动状态。

        读取 Active 以确定绑定源适配器是否处于活动状态。默认情况下，Active 属性设置为 True。
        当 Active 为 False 时，绑定源没有适配器或其适配器未激活。当 Active 为 True 时，绑定源具有活动适配器。"""
    AutoActivate: bool
    """bool：指定绑定源是否自动激活。将 AutoActive 设置为 True 即可自动激活。"""
    BOF: Any
    """bool：表示绑定源适配器是否位于第一条记录中。

        读取 BOF（文件开头）以确定 ItemIndex 是否位于第一条记录中。如果 BOF 为 True，则绑定源有一个适配器，并且活动记录是第一条记录。如果没有活动记录，BOF 也为 True。在所有其他情况下，BOF 为 False。"""
    CanModify: bool
    """bool：指定绑定源是否有修改数据的权限。

        检查 CanModify 以确定是否可以编辑数据。当 CanModify 设置为 True 时，绑定源可以编辑数据。当 CanModify 设置为 False 时，绑定源无法编辑数据。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Editing: bool
    """bool：指示数据是否处于编辑模式。

        阅读编辑以确定绑定源适配器当前是否可以编辑数据。如果 Editing 属性为 True，则绑定源适配器提供的数据处于编辑模式。否则，它是 False。"""
    Eof: Any
    """bool：指示绑定源适配器是否位于最后一条记录中。

        读取 Eof（文件结尾）以确定 ItemIndex 是否位于最后一条记录中。如果 Eof 为 True，则绑定源具有适配器，并且活动记录是最后一条或没有记录。如果 ItemIndex 位于任何其他位置，则 Eof 为 False。"""
    InternalAdapter: BindSourceAdapter
    """BindSourceAdapter：返回绑定源的内部适配器。

        InternalAdapter 属性保存绑定源的内部适配器。 InternalAdapter 使用 GetInternalAdapter 方法返回绑定源的内部适配器。

        注意：GetInternalAdapter 方法始终返回 nil。后代类必须重写此方法以返回内部适配器。"""
    ItemIndex: int
    """int：指定当前记录的索引。

        ItemIndex 保存绑定源适配器当前所在数据集的当前记录的索引。第一项的索引为 0，第二项的索引为 1，依此类推。如果未选择任何项，则 ItemIndex 的值为 -1。"""
    Members: Object
    """对象：成员"""
    OnCreateAdapter: Callable[[Object,BindSourceAdapter],None]
    """可调用[[对象，BindSourceAdapter]，无]："""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def ApplyUpdates(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Cancel(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def CancelUpdates(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Create(self, AOwner: Component) -> None:
        """TBaseObjectBindSource.Create(AOwner: Component) -> 无

        分配内存并构造安全初始化的组件实例。
        Data.Bind.ObjectScope.TBaseObjectBindSource.Create 继承自 System.Classes.TComponent.Create。该行下面的所有内容均引用System.Classes.TComponent.Create。
        分配内存并构造安全初始化的组件实例。
        所有对象都有一个构造对象的 Create 方法。 TComponent 重新定义了 Create，以便对于组件，Create 还可以：

        建立组件与其所有者的关系，如 AOwner 参数所示。
        将 ComponentStyle 属性设置为 csInheritable，这意味着该组件可以由后代表单类型继承。
        无需显式创建在表单设计器中添加的组件。这些组件在应用程序运行时自动创建，并在应用程序关闭时销毁。
        对于以编程方式创建的组件（即不是在表单设计器中创建的组件），请调用 Create 并将所有者组件作为 AOwner 参数传递。当组件被毁坏时，所有者将对其进行处置。如果组件不被拥有，则在需要销毁时使用 Free。

        提示：将 Self 作为 Owner 参数传递时，请考虑 Self 引用的内容。如果一个组件在其一个方法中创建另一个组件，则 Self 引用第一个组件，而不是正在创建的组件，该组件随后由第一个组件拥有。
        注意：TComponent 构造函数部分是虚拟的，以允许类引用的多态实例化。这对于流系统和表单设计器至关重要。声明新组件的 Create 构造函数时，不要忘记使用 override 指令。"""
    def Delete(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """处置组件及其拥有的组件。

        Data.Bind.ObjectScope.TBaseObjectBindSource.Destroy 继承自 System.Classes.TComponent.Destroy。此行以下的所有内容均引用 System.Classes.TComponent.Destroy。
        处置组件及其拥有的组件。
        不要直接调用 Destroy。请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        切勿在组件自己的事件处理程序之一中显式释放组件，也不要从其拥有或包含的组件的事件处理程序中释放组件。
        要销毁表单，请调用其 Release 方法。 Release 会等待所有表单的事件处理程序以及表单组件的事件处理程序执行完毕，然后再销毁表单。

        注意：表单拥有在设计模式下放置在其上的所有控件和非可视组件。当它被释放时，所有这些组件也会自动释放。默认情况下，所有表单均归全局 Application 对象所有。当应用程序终止时，它会释放全局 Application 对象，从而释放所有表单。对于不是组件的对象，以及使用 nil 所有者创建的组件，请务必在完成对象后调用 Free；否则分配给该对象的内存将丢失，直到应用程序终止。"""
    def Edit(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def First(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def GetFormatLink(self, AFieldName: str) -> IEditFormatLink:
        """TBaseObjectBindSource.GetFormatLink(AFieldName: str) -> IEditFormatLink

        目前没有任何其他信息。"""
    def GetMember(self, AMemberName: str) -> Object:
        """TBaseObjectBindSource.GetMember(AMemberName: str) -> 对象

        返回给定成员名称的成员。
        Data.Bind.ObjectScope.TBaseObjectBindSource.GetMember 继承自 Data.Bind.Components.TBaseBindScopeComponent.GetMember。此行下面的所有内容均引用 Data.Bind.Components.TBaseBindScopeComponent.GetMember。
        返回给定成员名称的成员。
        GetMember 方法返回通过 AMemberName 参数给出的成员名称的范围成员（作为 TObject）。该成员稍后将在生成的绑定表达式中使用。

        提示：该成员对象或其属性可以由绑定表达式引用。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def Insert(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def IsRequired(self, AFieldName: str) -> bool:
        """TBaseObjectBindSource.IsRequired(AFieldName: str) -> bool

        目前没有任何其他信息。"""
    def IsValidChar(self, AFieldName: str, AChar) -> bool:
        """TBaseObjectBindSource.IsValidChar(AFieldName: str, AChar: unicodechr(str)) -> bool

        目前没有任何其他信息。"""
    def Last(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Locate(self, KeyFields: str, KeyValues: Value) -> bool:
    """TBaseObjectBindSource.Locate(KeyFields: str, KeyValues: Value) -> bool

        目前没有任何其他信息。"""
    def Lookup(self, KeyFields: str, KeyValues: Value, ResultFields: str) -> Value:
        """TBaseObjectBindSource.Lookup(KeyFields: str, KeyValues: Value, ResultFields: str) -> Value

        目前没有任何其他信息。"""
    def Next(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Post(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Prior(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Refresh(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BasicAction(Component):
    """TBasicAction 是所有操作对象的祖先类。

    TBasicAction 介绍了操作的基本行为。 TBasicAction 的后代添加了用于包含在操作列表中、进行分类以及专门针对特定客户端（例如控件或菜单​​项）定制的行为的功能。如果要为既不是菜单项也不是控件的对象创建操作，请使用 TBasicAction。"""
    __hash__: ClassVar[None] = ...
    ActionComponent: Any
    """指示导致执行此操作的客户端组件。"""
    OnExecute: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnUpdate: Callable[[Object],None]
    """可调用[[对象]，无]："""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TBasicAction.Create(AOwner: Component) -> None

        实例化并初始化 TBasicAction 对象。
        应用程序无需直接实例化 TBasicAction。当您在操作列表编辑器中选择“新建操作”时，将自动创建操作。
        如果要在运行时创建操作，则应调用 FireMonkey 操作 (FMX.ActnList.TAction) 或 VCL 操作 (Vcl.ActnList.TAction) 或其任何子类的 Create 构造函数。Create 构造函数将 TActionList 组件分配给所创建操作的 ActionList 属性。
        Create 调用继承的构造函数，然后创建所创建操作的客户端列表。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """释放 TBasicAction 对象的实例。

        您不需要调用析构函数来执行操作。动作是一个组件，会被其所有者自动销毁，并在创建时传递给构造函数。如果必须手动销毁操作，请改为调用 Free，这会安全地调用析构函数。"""
    def Execute(self) -> Any:
        """TBasicAction.Execute()

        生成 OnExecute 事件。"""
    def ExecuteTarget(self, Target: Object) -> None:
        """TBasicAction.ExecuteTarget(目标：对象) -> 无

        引入用于在目标客户端组件或控件上调用操作的接口。
        ExecuteTarget 在 TBasicAction 中不执行任何操作。 ExecuteTarget 是在 TBasicAction 中引入的，以便后代可以覆盖它以启动对目标的操作。例如，执行复制的编辑操作可能会将编辑控件的内容复制到剪贴板。"""
    def HandlesTarget(self, Target: Object) -> bool:
        """TBasicAction.HandlesTarget(目标：对象) -> bool

        引入一个接口，用于验证目标组件或控件的类型和状态是否适合该操作。
        HandlesTarget 在 TBasicAction 中不执行任何操作。 HandlesTarget 是在 TBasicAction 中引入的，以便后代可以重写它来检查目标的类型和状态。 HandlesTarget 可以验证与操作相关的目标的任何信息。如果目标满足指定条件，则 HandlesTarget 返回 True，否则返回 False。"""
    def Suspended(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Update(self) -> Any:
        """TBasicAction.Update()

        提供在应用程序空闲时执行集中代码的机会。"""
    def UpdateTarget(self, Target: Object) -> None:
        """TBasicAction.UpdateTarget(目标：对象) -> 无

        引入一个接口，用于在操作更新自身时通知客户端的方法。
        UpdateTarget 在 TBasicAction 中不执行任何操作。 UpdateTarget 是在 TBasicAction 中引入的，以便后代可以覆盖它，以便在操作更新时相应地更新目标。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BasicBindComponent(Component):
    """TBasicBindComponent 的包装器"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Bevel(Control):
    """TBevel 的包装类"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    Parent: Any
    """返回/设置父控件"""
    ParentShowHint: bool
    """bool：指定控件查找的位置以确定是否应显示其帮助提示。

        使用 ParentShowHint 确保窗体上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果 ParentShowHint 为 True，则控件使用其父控件的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性值。
        要仅为窗体上的选定控件提供帮助提示，请将那些应该有帮助提示的控件的 ShowHint 属性设置为 True，ParentShowHint 将自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    Shape: BevelShape
    """斜面形状："""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Style: BevelStyle
    """斜角样式："""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否显示在屏幕上。

        使用 Visible 属性控制运行时控件的可见性。如果 Visible 为 True，则控件显示。如果 Visible 为 False，则控件不可见。
        调用 Show 方法将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子代，Show 和 ShowModal 方法将 Visible 设置为 True，并将表单置于所有打开窗口的前面。
        对于 TTabSheet 子代，Visible 不控制运行时控件的可见性。有关更多信息，请参阅 TabVisible 属性的描述。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TBevel.Create(AOwner: 组件) -> 无

        创建 TControl 的实例。
        调用 Create 构造并初始化 TControl 的实例。但是，您永远不应该尝试实例化 TControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。
        Create 调用父构造函数并初始化控件。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BindComponentDelegate(ContainedBindComponent):
    """是一种包装一个或多个其他绑定组件的绑定组件。"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    OnActivated: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnActivating: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnAssignedValue: Callable[[Object,BindingAssignValueRec,Value],None]
    """可调用[[对象，BindingAssignValueRec，值]，无]："""
    OnAssigningValue: Callable[[Object,BindingAssignValueRec,Value,bool],None]
    """Callable[[Object, BindingAssignValueRec, Value, bool], None]:"""
    OnEvalError: Callable[[Object,Exception],None]
    """可调用[[对象，异常]，无]："""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetDelegates(self, *args, **kwargs) -> Any:
        """获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BindingsList(CustomBindingsList):
    """实现绑定列表组件。 TBindingsList 构建于 TCustomBindingsList 组件之上，并发布可从对象检查器内访问的附加属性。"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Methods: Methods
    """方法：指定可用方法的列表。有关这些方法的更多信息，请阅读 LiveBindings 方法主题。"""
    OutputConverters: OutputConverters
    """OutputConverters：指定可用输出转换器的列表。有关输出转换器的更多信息，请阅读 LiveBindings 输出转换器帮助主题。"""
    Owner: Any
    """返回组件所有者"""
    PromptDeleteUnused: bool
    """bool： 目前没有任何其他信息。"""
    UseAppManager: bool
    """bool：指定绑定列表是否使用全局应用程序管理器进行托管绑定。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BitBtn(WinControl):
    """TBitBtn 是一个按钮控件，其表面可以包含位图。

    位图按钮表现出与按钮控件相同的行为。使用它们从表单和对话框启动操作。
    位图按钮实现指定位图图像及其外观和在按钮上的位置的属性。您可以从预定义的位图按钮样式中进行选择，也可以使用您自己的自定义位图按钮。虽然按钮只能与一个位图关联，但位图（字形属性）可以细分为四个大小相等的部分，这些部分根据按钮的状态显示：向上、向下、禁用和单击。
    TBitBtn 的 Kind 属性提供了常用的按钮，如确定、取消、帮助等。这些预定义的按钮类型具有相应的图形图像和默认行为，因此您可以轻松地将它们添加到您的应用程序中，而无需编写任何代码。
    实现其他类型按钮对用户点击的响应的推荐方法是从操作列表中指定一个操作作为 Action 属性的值。通过设置 Action 属性，您可以使按钮成为操作的客户端，操作将处理更新按钮的属性并在用户单击按钮时进行响应。
    如果您没有使用对特定类型按钮的内置响应或在用户单击按钮时进行响应的操作，则可以通过编写 OnClick 事件处理程序来指定按钮的响应。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Cancel: bool
    """布尔："""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Default: bool
    """布尔：用于指定类的默认实例。"""
    DisabledImageIndex: int
    """整数：用于在控件处于禁用状态时指定显示的图像索引。"""
    DisabledImageName: str
    """字符串：用于在控件处于禁用状态时指定显示的图像名。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Glyph: Bitmap
    """位图：指定位图按钮上显示的位图。

        使用对象检查器中显示为编辑器的“打开”对话框来选择要在按钮上使用的位图文件（具有 .BMP 扩展名），或在运行时指定 TBitmap 对象。
        您可以在单个位图中最多提供四个图像。所有图像必须具有相同的大小并且彼此相邻并排成一行。位按钮根据其状态显示这些图像之一。
        
        如果仅存在一幅图像，则位按钮会尝试通过针对不同状态稍微更改图像来表示其他状态，尽管“向下”状态始终与“向上”状态相同。如果您对结果不满意，可以在位图中提供其他图像。
        如果位图中有多个图像，则必须使用 Num Glyphs 属性指定位图中的图像数量。
        注意：位图的左下像素保留用于“透明”颜色。位图中与左下像素匹配的任何像素都将是透明的。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HotImageIndex: int
    """整数：用于在控件处于鼠标悬停状态时指定显示的图像索引。"""
    HotImageName: str
    """字符串：用于在控件处于鼠标悬停状态时指定显示的图像名。"""
    ImageIndex: int
    """整数：用于指定控件在正常状态下显示的图像索引。"""
    ImageName: str
    """字符串：用于指定控件在正常状态下显示的图像名。"""
    Images: CustomImageList
    """自定义图像列表：用于指定控件显示图像的来源。"""
    Kind: BitBtnKind
    """BitBtnKind：指定位图按钮的类型。

        使用 Kind 指定 TBitBtn 控件的外观及其在用户单击按钮时的响应。包含一组标准按钮，无需添加代码即可按预期运行。但是，如果需要，您可以在按钮事件中编写其他代码。这不包括自定义按钮类型，可以按照您喜欢的任何方式对其进行编程。
        使用此版本的 TBitBtn 时，图像（例如“确定”按钮上的绿色复选标记）出现在按钮上。"""
    Layout: ButtonLayout
    """ButtonLayout：指定图像在位图按钮上的显示位置。

        布局指示文本是出现在按钮左侧 (blGlyphLeft)、按钮右侧 (blGlyphRight)、顶部 (blGlyphTop) 还是底部 (blGlyphBottom)。"""
    Margin: int
    """int：指定图像边缘（在 Glyph 属性中指定）和按钮边缘之间的像素数。

        边距是图像边缘和按钮边缘之间的空间。边缘的格式取决于图像和文本的布局（在布局属性中指定）。例如，如果布局为 blGlyphLeft，则边距出现在图像左边缘和按钮左边缘之间。如果边距为 3，则三个像素将图像和按钮边缘分开。如果边距为 0，则图像和按钮边缘之间没有空间。
        如果 Margin 为 -1（默认值），则图像和文本（在 Caption 属性中指定）居中。图像和按钮边缘之间的像素数等于按钮相对边缘和文本之间的像素数。"""
    ModalResult: int
    """整数："""
    NumGlyphs: int
    """int：表示 Glyph 属性中指定的图形中的图像数量。

        如果位图中有多个图像，则必须使用 NumGlyphs 属性指定位图中的图像数量。默认值为 1。"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    PressedImageIndex: int
    """整数：用于指定控件按下后显示的图像索引。"""
    PressedImageName: str
    """字符串：用于指定控件按下后显示的图像名。"""
    SelectedImageIndex: int
    """整数：用于指定控件选中后显示的图像索引。"""
    SelectedImageName: str
    """字符串：用于指定控件选中后显示的图像名。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    Spacing: int
    """int：确定图像和文本在位图或速度按钮上的显示位置。

        间距决定图像（在 Glyph 属性中指定）和文本（在 Caption 属性中指定）之间的像素数。默认值为 4 像素。
        如果 Spacing 为正数，则其值为图像和文本之间的像素数。如果 Spacing 为 0，则图像和文本之间不会有像素。如果间距为 -1，文本将显示在图像和按钮边缘之间的中心。图像和文本之间的像素数等于文本和与字形相对的按钮边缘之间的像素数。"""
    Style: ButtonStyle
    """ButtonStyle：确定位图按钮的外观。

        Style 指示 TBitBtn 控件是使用现代按钮外观，还是反映 16 位 Windows 按钮的外观。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 目前没有任何其他信息。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WordWrap: bool
    """布尔：用于控制文本是否自动换行"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Click(self, *args, **kwargs) -> Any:
        """模拟鼠标单击，就好像用户单击了按钮一样。

        使用 Click 来模拟鼠标单击。单击执行以下任务：

        如果 Kind 属性的值为 bkClose，则单击将关闭窗体。
        如果 Kind 的值为 bkHelp，则单击将显示使用 HelpContext 属性分配的帮助屏幕。
        触发任何关联的操作，或者，如果没有关联的操作，则执行附加到 OnClick 事件的任何代码。"""
    def Create(self, AOwner: Component) -> None:
        """TBitBtn.Create(AOwner: 组件) -> 无

        构造按钮控件的实例并初始化其值。
        使用 Create 以编程方式实例化按钮。使用表单设计器添加的按钮是自动创建的。
        AOwner 参数指定负责释放按钮的组件（通常是表单）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁位图按钮对象。

        不要直接在应用程序中调用 Destroy。相反，请拨打免费电话。 Free 检查位图按钮不为零，然后调用 Destroy。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Bitmap(Graphic):
    """TBitmap 是 Windows 位图 (HBITMAP) 的封装，包括其调色板 (HPALETTE)。

    位图是一种功能强大的图形对象，用于在内存中创建、操作和存储图像以及将图像作为文件存储在磁盘上。
    TBitmap 包含位图图形的内部图像，并在绘制时自动管理调色板的实现。
    要在画布上绘制位图，请调用 TCanvas 对象的 Draw 或 StretchDraw 方法，并将 TBitmap 作为参数传递。
    创建 TBitmap 的副本非常快，因为复制的是句柄而不是图像。如果修改了图像并且该句柄被多个 TBitmap 对象共享，则在执行修改之前会复制该图像（即写入时复制）。"""
    __hash__: ClassVar[None] = ...
    AlphaFormat: AlphaFormat
    """AlphaFormat：指示 32 位位图中每个像素的保留字节的使用方式。

        使用 AlphaFormat 更改 TBitmap 使用 32 位位图中每个像素的保留字节的方式。"""
    Canvas: Any
    """画布"""
    Handle: Any
    """句柄"""
    HandleType: Any
    """句柄类型"""
    IgnorePalette: Any
    """忽略调色板"""
    MaskHandle: Any
    """蒙版句柄"""
    Monochrome: Any
    """单色"""
    PixelFormat: Any
    """像素格式"""
    ScanLine: Pointer
    """指针："""
    TransparentColor: Any
    """透明颜色"""
    TransparentMode: Any
    """透明模式"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Assign(self, Source: Persistent) -> None:
        """将新的位图图像复制到位图对象。
        Assign 将 Source 中包含的位图图像复制到位图对象。如果Source不是位图，则Assign调用继承的Assign方法，该方法可以从任何知道如何复制到TBitmap对象的类中复制图像。如果需要更改位图，则在进行更改之前复制实际的位图图像（写入时复制）。

        注意：一种类型的对象始终可以分配给相同类型的另一个对象。另外，如果图片的 Graphic 属性是位图，则 Source 可以是 TPicture 类型。"""
    @classmethod
    def CanLoadFromStream(cls, Stream: Stream) -> bool:
        """TBitmap.CanLoadFromStream(Stream: Stream) -> bool

        Vcl.Graphics.TBitmap.CanLoadFromStream 继承自Vcl.Graphics.TGraphic.CanLoadFromStream。该行以下所有内容均引用Vcl.Graphics.TGraphic.CanLoadFromStream。
        当指定的流包含特定 TGraphic 子类的流图像时，CanLoadFromStream 返回 True。
        该方法使用当前流位置，它不会更改当前流位置。"""
    def Create(self, *args, **kwargs) -> Any:
        """实例化位图对象。

        调用 Create 在运行时实例化位图对象。当位图图像加载到 TImage 中时，也会自动调用 Create。
        Create为位图对象分配内存，并调用继承的Create。然后它创建一个 TBitmapImage 作为表示位图的内部图像。\r
        实例化位图对象。
        调用 Create 在运行时实例化位图对象。当位图图像加载到 TImage 中时，也会自动调用 Create。
        Create为位图对象分配内存，并调用继承的Create。然后它创建一个 TBitmapImage 作为表示位图的内部图像。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """释放位图对象的实例。

        Destroy 是 TBitmap 对象的析构函数。
        不要直接在应用程序中调用析构函数。相反，请拨打免费电话。 Free 在调用 Destroy 之前验证位图对象不为 nil。
        Destroy 在调用继承的析构函数之前释放内部位图图像（TBitmapImage 对象）并释放画布。"""
    def Dormant(self) -> Any:
        """释放位图GDI资源"""
    def FreeImage(self) -> Any:
        """释放加载位图的原始数据占用的内存"""
    def HandleAllocated(self, *args, **kwargs) -> Any:
        """指示 TBitmap 对象是否已获取基础 GDI 对象的句柄。

        使用 HandleAllocation 确定 Handle 属性是否设置为 HBITMAP 值。 HandleAllocation 指示基础 GDI 对象是否已创建。使用 HandleAllocation 而不是读取 Handle 属性。当应用程序读取 Handle 属性时，如果基础 GDI 对象尚不存在，它会自动创建一个位图并返回其句柄。"""
    def LoadFromClipboardFormat(self, AFormat: int, AData: int, APalette: int) -> None:
        """TBitmap.LoadFromClipboardFormat(AFormat: int, AData: int, APalette: int) -> None

        将位图从剪贴板加载到位图对象中。
        如果使用 RegisterClipboardFormat 方法向 TPicture 对象注册位图，则调用 LoadFromClipboardFormat。
        LoadFromClipboardFormat 用 AData 参数指向的数据替换当前图像。位图的调色板由 APalette 参数指定。
        以下代码片段显示如何从剪贴板加载位图并使用该图片在表单的画布上绘制。"""
    def LoadFromResourceID(self) -> Any:
        """从资源ID加载"""
    def LoadFromResourceName(self) -> Any:
        """从资源名称加载"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TBitmap.LoadFromStream(Stream: Stream) -> None

        将位图从流加载到位图对象中。
        使用 LoadFromStream 从流加载位图图像。Stream 参数指定从中读取位图图像的流。例如，使用 LoadFromStream 从读取数据集中图形字段的 BLOB 流加载位图图像。"""
    def Mask(self) -> Any:
        """制作蒙板。把当前的位图转为黑白的蒙板，参数 TransparentColor 指定的颜色转为白色 (功能为剪裁)，其他颜色转为黑色 (功能为保留)。
        如果图片显示的时候使用了蒙板，图片对应蒙板的白色部分被剪裁掉，图片对应蒙板的黑色部分留下来了。"""
    def ReleaseHandle(self) -> Any:
        """返回当前位图的句柄，并且放弃使用这个句柄。返回值可以用来提供给其他希望使用和管理这个句柄的程序。"""
    def ReleaseMaskHandle(self) -> Any:
        """返回当前蒙板的句柄，并且放弃使用这个句柄。返回值可以用来提供给其他希望使用和管理这个句柄的程序。"""
    def ReleasePalette(self) -> Any:
        """返回当前调色板的句柄，并且放弃使用这个句柄。返回值可以用来提供给其他希望使用和管理这个句柄的程序。"""
    def SaveToClipboardFormat(self, Format: int, Data: int, APalette: int) -> None:
        """TBitmap.SaveToClipboardFormat(Format: int, Data: int, APalette: int) -> None

        以剪贴板格式创建位图的本地副本。
        使用 SaveToClipboardFormat 将位图复制到剪贴板格式。位图的调色板在 APalette 参数中返回，格式在 AFormat 参数中返回，数据的句柄在 AData 参数中返回。在保存位图之前，应用程序必须使用 RegisterClipboardFormat 方法向 TBitmap 对象注册格式。
        以下代码片段显示如何将位图保存到剪贴板。"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TBitmap.SaveToStream(Stream: Stream) -> 无

        将位图保存到流中。
        使用 SaveToStream 将位图图像写入 Stream 参数指定的流。例如，指定 TBlobStream 对象作为 Stream 参数，以将位图图像保存到数据集中的图形字段。"""
    def SetSize(self, AWidth: int, AHeight: int) -> None:
        """TBitmap.SetSize(AWidth: int, AHeight: int) -> None

        指定位图的大小。
        使用 SetSize 方法设置位图的高度和宽度。这比单独设置高度和宽度具有更好的性能。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BoundLabel(Control):
    """TBoundLabel 是带标签的编辑控件的标签类型。

    TBoundLabel 实现带标签的编辑控件的标签。与 TLabel 等其他标签控件不同，TBoundLabel“属于”带标签的编辑控件（它是编辑控件的子组件）。这意味着绑定标签的所有者是编辑控件而不是表单，并且编辑控件负责加载和保存绑定标签。
    使用 TBoundLabel 的属性来指定带标签的编辑控件的标签的显示方式。例如，您可以使用 Caption 属性来指定标签中显示的文本。您可以使用“对齐”和“布局”属性来指定该标题在标签内的位置。"""
    __hash__: ClassVar[None] = ...
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。
        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。
        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Height: int
    """int：指定控件的垂直大小（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    IsLabelModified: bool
    """bool： 目前没有任何其他信息。"""
    Layout: TextLayout
    """文本布局："""
    Left: int
    """int：指定组件左边缘相对于其父组件的水平坐标。

        使用 Left 属性可以确定控件左侧的开始位置或重新定位控件的左侧。
        如果该控件包含在另一个控件中，则 Left 和 Top 属性是相对于父控件的。如果控件直接包含在窗体中，则属性值与窗体相关。对于表单，Left 属性的值是相对于屏幕（以像素为单位）的。"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    Parent: Any
    """返回/设置控制父级"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowAccelChar: bool
    """布尔："""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Top: int
    """int：指定控件左上角相对于其父控件或包含控件的 Y 坐标（以像素为单位）。

        使用“顶部”定位控件的顶部或将控件重新定位到不同的 Y 坐标。 Top 属性与 Left 属性一样，是控件相对于其容器的位置。因此，如果控件包含在 TPanel 中，则 Left 和 Top 属性是相对于面板的。如果控件直接包含在窗体中，则它是相对于窗体的。对于表单，Top 属性的值是相对于屏幕（以像素为单位）的。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Transparent: bool
    """布尔：用于控制窗体或控件的透明度和背景的透明显示效果。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。

        使用 Width 属性读取或更改控件的宽度。
        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    WordWrap: bool
    """布尔：用于控制文本是否自动换行。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TBoundLabel.Create(AOwner: Component) -> 无

        创建一个新的 TBoundLabel 对象。
        不要创建 TBoundLabel 的实例。绑定标签由它们所属的带标签的编辑控件实例化。
        AOwner 指定充当绑定标签所有者的标签编辑控件。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包装的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BufferedFileStream(FileStream):
    """TBufferedFileStream 为 TFileStream 添加了缓冲支持。

    TBufferedFileStream 优化多个连续的小型读取或写入。但是，TBufferedFileStream 可以用作 TFileStream 的直接替代品，使应用程序能够读取和写入磁盘上的文件。
    
    注意：TBufferedFileStream 不会为随机位置读取或写入或大量读取或写入提供性能增益。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """返回 TObject.ClassName"""
    __bound__: Any
    """如果包装器仍绑定到 实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有 实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AFileName: str, Mode: int, BufferSize: int) -> None:
        """TBufferedFileStream.Create(AFileName: str, Mode: int, BufferSize: int) -> None

        创建 TBufferedFileStream 的实例。
        调用 Create 实例化文件流以读取或写入指定文件。指定文件名和文件打开方式作为参数。
        Mode 参数指示文件的打开方式。模式参数由开放模式和（可能）共享模式或组合在一起组成。
        如果无法打开文件，Create 会引发异常。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TBufferedFileStream 的此实例。"""
    def FlushBuffer(self, *args, **kwargs) -> Any:
        """将尚未写入文件的缓冲数据写入。

        使用缓冲文件流时，调用FlushBuffer将缓冲区中尚未写入的数据写入文件。
        一旦调用 FlushBuffer，缓冲区将保持为空，直到下一次读或写操作。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的 对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果 对象是 ClassName 或继承自 ClassName，则返回 True"""
    def Read(self, Buffer, Count: int) -> int:
        """TBufferedFileStream.Read(Buffer, Count: int) -> int

        从与句柄流关联的资源中将最多 Count 个字节的数据读入缓冲区。
        System.Classes.TBufferedFileStream.Read 继承自 System.Classes.THandleStream.Read。此行下面的所有内容均引用 System.Classes.THandleStream.Read。
        从与句柄流关联的资源中将最多 Count 个字节的数据读入缓冲区。
        当文件中的字节数未知时，使用 Read 从与句柄流关联的资源中读取数据。 Read 从当前位置开始从资源传输最多 Count 个字节，然后将资源中的当前位置前进实际传输的字节数。 Read 返回实际传输的字节数，如果遇到文件结束标记，则该字节数可能小于 Count。
        句柄流的所有其他数据读取方法（ReadBuffer、ReadComponent）都调用 Read 来执行实际读取。"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def Seek(self, Offset: int, Origin: SeekOrigin) -> int:
        """TBufferedFileStream.Seek(偏移量：int，原点：SeekOrigin) -> int

        重置句柄流的当前位置。
        System.Classes.TBufferedFileStream.Seek 继承自 System.Classes.THandleStream.Seek。此行以下的所有内容均引用 System.Classes.THandleStream.Seek。
        重置句柄流的当前位置。
        使用 Seek 将与句柄流关联的资源中的当前位置移动指定的偏移量。 Seek 允许应用程序读取或写入资源中的特定位置。
        Origin 参数指示如何解释 Offset 参数。原点应该是以下值之一：
        soBeginning 偏移量是从资源的开头开始的。 Seek 移动到 Offset 位置。偏移量必须 >= 0。
        soCurrent 偏移量是从资源中的当前位置开始的。寻找移动到位置+偏移。
        soEnd 偏移量是从资源末尾开始的。偏移量必须 <= 0 以指示文件末尾之前的字节数。
        或者，您也可以使用 TSeekOrigin 及其值来指示从何处开始查找操作。
        Seek 返回 Position 属性的新值，即资源中的新当前位置。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def Write(self, Buffer, Count: int) -> int:
        """TBufferedFileStream.Write(Buffer, Count: int) -> int

        将 Count 个字节从 Buffer 写入资源中的当前位置。
        System.Classes.TBufferedFileStream.Write 继承自 System.Classes.THandleStream.Write。此行以下所有内容均引用 System.Classes.THandleStream.Write。
        将 Count 个字节从 Buffer 写入资源中的当前位置。
        使用 Write 从当前位置开始将 Count 个字节写入与句柄流关联的资源。写入资源后，Write 将当前位置前进写入的字节数，并返回写入的字节数。
        句柄流的所有其他数据写入方法（WriteBuffer、WriteComponent）都调用 Write 进行实际写入。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写入整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Button(WinControl):
    """TButton 是一个按钮控件。

    使用 TButton 在窗体上放置一个标准按钮。 TButton 引入了几个属性来控制其在对话框设置中的行为。用户选择按钮控件来启动操作。
    要使用显示位图而不是标签的按钮，请使用 TBitBtn。要使用可保持按下位置的按钮，请使用 TSpeedButton。
    Caption 属性可用于定义控件的快捷键。

    注意：由于 TButton 标题始终居中，因此更改 BiDiMode 对齐方式没有任何效果。
    注意：TButton 不支持更改标题颜色。相反，请使用可使用 Font 属性更改标题颜色的按钮类型，例如 TSpeedButton 或 TBitBtn。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Cancel: bool
    """布尔："""
    Caption: str
    """str：指定用于向用户标识控件的文本字符串。

        使用 Caption 指定标记控件的文本字符串。
        要为标记组件的 Caption 中的字符加下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        注意：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。所使用的属性取决于控件的类型。通常，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件（如 TButton），无法更改 Caption 的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型（如 TSpeedButton 或 TBitBtn），而不是 TButton。无论是 TSpeedButton 还是 TBitBtn，您都可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，可以在运行时或设计时在 Caption 属性内声明一个 HTML 标记。"""
    CommandLinkHint: str
    """字符串："""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Default: bool
    """布尔：用于指定类的默认实例。"""
    DisabledImageIndex: int
    """整数：用于在控件处于禁用状态时指定显示的图像索引。"""
    DisabledImageName: str
    """字符串：用于在控件处于禁用状态时指定显示的图像名。"""
    DisabledImages: CustomImageList
    """自定义图像列表："""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。
        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。
        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DropDownMenu: PopupMenu
    """弹出菜单：下拉菜单"""
    ElevationRequired: bool
    """布尔：用于指示一个应用程序或进程是否需要以管理员权限（提升权限）来运行。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。
        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。
        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HotImageIndex: int
    """整数：用于在控件处于鼠标悬停状态时指定显示的图像索引。"""
    HotImageName: str
    """字符串：用于在控件处于鼠标悬停状态时指定显示的图像名。"""
    ImageAlignment: ImageAlignment
    """图像对齐："""
    ImageIndex: int
    """整数：用于指定控件在正常状态下显示的图像索引。"""
    ImageMargins: ImageMargins
    """图像边距："""
    ImageName: str
    """字符串：图像名"""
    Images: CustomImageList
    """自定义图像列表：用于指定控件显示图像的来源。"""
    ModalResult: int
    """整数：这个属性允许你指定按钮在被点击时返回给调用者的模态结果。主要用于模态对话框，模态对话框会阻止用户与程序的其他部分进行交互，直到对话框关闭为止。"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnDropDownClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[Object，unicodechr（str）]，None]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    PressedImageIndex: int
    """整数：用于指定控件按下后显示的图像索引。"""
    PressedImageName: str
    """字符串：用于指定控件按下后显示的图像名。"""
    SelectedImageIndex: int
    """整数：用于指定控件选中后显示的图像索引。"""
    SelectedImageName: str
    """字符串：用于指定控件选中后显示的图像名。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    Style: CustomButton.TButtonStyle
    """自定义Button.TButtonStyle："""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    StylusHotImageIndex: int
    """整数：用于指定当鼠标悬停在工具栏按钮上时显示的图像的索引。"""
    StylusHotImageName: str
    """字符串：用于指定当鼠标悬停在工具栏按钮上时显示的图像的名。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WordWrap: bool
    """布尔：用于控制文本是否自动换行。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以接收焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class BytesStream(MemoryStream):
    """TBytesStream 是以字节存储数据的流。

    使用 TBytesStream 将数据以字节形式存储在内存缓冲区中。
    内存流作为中间对象非常有用，它可以保存信息以及从另一个存储介质读取信息或将其写入到另一个存储介质。它们提供了一种有用的格式来比较流的内容，或操作存储在不易访问的介质中的数据。"""
    __hash__: ClassVar[None] = ...
    Bytes: tuple
    """tuple：指定存储的数据。

        Bytes 属性返回存储数据的缓冲区。使用 Size 属性查找缓冲区中的实际数据量。"""
    ClassName: Any
    """返回 TObject.ClassName"""
    __bound__: Any
    """如果包装器仍绑定到 组件 实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有 组件 实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, ABytes: tuple) -> None:
        """TBytesStream.Create(ABytes: tuple) -> None

        构造一个对象并在首次使用该对象之前初始化其数据。
        System.Classes.TBytesStream.Create继承自System.TObject.Create。该行以下的所有内容均引用System.TObject.Create。
        构造一个对象并在首次使用该对象之前初始化其数据。
        Create 构造一个对象。对象的用途、大小和行为差异很大。 TObject 定义的 Create 构造函数分配内存但不初始化数据。
        后代对象通常定义一个构造函数来创建特定类型的对象并初始化其数据。

        注意：如果异常从构造函数中逃逸，则会调用对象的析构函数来清理失败的实例。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的 组件 对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果 组件 对象是 ClassName 或继承自 ClassName，则返回 True"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        一次调用即可设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写入整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Canvas(Persistent):
    """TCanvas 为必须渲染自己图像的对象提供了一个抽象绘图空间。

    使用 TCanvas 作为绘制自身图像的对象的绘图表面。标准窗口控件（例如编辑控件或列表框）不需要画布，因为它们是由系统绘制的。
    TCanvas 提供了有助于通过以下方式创建图像的属性、事件和方法：
    
    指定要使用的画笔、笔和字体的类型。
    绘制和填充各种形状和线条。
    书写文字。
    渲染图形图像。
    启用对当前图像中的变化的响应。
    TCanvas 有两个后代：TControlCanvas 和 TMetafileCanvas，它们有助于绘制控件图像和为对象创建图元文件图像。"""
    __hash__: ClassVar[None] = ...
    Brush: Brush
    """Brush：确定填充图形形状和背景的颜色和图案。

        设置 Brush 属性可指定绘制背景或填充图形形状时使用的颜色和图案。Brush 的值是 TBrush 对象。设置 TBrush 对象的属性可指定填充画布上的空白时使用的颜色和图案或位图。
        注意：设置 Brush 属性会分配指定的 TBrush 对象，而不是替换当前的 TBrush 对象。"""
    CanvasOrientation: Any
    """确定画布的方向是从左到右还是从右到左。"""
    ClipRect: Any
    """指定剪切矩形的边界。"""
    CopyMode: int
    """int：指定如何将图形图像复制到画布上。

        设置 CopyMode 以影响图形图像绘制到画布上的方式。当使用 CopyRect 方法从另一个画布复制图像时，将使用 CopyMode。当 TBitmap 对象将自己绘制到画布上时，也会使用 CopyMode。
        使用 CopyMode 可以在渲染图像时实现多种效果。通过使用不同的 CopyMode 组合多个图像，实现合并图像和使位图的一部分透明等特殊效果。"""
    Font: Font
    """Font：指定在图像上书写文本时使用的字体。

        设置 Font 以指定在图像上书写文本时使用的字体。Font 的值是 T Font 对象。设置 T Font 对象的属性以指定字体的字体、颜色、大小、样式以及字体的任何其他方面。
        只有当您拥有所有者绘制的列表框（您需要在其中使用画布）时，Canvas.Font 属性才保证等于 Font 属性。即使在这种情况下，也只有在第一个绘制消息正在进行时才保证等于 Font 属性。如果您在所有者绘制事件中使用画布，则一切都应按预期工作。出于超出其预期用途范围的原因使用画布可能会产生不可预测的结果。
        注意：设置 Font 属性会分配指定的 T Font 对象，而不是替换当前的 T Font 对象。"""
    Handle: Any
    """指定此画布的句柄。"""
    LockCount: Any
    """表示画布被锁定以防止其他线程干扰的次数。"""
    OnChange: Any
    """当图像刚刚改变时发生。"""
    OnChanging: Any
    """在对图像进行更改之前发生。"""
    Pen: Pen
    """笔：指定画布用于绘制线条和勾勒形状的笔类型。

        设置笔以指定用于在图像中绘制线条和轮廓形状的笔。 Pen的值是一个TPen对象。设置 TPen 对象的属性以指定画笔的颜色、样式、宽度和模式。
        注意：设置Pen属性会分配指定的TPen对象，而不是替换当前的TPen对象。"""
    PenPos: Any
    """指定笔的当前绘图位置。"""
    TextFlags: Any
    """指定如何将文本写入画布。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def AngleArc(self, X: int, Y: int, Radius: int, StartAngle: float, SweepAngle: float) -> None:
        """TCanvas.AngleArc(X: int, Y: int, Radius: int, StartAngle: float, SweepAngle: float) -> None

        沿着由参数定义的圆的周长在图像上绘制圆弧。
        AngleArc 方法从当前位置绘制一条线到圆弧的起点，然后绘制一条逆时针圆弧到圆弧端点。圆弧穿过圆心位于 (X,Y) 且半径为 Radius 的圆的周长。圆弧是从 StartAngle 开始，沿圆的周长逆时针绘制，扫描角度为 SweepAngle。
        如果扫角大于360度，则绘制整个圆并多次绘制部分圆弧。
        当前位置将更新为圆弧端点。"""
    def Arc(self) -> Any:
        """用于在画布上绘制圆弧"""
    def ArcTo(self, X1: int, Y1: int, X2: int, Y2: int, X3: int, Y3: int, X4: int, Y4: int) -> None:
        """TCanvas.ArcTo(X1: int, Y1: int, X2: int, Y2: int, X3: int, Y3: int, X4: int, Y4: int) -> None

        沿着由指定矩形界定的椭圆的周边在图像上绘制圆弧。
        Vcl.Graphics.TCanvas.ArcTo继承自Vcl.Graphics.TCustomCanvas.ArcTo。该行下面的所有内容均引用Vcl.Graphics.TCustomCanvas.ArcTo。
        沿着由指定矩形界定的椭圆的周边在图像上绘制圆弧。
        重写 ArcTo 方法（或者仅使用子孙类中的 Arcto）来实现使用当前 Pen 绘制椭圆曲线。该圆弧穿过以点 (X1,Y1) 和 (X2,Y2) 为界的椭圆的周长。弧线是沿着椭圆的周长，逆时针，从起点到终点绘制的。起点由椭圆与由椭圆中心和 (X3,Y3) 定义的直线的交点定义。终点由椭圆与由椭圆中心和 (X4, Y4) 定义的直线的交点定义。
        此过程使用当前笔绘制线条，并将 PenPos 的值更新为最后一个端点的值。"""
    def BrushCopy(self) -> Any:
        """用于将画布上指定矩形区域的图案或图像拷贝到另一个矩形区域，同时可以指定透明颜色用于透明处理。这个函数可以用于在画布上实现图案填充、图像拼合等操作。"""
    def Chord(self) -> Any:
        """用于在画布上绘制从起始角度到结束角度的弦（Chord）。
        弦是由一个椭圆的边界矩形、起始角度和结束角度定义的。与TCanvas.Arc函数类似，但不同之处在于，TCanvas.Chord函数会封闭起始角度和结束角度之间的区域，形成一个封闭的扇形，类似于一个圆环的切片。"""
    def CopyRect(self) -> Any:
        """用于将一个画布（源矩形）上的图像拷贝到另一个画布（目标矩形）上。"""
    def Create(self, *args, **kwargs) -> Any:
        """创建 TCanvas 的实例。

        调用 Create 在运行时实例化 TCanvas 对象。Create 为 TCanvas 实例分配内存，并为 Font、Brush 和 Pen 属性创建 TFont、TBrush 和 TPen 对象。Create 还将 CopyMode 初始化为 cmSrcCopy。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCanvas 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。"""
    def Draw(self) -> Any:
        """TCanvas.Draw()"""
    def DrawFocusRect(self) -> Any:
        """TCanvas.DrawFocusRect()"""
    def Ellipse(self) -> Any:
        """TCanvas.Ellipse()"""
    def FillRect(self) -> Any:
        """TCanvas.FillRect()"""
    def FloodFill(self) -> Any:
        """TCanvas.FloodFill()"""
    def FrameRect(self) -> Any:
        """TCanvas.FrameRect()"""
    def GetPixel(self, x, y) -> TColor:
        """TCanvas.GetPixel(x, y) -> TColor

        这与 TCanvas.Pixels[x, y] 相同。\r返回当前 ClipRect 内像素的颜色。"""
    def HandleAllocated(self, *args, **kwargs) -> Any:
        """指示 TCanvas 对象是否已获取设备上下文的句柄。

        使用 HandleAllocation 确定 Handle 属性是否设置为 HDC 值。 HandleAllocation 指示画布是否已获取设备上下文。使用 HandleAllocation 而不是读取 Handle 属性。当应用程序读取 Handle 属性时，如果之前未设置该属性，TCanvas 会自动分配一个新的设备上下文并返回其句柄。"""
    def LineTo(self) -> Any:
        """用于在画布上绘制一条从当前绘图位置到指定位置的直线。"""
    def Lock(self) -> Any:
        """TCanvas 类提供了 Lock 和 Unlock 方法，用于在多线程环境下对画布进行安全的操作。
        这些方法可以确保在同一时间只有一个线程可以对画布进行绘制操作，从而避免多线程访问导致的数据竞争和不一致问题。"""
    def MoveTo(self) -> Any:
        """用于设置当前绘图位置（也称为“画笔位置”或“光标位置”），但不绘制任何内容。这相当于移动画笔到指定的坐标，以便后续的绘图操作从这个位置开始。"""
    def Pie(self) -> Any:
        """用于在画布上绘制一个扇形（部分圆形）或椭圆弧。"""
    def PolyBezier(self) -> Any:
        """用于在画布上绘制一条或多条贝塞尔曲线。"""
    def PolyBezierTo(self) -> Any:
        """用于绘制贝塞尔曲线。"""
    def Polygon(self) -> Any:
        """用于在画布上绘制多边形。这个函数通过一组顶点坐标来定义多边形，并且会自动将最后一个顶点与第一个顶点连接，从而闭合多边形。 
        Polygon 函数不仅可以绘制简单的三角形或矩形，还可以绘制任意形状的复杂多边形。"""
    def Polyline(self) -> Any:
        """用于在画布上绘制一系列连接的直线段。与 Polygon 函数不同的是， Polyline 不会自动闭合图形，即它不会将最后一个点与第一个点相连。"""
    def Rectangle(self) -> Any:
        """用于在画布上绘制矩形。该函数使用当前的画笔 (Pen) 进行边框绘制，并使用当前的刷子 (Brush) 对矩形区域进行填充。"""
    def Refresh(self) -> Any:
        """刷新"""
    def RoundRect(self) -> Any:
        """用于在画布上绘制具有圆角的矩形。这个函数可以绘制一个具有指定位置、大小和圆角半径的矩形。"""
    def SetPixel(self, x, y, color) -> Any:
        """用于在画布上设置指定坐标处的像素颜色。"""
    def StretchDraw(self) -> Any:
        """用于在画布上绘制指定大小的图像，并可以对图像进行拉伸或缩放以适应指定的区域。"""
    def TextExtent(self) -> Any:
        """用于测量指定文本在当前画布字体设置下所占用的宽度和高度。它返回一个 TSize 结构，包含文本的宽度和高度信息。"""
    def TextHeight(self) -> Any:
        """用于测量指定文本在当前画布字体设置下所占用的高度。与 TCanvas.TextExtent 返回包含宽度和高度的 TSize 结构不同，TextHeight 仅返回文本的高度。"""
    def TextOut(self) -> Any:
        """用于在画布上绘制文本。这个方法可以在指定的位置将给定的字符串绘制到当前画布上。"""
    def TextRect(self) -> Any:
        """用于在画布上绘制文本，同时可以指定文本绘制的矩形区域，并控制文本在该区域内的对齐方式。"""
    def TextWidth(self) -> Any:
        """用于获取指定文本在当前字体和字号下的宽度（以像素为单位）。"""
    def TryLock(self) -> Any:
        """用于尝试锁定画布，这些方法可以确保在同一时间只有一个线程可以对画布进行绘制操作，从而避免多线程访问导致的数据竞争和不一致问题。"""
    def Unlock(self) -> Any:
        """用于解锁画布，这些方法可以确保在同一时间只有一个线程可以对画布进行绘制操作，从而避免多线程访问导致的数据竞争和不一致问题。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CheckBox(WinControl):
    """TCheckBox 代表一个可以打开（选中）或关闭（未选中）的复选框。

    TCheckBox 组件为用户提供一个选项。用户可以选中该框来选择该选项，或取消选中该框以取消选择该选项。
    Caption 属性可用于定义控件的快捷键。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中响应用户命令。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以调出操作列表编辑器。使用其上下文菜单在编辑器中添加操作。使用操作列表编辑器添加操作后，它们将显示在对象检查器中 Action 属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: LeftRight
    """左右：用于控制控件或元素在其容器中的对齐方式。"""
    AllowGrayed: bool
    """布尔：它允许设置复选框的三种状态：选中（Checked）、未选中（Unchecked）和未确定状态（Grayed）。这在需要表示某个选项不完全是是或否的情况下特别有用。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Checked: bool
    """布尔：用于表示复选框的选中状态。这个属性决定了复选框是否被选中或取消选中。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。
        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。
        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。
        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放停靠操作。

        使用 DragMode 控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可在运行时禁用拖放或拖放停靠功能。通过将 DragMode 设置为 dmAutomatic，可启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。
        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。
        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的底层 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """可调用[[Object, Object, int, int, DragState, bool], None]："""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。
        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 分配一个值，以便在用户选择控件并单击鼠标右键时显示​​弹出菜单。如果 TPopupMenu 的 AutoPopup 属性为 True，则弹出菜单会自动显示。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    State: CheckBoxState
    """复选框状态："""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。
        
        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WordWrap: bool
    """布尔："""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Collection(Persistent):
    """TCollection 是 TCollectionItem 对象的容器。

    每个 TCollection 都包含一组 TCollectionItem 后代。 TCollection 在其 Items 数组中维护集合项的索引。 Count 属性包含集合中的项目数。使用“添加”和“删除”方法将项目添加到集合中以及从集合中删除项目。
    从 TCollection 派生的对象可以包含从 TCollectionItem 派生的对象。因此，对于每个 TCollection 后代，都有一个相应的 TCollectionItem 后代。
    使用 TCollection 和 TCollectionItem 后代的控件具有保存集合的已发布属性。 （例如，TStatusBar 的 Panels 属性包含 TStatusPanels。）可以从对象检查器调用标准属性编辑器（通常称为集合编辑器）来编辑集合中的项目。

    注意：当编写由另一个控件使用的 TCollection 后代时，请务必重写该集合的受保护的 GetOwner 方法，以便后代类实例可以出现在对象检查器中。
    注意：TCollection 有 TOwnedCollection 后代，用于维护有关其所有者的信息。 TOwnedCollection 实现 GetOwner 方法。因此，从 TOwnedCollection 派生的类不需要添加任何内容即可出现在对象检查器中。"""
    __hash__: ClassVar[None] = ...
    Capacity: int
    """int：提供对内部 TList.Capacity 属性的访问。

        Capacity 属性指定 TList 对象维护的指针数组的分配大小。此值设置为列表需要包含的指针数量。"""
    Count: Any
    """返回集合项的数量"""
    ItemClass: CollectionItemClass
    """CollectionItemClass：指示集合项目所属的类。

        ItemClass 是集合中的项目所属的类（从 TCollectionItem 派生）。例如，在 TCollection 后代 THeaderSections 的实例中，ItemClass 属性的值为 THeaderSection。"""
    Items: Any
    """返回集合项的迭代器"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Add(self) -> Any:
        """TCollection.Add()

        将集合项添加到集合中"""
    def Assign(self, Source: Persistent) -> None:
        """将 Source 集合的内容复制到当前对象。
        使用Assign 将一个TCollection 实例的内容复制到另一个TCollection 实例。 Assign 方法从目标集合（执行该方法的对象）中删除所有项目，然后将每个项目的副本添加到源集合的 Items 数组中。
        源是另一个对象（通常是另一个集合），其中包含替换该集合的项目的项目。"""
    def BeginUpdate(self) -> Any:
        """TCollection.BeginUpdate()

        暂停屏幕重绘。"""
    def Clear(self) -> Any:
        """TCollection.Clear()

        清除所有收集项目"""
    def ClearAndResetID(self, *args, **kwargs) -> Any:
        """作用是清空集合中的所有项，并重新设置每个项的 ID。"""
    def Create(self, ItemClass: CollectionItemClass) -> None:
        """TCollection.Create(ItemClass: CollectionItemClass) -> 无

        创建并初始化一个集合。
        调用 Create 在运行时实例化 TCollection 对象。通常，TCollection 后代由使用集合来实现属性的组件创建。
        ItemClass 标识必须用于表示集合中的项目的 TCollectionItem 后代。 Add 方法使用此类来创建适当类型的项目。"""
    def Delete(self, Index) -> Any:
        """TCollection.Delete(索引)

        从集合中删除单个项目。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁集合及其中的每个项目。

        Destroy 使用 Clear 方法释放 Items 数组中引用的每个项目，然后销毁集合本身。"""
    def EndUpdate(self) -> Any:
        """TCollection.EndUpdate()

        重新启用屏幕重绘。"""
    def FindItemID(self, ID: int) -> CollectionItem:
        """TCollection.FindItemID(ID: int) -> CollectionItem

        返回具有指定 ID 的项目。
        FindItemID 方法返回集合中的项目，该项目的 ID 属性作为参数传递给它。如果没有项目具有指定的 ID，FindItemID 将返回 空。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TCollection 枚举器。

        GetEnumerator 返回 TCollectionEnumerator 引用，该引用枚举集合中的所有项目。
        为此，请在 While MoveNext do 循环中调用 TCollectionEnumerator GetCurrent 方法。"""
    def GetItem(self, Index: int) -> CollectionItem:
        """TCollection.GetItem(Index: int) -> CollectionItem

        返回集合中的指定项目。
        GetItem 是 Items 属性的受保护读取实现。"""
    def GetNamePath(self, *args, **kwargs) -> Any:
        """返回对象检查器使用的字符串。

        如果集合没有所有者，则 GetNamePath 返回集合的实际（运行时）类型的名称。
        如果该集合已被拥有，则 GetNamePath 返回所有者的名称，后跟一个点（如果适用）以及持有该集合的所有者的属性的名称。例如，GetNamePath 可能返回“TreeView1.Items”。
        注意：要使集合拥有所有者，它必须重写 GetOwner 方法。"""
    def Insert(self, Index) -> Any:
        """TCollection.Insert（索引）

        将新的集合项插入集合中的 Index 位置"""
    def Owner(self, *args, **kwargs) -> Any:
        """返回集合的所有者。

        调用 Owner 来获取对拥有该集合的对象的引用。通常，所有者使用集合来实现其属性之一。"""
    def SetItem(self, Index: int, Value: CollectionItem) -> None:
        """TCollection.SetItem（索引：int，值：CollectionItem）->无

        将另一个项目的属性复制到集合中的指定项目。
        SetItem 是 Items 属性的受保护写入实现。它调用Index指定的项目的Assign方法，以便将Value指定的项目的属性复制到该项目。"""
    def Sort(self, AComparer) -> None:
        """作用是对集合中的项进行排序。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ColorBox(CustomListControl):
    """TColorBox 表示一个组合框，让用户选择颜色。

    使用 TColorBox 为用户提供一个下拉组合框，从中选择颜色。使用 Style 属性指定颜色框应列出哪些颜色。每种颜色都显示在用相应颜色绘制的小方块旁边。
    使用 Selected 属性访问用户选择的颜色。Colors 属性提供对整个颜色列表的访问，而 ColorNames 属性列出它们的名称。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoComplete: bool
    """布尔：用于控制编辑框的自动完成行为。具体来说，AutoComplete 属性允许你定义编辑框在用户输入时是否自动显示已经输入过的历史记录或建议的内容。"""
    AutoDropDown: bool
    """布尔：用于下拉列表框控制是否在用户点击下拉按钮时自动弹出下拉列表框。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        使用 BiDiMode 可使控件在应用程序运行在从右到左而不是从左到右阅读的区域设置中时自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DefaultColorColor: int
    """整数：指定 clDefault 的颜色框中显示的颜色。
        设置DefaultColorColor以指示在绘制 clDefault 图标时颜色框应使用什么颜色。仅当Style属性包含 cbSystemColors 和 cbIncludeDefault 时，此属性才会影响颜色框。

        注意： DefaultColorColor仅影响 clDefault 在颜色框中的显示方式。将 clDefault 分配给控件时，该控件将确定其自己的默认颜色。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DropDownCount: int
    """整数：它指定了下拉列表框中可见的项的数量。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    ItemHeight: int
    """整数：项高度"""
    NoneColorColor: int
    """整数：指定 clNone 的颜色框中显示的颜色。
        设置NoneColorColor以指示在绘制 clNone 图标时颜色框应使用什么颜色。仅当Style属性包含 cbSystemColors 和 cbIncludeNone 时，此属性才会影响颜色框。

        注意： NoneColorColor仅影响 clNone 在颜色框中的显示方式。当您将 clNone 分配给控件时，控件将确定如何解释 clNone。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnCloseUp: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnDropDown: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnGetColors: Callable[[CustomColorBox,Strings],None]
    """可调用[[CustomColorBox，字符串]，无]："""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """可调用[[Object，int，ShiftState]，无]："""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnSelect: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[Object，DragObject]，None]："""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件查找其颜色信息的位置。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件都具有统一的外观。例如，如果窗体中所有控件的 ParentColor 为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值发生变化时，ParentColor 会自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟到父级的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，表示此组件的 DoubleBuffered 属性被父级的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """指明了控件的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    Selected: int
    """整数：用于表示控件或列表中当前选择的项"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    Style: ColorBoxStyle
    """彩盒样式："""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：
        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ComboBox(CustomListControl):
    """TComboBox 将编辑框与可滚动列表结合在一起。
    TComboBox 组件是一个带有可滚动下拉列表的编辑框。用户可以从列表中选择一个项目或直接在编辑框中键入。

    注意：TComboBox 中按钮的宽度等于 Windows 使用的滚动条的宽度。此宽度取决于用户选择的配色方案（通过右键单击桌面，选择“属性”，然后选择“外观”）。如果您仔细调整组合框的大小以使所有文本都可见，那么在不同颜色方案下运行的用户可能会发现文本被按钮遮挡。一种解决方案是在开发应用程序时将滚动条设置宽。大多数配色方案使用最多 21 像素宽的滚动条。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoCloseUp: bool
    """布尔：决定了下拉框（下拉列表）何时会自动关闭。"""
    AutoComplete: bool
    """布尔：控制着用户在输入文本时的自动完成行为。"""
    AutoCompleteDelay: int
    """整数：用于设置自动完成功能的延迟时间。"""
    AutoDropDown: bool
    """布尔：制着下拉列表框是否在获取焦点时自动弹出。"""
    AutoDropDownWidth: bool
    """布尔：控制着下拉列表框的宽度是否根据 ComboBox 控件的内容自动调整。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜面的切割。

        使用 BevelOuter 指定外斜面是凸起、降低还是平坦的外观。
        外斜面立即出现在边框内和内斜面的外部。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    CanUndoSelText: bool
    """布尔："""
    CharCase: EditCharCase
    """编辑字符大小写："""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放停靠操作。

        使用 DragMode 控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可在运行时禁用拖放或拖放停靠功能。通过将 DragMode 设置为 dmAutomatic，可启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DropDownCount: int
    """整数：用于设置下拉列表框中可见的项数目。"""
    DropDownWidth: int
    """整数：用于设置下拉列表框的宽度。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。某些禁用的控件会变暗（例如：按钮、复选框、标签），而其他控件（容器控件）只会失去其功能而不会改变其外观。如果将 Enabled 设置为 False，则控件会忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    ExtendedUI: bool
    """布尔：用于控制 ComboBox 的外观样式和行为的扩展特性。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定使用哪个 IME 来转换击键。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量获取当前安装的 IME 列表。
        如果 ImeName 指定不可用的 IME，则将使用应用程序启动时处于活动状态的 IME。不会产生异常。

        注意：ImeName 的值仅在控件获得焦点时才生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    ItemHeight: int
    """整数：用于设置下拉列表框中每个项的高度。"""
    ItemIndex: int
    """整数：用于获取或设置当前选定项在下拉列表框中的索引位置。"""
    Items: Strings
    """字符串列表：是一个 TStringList 类型的属性，用于管理和操作 ComboBox 中的选项列表。"""
    MaxLength: int
    """整数：用于限制用户在下拉列表框中输入的文本的最大长度。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnCloseUp: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """可调用[[Object, Object, int, int, DragState, bool], None]："""
    OnDrawItem: Callable[[WinControl,int,Rect,OwnerDrawState],None]
    """Callable[[WinControl, int, Rect, OwnerDrawState], None]:"""
    OnDropDown: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMeasureItem: Callable[[WinControl,int,int],None]
    """可调用[[WinControl, int, int], None]："""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnSelect: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    Sorted: bool
    """布尔：用于控制下拉列表中项的排序方式。"""
    Style: ComboBoxStyle
    """组合框样式："""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Text: str
    """str：包含与控件关联的文本字符串。

        使用 Text 属性读取控件的 Text 或为 Text 值指定新字符串。默认情况下，Text 是控件名称。对于编辑控件和备忘录，文本出现在控件内。对于组合框，文本是组合框的编辑控制部分的内容。

        注意：显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用哪个属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。"""
    TextHint: str
    """字符串：用于设置在用户未输入文本时显示的占位符文本。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。Touch 指定 TTouchManager 类型的类。
        Touch 用于：

        关联 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择要与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        为交互式或平板电脑手势指定一组选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Component(Persistent):
    """TComponent 是所有组件类的共同祖先。

    TComponent 是所有组件的基类。组件是具有以下功能的持久对象：
    IDE 集成。能够显示在 IDE 调色板上并在表单设计器中进行操作。
    所有权。管理其他组件的能力。如果组件 A 拥有组件 B，则当 A 被销毁时，A 负责销毁 B。
    流媒体和归档。继承自 TPersistent 的持久性功能的增强。
    COM支持。可以使用 Windows 产品提供的向导将组件转换为 ActiveX 控件或其他 COM 对象。组件可以充当 COM 对象的包装器。
    注意：COM 功能存在于 TComponent 的所有实现中，包括那些为与 OS X 兼容而提供的功能。但是，COM 功能仅适用于 Windows，不能在多设备（跨平台）应用程序中使用。
    TComponent 不提供任何用户界面或显示功能。这些功能由直接从 TComponent 派生的两个类提供：

    FMX.Types 单元中的 TControl 是使用 FireMonkey (FMX) 框架构建的应用程序中可视组件的基类。
    TControl 位于 Vcl.Controls 单元中，是纯 Windows (VCL) 应用程序中可视化组件的基类。
    注意：只有 FMX.Types 单元和其他 FireMonkey 特定单元可以与 OS X 应用程序一起使用。也就是说，您不能在多设备应用程序中使用 VCL 单元。
    在运行时可见的组件有时称为可视组件。其他在运行时永远不可见的组件有时称为非可视组件。然而，更常见的做法是将可视组件称为控件，将非可视组件简称为组件。
    不要创建 TComponent 的实例。声明可出现在组件选项板上并可在表单设计器中使用的非可视组件时，请使用 TComponent 作为基类。 TComponent 的属性和方法提供了后代类继承的基本行为以及组件可以重写以自定义其行为的行为。"""
    __hash__: ClassVar[None] = ...
    ComObject: IInterface
    """IInterface：指定组件实现的接口引用。

        使用 ComObject 将组件实现的 COM 接口分配给接口引用。此属性由支持 COM 接口的组件使用。
        如果该组件不是 COM 组件的包装器，则尝试读取 ComObject 会导致 TComponent 引发 EComponentError 异常。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    ComponentIndex: int
    """int：指示组件在其所有者的 Components 属性数组中的位置。

        当迭代组件所有者的组件列表以对拥有的组件执行操作时，请使用 ComponentIndex。它可以与 ComponentCount 结合使用。 ComponentIndex 在内部用于迭代分配过程。

        注意：列表中第一个组件的 ComponentIndex 值为 0，第二个组件的值为 1，依此类推。因此，当将 ComponentIndex 与 ComponentCount 一起使用时，请注意 ComponentCount 始终比最高组件索引多 1。"""
    ComponentState: ComponentState
    """ComponentState：描述组件的当前状态，指示组件何时需要避免某些操作。

        ComponentState 是在 TComponentState 类型中定义的一组常量。
        组件使用 ComponentState 属性来检测允许或禁止某些类型的操作的状态。例如，如果组件需要避免在设计时在运行时执行的某些行为，则它可以检查 csDesigning 标志。
        ComponentState 是只读的，其标志会在适当的时候自动设置。"""
    ComponentStyle: ComponentStyle
    """ComponentStyle：控制组件的行为。

        ComponentStyle 控制组件如何与流系统和对象检查器交互。 ComponentStyle 是只读属性。通常，各种组件样式标志的值是组件定义的一部分，在组件构造函数中指定。唯一的例外是 csSubComponent 样式，它可以通过调用 SetSubComponent 方法来设置。"""
    Components: Any
    """返回拥有组件的迭代器"""
    DesignInfo: int
    """int：包含表单设计器使用的信息。

        DesignInfo 在内部使用。不要在应用程序中使用此属性。"""
    Name: str
    """str：指定代码中引用的组件的名称。

        使用名称更改组件的名称以反映其在当前应用程序中的用途。默认情况下，IDE 根据组件的类型分配连续名称，例如“Button1”、“Button2”等。
        使用名称来引用代码中的组件。

        警告：在运行时更改名称会导致对旧名称的任何引用变得未定义。任何使用旧名称的后续代码都将导致异常。"""
    Observers: Observers
    """Observers：表示添加到TComponent 中的TObservers 对象。

        Observers 是一个只读属性，它返回添加到 TComponent 的 TObservers，以便将观察者提供的通知与 LiveBindings 一起使用或用于开发人员自己的目的。"""
    Owner: Any
    """返回组件所有者"""
    Tag: int
    """int：将 NativeInt 整数值存储为组件的一部分。

        标签没有预定义的含义。 Tag 属性可以存储任何附加的整数值，以方便开发人员。通常，Tag 存储一个指针。标签值可以类型转换为适当的指针类型。请注意，在 64 位平台上，所有指针类型的大小均为 8 字节，而在 32 位平台上，指针类型的大小为 4 字节。这些指针大小对应于 64 位和 32 位平台上的 NativeInt 整数值的大小。"""
    VCLComObject: Pointer
    """指针：表示支持COM的组件内部使用的信息。

        VCLComObject 仅供内部使用。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BeforeDestruction(self, *args, **kwargs) -> Any:
        """在调用第一个析构函数之前执行任何必要的操作。

        在组件的第一个析构函数执行之前，BeforeDestruction 会自动调用。请勿在应用程序中显式调用它。
        在 TComponent 中实现时，BeforeDestruction 检查是否已调用 Destroying 方法，如果没有，则调用该方法。在组件被销毁之前，覆盖此方法以执行其他操作的后代应首先调用继承的方法以确保进行此检查。"""
    def BeginInvoke(self, AProc: Proc, AContext: Object) -> IAsyncResult:
        """TComponent.BeginInvoke(AProc: Proc, AContext: Object) -> IAsyncResult

        对 AProc 或 AFunc 指定的方法执行异步调用。
        AContext 参数指定方法执行的上下文。此上下文对应于主线程。对于 Tcontrol 后代，它将在创建最近窗口句柄的线程的上下文中执行。
        BeginInvoke 在用作返回类型的接口 IAsyncResult 中返回异步执行的结果。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TComponent.Create(AOwner: 组件) -> 无

        分配内存并构造安全初始化的组件实例。
        所有对象都有一个构造对象的 Create 方法。 TComponent 重新定义了 Create，以便对于组件，Create 还可以：

        建立组件与其所有者的关系，如 AOwner 参数所示。
        将 ComponentStyle 属性设置为 csInheritable，这意味着该组件可以由后代表单类型继承。
        无需显式创建在表单设计器中添加的组件。这些组件在应用程序运行时自动创建，并在应用程序关闭时销毁。
        对于以编程方式创建的组件（即不是在表单设计器中创建的组件），请调用 Create 并将所有者组件作为 AOwner 参数传递。当组件被毁坏时，所有者将对其进行处置。如果组件不被拥有，则在需要销毁时使用 Free。

        提示：将 Self 作为 Owner 参数传递时，请考虑 Self 引用的内容。如果一个组件在其一个方法中创建另一个组件，则 Self 引用第一个组件，而不是正在创建的组件，该组件随后由第一个组件拥有。
        注意：TComponent 构造函数部分是虚拟的，以允许类引用的多态实例化。这对于流系统和表单设计器至关重要。声明新组件的 Create 构造函数时，不要忘记使用 override 指令。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """处置组件及其拥有的组件。

        不要直接调用 Destroy。请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        切勿在组件自己的事件处理程序之一中显式释放组件，也不要从其拥有或包含的组件的事件处理程序中释放组件。
        要销毁表单，请调用其 Release 方法。 Release 会等待所有表单的事件处理程序以及表单组件的事件处理程序执行完毕，然后再销毁表单。

        注意：表单拥有在设计模式下放置在其上的所有控件和非可视组件。当它被释放时，所有这些组件也会自动释放。默认情况下，所有表单均归全局 Application 对象所有。当应用程序终止时，它会释放全局 Application 对象，从而释放所有表单。对于不是组件的对象，以及使用 nil 所有者创建的组件，请务必在完成对象后调用 Free；否则分配给该对象的内存将丢失，直到应用程序终止。"""
    def DestroyComponents(self, *args, **kwargs) -> Any:
        """销毁所有拥有的组件。

        DestroyComponents 迭代该组件拥有的组件，从拥有的组件列表中删除每个组件并将其销毁。
        没有必要直接调用 DestroyComponents。当组件被销毁时，DestroyComponents 会被自动调用。"""
    def Destroying(self, *args, **kwargs) -> Any:
        """表示该组件及其拥有的组件即将被销毁。

        Destroying 在 ComponentState 属性中设置 csDestroying 标志。然后，它为每个拥有的组件调用 Destroying 方法，以便也设置其 csDestroying 标志。如果 csDestroying 已设置，则 Destroying 将不执行任何操作。
        没有必要直接调用 Destroying。当组件被销毁时，销毁会自动调用。"""
    def EndFunctionInvoke(self, AsyncResult: IAsyncResult) -> Object:
        """TComponent.EndFunctionInvoke(AsyncResult: IAsyncResult) -> 对象

        阻止调用者，直到指定的 ASyncResult 完成。
        返回 BeginInvoke 异步执行的方法的结果。在给定的 IAsyncResult 完成后立即返回此结果。结果类型对应于 TObject 类类型。
        EndInvoke 引发异步方法执行时可能发生的任何异常。"""
    def EndInvoke(self, ASyncResult: IAsyncResult) -> None:
        """TComponent.EndInvoke(ASyncResult: IAsyncResult) -> 无

        阻止调用者，直到指定的 ASyncResult 完成。
        返回 BeginInvoke 异步执行的方法的结果。在给定的 IAsyncResult 完成后立即返回此结果。
        EndInvoke 引发异步方法执行时可能发生的任何异常。"""
    def ExecuteAction(self, Action: BasicAction) -> bool:
        """TComponent.ExecuteAction(Action: BasicAction) -> bool

        执行动作。
        ExecuteAction 为组件执行操作。Action 是 TBasicAction 或 TBasicAction 的任何后代。
        ExecuteAction 首先检查提供的操作是否与组件兼容，然后执行该动作。返回值为布尔值。如果执行了动作，则返回 True 值；否则，返回 False。
        派生类可以重写此方法以实现处理操作的独特方式。"""
    def FindComponent(self, AName: str) -> Component:
        """TComponent.FindComponent(AName: str) -> 组件

        指示给定组件是否由该组件拥有。
        FindComponent 返回 Components 属性数组中名称与 AName 参数中的字符串匹配的组件。使用 FindComponent 确定给定组件是否属于另一个组件。
        组件名称匹配不区分大小写。"""
    def FreeNotification(self, AComponent: Component) -> None:
        """TComponent.FreeNotification(AComponent: Component) -> 无

        确保通知 AComponent 该组件将被销毁。
        使用 FreeNotification 将 AComponent 注册为组件，当组件即将被销毁时应通知该组件。仅当组件具有不同的形式或具有不同的所有者时，才需要以这种方式注册组件。例如，如果AComponent是另一种形式，并使用该组件实现某个属性，则它必须调用FreeNotification，以便在该组件被销毁时调用其Notification方法。
        对于具有相同所有者的组件，当应用程序显式释放该组件时，会自动调用Notification方法。当隐式释放组件时，不会发送此通知，因为所有者已经被释放。"""
    def FreeOnRelease(self, *args, **kwargs) -> Any:
        """释放从 COM 类创建的组件的接口引用。

        当组件实现的接口被释放时，FreeOnRelease 被调用。 FreeOnRelease在内部使用，调用对应的接口方法。不必直接调用 FreeOnRelease。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TComponent 枚举器。

        GetEnumerator 返回一个 TComponentEnumerator 引用，该引用枚举指定包含组件中包含的组件。
        要处理所有这些子组件，请在 While MoveNext do 循环中调用 TComponentEnumerator GetCurrent 方法。"""
    def GetNamePath(self, *args, **kwargs) -> Any:
        """返回对象检查器使用的字符串。

        GetNamePath 用于确定要在对象检查器中显示的正在编辑的对象名称的文本。 GetNamePath 是在 TPersistent 中引入的，因此诸如集合之类的后代可以出现在对象检查器中。 TComponent 重写 GetNamePath 以返回组件的名称。不要直接调用 GetNamePath。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def InsertComponent(self, AComponent: Component) -> None:
        """TComponent.InsertComponent(AComponent: Component) -> 无

        将组件建立为指定组件的所有者。
        InsertComponent 将 AComponent 参数中传递的组件添加到 Components 数组属性的末尾。插入的组件必须没有名称（没有指定的 Name 属性值），或者该名称在组件列表中的所有其他组件中必须是唯一的。
        当拥有的组件被销毁时，AComponent 也会被销毁。
        在表单设计器中直观地操作组件时，组件会自动插入和删除。手动将组件添加到另一个所有者组件的组件列表时，请使用 InsertComponent。"""
    def IsImplementorOf(self, I: IInterface) -> bool:
        """TComponent.IsImplementorOf(I: IInterface) -> bool

        指示组件是否实现指定的接口。
        调用 IsImplementorOf 来确定该组件（或者，如果该组件聚合了其他组件的接口，则控制组件）是否支持 I 指定的接口。 IsImplementorOf 与 QueryInterface 方法类似，但它可以处理 空 接口，并且它不返回接口指针。
        加载和保存组件的流系统使用 IsImplementorOf 来解析接口的属性值。"""
    def ReferenceInterface(self, I: IInterface, Operation: Operation) -> bool:
        """TComponent.ReferenceInterface(I: IInterface, 操作: 操作) -> bool

        建立或删除内部链接，使该组件在指定接口的实现者被销毁时得到通知。
        组件编写者使用 ReferenceInterface 来确保当实现这些接口的对象被销毁时，会通知值为接口的属性。对于其值为要与组件一起保存在表单文件中的接口的属性，必须设置此通知（即，为了使此类属性作为已发布的属性保留）。
        I 是一个接口指针，它是感兴趣的已发布属性的值。
        操作指示是否应建立（opInsert）或删除（opRemove）到接口实现者的通知链接。
        如果成功建立或删除通知链接，ReferenceInterface 将返回 True。如果在将Operation 设置为opInsert 的情况下调用ReferenceInterface 返回False，则指定的接口无法存储为已发布属性的值。

        注意： False 结果并不一定表示错误，只是属性流系统无法存储该接口。例如，当指定的接口采用真正的引用计数时，ReferenceInterface 返回 False，与组件生命周期无关。"""
    def RemoveComponent(self, AComponent: Component) -> None:
        """TComponent.RemoveComponent(AComponent: Component) -> None

        从组件的组件列表中删除指定的组件。
        在表单设计器中以可视方式操作组件时，会自动插入和删除组件。使用 RemoveComponent 以编程方式从其所有者组件中删除 AComponent 指定的组件。"""
    def RemoveFreeNotification(self, AComponent: Component) -> None:
        """TComponent.RemoveFreeNotification(AComponent: Component) -> 无

        禁用由 FreeNotification 启用的销毁通知。
        RemoveFreeNotification 从内部对象列表中删除 AComponent 参数指定的组件，以通知该组件即将被销毁。 AComponent 通过先前调用 FreeNotification 方法添加到此列表中。
        大多数应用程序不需要调用RemoveFreeNotification。 TComponent 使用它来检测两个组件相互通知其即将遭到破坏的循环。"""
    def SafeCallException(self, ExceptObject: Object, ExceptAddr: Pointer) -> int:
        """TComponent.SafeCallException(ExceptObject: 对象, exceptAddr: 指针) -> int

        处理使用 safecall 调用约定声明的方法中的异常。
        SafeCallException 处理使用 safecall 调用约定的方法中的异常。一些实现接口的类会重写此方法来处理可能发生的错误。 TComponent 为组件支持的接口（如果存在）调用此方法的实现。如果组件不支持接口，则此方法调用从 TObject 继承的 SafeCallException 方法，该方法返回 E_UNEXPECTED。这是默认返回值，适用于不支持任何接口的类。"""
    def SetSubComponent(self, IsSubComponent: bool) -> None:
        """TComponent.SetSubComponent(IsSubComponent: bool) -> None

        标识组件是否为子组件。
        调用 SetSubComponent 以指示此组件是否为子组件。子组件是其所有者是其所在表单或数据模块以外的组件的组件。除非此类组件调用 SetSubComponent 并将 IsSubComponent 设置为 True，否则其已发布的属性将不会保存到表单文件中。
        IsSubComponent 指示组件是 (True) 还是不是 (False) 子组件。
        SetSubComponent 在设计时调用：

        要么从始终充当子组件的组件的构造函数调用。在这种情况下，组件从构造函数调用其自己的 SetSubComponent 方法，并将 IsSubComponent 设置为 True。
        或在构造子组件的实例后立即调用。在这种情况下，所有者调用它刚刚实例化的组件的 SetSubComponent 方法，并将 IsSubComponent 设置为 True。"""
    def UpdateAction(self, Action: BasicAction) -> bool:
        """TComponent.UpdateAction(Action: BasicAction) -> bool

        更新操作的状态。
        UpdateAction 用于更新操作的状态。 Action 是 TBasicAction 或任何后代。
        UpdateAction 首先检查提供的操作是否与组件兼容，然后更新它。返回值是一个布尔值。如果操作已更新，则返回 True 值，否则返回 False 值。
        派生类可以重写此方法以实现处理操作更新的独特方式。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ContainedAction(BasicAction):
    """TContainedAction 是可以按类别分组并可以出现在操作列表中的操作的基类。

    TContainedAction 引入了使操作能够出现在操作列表中的属性和方法。 TContainedAction 的属性包含有关操作及其操作列表之间关系的信息。 TContainedAction 的方法覆盖基类的方法，以考虑拥有该操作的操作列表。
    TContainedAction 定义已发布的类别属性。
    TContainedAction 类型的对象可以与动作类别相关联。此类别在设计时用于使用“动作列表”编辑器或“动作管理器”编辑器（仅适用于 VCL）来组织动作列表中的动作。"""
    __hash__: ClassVar[None] = ...
    ActionComponent: Any
    """指示导致执行此操作的客户端组件。"""
    ActionList: ContainedActionList
    """ContainedActionList：保存该动作所属的动作列表。"""
    AutoCheck: bool
    """bool：控制执行操作时 Checked 属性是否切换。

        AutoCheck 会导致 Checked 属性在操作执行时切换。这允许操作的 Checked 属性与客户端的 Checked 属性（或等效属性）保持同步。
        如果客户端有自己的 AutoCheck 属性，则操作的 AutoCheck 属性将传播到客户端的 AutoCheck 属性。"""
    Caption: str
    """str：表示动作的标题。

        Caption 保存设置后用作操作标题的字符串。 Caption 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    Category: str
    """str：操作所属的组或类别。

        IDE 操作编辑器将共享同一类别的操作组合在一起。在VCL中，如果您使用动作管理器，则可以生成与动作类别相对应的用户界面元素。
        操作类别根据相似性（通常是行为或功能）对操作进行分组。标准类别包括编辑、格式、帮助、Windows 等。在设计时，您可以通过从操作列表或对象树视图中选择操作，然后在对象检查器中选择类别来修改或设置操作的类别。"""
    Checked: bool
    """bool：指示客户端控件和菜单项是否显示为选中状态。

        已检查指定操作的已检查状态。 Checked 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。

        注意：如果操作的 GroupIndex 值大于 0，则将 Checked 设置为 True 会将 GroupIndex 组中所有其他操作的 Checked 属性设置为 False。
        提示：使用 AutoCheck 属性可确保操作的 Checked 属性在操作执行时切换。"""
    DisableIfNoHandler: bool
    """bool：指示如果未找到 OnExecute 事件处理程序，是否应禁用操作的客户端。

        DisableIfNoHandler 定义如果没有为操作设置 OnExecute 事件处理程序，是否将操作的 Enabled 属性设置为 False。将 Enabled 设置为 False 将禁用所有操作的客户端。
        例如，请参阅FMX.Forms.TApplication.UpdateAction 如何使用DisableIfNoHandler 来定义如果未为操作定义OnExecute 事件处理程序，是否将Enabled 设置为False。
        例如，在管理子菜单时，将DisableIfNoHandler 设置为False 会很有用。在这种情况下，指向主菜单上的命令（导致子菜单打开）不需要任何 OnExecute 事件处理程序。然后，如果DisableIfNoHandler 为True，则该主菜单命令将被禁用，并且无法打开子菜单。在这种情况下，使用 FMX.Controls.TControlAction 和 Vcl.Controls.TControlAction 类型的操作会很方便。默认情况下，这些类的对象的 DisableIfNoHandler 值设置为 False。"""
    Enabled: bool
    """bool：指定操作的启用状态。

        Enabled 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    GroupIndex: int
    """int：表示一个操作列表中的一组操作。此组中的操作就像单选按钮组一样。

        GroupIndex 的值用于定义操作组。每个组中的操作就像单选按钮组一样。当 GroupIndex 大于 0 时，此值标识某些操作所属的组。GroupIndex 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。
        当该组中任何操作的 Checked 属性设置为 True 时，组中所有其他操作的 Checked 属性都设置为 False。也就是说，一次只能检查组中的一项操作。

        注意：组中的所有操作必须由同一个操作列表列出。"""
    HelpContext: int
    """int：保留标识操作的帮助主题的整数上下文 ID。

        HelpContext 指定整数上下文 ID，用于标识调用操作帮助时要显示的帮助主题。 HelpContext 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。另请参见 IsHelpLinked。
        仅当在 HelpType 属性中选择 htContext 时才使用 HelpContext。

        注意：要使用帮助，您需要在应用程序中启用帮助。当您的应用程序支持使用适当的帮助系统时，它可以显示关联帮助文件中的帮助主题。当客户端控件获得焦点并且用户按 F1 键时，该控件将使用 HelpContext 属性的值来调用显示具有此上下文 ID 的主题的联机帮助。目标主题由 HelpContext 上下文 ID 值唯一标识。"""
    HelpKeyword: str
    """str：包含标识操作的帮助主题的关键字字符串。

        HelpKeyword 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。
        仅当在 HelpType 属性中选择 htKeyword 时才使用 HelpKeyword。

        注意：要使用帮助，您需要在应用程序中启用帮助。当您的应用程序支持使用适当的帮助系统时，它可以显示关联帮助文件中的帮助主题。当客户端控件获得焦点并且用户按 F1 键时，该控件将使用 HelpKeyword 属性的值来调用显示带有此关键字的主题的联机帮助。"""
    HelpType: HelpType
    """HelpType：保留是否使用HelpContext或HelpKeyword属性来标识帮助主题。

        HelpType 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。
        HelpType 可以保留以下常量之一：

        ht上下文？指示使用 HelpContext 属性来标识调用帮助时要显示的帮助主题。
        ht 关键字 ?指示使用 HelpKeyword 属性来标识调用帮助时要显示的帮助主题。"""
    Hint: str
    """str：存储帮助提示文本。

        Hint 保存指示操作的提示文本的提示字符串。
        提示包含当用户将鼠标移动到屏幕元素上时出现在弹出框（或状态栏中）的文本字符串。
        该提示字符串可以传播到操作的客户端吗？控件、菜单项和其他 GUI 元素。

        注意：VCL 控件支持包含三个部分的提示字符串，这些部分可以显示在不同的位置（参见 Vcl.Controls.TControl.Hint）。"""
    ImageIndex: int
    """int：存储图像列表中的索引。

        ImageIndex 是图像列表中从零开始的索引。 TContainedAction 不提供实际的图像列表，只有 GUI 应用程序框架中的操作实现才提供这样的属性。通常，此图像列表包含与使用此操作的控件和菜单项关联的图像。
        ImageIndex 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。

        注意：当ImageIndex为-1时，这意味着列表不包含任何图像。
        在控件的典型实现中，图像绘制在控件的最左侧位置，控件的文本绘制在图像的右侧。如果 ImageIndex 为 -1，则控件不会将文本向右偏移来为图像保留占位符。否则，如果 ImageIndex 不为 -1，则控件的文本始终以向右偏移的方式绘制，以保留绘制图像的位置。"""
    Index: int
    """int：指定动作在其动作列表中的索引。

        索引指示该操作在其操作列表中的位置。您可以在设计时使用 IDE 编辑器之一来处理操作来更改操作的索引。
        操作索引决定它们在用户界面元素（例如菜单和工具栏）中出现的顺序。
        索引是从零开始的。当 Index 为 -1 时，这意味着 ActionList 属性不包含任何列表。"""
    OnHint: Callable[[str,bool],None]
    """可调用[[str, bool], 无]:"""
    SecondaryShortCuts: CustomShortCutList
    """CustomShortCutList：存储用于触发操作的快捷方式（除了 ShortCut 之外）。

        可以响应多个快捷键组合来执行操作。 secondaryShortCuts 列出了可以触发该操作的所有快捷键组合（除 ShortCut 属性指定的组合外）。这使您可以提供额外的辅助快捷方式。
        当用户键入 SecondShortCuts 中列出的组合键之一时，将调用该操作的 Execute 方法。"""
    ShortCut: int
    """int：触发操作的快捷方式。

        Shortcut 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    StatusAction: StatusAction
    """StatusAction：存储操作中输入字段的状态。

        StatusAction 在设置时保存操作中输入字段的状态。
        StatusAction 的值可以传播到链接到该操作的所有客户端控件和客户端菜单项。"""
    Visible: bool
    """bool：存储动作表示是否可见。

        Visible 指定操作的可见状态（True 表示可见，False 表示不可见）。
        如果将客户端链接到操作的操作链接的 IsVisibleLinked 方法返回 True，则此 Visible 值将传播到操作的客户端。
        如果操作的 Visible 为 False，并且操作链接的 IsVisibleLinked 返回 True，则客户端（控件、菜单项或其他）的 Visible 也设置为 False，并且该客户端也是不可见的。通常，如果操作属于 TCustomViewAction，则操作链接的 IsVisibleLinked 返回 False。否则，当操作属于 TAction 时，操作链接的 IsVisibleLinked 返回 True。也就是说，当需要提供 Visible 设置为 True 的操作的客户端的可见表示时，使用 TCustomViewAction。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TContainedAction.Create(AOwner: Component) -> 无

        实例化并初始化 TContainedAction 对象。
        应用程序不需要直接调用Create。当您在“动作列表”编辑器中选择“新建动作”时，会自动创建动作。
        Create调用继承的System.Classes.TBasicAction.Create构造函数，然后
        初始化 Enabled（将其设置为 True）、Visible（将其设置为 True）和 ImageIndex（将其设置为 -1）属性。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁所包含操作的实例。

        如果该操作包含在操作列表或操作管理器中，则 Destroy 会从该列表中删除该操作。然后它调用继承的Destroy方法。"""
    def DoHint(self, HintStr: str) -> bool:
        """TContainedAction.DoHint(HintStr: str) -> bool

        调用 OnHint 事件处理程序。
        通常，应用程序不会调用 DoHint 方法。当用户将鼠标悬停在操作的客户端控件或菜单​​项之一上时，会自动调用它。当客户端请求显示提示时，操作的客户端将调用 DoHint。

        DoHint 检查 OnHint 事件处理程序，如果事件处理程序存在，则将 HintStr 传递给它。 OnHint 事件处理程序可以更改指定的提示字符串HintStr。如果未分配事件处理程序或 OnHint 返回 True，则 DoHint 返回 True。 DoHint 可用于确定应显示哪些提示文本。例如，Vcl.Controls.TControlActionLink.DoShowHint 在内部调用 DoHint，如果 DoHint 返回 True，则 Vcl.Controls.TControlActionLink.DoShowHint 将操作的快捷方式规范附加到要显示的提示文本。"""
    def Execute(self) -> Any:
        """TBasicAction.Execute()

        生成 OnExecute 事件。"""
    def GetParentComponent(self, *args, **kwargs) -> Any:
        """返回包含该操作的操作列表。

        GetParentComponent 返回包含该操作的操作列表。该操作列表存储在 ActionList 属性中。如果 ActionList 存储 nil，则 GetParentComponent 调用继承的 System.Classes.TComponent.GetParentComponent 方法。"""
    def HasParent(self, *args, **kwargs) -> Any:
        """指示操作是否包含在操作列表中。

        如果操作包含在存储在 ActionList 属性中操作列表中，则 HasParent 返回 True。如果 ActionList 存储 nil，则 HasParent 调用继承的 System.Classes.TComponent.HasParent 方法。"""
    def SetParentComponent(self, AParent: Component) -> None:
        """TContainedAction.SetParentComponent(AParent: Component) -> 无

        设置包含该操作的操作列表。
        SetParentComponent 将指定的 AParent 操作列表设置为包含该操作的操作列表。该操作列表存储在 ActionList 属性中。"""
    def Suspended(self, *args, **kwargs) -> Any:
        """如果操作的操作列表已暂停，则返回 True。"""
    def Update(self) -> Any:
        """TBasicAction.Update()

        提供在应用程序空闲时执行集中代码的机会。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ContainedActionList(Component):
    """操作列表的基类，不包含已发布的属性。

    实现 TContainedActionList 以使用所有 GUI 应用程序框架的通用属性。
    Actions 列出操作列表维护的操作。
    ActionCount 属性返回列表中的操作数量。
    OnStateChange 在状态发生变化时发送通知。"""
    __hash__: ClassVar[None] = ...
    ActionCount: Any
    """指示操作列表中的操作数量。"""
    Actions: Any
    """列出由操作列表维护的操作。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    OnStateChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Owner: Any
    """返回组件所有者"""
    State: ActionListState
    """ActionListState：表示当用户触发客户端对象时，动作列表中的动作是否响应。

        State 可以是 TActionListState 类型中定义的常量之一：
        asNormal、asSuspished 和 asSuspishedEnabled。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TContainedActionList.Create(AOwner: Component) -> 无

        创建 TContainedActionList 的实例。
        该创建器继承自 TComponent，请参阅 TComponent.Create 了解更多信息。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TContainedActionList 的实例。

        该析构函数继承自 TComponent，有关详细信息，请参阅 TComponent.Destroy。"""
    def EnumByCategory(self, Proc: Callable[[ContainedAction,bool],None], Category: str, IncludeSubCategory: bool) -> bool:
        """TContainedActionList.EnumByCategory(Proc: Callable[[ContainedAction, bool], None], 类别: str, IncludeSubCategory: bool) -> bool

        对指定类别中列表的每个操作调用一次指定过程（TEnumActionListEvent 或 TEnumActionListRef）。
        IncludeSubCategory 确定子类别中的操作是否包含在调用循环中（True）或不包含（False）。
        Proc（TEnumActionListEvent 或 TEnumActionListRef 的实例）可以将其 Done 参数设置为 True 以提前停止调用循环。\r
        对指定类别中列表的每个操作调用一次指定过程（TEnumActionListEvent 或 TEnumActionListRef）。
        IncludeSubCategory 确定子类别中的操作是否包含在调用循环中（True）或不包含（False）。
        Proc（TEnumActionListEvent 或 TEnumActionListRef 的实例）可以将其 Done 参数设置为 True 以提前停止调用循环。"""
    def ExecuteAction(self, Action: BasicAction) -> bool:
        """TContainedActionList.ExecuteAction(Action: BasicAction) -> bool

        生成 OnExecute 事件。
        通常，应用程序不会调用 ExecuteAction 方法。相反，Action 参数指示的操作会调用 ExecuteAction 来响应用户命令。然而，即使没有触发客户端控件，也可以调用 ExecuteAction 来生成 OnExecute 事件。
        ExecuteAction 调用操作列表的 OnExecute 事件处理程序。如果事件处理程序处理该操作，则返回 True，否则返回 False。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TContainedActionList.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        为操作列表的每个子操作调用指定的方法。
        GetChildren 由组件流系统使用。对于操作列表中的每个操作，GetChildren 都会调用 Proc 中传递的方法。这些操作按照组件流系统加载或保存的顺序传递给回调。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TContainedActionList 枚举器，即枚举列表中操作的 TActionListEnumerator 引用。

        要处理所有操作，请在 ?while MoveNext do? 中从枚举器中读取 Current。环形。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def UpdateAction(self, Action: BasicAction) -> bool:
        """TContainedActionList.UpdateAction(Action: BasicAction) -> bool

        生成 OnUpdate 事件。
        通常，应用程序不会调用 UpdateAction 方法。相反，当应用程序通知 Action 可以自行更新时，Action 参数指示的操作会调用 UpdateAction。但是，即使应用程序尚未启动此事件，也可以调用 UpdateAction 来生成 OnUpdate 事件。
        UpdateAction 调用操作列表的 OnUpdate 事件处理程序。如果事件处理程序更新操作，则返回 True，否则返回 False。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ContainedBindComponent(BasicBindComponent):
    """从其派生的所有常见绑定组件的基类。

    TContainedBindComponent 是一个抽象类，它是 TCommonBindComponent 的基类。"""
    __hash__: ClassVar[None] = ...
    BindingsList: CustomBindingsList
    """CustomBindingsList：指定保存绑定表达式的列表。"""
    Category: str
    """str：指定该组件的类别。

        例如，对于名为 BindExpressionForm121、类型为 TBindExpression 的绑定表达式，代码如下：

        ShowMessage(BindExpressionForm121.Category)

        显示以下消息：绑定表达式。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    ControlComponent: Component
    """Component：指定将通过 LiveBindings 绑定到源组件的组件。"""
    DisplayName: str
    """str：返回包含该组件名称的字符串。"""
    Index: int
    """int：返回该组件在绑定列表中的索引。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def CanSetControlComponent(self, Value: Component) -> bool:
        """TContainedBindComponent.CanSetControlComponent(Value: Component) -> bool

        返回控制组件是否可以设置给定值。
        正如在 TContainedBindComponent 中实现的那样，CanSetControlComponent 始终返回 True，但在后代中，它实际上返回给定 Value（本身就是 TComponent）是否可以分配给控制组件。"""
    def Create(self, AOwner: Component) -> None:
        """TContainedBindComponent.Create(AOwner: Component) -> 无

        创建 TContainedBindComponent 类的实例。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TContainedBindComponent 类的实例。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父级。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def SetParentComponent(self, AParent: Component) -> None:
        """TContainedBindComponent.SetParentComponent(AParent: Component) -> 无

        设置该组件的父组件。
        SetParentComponent 在组件流系统内部使用。没有必要直接调用它。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Control(Component):
    """TControl 是运行时可见的所有组件的基类。

    控件是可视组件，这意味着用户可以在运行时看到它们并可能与它们交互。所有控件都具有描述其外观方面的属性、方法和事件，例如控件的位置、与控件相关的光标或提示、绘制或移动控件的方法以及响应用户操作的事件。
    TControl 具有许多受保护的属性和方法，这些属性和方法由其后代使用或发布。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    AlignWithMargins: bool
    """bool：指定控件是否应受边距约束。

        如果 AlignWithMargins 为 true，则使用控件的 Margins 属性来控制相对于与该控件对齐的其他控件的间距。控件之间的距离不得小于边距中指定的间距。当父控件调整大小时移动控件时，此间距将保持不变。
        如果样式 csAlignWithMargins（TControlStyle 类型）位于控件的 ControlStyle 属性中，则 AlignWithMargins 为 true，否则为 false。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BoundsRect: Rect
    """Rect：指定控件的边界矩形，以父控件的坐标系表示。

        使用 BoundsRect 可以快速一次性获取控件所有角的像素位置。
        例如，语句
        R = Control.BoundsRect
        对应于
        R.Left = Control.Left
        R.Top = Control.Top
        R.Right = Control.Left + Control.Width
        R.Bottom = Control.Top + Control.Height

        像素坐标系的原点位于父窗口的左上角。

        注意：如果某个点位于控件的边界矩形的左侧或顶部，则认为该点位于该边界矩形内；但如果该点位于右侧或底部，则不认为该点位于该边界矩形内。也就是说，要位于边界矩形内，x 坐标必须大于或等于 BoundsRect.Left 且小于 BoundsRect.Right，y 坐标必须大于或等于 BoundsRect.Top 且小于 BoundsRect.Bottom。"""
    ClientHeight: int
    """int：指定控件工作区的高度（以像素为单位）。

        使用 ClientHeight 读取或更改控件客户区的高度。
        对于 TControl，ClientHeight 与 Height 相同。派生类可以实现与 Height 不同的 ClientHeight 属性。例如，窗体的 ClientHeight 是 Height 属性的值减去标题栏、调整边框和滚动条的高度。"""
    ClientOrigin: Point
    """Point：指定控件工作区左上角的屏幕坐标（以像素为单位）。

        读取 ClientOrigin 以找到控件客户区的左上角。 ClientOrigin 以 TPoint 类型返回 X 和 Y 坐标，其中 X 指定点的水平坐标，Y 指定垂直坐标。
        从 TControl 而不是 TWinControl 派生的控件的屏幕坐标是添加到其 Left 和 Top 属性的控件父级的屏幕坐标。如果控件没有父控件，则读取 ClientOrigin 时会引发 EInvalidOperation 异常。"""
    ClientRect: Rect
    """矩形：指定控件工作区的大小（以像素为单位）。

        读取 ClientRect 以找出控件的客户区域的大小。 ClientRect 返回一个矩形，其 Top 和 Left 字段设置为零，其 Bottom 和 Right 字段分别设置为控件的高度和宽度。 ClientRect 等价于 Rect(0, 0, ClientWidth, ClientHeight)。
        如果一个点位于左侧或顶部，则被视为在控件的客户矩形内，但如果位于右侧或底部，则不被视为在该控件的客户矩形内。也就是说，要位于客户端矩形内部，X 坐标必须大于或等于 ClientRect.Left 且小于 ClientRect.Right，Y 坐标必须大于或等于 ClientRect.Top 且小于 ClientRect. 。底部。

        注意：ClientRect是控件的物理客户区的大小，而不是其逻辑客户区的大小。如果控件支持滚动，则 ClientRect 不是整个滚动范围，而只是在任何给定时间可用的区域。"""
    ClientWidth: int
    """int：指定控件工作区的水平尺寸（以像素为单位）。

        使用 ClientWidth 读取或更改控件客户区的宽度。 ClientWidth 相当于 ClientRect.Right。
        对于 TControl，ClientWidth 与 Width 相同。派生类可以实现与 Width 不同的 ClientWidth 属性。例如，窗体的 ClientWidth 是 Width 属性的值减去调整大小边框和滚动条的宽度。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用 Constraints 指定控件的最小和最大宽度和高度。当 Constraints 包含最大值或最小值时，控件不能调整大小以违反这些约束。

        注意：约束适用于窗体的高度。但是，窗体的高度取决于 Windows 的标题栏大小。例如，Windows XP 使用的标题栏比其他窗口系统大得多。要解决此问题，请在设计窗体时注意 ClientHeight，并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：不要设置与 Align 或 Anchors 属性值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlState: ControlState
    """ControlState：指定运行时控件的当前状态。

        读取 ControlState 以找出影响控件的各种条件，例如是否已单击或是否需要对齐。ControlState 反映控件实例的瞬态条件，而不是整个控件类的属性。ControlState 由一组从以下值中提取的标志组成：

        标志 含义
        csLButtonDown 鼠标左键已单击但尚未释放。此设置适用于所有鼠标按下事件。
        csClicked 与 csLButtonDown 相同，但仅在 ControlStyle 包含 csClickEvents 时设置，这意味着鼠标按下事件被解释为单击。
        csPalette 系统调色板已更改，控件或其后代之一尚未通过实现其调色板完成调整。
        csReadingState 控件正在从流中读取其状态。
        csAlignmentNeeded 重新启用对齐时，控件需要重新对齐自身。
        csFocusing 应用程序正在处理旨在给予控件焦点的消息。这不能保证控件将获得焦点，但可以防止递归调用。
        csCreating 正在创建控件和/或其所有者和子控件。当所有创建完成后，此标志将清除。
        csPaintCopy 正在复制控件，这意味着正在绘制控件的副本。必须设置 ControlStyle 标志 csReplicatable 才能出现此状态。
        csCustomPaint 控件正在处理自定义绘制消息。
        csDestroyingHandle 正在销毁控件的窗口。
        csDocking 正在停靠控件。

        ControlState 中的标志特定于控件，并增强了 ComponentState 属性中的状态标志。
        ControlState 主要由组件编写者在实现从 TControl 派生的组件时使用。"""
    ControlStyle: ControlStyle
    """ControlStyle：确定控件的样式特征。

        使用 ControlStyle 来确定控件的各种属性，例如控件是否可以捕获鼠标或具有固定大小。 ControlStyle 属性包含一组指示这些属性的样式标志。下表列出了标志及其含义：
        标志 含义
        csAcceptsControls 该控件成为设计时放置在其上的任何控件的父级。
        csCaptureMouse 该控件在单击时捕获鼠标事件。
        csDesignInteractive 该控件将设计时的鼠标右键单击映射为鼠标左键单击以操作该控件。
        csClickEvents 该控件可以接收并响应鼠标点击。某些控件可能不会继承此属性，例如 TButton。
        csFramed 该控件具有 3D 框架。
        csSetCaption 如果控件的标题尚未明确设置为其他内容，则其标题应与名称匹配。
        csOpaque 该控件完全填充其客户矩形。
        csDoubleClicks 该控件可以接收并响应双击消息。否则，将双击映射为单击。
        csFixedWidth 控件的宽度不会改变或缩放。
        csFixedHeight 控件的高度不会变化或缩放。
        csNoDesignVisible 该控件在设计时不可见。
        csReplicatable 可以使用 PaintTo 方法复制控件，将其图像绘制到任意画布上。
        csNoStdEvents 标准事件（例如鼠标、按键和单击事件）将被忽略。当不需要响应这些事件时，该标志允许应用程序运行得更快。
        csDisplayDragImage 如果将具有关联拖动图像列表的控件拖动到具有此设置的控件上，则当光标位于其上方时，图像列表将用于增强拖动光标。否则，将单独使用拖动光标。
        csReflector 该控件响应 Windows 对话框消息、焦点消息或大小更改消息。如果该控件可以用作 ActiveX 控件，请使用此设置，以便它接收这些事件的通知。
        csActionClient 该控件链接到一个操作对象。该标志在设置 Action 属性时设置，如果清除 Action 属性则清除。
        csMenuEvents 该控件响应系统菜单命令。

        ControlStyle 描述从给定类实例化的所有控件。 ControlStyle 不应在运行时修改，构造函数中除外。 ControlState 属性记录瞬态条件。
        TControl 构造函数将 ControlStyle 初始化为 csCaptureMouse、csClickEvents、csSetCaption 和 csDoubleClicks 的集合。
        ControlStyle 主要由组件编写者在实现从 TControl 派生的组件时使用。"""
    CurrentPPI: int
    """int： 目前没有任何其他信息。"""
    Cursor: int
    """int：指定当鼠标指针进入控件覆盖的区域时用于表示鼠标指针的图像。

        更改 Cursor 的值以在鼠标指针进入控件时向用户提供反馈。 Cursor 的值是由全局变量 Screen 维护的光标列表中光标的索引。除了 TScreen 提供的内置光标之外，应用程序还可以将自定义光标添加到列表中。"""
    CustomHint: CustomHint
    """CustomHint：CustomHint 是控件的自定义提示。

        CustomHint 是控件的 TCustomHint 实例，用于指定控件提示的外观。"""
    DockOrientation: DockOrientation
    """DockOrientation：DockOrientation 指定控件相对于同一父级中停靠的其他控件的停靠方式。

        使用 DockOrientation 确定控件相对于停靠到同一父级的其他控件的位置。对接区域可以从左到右或从上到下排列。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    ExplicitHeight: int
    """int：指定控件的显式垂直尺寸（以像素为单位）。

        ExplicitHeight 是 内部使用的只读属性。在应用程序中使用高度以允许读写访问。"""
    ExplicitLeft: int
    """int：指定组件左边缘相对于其父组件的显式水平像素坐标。

        ExplicitLeft 是 内部使用的只读属性。在应用程序中使用 Left 以允许读写访问。"""
    ExplicitTop: int
    """int：指定组件上边缘相对于其父组件的显式垂直像素坐标。

        ExplicitTop 是 内部使用的只读属性。在应用程序中使用 Top 来允许读写访问。"""
    ExplicitWidth: int
    """int：指定控件的显式水平尺寸（以像素为单位）。

        ExplicitWidth 是 内部使用的只读属性。在应用程序中使用宽度以允许读取和写入访问。"""
    Floating: bool
    """bool：指定控件是否浮动。

        阅读“浮动”以确定可停靠控件是否出现在浮动窗口中，而不是停靠到父控件。

        注意：使用 Floating 而不是 Parent 属性来确定控件是否自由浮动。如果 FloatingDockSiteClass 属性指定浮动窗口类型，则浮动控件可能具有非空父级。"""
    FloatingDockSiteClass: WinControlClass
    """WinControlClass：指定浮动控件时承载该控件的临时控件的类。

        使用 FloatingDockSiteClass 指定浮动时容纳控件的类。该类必须是 TWinControl 的后代。默认情况下，它是TCustomDockForm。当控件取消停靠时，将创建此类型的临时控件，并将该控件停靠到该控件。当控件停靠到另一个控件时，临时浮动停靠站点将被释放。
        如果控件可以作为独立窗口浮动，则 FloatingDockSiteClass 为空。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    HelpContext: int
    """int：HelpContext 属性包含标识控件的帮助主题的数字上下文 ID。

        对于 .chm 帮助文件，您必须将帮助主题的符号上下文 ID 映射到项目 (.hhp) 文件的 [MAP] 部分中的数字主题 ID 值。
        要为控件启用基于上下文 ID 的上下文相关帮助，请将 Vcl.Controls.TControl.HelpType 设置为 htContext 并将 HelpContext 设置为数字主题 ID。
        主题 ID 0（默认）表示没有为控件提供帮助主题。
        要使用帮助，请在应用程序的使用子句中插入 Vcl.HtmlHelpViewer 或其他提供外部帮助查看器使用界面的单元。对于 C++，您需要包含 HTMLHelpViewer.hpp 头文件。"""
    HelpKeyword: str
    """str：HelpKeyword 属性包含标识控件的帮助主题的关键字字符串。

        要为控件启用基于关键字的上下文相关帮助，请将 Vcl.Controls.TControl.HelpType 设置为 htKeyword，并将 HelpKeyword 设置为关键字字符串。
        没有关键字（零长度字符串，默认值）意味着没有为控件提供帮助主题。
        要使用帮助，请在应用程序的使用子句中插入 Vcl.HtmlHelpViewer 或其他提供外部帮助查看器使用界面的单元。对于 C++，您需要包含 HTMLHelpViewer.hpp 头文件。"""
    HelpType: HelpType
    """HelpType：指定控件的上下文相关帮助主题是通过上下文 ID 还是通过关键字来标识。

        设置 HelpType 以指定控件是通过上下文 ID 还是通过关键字标识其上下文相关帮助主题：

        当 HelpType 为 htContext 时，HelpContext 属性值标识控件的帮助主题。
        当 HelpType 为 htKeyword 时，HelpKeyword 属性值标识控件的帮助主题。
        要使用帮助，请在应用程序的使用子句中插入 Vcl.HtmlHelpViewer 或其他提供外部帮助查看器使用界面的单元。对于 C++，您需要包含 HTMLHelpViewer.hpp 头文件。"""
    Hint: str
    """str：提示包含当用户将鼠标移动到控件上时出现的文本字符串。

        使用提示属性可提供一串帮助文本作为帮助提示或特定位置（例如状态栏）上的帮助文本。
        帮助提示是一个包含控件帮助文本的框，当用户将鼠标指针移到控件上并短暂暂停时，该框会出现该控件。
        设置帮助提示

        指定应显示帮助提示的每个控件的提示属性。
        将每个相应控件的 ShowHint 属性设置为 True，或者将所有控件的 ParentShowHint 属性设置为 True，并将窗体的 ShowHint 属性设置为 True。
        在运行时，将应用程序的 ShowHint 属性的值设置为 True。
        要在状态栏或其他位置显示提示，请使用应用程序的 OnHint 事件处理程序。当鼠标指针移到控件上时，应用程序的 OnHint 事件发生。
        通过指定由 | 分隔的值，指定用于帮助提示框和 OnHint 事件处理程序的提示。 （管道）字符。
        例如，
        self.Edit1.Hint = "名称|在编辑框中输入姓名|1"
        这里：

        名称部分是简短提示，显示在“帮助提示”框的顶部。
        在编辑框中输入全名是长提示，出现在短提示下方。可以使用 GetLongHint 函数提取它以在 OnHint 事件处理程序中使用。
        1 是控件的 Images 属性中的图像列表中的可选图像索引，指定要出现在提示中的图像的索引。
        如果提示仅包含一个值，则整个字符串将用作帮助提示并由 GetLongHint 和 GetShortHint 函数返回。如果控件未指定 Hint 值，但其父控件指定了，则该控件将使用父控件的值（只要该控件的 ShowHint 属性为 True）。

        注意：如果应用程序的 ShowHint 属性为 False，则不会出现帮助提示，但仍会调用 OnHint 事件处理程序。"""
    HostDockSite: WinControl
    """WinControl：指定控件停靠的控件。

        读取 HostDockSite 以访问该控件所停靠的窗口控件。如果控件是浮动的，则 HostDockSite 是 Fl​​oatingDockSiteClass 类型的临时控件，或者（如果没有浮动停靠站点类）为空。
        大多数应用程序应使用 ManualDock 方法而不是设置 HostDockSite。设置 HostDockSite 会自动将控件从其先前的主机（如果有）中取消停靠并将其停靠到指定的控件，但不会调整控件的位置和对齐方式并绕过标准停靠事件。
        对于停靠客户端，HostDockSite 的值与 Parent 的值相同。对于不对接客户端的控件，HostDockSite 为空，而 Parent 指定包含控件。"""
    LRDockWidth: int
    """int：指定控件水平停靠时的宽度。

        读取 LRDockWidth 以获取控件上次水平停靠时的宽度。设置 LRDockWidth 以指示控件下次水平停靠时应具有的宽度。
        LRDockWidth 允许控件“记住”其停靠尺寸，即使其宽度因未停靠或以垂直方向停靠而发生变化也是如此。"""
    Left: int
    """int：指定组件左边缘相对于其父组件的水平坐标。

        使用 Left 属性可以确定控件左侧的开始位置或重新定位控件的左侧。
        如果该控件包含在另一个控件中，则 Left 和 Top 属性是相对于父控件的。如果控件直接包含在窗体中，则属性值与窗体相关。对于表单，Left 属性的值是相对于屏幕（以像素为单位）的。"""
    Margins: Margins
    """边距：指定控件的边距。

        使用 Margins 属性设置控件的边距。
        如果 AlignWithMargins 为 true，则该控件的 Margins 属性控制相对于与该控件对齐的其他控件的间距。控件之间的距离不得小于边距中指定的间距。

        注意：仅当 AlignWithMargins 设置为 true 并且 Align 未设置为 alNone 时，为控件设置的边距才有效。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    Parent: Any
    """返回/设置控制父级"""
    ParentCustomHint: bool
    """bool：指定控件在何处查找其自定义提示。

        要让控件使用与其父控件相同的提示自定义信息，请将 ParentCustomHint 设置为 true。
        如果 ParentCustomHint 为 false，则控件使用其自己的 CustomHint 属性。
        将所有控件的 ParentCustomHint 设置为 true，以确保窗体上的所有控件都显示相同的提示消息。
        当控件的 CustomHint 属性的值发生更改时，ParentCustomHint 自动变为 false。"""
    ScaleFactor: float
    """float： 用于支持高DPI（Dots Per Inch，每英寸点数）显示。这在现代操作系统中变得越来越重要，因为它允许应用程序在高分辨率显示器上正确缩放和显示内容，以避免模糊或不正确的界面表现。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TBDockHeight: int
    """int：指定控件垂直停靠时的高度。

        读取 TBDockHeight 以获取控件上次垂直停靠时的高度。设置 TBDockHeight 以指示控件下次垂直停靠时应具有的高度。
        TBDockHeight 允许控件“记住”其停靠尺寸，即使其高度因未停靠或以水平方向停靠而发生变化也是如此。"""
    Top: int
    """int：指定控件左上角相对于其父控件或包含控件的 Y 坐标（以像素为单位）。

        使用“顶部”定位控件的顶部或将控件重新定位到不同的 Y 坐标。 Top 属性与 Left 属性一样，是控件相对于其容器的位置。因此，如果控件包含在 TPanel 中，则 Left 和 Top 属性是相对于面板的。如果控件直接包含在窗体中，则它是相对于窗体的。对于表单，Top 属性的值是相对于屏幕（以像素为单位）的。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    UndockHeight: int
    """int：指定控件浮动时的高度。

        读取 UndockHeight 以获取控件上次浮动时的高度。设置 UndockHeight 以指示控件下次脱离时应具有的高度。
        UndockHeight 允许控件“记住”其浮动大小，即使其高度因停靠而发生变化。"""
    UndockWidth: int
    """int：指定控件浮动时的宽度。

        读取 UndockWidth 以获取控件上次浮动时的宽度。设置 UndockWidth 以指示控件下次取消停靠时应具有的宽度。
        UndockWidth 允许控件“记住”其浮动大小，即使其宽度因停靠而发生变化。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。

        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    WindowProc: Callable[[Message],None]
    """可调用[[消息]，无]："""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BeginDrag(self, Immediate: bool, Threshold: int) -> None:
        """TControl.BeginDrag(Immediate: bool, Threshold: int) -> 无

        开始拖动控件。
        调用 BeginDrag 开始拖动操作。仅当控件的 DragMode 值为 dmManual 时，才会在应用程序代码中调用 BeginDrag。如果 DragMode 为 dmAutomatic，则自动调用 BeginDrag。
        如果 Immediate 参数为 true，则鼠标指针将更改为 DragCursor 属性的值，并且立即开始拖动。如果 Immediate 为 false，则鼠标指针不会更改为 DragCursor 属性的值，并且直到用户将鼠标指针移动了 Threshold 参数指定的像素数后才开始拖动。如果调用者传递的 Threshold 值小于 0（例如此参数的默认值），BeginDrag 将使用全局 Mouse 变量的 DragThreshold 属性。
        将 Immediate 设置为 false 允许控件接受鼠标单击，而无需开始拖放或拖放操作。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def CheckNonMainThreadUsage(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def ClientToParent(self, Point: Point, AParent: WinControl) -> Point:
        """TControl.ClientToParent(Point: Point, AParent: WinControl) -> Point

        将客户端坐标转换为父坐标。
        ClientToParent 将 Point 从当前控件的坐标系转换为 AParent 的坐标系。 AParent 必须是一个可以通过向上迭代 Parent 属性链找到的控件。如果 AParent 为空，则使用控件的直接父级。
        如果 AParent 不是祖先控件或 Parent 属性为空，则会引发 EInvalidOperation 异常。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TControl.Create(AOwner: Component) -> 无

        创建 TControl 的实例。
        调用 Create 构造并初始化 TControl 的实例。但是，您永远不应该尝试实例化 TControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。
        Create 调用父构造函数并初始化控件。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def DefaultHandler(self, Message) -> None:
        """TControl.DefaultHandler(Message) -> 无

        为没有特定处理程序的所有消息提供消息处理。
        重写 DefaultHandler 以扩展消息的默认处理。 DefaultHandler 是组件编写者处理控件消息的最后机会。 WindowProc 引用的方法提供了第一个机会。 Click 等单独的消息方法提供了额外的机会。
        DefaultHandler 处理 Windows 发送来管理控件文本的消息：WM_GETTEXT、WM_SETTEXT 和 WM_GETTEXTLENGTH。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TControl 的实例。

        不要直接在应用程序中调用 Destroy。请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        应用程序只应在调用构造函数时显式释放控件，而不为控件分配所有者。
        当控制被破坏时，它：

        释放 TFont 对象的 Font 属性。
        调用其继承的析构函数。
        重写 Destroy 以释放在 Create 方法中分配的所有内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并调用继承的 Destroy 作为重新声明方法中的最后一个语句。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果异常从构造函数中逃逸，则调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前检查所有数据字段是否为零。"""
    def Dock(self, NewDockSite: WinControl, ARect: Rect) -> None:
        """TControl.Dock（NewDockSite：WinControl，ARect：矩形）->无

        在内部用于对接控件。
        不要在应用程序中调用 Dock。它被自动调用以实现将控件停靠到停靠站点的许多细节。
        要以编程方式停靠控件，请改用 ManualDock。
        NewDockSite 参数指定控件所停靠的停靠站点。 ARect 参数指示控件停靠到 NewDockSite 时的新尺寸。"""
    def DragDrop(self, Source: Object, X: int, Y: int) -> None:
        """TControl.DragDrop（源：对象，X：int，Y：int）->无

        是一个 OnDragDrop 事件调度程序。
        创建从 TControl 派生的组件时，重写 DragDrop 以添加在调用 OnDragDrop 事件处理程序之前执行的其他代码。
        Source 参数是拖放到控件上的对象。 X 和 Y 参数是放置对象的鼠标坐标。"""
    def Dragging(self, *args, **kwargs) -> Any:
        """指示控件是否正在被拖动。

        使用 Dragging 来确定控件的拖动状态。如果 Dragging 返回 true，则控件正在被拖动。如果 Dragging 为 false，则不会拖动控件。"""
    def DrawTextBiDiModeFlags(self, Flags: int) -> int:
        """TControl.DrawTextBiDiModeFlags(Flags: int) -> int

        返回反映 BiDiMode 属性当前设置的文本标志。
        绘制控件的文本或标题时，调用 DrawTextBiDiModeFlags 获取画布的 TextFlags 属性的值。返回值也可以与 Windows API DrawText 函数一起使用。
        标志是当前文本标志，不受任何双向模式考虑因素的影响。
        DrawTextBiDiModeFlags 根据从 UseRightToLeftAlignment 和 UseRightToLeftReading 方法返回的值添加或删除 DT_RIGHT 或 DT_RTLREADING 标志。"""
    def DrawTextBiDiModeFlagsReadingOnly(self, *args, **kwargs) -> Any:
        """返回要添加的文本标志，指示控件的文本是否应从右向左阅读。

        调用 DrawTextBiDiModeFlagsReadingOnly 来确定在调用 Windows API DrawText 或分配画布的 TextFlags 属性时是否应添加 DT_RTLREADING 标志。
        DrawTextBiDiModeFlagsReadingOnly 返回 DT_RTLREADING 标志或 0，具体取决于从 UseRightToLeftReading 方法返回的值。
        要获取指示控件的双向对齐和文本方向的文本标志，请改用 DrawTextBiDiModeFlags。"""
    def EndDrag(self, Drop: bool) -> None:
        """TControl.EndDrag(Drop: bool) -> 无

        阻止控件被进一步拖动。
        使用 EndDrag 停止通过调用 BeginDrag 方法开始的拖动操作。
        如果 Drop 参数为 true，则拖动的控件将被放置或停靠。如果 Drop 参数为 false，则不会放置或停靠控件，并且会取消拖动。"""
    def GetControlsAlignment(self, *args, **kwargs) -> Any:
        """指示文本在控件内的对齐方式。

        使用 GetControlsAlignment 确定控件的对齐方式。对于没有 Alignment 属性的控件，GetControlsAlignment 返回 taLeftJustify。

        注意：GetControlsAlignment 返回由 BiDiMode 属性更改之前文本的对齐方式。要检查是否应反转对齐以反映 BiDiMode 属性，请调用 UseRightToLeftAlignment。"""
    def GetParentComponent(self, *args, **kwargs) -> Any:
        """返回控件的父级。

        GetParentComponent 由加载和保存 VCL 组件的流系统调用。GetParentComponent 返回的组件负责在流入或流出时加载和保存控件。如在 TControl 中实现的那样，GetParentComponent 返回 Parent 属性的值。"""
    def GetStyleName(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def GetSystemMetrics(self, nIndex: int) -> int:
        """TControl.GetSystemMetrics(nIndex: int) -> int

        目前没有任何其他信息。"""
    def GetTextBuf(self, Buffer: PWideChar, BufSize: int) -> int:
        """TControl.GetTextBuf(缓冲区: PWideChar, BufSize: int) -> int

        检索控件的文本，将其复制到缓冲区中，并返回复制的字符数。
        调用 GetTextBuf 将控件的文本检索到固定大小的缓冲区中。复制的文本是 Text 属性的值。 GetTextBuf 返回实际复制的字符数，它可以是 Text 属性的长度，也可以是 BufSize - 1，以较小者为准。
        要了解缓冲区需要多少个字符来容纳整个文本，请在为 GetTextBuf 分配缓冲区之前调用 GetTextLen 方法。

        注意：GetTextBuf 可用于与 16 位代码兼容。如果向后兼容性不是问题，请使用 Text 属性。
        注意：要获取 AnsiString 形式的控件文本，请改用 Text 属性。"""
    def GetTextLen(self, *args, **kwargs) -> Any:
        """返回控件文本的长度。

        调用 GetTextLen 来查找控件文本的长度。这是 GetTextBuf 方法使用的文本缓冲区所需的大小。"""
    def HasParent(self, *args, **kwargs) -> Any:
        """指示控件是否有父控件。

        HasParent 指示是否已为 Parent 属性分配了值。流系统使用此方法来确定控件是否有负责将其写入流的父控件。正如在 TControl 中实现的那样，如果 Parent 属性不为空，HasParent 返回 true，否则返回 false。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def InitiateAction(self, *args, **kwargs) -> Any:
        """如果控件与操作链接关联，则调用操作链接的 Update 方法。

        当应用程序空闲时，库会进行一系列调用以允许控件更新其关联的操作，以便它们反映控件的当前属性。第一个是每个窗体的 InitiateAction 方法，其次是其可见菜单和控件的 InitiateAction 方法。
        InitiateAction 间接调用操作的更新方法（通过其操作链接），这会导致许多事件，其中任何事件都可能更新操作并停止更新过程：

        首先，包含操作的操作列表接收 OnUpdate 事件。
        如果操作列表不处理 OnUpdate 事件，则 Application 对象会收到 OnActionUpdate 事件。
        如果 OnActionUpdate 事件处理程序不更新操作，则操作本身会收到 OnUpdate 事件。
        如果这没有更新操作，则调用活动控件的 UpdateAction 方法。
        最后，如果操作仍未更新，则调用活动表单的 UpdateAction 方法。"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def IsCustomStyleActive(self, *args, **kwargs) -> Any:
        """ 用于确定当前窗体是否正在使用自定义样式（Custom Style）。自定义样式是指通过 VCL 样式（Visual Component Library Styles）来自定义窗体和控件外观的能力。"""
    def IsLightStyleColor(self, AColor: int) -> bool:
        """TControl.IsLightStyleColor(AColor: int) -> bool

        目前没有任何其他信息。"""
    def IsRightToLeft(self, *args, **kwargs) -> Any:
        """指示控件是否应从右向左反转。

        使用 IsRightToLeft 确定是否应以任何方式反转控件，因为它在具有中东语言环境的系统上运行。 IsRightToLeft 旨在帮助组件编写者简化实现 BiDiMode 属性的过程。
        如果应用程序在支持中东的 Windows 版本上运行，并且 BiDiMode 属性指示控件应进行任何调整，则 IsRightToLeft 返回 true。"""
    def ManualDock(self, NewDockSite: WinControl, DropControl: Control, ControlSide: Align) -> bool:
        """TControl.ManualDock(NewDockSite: WinControl, DropControl: Control, ControlSide: Align) -> bool

        对接控件。
        使用 ManualDock 以编程方式停靠控件。 ManualDock 将控件从其当前停靠站点取消停靠，然后将控件停靠到其新停靠站点。
        NewDockSite 是控件的新停靠站点。
        DropControl 是新停靠站点（如果有）中要放置该控件的控件。例如，当停靠到页面控件时，DropControl 将是一个选项卡表。
        ControlSide 指定控件应停靠在 DropControl 或 NewDockSite 的哪一侧（如果 DropControl 为空。该值可以通过调用停靠站点的 GetDockEdge 方法来获取。"""
    def ManualFloat(self, ScreenPos: Rect) -> bool:
        """TControl.ManualFloat(ScreenPos: Rect) -> bool

        取消停靠控件。
        使用 ManualFloat 以编程方式取消停靠控件。
        ScreenPos 是控件开始浮动时显示的矩形。"""
    def MouseWheelHandler(self, Message: Message) -> None:
        """TControl.MouseWheelHandler(消息:消息) -> 无

        发送从鼠标滚轮接收到的消息。
        WndProc 方法在收到鼠标滚轮消息时调用 MouseWheelHandler。 MouseWheelHandler 检查窗口控件是否嵌入在窗体中，如果是，则调用窗体的 MouseWheelHandler 方法。这允许窗体在鼠标滚轮消息被各个控件处理之前对其进行响应。如果窗口控件不在窗体中，MouseWheelHandler 将鼠标滚轮消息传递给 Perform 方法，该方法生成 OnMouseWheel 事件，后跟（如果需要）OnMouseWheelUp 或 OnMouseWheelDown 事件。"""
    def ParentToClient(self, Point: Point, AParent: WinControl) -> Point:
        """TControl.ParentToClient(Point: Point, AParent: WinControl) -> Point

        将父坐标转换为客户端坐标。
        ParentToClient 将 Point 从 AParent 的坐标系转换到当前控件的坐标系。 AParent 必须是一个可以通过向上迭代 Parent 属性链找到的控件。如果 AParent 为空，则使用控件的直接父级。
        如果 AParent 不是祖先控件或 Parent 属性为空，则会引发 EInvalidOperation 异常。"""
    def Perform(self, Msg: int, WParam: int, LParam: int) -> int:
        """TControl.Perform(Msg: int, WParam: int, LParam: int) -> int

        如同控件收到指定的 Windows 消息一样进行响应。
        调用 Perform 绕过 Windows 消息队列并将消息直接发送到控件的窗口过程。
        Perform 使用在 Msg 参数中传递的消息 ID、在 WParam 和 LParam 中传递的消息参数以及为零的结果字段来填充消息记录（类型为 TMessage）。 Perform 然后将消息记录传递给 WindowProc 方法进行处理。\r
        如同控件收到指定的 Windows 消息一样进行响应。
        调用 Perform 绕过 Windows 消息队列并将消息直接发送到控件的窗口过程。
        Perform 使用在 Msg 参数中传递的消息 ID、在 WParam 和 LParam 中传递的消息参数以及为零的结果字段来填充消息记录（类型为 TMessage）。 Perform 然后将消息记录传递给 WindowProc 方法进行处理。\r
        如同控件收到指定的 Windows 消息一样进行响应。
        调用 Perform 绕过 Windows 消息队列并将消息直接发送到控件的窗口过程。
        Perform 使用在 Msg 参数中传递的消息 ID、在 WParam 和 LParam 中传递的消息参数以及为零的结果字段来填充消息记录（类型为 TMessage）。 Perform 然后将消息记录传递给 WindowProc 方法进行处理。"""
    def Refresh(self, *args, **kwargs) -> Any:
        """重新绘制屏幕上的控件。

        调用 Refresh 方法立即重新绘制控件。Refresh 调用 Repaint 方法。可交替使用 Refresh 和 Repaint 方法。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ReplaceDockedControl(self, Control: Control, NewDockSite: WinControl, DropControl: Control, ControlSide: Align) -> bool:
        """TControl.ReplaceDockedControl(Control: Control, NewDockSite: WinControl, DropControl: Control, ControlSide: Align) -> bool

        将控件停靠在另一个控件已停靠的位置。
        调用 ReplaceDockedControl 来替换已停靠的控件，同时将该控件移动到另一个停靠站点。
        控件是该控件所占据的位置的控件。
        NewDockSite 是被替换控件的新停靠站点。
        DropControl 是新停靠站点中的一个控件，可将被替换的控件放置在该控件上。例如，如果 NewDockSite 是页面控件，则 DropControl 将是选项卡表。
        ControlSide 指定替换的控件应停靠在 DropControl 或 NewDockSite 的哪一侧（如果 DropControl 为空。该值可以通过调用停靠站点的 GetDockEdge 方法来获取。
        ReplaceDockedControl 与调用 Control 参数指定的控件的 ManualDock 方法（使用 NewDockSite、DropControl 和 ControlSide 的值）执行相同的操作，此外还为该方法的控件调用 ManualDock，将其停靠在控制参数。但是，调用 ReplaceDockedControl 效率更高，并且可以防止不必要的闪烁。"""
    def ScaleForPPI(self, NewPPI: int) -> None:
        """TControl.ScaleForPPI(NewPPI: int) -> 无

        在处理跨多个显示器或设备像素密度（PPI）变化时，可以使用 ScaleForPPI 属性来调整控件或界面的显示效果，以适应不同的像素密度。这在支持高分辨率屏幕时特别有用，以确保界面元素的大小和布局在不同的PPI设置下都能够合适地显示。"""
    def ScaleRectSize(self, Value: Rect) -> Rect:
        """TControl.ScaleRectSize(Value: Rect) -> Rect

        目前没有任何其他信息。"""
    def ScaleValue(self, Value: int) -> int:
        """TControl.ScaleValue(值: int) -> int

        重载的 ScaleValue 方法返回作为参数传递的度量，该度量按控件的当前比例因子（ScaleFactor 只读属性的值）进行缩放。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def SetDesignVisible(self, Value: bool) -> None:
        """TControl.SetDesignVisible(Value: bool) -> 无

        使控件在设计时可见。
        SetDesignVisible 在窗体设计期间由内部使用。"""
    def SetParentComponent(self, Value: Component) -> None:
        """TControl.SetParentComponent(值: 组件) -> 无

        设置控件的父级。
        不要调用 SetParentComponent 方法。它由加载和保存 VCL 组件的流系统使用。 SetParentComponent 使 Value 参数指定的组件成为控件的父组件。
        仅当指定为父级的组件是窗口控件时，SetParentComponent 才会调用 SetParent 方法。"""
    def SetTextBuf(self, Buffer: PWideChar) -> None:
        """TControl.SetTextBuf(Buffer: PWideChar) -> 无

        设置控件的文本。
        调用SetTextBuf方法将控件的文本设置为指定缓冲区中的文本。
        文本设置为 Buffer 参数指向的缓冲区中的文本。 Buffer 必须指向一个以 null 结尾的字符串。 SetTextBuf 方法发送 WM_SETTEXT 和 CM_TEXTCHANGED 消息。在函数的紧密执行中执行此操作可能会导致在函数完成执行后处理来自 Windows 消息队列的消息之前无法看到更改。要中断函数的执行并处理消息，请使用 Application 对象的 ProcessMessages 方法。

        注意：提供 SetTextBuf 方法只是为了向后兼容。要立即设置控件的文本，请将字符串值分配给 Text 属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def UseRightToLeftAlignment(self, *args, **kwargs) -> Any:
        """指定控件的对齐方式是否应从右到左反转。

        控件在实现 BiDiMode 属性时调用 UseRightToLeftAlignment。 UseRightToLeftAlignment 指示控件的对齐方式是否应从右到左反转。绘制控件或响应鼠标事件时可以使用此信息。
        如果应用程序在具有中东语言环境的系统上运行且 BiDiMode 属性为 bdRightToLeft，则 UseRightToLeftAlignment 返回 True。否则，返回 False。如果中东语言环境中的对齐方式取决于其他因素，则后代将重写 UseRightToLeftAlignment。"""
    def UseRightToLeftReading(self, *args, **kwargs) -> Any:
        """指定控件是否使用从右到左的读取顺序。

        控件在实现 BiDiMode 属性时调用 UseRightToLeftReading。 UseRightToLeftReading 指示控件的文本是否应从右向左阅读。此信息可用于确定在创建控件时要为控件设置哪些样式标志以及为绘制文本设置哪些标志。
        如果应用程序在具有中东语言环境的系统上运行并且 BiDiMode 属性不是 bdLeftToRight，则 UseRightToLeftReading 返回 true。否则，UseRightToLeftReading 返回 false。"""
    def UseRightToLeftScrollBar(self, *args, **kwargs) -> Any:
        """指定垂直滚动条是否出现在控件的左侧。

        控件在实现 BiDiMode 属性时调用 UseRightToLeftScrollBar。当垂直滚动条出现在控件左侧时，UseRightToLeftScrollBar 返回 true；当垂直滚动条出现在右侧时，则返回 false。
        如果应用程序在具有中东语言环境的系统上运行并且 BiDiMode 属性为 bdRightToLeft 或 bdRightToLeftNoAlign，则 UseRightToLeftScrollBar 返回 true。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ControlBar(CustomControl):
    """TControlBar 管理工具栏组件的布局。
    使用 TControlBar 作为工具栏组件的停靠点。控制栏包含可以独立移动和调整大小的子控件（通常是 TToolBar 对象）。与酷栏一样，每个子控件都位于其自己的单独带上，用户可以通过拖动其大小手柄来定位该带。

    提示：将 TToolBar 对象停靠到控制栏时，您可能会发现使用 TToolDockObject 很有用。
    注意：如果要在 TControlBar 组件上使用 TActionToolBar，则应将 AutoSize 属性设置为 False。当 AutoSize 属性设置为 True（默认值）时，TActionToolBar 控件将包裹其控件并相应地扩展自身的大小。这不允许 TActionToolBar 组件在 TControlBar 组件上正确显示。当 AutoSize 属性设置为 False 时，TActionToolBar 会隐藏栏末端的项目并显示一个下拉按钮，提供对这些项目的访问。该控件以适当的大小显示。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """Anchors：指定控件如何锚定到其父级。

        使用 Anchors 可确保控件保持其相对于其父级边缘的当前位置，即使父级的大小已调整。当其父级的大小已调整时，控件将保持其相对于其锚定到的边缘的位置。
        如果控件锚定到其父级的相对边缘，则控件会在其父级的大小调整时拉伸。例如，如果控件的 Anchors 属性设置为 [akLeft, akRight]，则控件会在其父级的宽度更改时拉伸。
        仅在调整父级大小时强制使用 Anchors。因此，例如，如果控件在设计时锚定到窗体的相对边缘，并且窗体是在最大化状态下创建的，则控件不会拉伸，因为窗体在创建控件后不会调整大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与 Anchors 不同，Alignment 允许控件根据其他对齐的同级控件的大小变化以及父级控件的大小变化进行调整。"""
    AutoDock: bool
    """布尔：用于控制一个控件是否自动停靠到其容器的边界。"""
    AutoDrag: bool
    """布尔：用于控制控件是否在鼠标拖动时自动触发拖拽操作。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜面样式。

        使用 BevelKind 修改斜面的外观。BevelKind 影响斜面的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜面切口相结合，可以创建各种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    Canvas: Canvas
    """Canvas：指定为控件提供绘图表面的 TCanvas 对象。

        使用 TCanvas 对象的属性在控件表面上进行绘图或绘画。Canvas 封装了 Windows 设备上下文，提供了绘图和绘画所需的所有工具和方法。
        Canvas 是一个受保护的属性，通常在 TCustomControl 的后代中重新声明为公共属性。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    CornerEdge: CornerEdge
    """角边："""
    DockSite: bool
    """bool：指定控件是否可以作为拖放操作的目标。
        将 DockSite 设置为 true 以允许其他控件停靠到此窗口控件。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。
        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DrawingStyle: BandDrawingStyle
    """乐队绘画风格："""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    GradientDirection: GradientDirection
    """渐变方向："""
    GradientEndColor: int
    """整数：用于指定控件渐变背景的属性之一。"""
    GradientStartColor: int
    """整数：用于指定控件渐变背景起始颜色的属性之一。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnAlignInsertBefore: Callable[[WinControl,Control,Control],bool]
    """可调用[[WinControl, Control, Control], bool]:"""
    OnAlignPosition: Callable[[WinControl,Control,int,int,int,int,Rect,AlignInfo],None]
    """Callable[[WinControl, Control, int, int, int, int, Rect, AlignInfo], None]:"""
    OnBandDrag: Callable[[Object,Control,bool],None]
    """可调用[[对象，控制，布尔]，无]："""
    OnBandInfo: Callable[[Object,Control,Rect,int,int],None]
    """可调用[[对象，控制，矩形，整数，整数]，无]："""
    OnBandMove: Callable[[Object,Control,Rect],None]
    """可调用[[对象、控件、矩形]、无]："""
    OnBandPaint: Callable[[Object,Control,Canvas,Rect,BandPaintOptions],None]
    """Callable[[对象、控件、画布、矩形、BandPaintOptions]、无]："""
    OnBeginBandMove: Callable[[Object,Control,bool],None]
    """可调用[[对象，控制，布尔]，无]："""
    OnCanResize: Callable[[Object,int,int,bool],None]
    """Callable[[Object, int, int, bool], None]:"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnConstrainedResize: Callable[[Object,int,int,int,int],None]
    """可调用[[对象，int，int，int，int]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """Callable[[Object, DragDockObject, int, int], None]:"""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """Callable[[Object, DragDockObject, int, int, DragState, bool], None]:"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndBandMove: Callable[[Object,Control],None]
    """可调用[[对象，控件]，无]："""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """可调用[[对象、控件、矩形、点、布尔]、无]："""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnPaint: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnResize: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """Callable[[Object, Control, WinControl, bool], None]:"""
    ParentBackground: bool
    """bool：确定控件是否使用其父级的主题背景。

        如果 ParentBackground 为 True，则控件使用父级的主题背景来绘制自己的背景。
        如果 ParentBackground 为 False，则控件使用其自己的属性（例如 Color）来绘制其背景。
        除非启用 XP 主题，否则 ParentBackground 无效。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应具有三维外观。

        ParentCtl3D 是为了向后兼容而提供的。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    Picture: Picture
    """图片："""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    RowSize: int
    """整数：用于控制列表或网格等组件中行的大小或高度的属性。"""
    RowSnap: bool
    """布尔：指定控件停靠时是否与控件栏的行对齐。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否显示在屏幕上。

        使用 Visible 属性控制运行时控件的可见性。如果 Visible 为 True，则控件显示。如果 Visible 为 False，则控件不可见。
        调用 Show 方法将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子代，Show 和 ShowModal 方法将 Visible 设置为 True，并将表单置于所有打开窗口的前面。
        对于 TTabSheet 子代，Visible 不控制运行时控件的可见性。有关更多信息，请参阅 TabVisible 属性的描述。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomAction(ContainedAction):
    """TCustomAction 是旨在与菜单项和控件一起使用的 VCL 操作的基类。

    TCustomAction 引入了对作为操作对象客户端的菜单项和控件的属性、事件和方法的支持。
    TCustomAction 中引入的大多数属性和事件都是公共的；因此，在派生您自己的操作以发布关联控件的属性的特定子集时，请使用 TCustomAction 作为基类。
    操作对象集中对用户命令（操作）的响应，并表示使用操作的应用程序中的用户界面元素。它们提供了一种简单的方法来同步（例如，速度按钮和菜单项的启用状态和标题），并处理用户单击这些组件时的响应。每个此类组件（称为客户端）的属性都由操作动态更新，并将用户操作转发到操作以获取响应。
    在设计时，您可以在“动作列表”编辑器中处理动作列表中包含的动作，也可以在动作管理器的“动作管理器”编辑器中进行操作。操作列表或操作管理器是操作的容器，它将其组织成类别。
    TCustomAction 直接或通过祖先支持的组件和控件公共属性和事件包括：

    Caption
    Checked
    Enabled
    HelpType
    HelpContext
    HelpKeyword
    Hint
    ImageIndex
    ShortCut
    Visible
    OnHint
    OnUpdate
    OnExecute
    由于 OnHint、OnUpdate 和 OnExecute 事件是公共的，因此它们不会出现在对象检查器中。也就是说，对象检查器不支持为这些事件生成自定义事件处理程序。
    TCustomAction 还可以充当预定义操作类的基类。如果您想要保留受支持的属性和事件的公共范围或将公共范围修改为已发布范围，则可以从 TCustomAction 派生。
    有关增强 TCustomAction 行为的预定义操作，请参阅 Vcl.StdActns、Vcl.DBActns 和 Vcl.ExtActns 单元中的操作类。"""
    __hash__: ClassVar[None] = ...
    ActionComponent: Any
    """指示导致执行此操作的客户端组件。"""
    ActionList: CustomActionList
    """CustomActionList：保存该动作所属的动作列表。

        Vcl.ActnList.TCustomAction.ActionList继承自System.Actions.TContainedAction.ActionList。此行以下的所有内容均引用 System.Actions.TContainedAction.ActionList。
        保存该动作所属的动作列表。"""
    ImageName: str
    """str：显示图像集合中链接项目的名称。"""
    Images: CustomImageList
    """CustomImageList： 用于指定控件显示图像的来源。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomAction.Create(AOwner: Component) -> 无

        实例化并初始化 VCL TCustomAction 对象。
        应用程序不需要直接调用构造函数。当您在设计时将动作添加到动作管理器（在动作管理器编辑器中）或动作列表组件（在动作列表编辑器中）时，会自动创建动作。
        如果要在运行时创建操作，请分配
        调用 Create 后，将 TActionList 或 TActionManager 组件添加到其 ActionList 属性。
        AOwner 是负责释放操作的组件。它成为所有者财产的价值。
        Create 只需调用继承的 System.Actions.TContainedAction.Create 构造函数。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """释放 TCustomAction 的实例。

        不要直接在应用程序中调用析构函数。相反，请调用Free并确保在调用析构函数之前操作不为空。
        如果该操作包含在操作列表或操作管理器中，则 Destroy 会从该列表中删除该操作。"""
    def Execute(self) -> Any:
        """TBasicAction.Execute()

        生成 OnExecute 事件。"""
    def Update(self) -> Any:
        """TBasicAction.Update()

        提供在应用程序空闲时执行集中代码的机会。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomActionList(ContainedActionList):
    """VCL 中的常用操作列表（没有发布的属性）"""
    __hash__: ClassVar[None] = ...
    ActionCount: Any
    """指示操作列表中的操作数量。"""
    Actions: Any
    """列出由操作列表维护的操作。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Images: CustomImageList
    """自定义图像列表：用于指定控件显示图像的来源。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomActionList.Create(AOwner: Component) -> 无

        创建 TContainedActionList 的实例。
        该创建器继承自 TComponent，请参阅 TComponent.Create 了解更多信息。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TContainedActionList 的实例。

        该析构函数继承自 TComponent，有关详细信息，请参阅 TComponent.Destroy。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def IsShortCut(self, Message: WMKey) -> bool:
        """TCustomActionList.IsShortCut(消息: WMKey) -> bool"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomActivityIndicator(CustomControl):
    """TActivityIndi​​cator 的基类。

    动画旋转显示，指示应用程序正在执行某些活动。
    创建活动指示器，设置颜色、大小和类型，然后调用 StartAnimation 启动动画。您可以使用 FrameDelay 属性修改动画的速度。"""
    __hash__: ClassVar[None] = ...
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    Parent: Any
    """返回/设置控制父级"""
    Width: int
    """int：指定控件或表单的水平大小（以像素为单位）。
        使用 Width 属性读取或更改控件的宽度。

        注意：对于标签页控件，在运行时更改此属性无效。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomActivityIndi​​cator.Create(AOwner: Component) -> 无

        创建 TCustomActivityIndi​​cator 的实例。
        创建为所有活动指示器属性设置默认值。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomControl 的实例。

        Vcl.WinXCtrls.TCustomActivityIndi​​cator.Destroy 继承自 Vcl.Controls.TCustomControl.Destroy。该行以下的所有内容均引用Vcl.Controls.TCustomControl.Destroy。
        销毁 TCustomControl 的实例。
        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        应用程序只应在调用构造函数时显式释放控件，而不为控件分配所有者。
        当控件被销毁时，它会销毁其 Canvas 属性中的 TCanvas 对象。
        重写 Destroy 以释放在 Create 方法中分配的所有内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并调用继承的 Destroy 作为重新声明方法中的最后一个语句。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果异常从构造函数中逃逸，则调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前检查所有数据字段是否为零。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def StartAnimation(self, *args, **kwargs) -> Any:
        """将 Animate 属性设置为 True。"""
    def StopAnimation(self, *args, **kwargs) -> Any:
        """将 Animate 属性设置为 False。"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomBindingsList(Component):
    """表示绑定列表的基类。

    TCustomBindingsList 类实现绑定表达式、输出转换器、方法范围和其他绑定列表相关功能的列表。"""
    __hash__: ClassVar[None] = ...
    BindCompCount: int
    """int： 它是指当前窗体或数据模块中数据绑定控件的数量。"""
    BindComps: ContainedBindComponent
    """包含的绑定组件："""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    DependencyList: IDependencyList
    """IDependencyList： 目前没有任何其他信息。"""
    Methods: Methods
    """方法：指定可用方法的列表。有关这些方法的更多信息，请阅读 LiveBindings 方法主题。"""
    OutputConverters: OutputConverters
    """OutputConverters：指定可用输出转换器的列表。有关输出转换器的更多信息，请阅读 LiveBindings 输出转换器帮助主题。"""
    Owner: Any
    """返回组件所有者"""
    PromptDeleteUnused: bool
    """bool： 目前没有任何其他信息。"""
    UseAppManager: bool
    """bool：指定绑定列表是否使用全局应用程序管理器进行托管绑定。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomBindingsList.Create(AOwner: Component) -> None

        分配内存并构造组件的安全初始化实例。
        Data.Bind.Components.TCustomBindingsList.Create 继承自 System.Classes.TComponent.Create。此行以下所有内容均引用 System.Classes.TComponent.Create。
        分配内存并构造组件的安全初始化实例。
        所有对象都具有构造对象的 Create 方法。TComponent 重新定义 Create，因此对于组件，Create 还可以：

        建立组件与其所有者的关系，如 AOwner 参数所示。
        将 ComponentStyle 属性设置为 csInheritable，这意味着组件可以由后代表单类型继承。
        无需明确创建在表单设计器中添加的组件。这些组件在应用程序运行时自动创建，并在应用程序关闭时销毁。
        对于以编程方式创建的组件（即不是在 Form Designer 中创建的组件），请调用 Create 并传入所有者组件作为 AOwner 参数。所有者会在组件被销毁时将其处置。如果组件未被拥有，则在需要销毁时使用 Free。

        提示：在传入 Self 作为 Owner 参数时，请考虑 Self 引用的内容。如果组件在其某个方法中创建了另一个组件，则 Self 引用第一个组件，而不是正在创建的组件，该组件随后归第一个组件所有。
        注意：TComponent 构造函数是虚拟的，部分原因是为了允许类引用的多态实例化。这对于流式系统和 Form Designer 至关重要。声明新组件的 Create 构造函数时，不要忘记使用 override 指令。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """处置组件及其拥有的组件。

        Data.Bind.Components.TCustomBindingsList.Destroy 继承自 System.Classes.TComponent.Destroy。此行以下的所有内容均引用 System.Classes.TComponent.Destroy。
        处置组件及其拥有的组件。
        不要直接调用 Destroy。请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        切勿在组件自己的事件处理程序之一中显式释放组件，也不要从其拥有或包含的组件的事件处理程序中释放组件。
        要销毁表单，请调用其 Release 方法。 Release 会等待所有表单的事件处理程序以及表单组件的事件处理程序执行完毕，然后再销毁表单。

        注意：表单拥有在设计模式下放置在其上的所有控件和非可视组件。当它被释放时，所有这些组件也会自动释放。默认情况下，所有表单均归全局 Application 对象所有。当应用程序终止时，它会释放全局 Application 对象，从而释放所有表单。对于不是组件的对象，以及使用 nil 所有者创建的组件，请务必在完成对象后调用 Free；否则分配给该对象的内存将丢失，直到应用程序终止。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TCustomBindingsList.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        枚举所有子组件。
        Data.Bind.Components.TCustomBindingsList.GetChildren 继承自 System.Classes.TComponent.GetChildren。此行下面的所有内容均引用 System.Classes.TComponent.GetChildren。
        枚举所有子组件。
        GetChildren 在组件流系统内部使用。没有必要直接调用它。
        GetChildren 需要一个接收所有枚举组件的 TGetChildProc 例程。
        Root 代表将被枚举的组件的所有者。
        此方法在 TComponent 中不执行任何操作，并且预计会在后代中被重写。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TComponent 枚举器。

        Data.Bind.Components.TCustomBindingsList.GetEnumerator 继承自 System.Classes.TComponent.GetEnumerator。此行以下所有内容均引用 System.Classes.TComponent.GetEnumerator。
        返回 TComponent 枚举器。
        GetEnumerator 返回 TComponentEnumerator 引用，该引用枚举指定包含组件中包含的组件。
        要处理所有这些子组件，请在 While MoveNext do 循环中调用 TComponentEnumerator GetCurrent 方法。"""
    def GetMethodsScope(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def GetOutputConverter(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def Notify(self, AObject: Object, AProperty: str) -> None:
        """TCustomBindingsList.Notify(AObject: Object, AProperty: str) -> None

         目前没有任何其他信息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomControl(WinControl):
    """包装 Windows 屏幕对象但执行自己的渲染的控件的基类。

    在 TWinControl 的大多数后代中，绘制控件表面的工作属于底层 Windows 屏幕对象。如果控件具有 Windows 屏幕对象无法呈现的可见功能，则它需要访问画布对象，以便可以进行自己的绘制。
    TCustomControl 是绘制自己的表面的控件的两个基类之一。由于 TCustomControl 是 TWinControl 的后代，因此其后代的实例可以接收焦点并充当容器。
    执行自己的屏幕渲染并且不需要 TWinControl 功能的控件类应该是 TGraphicControl 而不是 TCustomControl 的后代。 TGraphicControl 对象可以以更少的开销呈现自身，因为它们没有底层 Windows 屏幕对象。
    TCustomControl 对象有一个 Paint 方法，每当控件需要渲染其图像时就会调用该方法。自定义控件使用 Canvas 属性绘制自身。"""
    __hash__: ClassVar[None] = ...
    Parent: Any
    """返回/设置控制父级"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomControl.Create(AOwner: Component) -> 无

        创建 TCustomControl 的实例。
        调用 Create 构造并初始化 TCustomControl 的实例。但是，您永远不应该尝试实例化 TCustomControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。在设计时放置在窗体上的控件是自动创建的。
        调用继承的构造函数后，Create 会初始化该控件及其 Canvas 属性的 TCanvas 对象。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果组件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomControl 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        应用程序只应在调用构造函数时显式释放控件，而不为控件分配所有者。
        当控件被销毁时，它会销毁其 Canvas 属性中的 TCanvas 对象。
        重写 Destroy 以释放在 Create 方法中分配的所有内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并调用继承的 Destroy 作为重新声明方法中的最后一个语句。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果异常从构造函数中逃逸，则调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前检查所有数据字段是否为零。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomDrawGrid(CustomGrid):
    """TCustomDrawGrid 是网格的基类，它发布用于绘制和操作网格中的单元格的事件。

    在定义发布用于绘制或操作网格中的单元格的事件的网格组件时，使用 TCustomDrawGrid 作为基类。 TCustomDrawGrid 引入了许多事件和方法，它们利用网格的表格组织来响应用户操作。
    不要创建 TCustomDrawGrid 的实例。相反，通过实例化 TCustomDrawGrid 的后代将网格控件放入表单中。使用 TDrawGrid 来表示表格网格中的非文本材料。对于文本，请使用 TStringGrid 对象。如果文本表示数据集中的字段值，请使用 TDBGrid。如果要显示名称/值对，请使用 TValueListEditor。"""
    __hash__: ClassVar[None] = ...
    Canvas: Any
    """指定为控件呈现绘图表面的 TCanvas 对象。"""
    CellAlignments: Alignment
    """对齐：用于指定在一个表格中每个单元格的文本或内容的对齐方式。"""
    Col: Any
    """指定包含选定单元格的列的索引。"""
    ColAlignments: Alignment
    """对齐：用于指定表格控件中每一列的默认对齐方式。"""
    ColWidths: Any
    """指定网格的列宽"""
    DrawingStyle: GridDrawingStyle
    """GridDrawingStyle：确定绘制网格时使用的样式。

        DrawingStyle 确定绘制网格时使用的样式。下表列出了 DrawingStyle 的可能值。
        值 含义
        gdsClassic 网格控件使用标准的无主题样式。
        gdsThemed 网格控件使用当前操作系统主题。
        gdsGradient 网格控件使用渐变进行样式设置。

        关于 Vcl.Grids.TStringGrid 的 DrawingStyle 的注意事项：
        除非您还将 DrawingStyle 设置为 gdsClassic，否则设置 FixedColor 无效。
        除非您将 DrawingStyle 的值设置为 gdsGradient，否则设置 GradientStartColor 和 GradientEndColor 无效。"""
    EditorMode: Any
    """确定当前单元格是否可以编辑。"""
    GridHeight: Any
    """指定网格的高度（以像素为单位）。"""
    GridWidth: Any
    """指定网格的宽度（以像素为单位）。"""
    LeftCol: Any
    """指定网格中第一个可见的可滚动列的索引。"""
    Row: Any
    """指定包含所选单元格的行的索引。"""
    RowHeights: Any
    """指定网格的行高"""
    Selection: Any
    """指示当前选择的边界。"""
    TabStops: bool
    """布尔："""
    TopRow: Any
    """指定网格中第一个可见的可滚动行的索引。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def CellRect(self, ACol: int, ARow: int) -> Rect:
        """TCustomDrawGrid.CellRect(ACol: int, ARow: int) -> 矩形

        返回网格中单元格的屏幕坐标。
        调用 CellRect 获取由 ACol 和 ARow 参数指示的列和行中单元格的边界（以像素为单位）。当 ACol 和 ARow 设置为零时，指定左上角单元格。
        如果指示的单元格不可见，则 CellRect 返回一个空矩形。"""
    def MouseToCell(self, X: int, Y: int, ACol: int, ARow: int) -> None:
        """TCustomDrawGrid.MouseToCell(X: int, Y: int, ACol: int, ARow: int) -> 无

        返回屏幕坐标 (X,Y) 位置处单元格的列和行。
        调用 MouseToCell 将网格相对屏幕坐标转换为行和列索引。 X和Y参数是要转换的点的屏幕坐标。 MouseToCell 返回 ACol 参数作为点 (X,Y) 上的列号，并返回 ARow 参数作为行号。
        通常，MouseToCell 方法用在鼠标事件处理程序中，该处理程序提供鼠标坐标作为方法调用的 X 和 Y 参数。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomEdit(WinControl):
    """TCustomEdit 是派生所有编辑框和备注控件的基类。

    TCustomEdit 通过引入提供以下功能的方法和属性来封装所有用于编辑文本的组件共有的行为：
    基本的文本编辑功能，例如选择文本、修改所选文本和大小写转换。
    对文本内容变化做出反应的能力。
    文本的访问控制，使其只读或引入密码字符来隐藏实际值。
    不要创建 TCustomEdit 的实例。在声明允许用户输入或修改文本的控件对象时，使用 TCustomEdit 作为基类。 TCustomEdit 的属性和方法提供了后代类继承的基本行为以及组件可以重写以自定义其行为的行为。"""
    __hash__: ClassVar[None] = ...
    Alignment: Alignment
    """对齐方式：确定文本在文本编辑控件内的对齐方式。

        使用对齐方式更改文本在文本编辑控件中的格式设置方式。对齐方式可以采用以下值之一：
        值 含义
        taLeftJustify 将文本与控件的左侧对齐
        taCenter 文本在控件中水平居中
        taRightJustify 将文本与控件的右侧对齐。"""
    CanUndo: bool
    """bool：指示编辑控件是否包含可以撤消的更改。

        读取 CanUndo 以确定用户是否对文本进行了任何可以通过调用 Undo 方法撤消的更改。当启用或禁用与这些命令相对应的菜单项时，这非常有用。"""
    CanUndoSelText: bool
    """bool：当设置为 True 时，它​​允许您调用或调用 Undo 操作，以撤消之前使用 SetSelText 或 SetSelTextBuf 所做的更改。默认情况下它设置为 false。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Modified: bool
    """bool：指示用户是否编辑了编辑控件的文本。

        使用 Modified 确定用户是否更改了编辑控件的 Text 属性。仅当您为 Text 属性分配值时，Modified 才会重置为 False。特别是，当控件获得焦点时，它不会重置。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    ReadOnly: bool
    """bool：确定用户是否可以更改编辑控件的文本。

        要将编辑控件限制为仅显示，请将 ReadOnly 属性设置为 true。将 ReadOnly 设置为 false 以允许编辑编辑控件的内容。
        将 ReadOnly 设置为 true 可确保文本不被更改，同时仍允许用户选择文本。然后应用程序可以操作所选文本，或将其复制到剪贴板。"""
    SelLength: int
    """int：指定选择的字符（字节）数。

        读取 SelLength 以确定所选文本的长度（以字节为单位）。这与字符数相同，除非您使用多字节字符集。设置 SelLength 将选择更改为包含从 SelStart 开始的第一个 SelLength 字节。

        注意：将 SelLength 设置为大于从 SelStart 到文本末尾的字符数的值会导致选择从 SelStart 到文本末尾的所有字符。将 SelLength 设置为大于可用字符数的值后立即读取 SelLength 将返回实际选择的字符数，而不是刚刚设置的值。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    SelText: str
    """str：指定编辑控件文本的选定部分。

        读取 SelText 以确定所选文本的值。设置 SelText 以用新字符串替换所选文本。如果没有选择，但编辑控件具有焦点，则设置 SelText 以将新字符串插入到光标处的文本中。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Text: str
    """str：包含与控件关联的文本字符串。

        使用 Text 属性读取控件的 Text 或为 Text 值指定新字符串。默认情况下，Text 是控件名称。对于编辑控件和备忘录，文本出现在控件内。对于组合框，文本是组合框的编辑控制部分的内容。

        注意：显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用哪个属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。"""
    TextHint: str
    """str：当 Text 属性为空时显示的提示或消息。

        使用 TextHint 提示用户在文本字段中需要输入什么类型的内容。必须启用运行时主题。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Clear(self, *args, **kwargs) -> Any:
        """从编辑控件中删除所有文本。

        使用 Clear 将 Text 属性替换为空字符串。Clear 会删除所有文本，而不仅仅是选定的文本。若要仅删除选定的文本，请使用 ClearSelection。"""
    def ClearSelection(self, *args, **kwargs) -> Any:
        """从编辑控件中删除选定的文本。

        使用 ClearSelection 从编辑控件中删除选定的文本。如果未选择任何文本，ClearSelection 将不执行任何操作。如果选择了所有文本，则 ClearSelection 会清除所有文本，就像 Clear 方法一样。

        注意：调用 ClearSelection 的作用与向编辑控件发送 WM_CLEAR 消息的作用相同。"""
    def ClearUndo(self, *args, **kwargs) -> Any:
        """清除撤消缓冲区，以便无法撤消对文本的任何更改。

        使用 ClearUndo 提交对 Text 属性的更改。调用 ClearUndo 后，CanUndo 属性为 false，Undo 方法不执行任何操作。"""
    def CopyToClipboard(self, *args, **kwargs) -> Any:
        """将编辑控件中选定的文本以 CF_TEXT 格式复制到剪贴板。

        使用 CopyToClipboard 将剪贴板的内容替换为所选文本。如果未选择任何文本，CopyToClipboard 不会清除剪贴板。如果未选择任何文本，CopyToClipboard 将不执行任何操作。

        注意：调用 CopyToClipboard 与向编辑控件发送 WM_COPY 消息执行相同的操作。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomEdit.Create(AOwner: Component) -> 无

        创建 TCustomEdit 的实例。
        调用 Create 创建并初始化 TCustomEdit 的实例。
        AOwner 是另一个组件，通常是表单，负责释放编辑控件。它成为所有者财产的价值。
        重写 Create 方法的派生对象应在执行任何其他初始化之前调用继承的 Create。"""
    def CutToClipboard(self, *args, **kwargs) -> Any:
        """将选定的文本以 CF_TEXT 格式复制到剪贴板，然后删除所选内容。

        使用 CutToClipboard 将剪贴板的内容替换为选定的文本，同时清除选定的文本。如果没有选定文本，CutToClipboard 不会执行任何操作。

        注意：调用 CopyToClipboard 与向编辑控件发送 WM_CUT 消息的作用相同。"""
    def DefaultHandler(self, Message) -> None:
        """TCustomEdit.DefaultHandler(Message) -> 无

        为控件本身未完全处理的所有消息提供消息处理。
        重写 DefaultHandler 以更改编辑控件的默认消息处理。 Message参数可以转换为TMessage类型以获得消息的WParam、LParam和Result。如果消息的结果不为零，则消息已被处理。将 Result 字段设置为非零值，以防止继承的方法进一步处理消息。

        注意：如果祖先没有为正在处理的消息指定处理程序，则在消息处理方法中调用继承会导致调用祖先的 DefaultHandler 方法。"""
    def GetControlsAlignment(self, *args, **kwargs) -> Any:
        """指示文本在控件内的对齐方式。

        Vcl.StdCtrls.TCustomEdit.GetControlsAlignment继承自Vcl.Controls.TControl.GetControlsAlignment。该行下面的所有内容均引用Vcl.Controls.TControl.GetControlsAlignment。
        指示文本在控件内的对齐方式。
        使用 GetControlsAlignment 确定控件的对齐方式。对于没有 Alignment 属性的控件，GetControlsAlignment 返回 taLeftJustify。

        注意：GetControlsAlignment 返回由 BiDiMode 属性更改之前文本的对齐方式。要检查是否应反转对齐以反映 BiDiMode 属性，请调用 UseRightToLeftAlignment。"""
    def GetSelTextBuf(self, Buffer: PWideChar, BufSize: int) -> int:
        """TCustomEdit.GetSelTextBuf(Buffer: PWideChar, BufSize: int) -> int

        将选定的文本复制到缓冲区并返回复制的字符数。
        使用 GetSelTextBuf 将选定的文本复制到字符缓冲区中。如果没有选择，缓冲区会收到一个空字符串。如果所选内容包含多于 (BufSize - 1) 个字符，则仅复制前 (BufSize - 1) 个字符。 GetSelTextBuf 返回实际复制到缓冲区中的字符数。"""
    def PasteFromClipboard(self, *args, **kwargs) -> Any:
        """将剪贴板的内容粘贴到编辑控件中，替换当前选择。

        使用 PasteFromClipboard 将所选文本替换为剪贴板的内容，或者，如果未选择任何文本，则在光标处插入剪贴板的内容。如果剪贴板为空，或者不包含 CF_TEXT 格式的任何内容，则 PasteFromClipboard 不执行任何操作。

        注意：调用 PasteFromClipboard 的作用与向编辑控件发送 WM_PASTE 消息的作用相同。"""
    def SelectAll(self, *args, **kwargs) -> Any:
        """选择编辑控件中的所有文本。

        使用 SelectAll 选择编辑控件中的所有文本。要仅选择部分文本，请使用 SelStart 和 SelLength 属性。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def SetSelText(self, Value: str) -> None:
        """TCustomEdit.SetSelText(Value: str) -> 无

        设置 SelText 属性。
        SetSelText 是 SelText 属性的属性访问方法。"""
    def SetSelTextBuf(self, Buffer: PWideChar) -> None:
        """TCustomEdit.SetSelTextBuf(Buffer: PWideChar) -> 无

        将选定的文本替换为以 null 结尾的字符串。
        使用 SetSelTextBuf 将当前选择替换为 Buffer 指向的以 null 结尾的字符串的内容。如果未选择任何文本，则将 Buffer 的内容插入到光标处。 SetSelTextBuf 的作用与设置 SelText 属性相同，只不过它采用的是指向 char 类型而不是字符串的指针。"""
    def Undo(self, *args, **kwargs) -> Any:
        """撤销撤消缓冲区中的所有更改。

        调用 Undo 可取消自上次调用 ClearUndo 方法以来对 Text 属性所做的所有更改。如果从未调用过 ClearUndo，则“撤消”将回滚所有更改。
        要确定撤消缓冲区中是否有任何更改，请检查 CanUndo 属性。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomForm(WinControl):
    """TCustomForm 是派生窗口（例如窗体或对话框）的基类。

    派生自 TCustomForm 以创建自定义窗口。 TCustomForm 后代可以包含其他对象，例如 TButton、TCheckBox 和 TComboBox 对象。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Active: bool
    """bool：指定表单是否具有焦点。

        使用 Active 来确定表单是否具有焦点。活动表单接收所有键盘输入。如果它有标题栏，则使用“控制”面板中指定的活动颜色来绘制它。
        如果 Active 为 true ，则表单具有焦点；如果 Active 为 false，则表单没有焦点。"""
    ActiveControl: WinControl
    """WinControl：指定窗体上具有焦点的控件。

        使用 ActiveControl 获取或设置窗体上具有焦点的控件。在应用程序中，在给定时间只有一个控件可以获得焦点。
        如果窗体没有焦点，则 ActiveControl 是窗体上的控件，当窗体接收焦点时，该控件将接收焦点。

        注意：当焦点转移到另一个控件时，ActiveControl 将在 OnExit 事件发生之前更新。"""
    ActiveOleControl: WinControl
    """WinControl：指定窗体上对焦点变化做出反应的 OLE 控件。

        使用 ActiveOleControl 在窗体上获取或设置对焦点变化做出反应的 OLE 控件。
        如果 ActiveOleControl 不为空，则指定 OLE 控件的用户界面在未获得焦点时将被停用。此外，当窗体获得或失去焦点时，指定 OLE 控件的文档窗口将分别激活或停用。"""
    BorderStyle: FormBorderStyle
    """FormBorderStyle：指定表单边框的外观和行为。

        使用 BorderStyle 获取或设置表单边框的外观和行为。 BorderStyle 可以是以下任意 TForm BorderStyle 值：
        值 含义
        bsDialog 不可调整大小；没有最小化/最大化菜单
        bsSingle 不可调整大小；最小化/最大化菜单
        bsNone 不可调整大小；没有可见的边界线
        bsSizeable 标准可调整大小的边框
        bsToolWindow 类似于 bsSingle，但标题较小
        bsSizeToolWin 像 bsSizeable 一样，标题较小

        注意：将 MDI 子窗体的边框样式更改为 bsDialog 或 bsNone 无效。"""
    Canvas: Canvas
    """画布：提供对表单绘图区域的访问。

        使用 TCanvas 在窗体的客户区上绘图。 Canvas 经常用在 OnPaint 事件处理程序中。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用 Color 读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父级的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        除非您将 TLabel.Transparent 设置为 False，否则 TLabel 的 Color 始终是背景颜色。"""
    CustomTitleBar: TitleBar
    """TitleBar： 目前没有任何其他信息。"""
    Designer: IDesignerHook
    """IDesignerHook：指定表单的设计器界面。

        Designer 属性在设计时内部使用。切勿为此属性赋值。这是由表单设计者自动完成的。仅在设计用于表单设计器的类（例如属性编辑器和组件编辑器）时才使用此属性。"""
    DropTarget: bool
    """bool：指定表单是否是拖放操作的目标。

        使用 DropTarget 确定表单当前是否是拖放操作的目标。"""
    Font: Font
    """字体：指定控件上或控件中的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用备用控件，其 Font 属性将更改标题或文本的颜色（如 TBitBtn 或 TSpeedButton）。"""
    FormState: FormState
    """FormState：表示表单的过渡状态信息。

        读取 FormState 以确定表单的状态。 FormState 指示窗体何时处于各种过渡状态或何时发生某些 Windows 操作。下表列出了可以包含在表单状态中的值：

        值 含义
        fsCreating 表单的构造函数当前正在执行。
        fsVisible 表单的窗口可见。此状态用于更新 Visible 属性。
        fsShowing 窗体的 WindowState 属性正在更改。此状态用于防止 WindowState 更改干扰正在进行的转换。
        fsModal 该窗体被创建为模式窗口。
        fsCreateMDIChild 该窗体是 MDI 父窗口。仅当创建 MDI 客户端窗口后才会设置此状态。
        fsActivated 窗体已收到 CM_ACTIVATE 消息（因为它收到焦点或应用程序变为活动状态），但尚未调用 Activate 方法来生成 OnActivate 事件。"""
    GlassFrame: GlassFrame
    """GlassFrame：在 Windows Vista、Windows 7 或更高版本的 Windows 操作系统下访问 Glass Frame。

        使用 GlassFrame 使您的表单与 Windows Vista 或 Windows 7 Aero 兼容，显示玻璃效果。
        GlassFrame 是为任何表单自动创建的 TGlassFrame 对象的属性。

        注意：该属性仅适用于带有 Aero 的 Windows Vista 或 Windows 7。否则，玻璃框架将被忽略。"""
    HelpFile: str
    """str：指定表单用于显示帮助的帮助文件的名称。

        如果您的窗体应该有一个与使用全局 TApplication 类型对象的 TApplication.HelpFile 属性指定的应用程序的默认帮助文件不同的帮助文件，则使用窗体的 HelpFile 属性来指定窗体将要使用的帮助文件的名称。用于显示来自的帮助。
        当窗体获得焦点时，TApplication.HelpSystem 指定的帮助系统显示窗体的 HelpFile 属性指定的帮助文件中的帮助主题。"""
    KeyPreview: bool
    """bool：指定窗体是否应在活动控件之前接收键盘事件。

        如果 KeyPreview 为 true，则键盘事件先在窗体上发生，然后再在活动控件上发生。 （活动控件由 ActiveControl 属性指定。）
        如果 KeyPreview 为 false，则键盘事件仅发生在活动控件上。
        导航键（Tab、BackTab、箭头键等）不受 KeyPreview 的影响，因为它们不生成键盘事件。同样，当按钮具有焦点或其 Default 属性为 true 时，Enter 键不受 KeyPreview 影响，因为它不会生成键盘事件。
        KeyPreview 默认为 false。"""
    Left: int
    """int：指定组件左边缘相对于其父组件的水平坐标。

        Vcl.Forms.TCustomForm.Left 继承自 Vcl.Controls.TControl.Left。该行以下的所有内容均引用Vcl.Controls.TControl.Left。
        指定组件左边缘相对于其父组件的水平坐标。
        使用 Left 属性可以确定控件左侧的开始位置或重新定位控件的左侧。
        如果该控件包含在另一个控件中，则 Left 和 Top 属性是相对于父控件的。如果控件直接包含在窗体中，则属性值与窗体相关。对于表单，Left 属性的值是相对于屏幕（以像素为单位）的。"""
    Menu: MainMenu
    """MainMenu：指定窗体的主菜单。

        使用 Menu 获取或设置窗体的主菜单。在设计时，Menu 设置为添加到窗体中的第一个 TMainMenu 组件。"""
    ModalResult: Any
    """表示用作模式对话框的表单的返回值。"""
    Monitor: Monitor
    """监视器：提供对显示表单的监视器的访问。

        如果应用程序在多监视器系统上运行，则使用监视器可以访问有关显示表单的监视器的信息。监视器由 DefaultMonitor 属性确定。"""
    OleFormObject: IOleForm
    """IOleForm：指定表单中包含的就地 OLE 对象的 IOleForm 接口。

        当表单用作就地 OLE 对象的框架时，OleFormObject 用于传达调整大小和销毁通知。"""
    PopupMode: PopupMode
    """PopupMode：控制顶级窗体如何根据 Window 的 WS_POPUP 样式进行操作。

        PopupMode 属性控制顶级窗体如何根据 Window 的 WS_POPUP 样式进行操作。具有 WS_POPUP 样式的窗口在 Z 顺序中始终位于其“所有者”上方。您可以将 PopupMode 属性与 PopupParent 属性结合使用，以避免由于模态对话框显示在屏幕上的另一个窗体后面而导致应用程序挂起。

        注意：使用 PopupMode 属性类似于为 FormStyle 属性指定 fsStayOnTop，但可以更好地控制分层。
        调用 ShowModal 方法时，PopupMode 属性会自动设置为 pmAuto。但是，这会导致重新创建窗口句柄，这通常是不可取的。为了避免重新创建窗口句柄，您可以在调用 ShowModal 方法之前（例如在设计时）将 PopupMode 属性明确设置为 pmAuto。
        对于非模态设计窗口（如工具面板和其他浮动工具窗口），请将 PopupMode 属性设置为 pmExplicit。这样，窗口将始终保持在主窗体的顶部。对于拼接设计（窗口停靠在主窗体上），设计窗口将保持在设计器顶部。

        注意：对于未停靠的窗口，设计窗口将保持在主窗体上方，从而允许其他顶级窗体遮挡设计窗口。
        通过将 PopupParent 属性设置为显式 TCustomForm，您可以强制窗体的 Z 顺序并创建用户无法更改的“堆叠”外观。如果 PopupMode 属性为 pmExplicit 且 PopupParent 为 nil，则 Application.MainForm 将隐式用作 PopupParent。如果没有指定 Application.MainForm，则 Application.Handle 将用作 PopupParent。如果 PopupMode 属性设置为 pmAuto，则 Screen.ActiveForm 将用作 PopupParent。"""
    PopupParent: CustomForm
    """CustomForm：设置用户无法更改的堆叠表单的顺序。

        如果 PopupMode 属性设置为 pmExplicit 并且 PopupParent 为 nil，则 Application.MainForm 将隐式用作 PopupParent。如果未分配 Application.MainForm，则使用 Application.Handle 作为 PopupParent。
        如果 PopupMode 属性设置为 pmAuto，则 Screen.ActiveForm 将用作 PopupParent 属性。"""
    Scaled: bool
    """bool：指定是否根据 PixelsPerInch 属性的值调整窗体的大小。

        缩放确定表单是否根据设计时使用的字体与运行时系统使用的当前系统字体之间的差异进行调整。如果 Scaled 为 true，则窗体会调整自身及其所有子控件的大小，以维持控件大小和以默认字体显示的文本高度之间的关系。如果 Scaled 为 false，则不会发生此类调整大小。
        通过将 Scaled 设置为 true，表单可以调整为不可缩放的字体（即，仅提供离散点大小的字体）或差异，例如在设计时使用小字体设计但在使用大字体的系统上运行的表单。
        调整大小的程度由 PixelsPerInch 属性确定，该属性测量设计表单时使用的系统上字体的比例。"""
    ScreenSnap: bool
    """bool：指定表单是否紧贴屏幕边缘。

        ScreenSnap 确定当用户移动表单时，表单的边缘是否与屏幕边缘对齐。要控制捕捉距离，请设置 SnapBuffer 属性。"""
    SnapBuffer: int
    """int：指定屏幕捕捉的距离。

        如果 ScreenSnap 为 true，则 SnapBuffer 确定在窗体捕捉到屏幕边缘之前窗体边缘和屏幕边缘之间的最大像素数。"""
    TaskbarHandler: TaskbarHandler
    """TaskbarHandler： 目前没有任何其他信息。"""
    Top: int
    """int：指定控件左上角相对于其父控件或包含控件的 Y 坐标（以像素为单位）。

        Vcl.Forms.TCustomForm.Top继承自Vcl.Controls.TControl.Top。该行以下的所有内容均引用Vcl.Controls.TControl.Top。
        指定控件左上角相对于其父控件或包含控件的 Y 坐标（以像素为单位）。
        使用“顶部”定位控件的顶部或将控件重新定位到不同的 Y 坐标。 Top 属性与 Left 属性一样，是控件相对于其容器的位置。因此，如果控件包含在 TPanel 中，则 Left 和 Top 属性是相对于面板的。如果控件直接包含在窗体中，则它是相对于窗体的。对于表单，Top 属性的值是相对于屏幕（以像素为单位）的。"""
    WindowState: WindowState
    """WindowState：表示窗体在屏幕上的显示方式。

        设置 WindowState 以最小化、最大化或恢复窗体窗口。读取 WindowState 以确定窗体是最小化、最大化还是处于正常状态。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def AfterConstruction(self, *args, **kwargs) -> Any:
        """施工事件调度程序。

        AfterConstruction 是表单对象构造后立即发生的事件的调度程序。正如在 TCustomForm 中实现的那样，AfterConstruction 调用 OnCreate 事件处理程序，前提是 OldCreateOrder 属性为 false。"""
    def BeforeDestruction(self, *args, **kwargs) -> Any:
        """销毁事件调度程序。

        BeforeDestruction 是表单对象销毁之前立即发生的事件的调度程序。正如在 TCustomForm 中实现的那样，BeforeDestruction 调用 OnDestroy 事件处理程序，前提是 OldCreateOrder 属性为 false。"""
    def Close(self) -> Any:
        """TForm.Close()

        关闭封装的表单"""
    def CloseQuery(self) -> Any:
        """TForm.CloseQuery()

        询问包装好的Form是否可以关闭"""
    def Create(self, AOwner: Component) -> None:
        """TCustomForm.Create(AOwner: Component) -> 无

        创建并初始化一个新的 TForm 对象。
        使用 Create 在运行时实例化 TForm 对象或 TForm 的后代。 AOwner 是 TCustomForm 对象的所有者。
        对于不是 TForm 对象的 TCustomForm 后代，请改用 CreateNew。为不是 TForm 的 TCustomForm 后代调用 Create 将引发异常。"""
    def CreateNew(self, AOwner: Component, Dummy: int) -> None:
        """TCustomForm.CreateNew(AOwner: Component, Dummy: int) -> None"""
    def DefaultHandler(self, Message) -> None:
        """TCustomForm.DefaultHandler(Message) -> 无

        为表单未完全处理的所有消息提供消息处理。
        重写 DefaultHandler 以更改表单的默认消息处理。这很少是必要的，因为可以通过创建消息方法来处理消息。
        DefaultHandler 通过调用 CallWindowProc OS 函数将任何未处理的消息传递给窗体的窗口过程。

        注意：在消息处理方法中调用继承会导致调用祖先的 DefaultHandler 方法，除非该祖先指定了消息的处理程序。"""
    def DefocusControl(self, Control: WinControl, Removing: bool) -> None:
        """TCustomForm.DefocusControl（控制：WinControl，删除：bool）->无

        将焦点从窗体上的控件上移开。
        使用 DefocusControl 将焦点从窗体上的控件上移开。该方法由 VCL 内部使用。
        Control 是要从中移除焦点的控件。如果 Control 是窗体的活动控件，则 DefocusControl 将窗体的 ActiveControl 属性设置为空。
        删除指定是否将焦点设置到控件的父级。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """从内存中删除表单。

        不要调用 Destroy。而是调用 Release，这会间接调用 Free 方法，而 Free 方法又会调用 Destroy。"""
    def Dock(self, NewDockSite: WinControl, ARect: Rect) -> None:
        """TCustomForm.Dock(NewDockSite: WinControl, ARect: Rect) -> 无

        处理表单自动停靠到其他窗口中。
        不要在应用程序代码中调用 Dock。当表单在接受它的对接站点上发布时，它会被自动调用。要以编程方式停靠窗体，请改用 ManualDock 方法。"""
    def FocusControl(self, Control: WinControl) -> None:
        """TCustomForm.FocusControl(Control: WinControl) -> 无

        将焦点设置到窗体上的控件。
        使用 FocusControl 将焦点设置到窗体上的控件。
        Control 是一个 TWinControl 对象，封装了要设置焦点的控件。 FocusControl 设置 ActiveControl 属性。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TCustomForm.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        返回表单的“子”组件；即从其 GetParentComponent 方法返回表单的组件。
        组件流系统调用 GetChildren 来请求表单为表单中的每个子组件执行回调。回调必须按创建顺序执行（子组件在表单文件中出现的顺序）。子组件定义为从其 GetParentComponent 方法返回此表单的任何组件。
        Proc 是为每个子组件执行的回调。
        Root 指定当前正在加载或保存的顶级组件（例如表单或数据模块）。
        在 TCustomForm 中，GetChildren 首先调用继承的方法，该方法为每个将表单列为其父级的控件执行 Proc。然后，如果 Root 参数标识此表单，则 GetChildren 为每个没有父级的子组件执行 Proc。"""
    def GetFormImage(self, *args, **kwargs) -> Any:
        """返回表单的位图。

        使用 GetFormImage 方法获取表单的位图。"""
    def Hide(self, *args, **kwargs) -> Any:
        """隐藏表单。

        隐藏将 Visible 属性设置为 false。"""
    def IsShortCut(self, Message: WMKey) -> bool:
        """TCustomForm.IsShortCut(消息: WMKey) -> bool

        当表单具有焦点时处理快捷键。
        当用户在窗体具有焦点时按下某个键时，会自动调用 IsShortCut。它允许表单调度快捷键并绕过标准击键处理（OnKeyDown、OnKeyPress 和 OnKeyUp 事件）。
        Message 参数封装了描述按键的 Windows 消息。如果该键的快捷方式存在，IsShortCut 将执行相应的命令并返回 true。否则 IsShortCut 返回 false。
        IsShortCut 生成 OnShortCut 事件以允许开发人员插入表单的快捷方式。如果 OnShortCut 事件处理程序未处理击键，IsShortCut 将检查与窗体菜单和操作关联的任何快捷方式。"""
    def LoadProps(self) -> Any:
        """TForm.LoadProps()

        从 .pydfm 文件加载属性"""
    def MakeFullyVisible(self, AMonitor: Monitor) -> None:
        """TCustomForm.MakeFullyVisible(AMonitor: 监视器) -> 无

        确保表单在指定的监视器上完全可见。
        调用 MakeFullyVisible 以确保表单不会在多显示器应用程序中显示为拆分在多个显示器上。
        AMonitor 是应显示表单的监视器。如果 AMonitor 为空，则 MakeFullyVisible 使用 Monitor 属性。
        MakeFullyVisible 检查表单是否完全适合指定的显示器。如果不合适，它会重新定位表单以使其适合（如果可能）。"""
    def MouseWheelHandler(self, Message: Message) -> None:
        """TCustomForm.MouseWheelHandler(消息：消息) -> 无

        将鼠标滚轮消息定向到适当的控件。
        当窗体或窗体中包含的任何窗口控件收到来自鼠标滚轮的消息时，会自动调用 MouseWheelHandler。 Message 参数封装了消息。
        正如在 TCustomForm 中实现的那样，MouseWheelHandler 不执行任何特殊处理，而只是通过调用其 Perform 方法将消息重定向到活动控件。默认情况下，Perform 方法会生成适当的鼠标滚轮事件。"""
    def Print(self, *args, **kwargs) -> Any:
        """打印表格。

        调用 Print 来打印表格。 Print 使用 GetFormImage 方法获取表单的位图并将其绘制到打印机的 HDC。"""
    def RecreateAsPopup(self, AWindowHandle: int) -> None:
        """TCustomForm.RecreateAsPopup(AWindowHandle: int) -> 无

        目前没有任何其他信息。"""
    def Release(self) -> Any:
        """TForm.Release()

        释放（销毁）包装的 Form"""
    def ScaleForCurrentDPI(self, *args, **kwargs) -> Any:
        """检查 Dpi 是否发生变化，并执行必要的更改以缩放新 Dpi 的所有控件。"""
    def ScaleForPPI(self, NewPPI: int) -> None:
        """TCustomForm.ScaleForPPI(NewPPI: int) -> 无

        目前没有任何其他信息。"""
    def SendCancelMode(self, Sender: Control) -> None:
        """TCustomForm.SendCancelMode（发件人：控制）-> 无

        取消表单上的模式。
        使用SendCancelMode 释放鼠标捕获并取消窗体上的滚动条输入和菜单处理。"""
    def SetFocus(self, *args, **kwargs) -> Any:
        """将焦点设置到表单。

        使用 SetFocus 为表单提供输入焦点。 SetFocus 调用活动控件的 SetFocus 方法（如果存在）。要确定窗体是否具有焦点，请使用 Active 属性。"""
    def SetFocusedControl(self, Control: WinControl) -> bool:
        """TCustomForm.SetFocusedControl(Control: WinControl) -> bool

        将焦点设置到窗体上的控件。
        使用 SetFocusedControl 为表单输入焦点提供控件。如果 Control 参数指定的 Control 已在接收焦点，则 SetFocusedControl 返回 false，否则返回 true。

        注意：返回值 true 并不表示控件已成功接收输入焦点。如果 Control 无法获得焦点（例如，如果它不可见），SetFocusedControl 仍将返回 true，表明已进行尝试。"""
    def Show(self, *args, **kwargs) -> Any:
        """显示表单。

        使用 Show 将表单的 Visible 属性设置为 true，并将表单置于屏幕上其他表单的前面。"""
    def ShowModal(self) -> Any:
        """TForm.ShowModal()

        将包装的表单显示为模态表单"""
    def UpdateDesignerCaption(self, AVisible: bool, AUpdateFrame: bool) -> None:
        """TCustomForm.UpdateDesignerCaption(AVsible: bool, AUpdateFrame: bool) -> 无

         目前没有任何其他信息。"""
    def WantChildKey(self, Child: Control, Message: Message) -> bool:
        """TCustomForm.WantChildKey(Child: Control, Message: Message) -> bool

        指示表单是否处理其拥有的控件的键盘输入。
        当控件收到键盘输入时，表单拥有的任何控件都会调用 WantChildKey。 如果 WantChildKey 返回 true，则控件不会对键盘输入执行进一步处理，而是将其交给其父表单来响应击键。 在其默认实现中，WantChildKey 始终返回 false；它在 TAc​​tiveForm 中被覆盖以实现某些 ActiveX 功能。"""
    def set_PopupParent(self, Value: CustomForm) -> None:
        """TCustomForm.set_PopupParent(Value: CustomForm) -> 无

        目前没有任何其他信息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomGrid(CustomControl):
    """TCustomGrid 是所有在二维网格中呈现信息的组件的基本类型。

    定义以表格格式表示信息的组件时，使用 TCustomGrid 作为基类。 TCustomGrid 引入了属性和方法来控制网格的外观和行为，包括对鼠标操作和用户编辑的响应。
    不要创建 TCustomGrid 的实例。相反，通过实例化 TCustomGrid 的后代将网格控件放入表单中。使用 TDrawGrid 来表示表格网格中的非文本材料。对于文本，请使用 TStringGrid 对象。如果文本表示数据集中的字段值，请使用 TDBGrid。"""
    __hash__: ClassVar[None] = ...
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    IsUpdating: bool
    """bool： 目前没有任何其他信息。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BeginUpdate(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomGrid.Create(AOwner: Component) -> 无

        创建 TCustomGrid 的实例。
        调用Create在运行时创建网格控件。在设计时放置在窗体上的网格控件是自动创建的。
        所有者是一个组件，负责释放网格并在保存到表单文件时启动流处理。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomGrid 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。"""
    def EndUpdate(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def MouseCoord(self, X: int, Y: int) -> GridCoord:
        """TCustomGrid.MouseCoord(X: int, Y: int) -> GridCoord

        返回包含屏幕坐标中指定点的单元格的行索引和列索引。
        调用 MouseCoord 来定位包含给定屏幕坐标的单元格的列和行。通常，MouseCoord 用于定位鼠标下方的单元格。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def TextWidthToColWidth(self, ATextLength: int, ACaption: str, AColumnObj: Object) -> int:
        """TCustomGrid.TextWidthToColWidth(ATextLength: int, ACaption: str, AColumnObj: Object) -> int

        目前没有任何其他信息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomImageList(BaseImageList):
    """TCustomImageList 的包装"""
    __hash__: ClassVar[None] = ...
    AllocBy: int
    """整数："""
    BkColor: int
    """整数："""
    BlendColor: int
    """整数："""
    ColorDepth: ColorDepth
    """颜色深度："""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    DrawingStyle: DrawingStyle
    """绘图风格："""
    GrayscaleFactor: int
    """整数："""
    Handle: int
    """整数："""
    Height: int
    """整数："""
    ImageType: ImageType
    """图像类型："""
    Masked: bool
    """布尔："""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Owner: Any
    """返回组件所有者"""
    Scaling: bool
    """布尔："""
    ShareImages: bool
    """布尔值："""
    Width: int
    """整数："""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Add(self, Image: Bitmap, Mask: Bitmap) -> int:
        """TCustomImageList.Add（图像：位图，掩码：位图）-> int"""
    def AddDisabledImage(self, Value: CustomImageList, Index: int) -> int:
        """TCustomImageList.AddDisabledImage(值：CustomImageList，索引：int) -> int"""
    def AddDisabledImages(self, Value: CustomImageList) -> None:
        """TCustomImageList.AddDisabledImages（值：CustomImageList）->无"""
    def AddIcon(self, Image: Icon) -> int:
        """TCustomImageList.AddIcon(Image: Icon) -> int"""
    def AddImage(self, Value: CustomImageList, Index: int) -> int:
        """TCustomImageList.AddImage(值：CustomImageList，索引：int) -> int"""
    def AddImages(self, Value: CustomImageList) -> None:
        """TCustomImageList.AddImages(值：CustomImageList) -> 无"""
    def AddMasked(self, Image: Bitmap, MaskColor: int) -> int:
        """TCustomImageList.AddMasked(图像: 位图, MaskColor: int) -> int"""
    @overload
    def Assign(self, Source: Persistent) -> None:
        """复制另一个类似对象的内容。
        将指定 Source 对象的副本属性和其他属性分配给当前对象。调用Assign的标准形式是：

        Destination.Assign(Source)

        它告诉当前对象将 Source 对象的内容复制到自身。
        大多数对象都会重写Assign 来处理类似对象的属性分配。重写Assign时，如果目标对象无法处理Source参数的类的属性分配，则调用继承的方法。
        如果没有重写的Assign 方法可以处理Source 中的属性分配，则TPercient 中实现的方法将调用源对象的AssignTo 方法。这允许源对象处理分配。如果 Source 对象为空，Assign 会引发 EConvertError 异常。
        一般来说，声明Destination = Source与Destination.Assign(Source)不一样。
        赋值运算符使Destination 引用与Source 相同的对象，而Assign 方法将Source 引用的对象的内容复制到Destination 引用的对象中。

        注意：某些属性的类型也是对象。如果这些属性编写了使用Assign 设置属性值的方法，那么在这些情况下，赋值运算符将执行与Assign 方法相同的操作。"""
    @overload
    def Assign(self, Source) -> Any:
        """复制另一个类似对象的内容。
        将指定 Source 对象的副本属性和其他属性分配给当前对象。调用Assign的标准形式是：

        Destination.Assign(Source)

        它告诉当前对象将 Source 对象的内容复制到自身。
        大多数对象都会重写Assign 来处理类似对象的属性分配。重写Assign时，如果目标对象无法处理Source参数的类的属性分配，则调用继承的方法。
        如果没有重写的Assign 方法可以处理Source 中的属性分配，则TPercient 中实现的方法将调用源对象的AssignTo 方法。这允许源对象处理分配。如果 Source 对象为空，Assign 会引发 EConvertError 异常。
        一般来说，声明Destination = Source与Destination.Assign(Source)不一样。
        赋值运算符使Destination 引用与Source 相同的对象，而Assign 方法将Source 引用的对象的内容复制到Destination 引用的对象中。

        注意：某些属性的类型也是对象。如果这些属性编写了使用Assign 设置属性值的方法，那么在这些情况下，赋值运算符将执行与Assign 方法相同的操作。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def CheckIndexAndName(self, AIndex: int, AName: str) -> None:
        """TCustomImageList.CheckIndexAndName(AIndex: int, AName: str) -> None"""
    def Clear(self, *args, **kwargs) -> Any:
        """用于清空图像列表中的所有图像。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomImageList.Create(AOwner: Component) -> 无

        分配内存并构造安全初始化的组件实例。
        所有对象都有一个构造对象的 Create 方法。 TComponent 重新定义了 Create，以便对于组件，Create 还可以：

        建立组件与其所有者的关系，如 AOwner 参数所示。
        将 ComponentStyle 属性设置为 csInheritable，这意味着该组件可以由后代表单类型继承。
        无需显式创建在表单设计器中添加的组件。这些组件在应用程序运行时自动创建，并在应用程序关闭时销毁。
        对于以编程方式创建的组件（即不是在表单设计器中创建的组件），请调用 Create 并将所有者组件作为 AOwner 参数传递。当组件被毁坏时，所有者将对其进行处置。如果组件不被拥有，则在需要销毁时使用 Free。

        提示：将 Self 作为 Owner 参数传递时，请考虑 Self 引用的内容。如果一个组件在其一个方法中创建另一个组件，则 Self 引用第一个组件，而不是正在创建的组件，该组件随后由第一个组件拥有。
        注意：TComponent 构造函数部分是虚拟的，以允许类引用的多态实例化。这对于流系统和表单设计器至关重要。声明新组件的 Create 构造函数时，不要忘记使用 override 指令。"""
    def CreateSize(self, AWidth: int, AHeight: int) -> None:
        """TCustomImageList.CreateSize(AWidth: int, AHeight: int) -> None"""
    def Delete(self, Index: int) -> None:
        """TCustomImageList.Delete(Index: int) -> None"""
    def Destroy(self, *args, **kwargs) -> Any:
        """处置组件及其拥有的组件。

        不要直接调用 Destroy。请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        切勿在组件自己的事件处理程序之一中显式释放组件，也不要从其拥有或包含的组件的事件处理程序中释放组件。
        要销毁表单，请调用其 Release 方法。 Release 会等待所有表单的事件处理程序以及表单组件的事件处理程序执行完毕，然后再销毁表单。

        注意：表单拥有在设计模式下放置在其上的所有控件和非可视组件。当它被释放时，所有这些组件也会自动释放。默认情况下，所有表单均归全局 Application 对象所有。当应用程序终止时，它会释放全局 Application 对象，从而释放所有表单。对于不是组件的对象，以及使用 nil 所有者创建的组件，请务必在完成对象后调用 Free；否则分配给该对象的内存将丢失，直到应用程序终止。"""
    def Draw(self, Canvas: Canvas, X: int, Y: int, Index: int, Enabled: bool) -> None:
        """TCustomImageList.Draw(Canvas: Canvas, X: int, Y: int, Index: int, Enabled: bool) -> None"""
    def DrawOverlay(self, Canvas: Canvas, X: int, Y: int, ImageIndex: int, Overlay: int, Enabled: bool) -> None:
        """TCustomImageList.DrawOverlay（画布：画布，X：int，Y：int，ImageIndex：int，覆盖：int，启用：bool）->无"""
    def FileLoad(self, ResType: ResType, Name: str, MaskColor: int) -> bool:
        """TCustomImageList.FileLoad(ResType: ResType, Name: str, MaskColor: int) -> bool"""
    def GetBitmap(self, Index: int, Image: Bitmap) -> bool:
        """TCustomImageList.GetBitmap(索引：int，图像：位图) -> bool"""
    def GetHotSpot(self, *args, **kwargs) -> Any: ...
    def GetIcon(self, Index: int, Image: Icon) -> None:
        """TCustomImageList.GetIcon(索引：int，图像：图标) -> 无"""
    def GetImageBitmap(self, *args, **kwargs) -> Any: ...
    def GetIndexByName(self, AName: str) -> int:
        """TCustomImageList.GetIndexByName(AName: str) -> int"""
    def GetInstRes(self, Instance: int, ResType: ResType, Name: str, Width: int, LoadFlags: LoadResources, MaskColor: int) -> bool:
        """TCustomImageList.GetInstRes（实例：int，ResType：ResType，名称：str，宽度：int，LoadFlags：LoadResources，MaskColor：int）-> bool"""
    def GetMaskBitmap(self, *args, **kwargs) -> Any: ...
    def GetNameByIndex(self, AIndex: int) -> str:
        """TCustomImageList.GetNameByIndex(AIndex: int) -> str"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def GetResource(self, ResType: ResType, Name: str, Width: int, LoadFlags: LoadResources, MaskColor: int) -> bool:
        """TCustomImageList.GetResource（ResType：ResType，名称：str，宽度：int，LoadFlags：LoadResources，MaskColor：int）-> bool"""
    def HandleAllocated(self, *args, **kwargs) -> Any: ...
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def Insert(self, Index: int, Image: Bitmap, Mask: Bitmap) -> None:
        """TCustomImageList.Insert（索引：int，图像：位图，掩码：位图）->无"""
    def InsertIcon(self, Index: int, Image: Icon) -> None:
        """TCustomImageList.InsertIcon(Index: int, Image: Icon) -> None"""
    def InsertMasked(self, Index: int, Image: Bitmap, MaskColor: int) -> None:
        """TCustomImageList.InsertMasked（索引：int，图像：位图，MaskColor：int）->无"""
    def IsImageNameAvailable(self, *args, **kwargs) -> Any: ...
    def IsScaled(self, *args, **kwargs) -> Any: ...
    def Move(self, CurIndex: int, NewIndex: int) -> None:
        """TCustomImageList.Move(CurIndex: int, NewIndex: int) -> 无"""
    def Overlay(self, ImageIndex: int, Overlay: int) -> bool:
        """TCustomImageList.Overlay(ImageIndex: int, Overlay: int) -> bool"""
    def RegisterChanges(self, Value: ChangeLink) -> None:
        """TCustomImageList.RegisterChanges（值：ChangeLink）->无"""
    def Replace(self, Index: int, Image: Bitmap, Mask: Bitmap) -> None:
        """TCustomImageList.Replace（索引：int，图像：位图，掩码：位图）->无"""
    def ReplaceIcon(self, Index: int, Image: Icon) -> None:
        """TCustomImageList.ReplaceIcon(Index: int, Image: Icon) -> None"""
    def ReplaceMasked(self, Index: int, NewImage: Bitmap, MaskColor: int) -> None:
        """TCustomImageList.ReplaceMasked（索引：int，NewImage：位图，MaskColor：int）->无"""
    def ResInstLoad(self, Instance: int, ResType: ResType, Name: str, MaskColor: int) -> bool:
        """TCustomImageList.ResInstLoad（实例：int，ResType：ResType，名称：str，MaskColor：int）-> bool"""
    def ResourceLoad(self, ResType: ResType, Name: str, MaskColor: int) -> bool:
        """TCustomImageList.ResourceLoad(ResType: ResType，名称：str，MaskColor：int) -> bool"""
    def SetSize(self, AWidth: int, AHeight: int) -> None:
        """TCustomImageList.SetSize(AWidth: int, AHeight: int) -> None"""
    def UnRegisterChanges(self, Value: ChangeLink) -> None:
        """TCustomImageList.UnRegisterChanges(Value: ChangeLink) -> 无"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomLinkControlToField(LinkControlToFieldDelegate):
    """表示用于将控件链接到字段的基类。
    TCustomLinkControlToField 类实现将控件链接到数据源中的字段的功能。

    提示：如果方向是双向的，则控件必须支持 IEditLinkObserver 接口。"""
    __hash__: ClassVar[None] = ...
    Active: bool
    """bool： 目前没有任何其他信息。"""
    AutoActivate: bool
    """bool： 目前没有任何其他信息。"""
    Binding: ExpressionsBindComponent
    """ExpressionsBindComponent： 目前没有任何其他信息。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Control: Component
    """组件： 目前没有任何其他信息。"""
    ControlMemberName: str
    """str： 目前没有任何其他信息。"""
    CustomFormat: str
    """str： 目前没有任何其他信息。"""
    CustomParse: str
    """str： 目前没有任何其他信息。"""
    Direction: LinkControlToFieldDirection
    """LinkControlToFieldDirection： 目前没有任何其他信息。"""
    FieldName: str
    """str： 目前没有任何其他信息。"""
    LookupDataSource: BaseLinkingBindSource
    """BaseLinkingBindSource： 目前没有任何其他信息。"""
    LookupKeyFieldName: str
    """str： 目前没有任何其他信息。"""
    LookupValueFieldName: str
    """str： 目前没有任何其他信息。"""
    Owner: Any
    """返回组件所有者"""
    Track: bool
    """bool： 目前没有任何其他信息。"""
    UseEvalShortcuts: bool
    """bool：确定此绑定组件委托是否使用评估快捷方式（True）或不使用（False）。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def ClearExpressionProperties(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomLinkControlToField.Create(AOwner: Component) -> 无

        创建 TContainedBindComponent 类的实例。
        Data.Bind.Components.TCustomLinkControlToField.Create 继承自 Data.Bind.Components.TContainedBindComponent.Create。此行下面的所有内容均引用 Data.Bind.Components.TContainedBindComponent.Create。
        创建 TContainedBindComponent 类的实例。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TContainedBindComponent 类的实例。

        Data.Bind.Components.TCustomLinkControlToField.Destroy 继承自 Data.Bind.Components.TContainedBindComponent.Destroy。此行下面的所有内容均引用 Data.Bind.Components.TContainedBindComponent.Destroy。
        销毁 TContainedBindComponent 类的实例。"""
    def GenerateExpressions(self, Sender: Component) -> None:
        """TCustomLinkControlToField.GenerateExpressions(Sender: Component) -> 无

        自动生成此委托所包装的快速绑定组件的绑定表达式。
        Data.Bind.Components.TCustomLinkControlToField.GenerateExpressions 继承自 Data.Bind.Components.TBindComponentDelegate.GenerateExpressions。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.GenerateExpressions。
        自动生成此委托所包装的快速绑定组件的绑定表达式。有关快速绑定组件的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    def GetDelegates(self, *args, **kwargs) -> Any:
        """获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。

        Data.Bind.Components.TCustomLinkControlToField.GetDelegates 继承自 Data.Bind.Components.TBindComponentDelegate.GetDelegates。此行以下所有内容均引用 Data.Bind.Components.TBindComponentDelegate.GetDelegates。
        获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomLinkLabel(WinControl):
    """TCustomLinkLabel 的包装器"""
    __hash__: ClassVar[None] = ...
    Alignment: CustomLinkLabel.TLinkAlignment
    """CustomLinkLabel.TLinkAlignment："""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的底层 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnLinkClick: Callable[[Object,str,SysLinkType],None]
    """Callable[[Object, str, SysLinkType], None]:"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    UseVisualStyle: bool
    """布尔："""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomLinkLabel.Create(AOwner: Component) -> 无

        创建 TWinControl 的实例。
        调用 Create 来构造并初始化一个新控件，并将新构造的控件插入到其所有者中，如 AOwner 参数所指定的那样。 Create 通过调用所有者的 InsertComponent 方法将控件插入所有者中。
        大多数控件都会重写 Create 以初始化其独特的属性。重写 Create 方法的对象必须始终首先调用继承的 Create 方法，然后继续进行特定于组件的初始化。重写 Create 方法时指定重写指令。
        如果组件的 Create 方法分配资源或内存，请重写 Destroy 方法以释放这些资源。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomLinkListControlToField(LinkControlToFieldDelegate):
    """表示用于将列表控件链接到字段的基类。
    TCustomLinkListControlToField 类实现将列表控件（例如 TListBox）链接到字段的功能。

    提示：如果方向是双向的，则控件必须支持 IEditLinkObserver 接口。"""
    __hash__: ClassVar[None] = ...
    Active: bool
    """bool： 目前没有任何其他信息。"""
    AutoActivate: bool
    """bool： 目前没有任何其他信息。"""
    AutoBufferCount: bool
    """bool： 目前没有任何其他信息。"""
    BindLink: CustomBindGridListLink
    """CustomBindGridListLink： 目前没有任何其他信息。"""
    BufferCount: int
    """int： 目前没有任何其他信息。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Control: Component
    """组件： 目前没有任何其他信息。"""
    ControlMemberName: str
    """str： 目前没有任何其他信息。"""
    CustomFormat: str
    """str： 目前没有任何其他信息。"""
    CustomParse: str
    """str： 目前没有任何其他信息。"""
    Direction: LinkControlToFieldDirection
    """LinkControlToFieldDirection： 目前没有任何其他信息。"""
    FieldName: str
    """str： 目前没有任何其他信息。"""
    FillBreakCustomFormat: str
    """str：指定与 FillBreakFieldName 属性定义的字段一起使用的自定义表达式。例如，表达式 StrCopy(%s, 0, 1);当字段的第一个字符不同时会导致中断。该属性是可选的。"""
    FillBreakFieldName: str
    """str：指定用于确定中断的字段。该属性是可选的。"""
    FillBreakGroups: FillBreakGroups
    """FillBreakGroups：指定中断值范围的集合。中断值属于该集合中的一个项目。与该项目关联的显示值显示在标题中。该属性是可选的。"""
    FillExpressions: FormatExpressions
    """FormatExpressions：指定填充列表控件时要使用的其他可选表达式。当需要多个表达式来填充列表中的项目时，请使用此集合。

        例如，您可以使用 FillExpressions 来填充 FireMonkey 列表框项目的 Text 和 Detail 属性。使用 FillDisplayCustomFormat 和 FillDisplayCustomFormat 属性来填充 Text 属性，并将项目添加到 FillExpressions 集合，用于 Detail 属性。"""
    FillHeaderCustomFormat: str
    """str：指定与 FillHeaderFieldName 属性定义的字段一起使用的自定义表达式。例如，表达式 StrCopy(%s, 0, 1);显示标题中字段的第一个字符。该属性是可选的。"""
    FillHeaderExpressions: FormatExpressions
    """FormatExpressions：指定填充列表标题的表达式集合。该属性是可选的。"""
    FillHeaderFieldName: str
    """str：指定要在列表标题中显示的字段。如果 FillBreakFieldName 和 FillBreakCustomFormat 为空，则使用 FillHeaderFieldName 和 FillBreakCustomFormat 控件确定的值会中断。这是导致中断的唯一必需字段。"""
    ListItemStyle: str
    """str： 目前没有任何其他信息。"""
    OnFilledList: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnFilledListItem: Callable[[Object,IBindListEditorItem],None]
    """可调用[[对象，IBindListEditorItem]，无]："""
    OnFillingList: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnFillingListItem: Callable[[Object,IBindListEditorItem],None]
    """可调用[[对象，IBindListEditorItem]，无]："""
    Owner: Any
    """返回组件所有者"""
    UseEvalShortcuts: bool
    """bool：确定此绑定组件委托是否使用评估快捷方式（True）或不使用（False）。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def ClearExpressionProperties(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomLinkListControlToField.Create(AOwner: Component) -> 无

        创建 TContainedBindComponent 类的实例。
        Data.Bind.Components.TCustomLinkListControlToField.Create 继承自 Data.Bind.Components.TContainedBindComponent.Create。此行下面的所有内容均引用 Data.Bind.Components.TContainedBindComponent.Create。
        创建 TContainedBindComponent 类的实例。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TContainedBindComponent 类的实例。

        Data.Bind.Components.TCustomLinkListControlToField.Destroy 继承自 Data.Bind.Components.TContainedBindComponent.Destroy。此行下面的所有内容均引用 Data.Bind.Components.TContainedBindComponent.Destroy。
        销毁 TContainedBindComponent 类的实例。"""
    def FillList(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def GenerateExpressions(self, Sender: Component) -> None:
        """TCustomLinkListControlToField.GenerateExpressions(Sender: Component) -> None

        自动生成此委托包装到的快速绑定组件的绑定表达式。
        Data.Bind.Components.TCustomLinkListControlToField.GenerateExpressions 继承自 Data.Bind.Components.TBindComponentDelegate.GenerateExpressions。此行以下所有内容均指 Data.Bind.Components.TBindComponentDelegate.GenerateExpressions。
        自动生成此委托包装到的快速绑定组件的绑定表达式。有关快速绑定组件的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    def GetDelegates(self, *args, **kwargs) -> Any:
        """获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。

        Data.Bind.Components.TCustomLinkListControlToField.GetDelegates 继承自 Data.Bind.Components.TBindComponentDelegate.GetDelegates。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.GetDelegates。
        获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父级。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomLinkPropertyToField(LinkPropertyToFieldDelegate):
    """表示用于将组件的属性链接到字段的基类。
    TCustomLinkPropertyToField 类实现将组件的属性链接到字段的功能。

    提示：不使用观察者监视对此组件的用户输入。"""
    __hash__: ClassVar[None] = ...
    Active: bool
    """bool： 目前没有任何其他信息。"""
    AutoActivate: bool
    """bool： 目前没有任何其他信息。"""
    BindLink: CustomBindLink
    """CustomBindLink： 目前没有任何其他信息。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    CustomFormat: str
    """str： 目前没有任何其他信息。"""
    LookupDataSource: BaseLinkingBindSource
    """BaseLinkingBindSource： 目前没有任何其他信息。"""
    LookupKeyFieldName: str
    """str： 目前没有任何其他信息。"""
    LookupValueFieldName: str
    """str： 目前没有任何其他信息。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def CanActivate(self, Sender: Component) -> bool:
        """TCustomLinkPropertyToField.CanActivate(发件人：组件) -> bool

        让包装绑定组件指示是否可以激活委托（或包含的）绑定组件。
        Data.Bind.Components.TCustomLinkPropertyToField.CanActivate 继承自 Data.Bind.Components.TBindComponentDelegate.CanActivate。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.CanActivate。
        让包装绑定组件指示是否可以激活委托（或包含的）绑定组件。
        如果可以激活委托（或包含的）绑定组件，则 CanActivate 方法返回 True，否则返回 False。"""
    def ClearGeneratedExpressions(self, Sender: Component) -> None:
        """TCustomLinkPropertyToField.ClearGeneratedExpressions（发件人：组件）-> 无

        立即清除此委托所包装的快速绑定组件的所有生成的绑定表达式。
        Data.Bind.Components.TCustomLinkPropertyToField.ClearGenerateExpressions 继承自 Data.Bind.Components.TBindComponentDelegate.ClearGenerateExpressions。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.ClearGenerateExpressions。
        立即清除此委托所包装的快速绑定组件的所有生成的绑定表达式。有关快速绑定组件的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomLinkPropertyToField.Create(AOwner: Component) -> 无

        创建 TContainedBindComponent 类的实例。
        Data.Bind.Components.TCustomLinkPropertyToField.Create 继承自 Data.Bind.Components.TContainedBindComponent.Create。此行下面的所有内容均引用 Data.Bind.Components.TContainedBindComponent.Create。
        创建 TContainedBindComponent 类的实例。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TContainedBindComponent 类的实例。

        Data.Bind.Components.TCustomLinkPropertyToField.Destroy 继承自 Data.Bind.Components.TContainedBindComponent.Destroy。此行下面的所有内容均引用 Data.Bind.Components.TContainedBindComponent.Destroy。
        销毁 TContainedBindComponent 类的实例。"""
    def GenerateExpressions(self, Sender: Component) -> None:
        """TCustomLinkPropertyToField.GenerateExpressions（发件人：组件）-> 无

        自动生成此委托所包装的快速绑定组件的绑定表达式。
        Data.Bind.Components.TCustomLinkPropertyToField.GenerateExpressions 继承自 Data.Bind.Components.TBindComponentDelegate.GenerateExpressions。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.GenerateExpressions。
        自动生成此委托所包装的快速绑定组件的绑定表达式。有关快速绑定组件的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    def GetDelegates(self, *args, **kwargs) -> Any:
        """获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。

        Data.Bind.Components.TCustomLinkPropertyToField.GetDelegates 继承自 Data.Bind.Components.TBindComponentDelegate.GetDelegates。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.GetDelegates。
        获取此包装器绑定组件用于执行表达式并响应用户输入的委托（或包含的）绑定组件。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父级。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def Loaded(self, *args, **kwargs) -> Any:
        """将表单文件读入内存后初始化组件。

        Data.Bind.Components.TCustomLinkPropertyToField.Loaded 继承自 System.Classes.TComponent.Loaded。此行下面的所有内容均引用 System.Classes.TComponent.Loaded。
        将表单文件读入内存后初始化组件。
        不要调用受保护的 Loaded 方法。流系统在从流加载组件的表单后调用此方法。
        当流系统从表单文件加载表单或数据模块时，它首先通过调用其构造函数来构造表单组件，然后从表单文件中读取其属性值。读取所有组件的所有属性值后，流系统会按照组件创建的顺序调用每个组件的 Loaded 方法。这使组件有机会初始化依赖于其他组件或其自身其他部分的值的任何数据。

        注意：所有对同级组件的引用都会在调用 Loaded 时解析。 Loaded 是同级指针在流入后第一个可以使用的地方。
        正如在 TComponent 中实现的那样，Loaded 会清除 ComponentState 属性中的 csLoading 标志，表明该组件不再加载。

        警告：Loaded 可能会在继承的表单上被多次调用。每次流入继承级别时都会调用它。在未首先检查内存是否在先前调用中尚未分配的情况下，请勿在重写的 Loaded 方法中分配内存。"""
    def RequiresControlHandler(self, *args, **kwargs) -> Any:
        """内部用于观察目的。

        Data.Bind.Components.TCustomLinkPropertyToField.RequiresControlHandler 继承自 Data.Bind.Components.TBindComponentDelegate.RequiresControlHandler。此行下面的所有内容均引用 Data.Bind.Components.TBindComponentDelegate.RequiresControlHandler。
        内部用于观察目的。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomListControl(WinControl):
    """TCustomListControl 的包装"""
    __hash__: ClassVar[None] = ...
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告控件的屏幕对象句柄是否存在。"""
    ItemIndex: int
    """整数：用于获取或设置控件中当前选定项的索引。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def AddItem(self, Item: str, AObject: Object) -> None:
        """TCustomListControl.AddItem(Item: str, AObject: Object) -> None"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Clear(self, *args, **kwargs) -> Any: ...
    def ClearSelection(self, *args, **kwargs) -> Any: ...
    def CopySelection(self, Destination: CustomListControl) -> None:
        """TCustomListControl.CopySelection（目标：CustomListControl）->无"""
    def Create(self, AOwner: Component) -> None:
        """TCustomListControl.Create(AOwner: Component) -> 无

        创建 TWinControl 的实例。
        调用 Create 来构造并初始化一个新控件，并将新构造的控件插入到其所有者中，如 AOwner 参数所指定的那样。 Create 通过调用所有者的 InsertComponent 方法将控件插入所有者中。
        大多数控件都会重写 Create 以初始化其独特的属性。重写 Create 方法的对象必须始终首先调用继承的 Create 方法，然后继续进行特定于组件的初始化。重写 Create 方法时指定重写指令。
        如果组件的 Create 方法分配资源或内存，请重写 Destroy 方法以释放这些资源。"""
    def DeleteSelected(self, *args, **kwargs) -> Any: ...
    def GetCount(self, *args, **kwargs) -> Any: ...
    def MoveSelection(self, Destination: CustomListControl) -> None:
        """TCustomListControl.MoveSelection（目标：CustomListControl）->无"""
    def SelectAll(self, *args, **kwargs) -> Any: ...
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomListView(CustomMultiSelectListControl):
    """TCustomListView 的包装"""
    __hash__: ClassVar[None] = ...
    BoundingRect: Rect
    """矩形：用于获取图像列表中所有图像的边界矩形（bounding rectangle）。该属性返回一个 TRect 类型的矩形，表示包围所有图像的最小矩形范围。"""
    Canvas: Canvas
    """画布："""
    Checkboxes: bool
    """布尔：用于控制是否显示复选框。"""
    Column: ListColumn
    """列表栏：用于管理和配置列信息。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    DropTarget: ListItem
    """项目清单：是指在拖放操作中作为目标的控件的属性。通过设置 DropTarget 属性，你可以指定一个控件在拖放操作中接收拖动操作中的数据。"""
    FlatScrollBars: bool
    """布尔：用于控制滚动条样式的属性，主要用于调整滚动条的外观风格。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    FullDrag: bool
    """布尔：用于指定在拖拽操作中，是否整个控件区域都可以作为拖动的触发区域。"""
    GridLines: bool
    """布尔：用于控制是否显示网格线。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HotTrack: bool
    """布尔：用于控制鼠标悬停时是否显示高亮效果。"""
    HotTrackStyles: ListHotTrackStyles
    """用于控制鼠标悬停时的高亮显示样式。"""
    ItemFocused: ListItem
    """用于获取或设置当前被焦点的列表视图中的项目索引。"""
    Items: ListItems
    """用于访问和管理列表视图中的条目集合。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    RowSelect: bool
    """布尔值：用于控制是否可以选择整行而不仅仅是单个条目。"""
    SelCount: int
    """整数：用于获取当前被选中的项目数量。"""
    Selected: ListItem
    """选中的条目"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TopItem: ListItem
    """用于获取或设置当前可见区域顶部的第一个列表项。"""
    ViewOrigin: Point
    """点："""
    VisibleRowCount: int
    """整数：可见的行数"""
    WorkAreas: WorkAreas
    """工作领域：用于与多显示器系统中的工作区域相关联。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def AddItem(self, Item: str, AObject: Object) -> None:
        """TCustomListView.AddItem(Item: str, AObject: Object) -> None"""
    def AlphaSort(self, *args, **kwargs) -> Any: ...
    def Arrange(self, Code: ListArrangement) -> None:
        """TCustomListView.Arrange（代码：ListArrangement）->无"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Clear(self, *args, **kwargs) -> Any: ...
    def ClearSelection(self, *args, **kwargs) -> Any: ...
    def CopySelection(self, Destination: CustomListControl) -> None:
        """TCustomListView.CopySelection（目标：CustomListControl）->无"""
    def Create(self, AOwner: Component) -> None:
        """TCustomListView.Create(AOwner: Component) -> None

        创建 TWinControl 的一个实例。
        调用 Create 来构造和初始化一个新控件，并将新构造的控件插入其所有者，如 AOwner 参数所指定。Create 通过调用所有者的 InsertComponent 方法将控件插入所有者。
        大多数控件都会重写 Create 来初始化其独特属性。重写 Create 方法的对象必须始终先调用继承的 Create 方法，然后再进行特定于组件的初始化。重写 Create 方法时指定重写指令。
        如果组件的 Create 方法分配资源或内存，请重写 Destroy 方法来释放这些资源。"""
    def CustomSort(self, SortProc: Callable[[int,int,int],int], lParam: int) -> bool:
        """TCustomListView.CustomSort(SortProc: Callable[[int, int, int], int], lParam: int) -> bool"""
    def DeleteSelected(self, *args, **kwargs) -> Any: ...
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TWinControl 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。"""
    def FindCaption(self, StartIndex: int, Value: str, Partial: bool, Inclusive: bool, Wrap: bool) -> ListItem:
        """TCustomListView.FindCaption(StartIndex: int, Value: str, Partial: bool, Inclusive: bool, Wrap: bool) -> ListItem"""
    def FindData(self, StartIndex: int, Value: Pointer, Inclusive: bool, Wrap: bool) -> ListItem:
        """TCustomListView.FindData(StartIndex: int, Value: Pointer, Inclusive: bool, Wrap: bool) -> ListItem"""
    def GetCount(self, *args, **kwargs) -> Any: ...
    def GetDragImages(self, *args, **kwargs) -> Any:
        """返回控件的图像列表，其中包含拖动时要显示的图像。

        重写 GetDragImages 为控件提供自定义图像列表。正如在 TControl 中实现的那样，GetDragImages 返回空。"""
    def GetHitTestInfoAt(self, X: int, Y: int) -> HitTests:
        """TCustomListView.GetHitTestInfoAt(X: int, Y: int) -> HitTests"""
    def GetItemAt(self, X: int, Y: int) -> ListItem:
        """TCustomListView.GetItemAt(X: int, Y: int) -> ListItem"""
    def GetNearestItem(self, Point: Point, Direction: SearchDirection) -> ListItem:
        """TCustomListView.GetNearestItem(点：点，方向：SearchDirection) -> ListItem"""
    def GetNextItem(self, StartItem: ListItem, Direction: SearchDirection, States: ItemStates) -> ListItem:
        """TCustomListView.GetNextItem（StartItem：ListItem，方向：SearchDirection，状态：ItemStates）-> ListItem"""
    def GetSearchString(self, *args, **kwargs) -> Any: ...
    def IsEditing(self, *args, **kwargs) -> Any: ...
    def Scroll(self, DX: int, DY: int) -> None:
        """TCustomListView.Scroll(DX: int, DY: int) -> 无"""
    def SelectAll(self, *args, **kwargs) -> Any: ...
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def StringWidth(self, S: str) -> int:
        """TCustomListView.StringWidth(S: str) -> int"""
    def UpdateItems(self, FirstIndex: int, LastIndex: int) -> None:
        """TCustomListView.UpdateItems(FirstIndex: int, LastIndex: int) -> None"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomMemo(CustomEdit):
    """TCustomMemo 是备忘录组件的基本类型，备忘录组件是多行编辑框，包括 TMemo 和 TDBMemo。

    TCustomMemo 引入了新的属性和方法来扩展 TCustomEdit 处理多行编辑框的功能。
    不要创建 TCustomMemo 的实例。声明实现多行编辑控件的控件对象时，使用 TCustomMemo 作为基类。 TCustomMemo 的属性和方法提供了后代类继承的基本行为以及组件可以重写以自定义其行为的行为。"""
    __hash__: ClassVar[None] = ...
    CaretPos: Point
    """点：指示插入符号在备忘录客户区中的位置。

        使用 CaretPos 确定光标的坐标。 CaretPos 定义屏幕上的位置（以字符为单位），原点位于备忘录的左上角。 X 指定点的水平坐标，Y 指定点的垂直坐标。
        要仅根据文本字符（而不是 X/Y 位置）确定插入符号的位置，请使用 SelStart 属性。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    EditMargins: EditMargins
    """EditMargins： 目前没有任何其他信息。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Lines: Strings
    """字符串：包含备忘录控件中的各个文本行。
        使用“行”在备忘录控件中逐行操作文本。 Lines 是一个 TStrings 对象，因此 TStrings 方法可用于 Lines 执行操作，例如计算文本行数、添加新行、删除行或用新文本替换行。例如：
        self.MyMemo.Lines.Add(...)
        要同时处理所有文本，请使用 Text 属性。要操作单行文本，Lines 属性效果更好。

        注意：虽然 Lines 是作为 TStrings 后代实现的，但它没有实现将对象与列表中的字符串关联的支持。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomMemo.Create(AOwner: Component) -> 无

        创建并初始化 TCustomMemo 的实例。
        调用 Create 来实例化 TCustomMemo 对象。
        AOwner 是负责释放备忘录对象的组件，通常是表单。这成为所有者财产的价值。
        重写 Create 方法的派生对象应在进行任何其他初始化之前调用继承的 Create。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomMemo 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        Destroy 在调用继承的析构函数之前释放实现 Lines 属性的 TStrings 对象。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomMemoryStream(Stream):
    """TCustomMemoryStream 是一个抽象基类，用作内存流的共同祖先。

    定义可以传输存储在内存中的数据的流对象时，使用 TCustomMemoryStream 作为基类。内存流对于提供对存储在难以访问的介质中的数据的类似文件的访问非常有用。创建内存流时，数据可以移动到内部内存缓冲区。在操作内存流中的数据之后，当内存流被破坏时，可以将数据写出到其实际存储介质。
    不要实例化 TCustomMemoryStream 的实例。它是一个抽象类，实现所有内存流通用的行为。要使用内存流的实例，请使用 TCustomMemoryStream 的后代之一，例如 TMemoryStream 或 TResourceStream。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """返回 TObject.ClassName"""
    Memory: Pointer
    """指针：提供对为内存流分配的内存池的直接访问。
        使用 Memory 来访问流的内存。流的存储器保存通过存储器流传输的数据。 Size 是分配的内存字节数，Position 是内存中的当前位置。

        注意：内存是只读属性。内存可用于更改内存的内容，但要设置流使用的实际内存，TCustomMemoryStream 的后代必须通过调用 SetPointer 方法分配一个指向内存缓冲区的指针。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def Read(self, Buffer, Count: int) -> int:
        """TCustomMemoryStream.Read(Buffer, Count: int) -> int

        从内存流读取最多 Count 个字节到 Buffer 中，并将流的当前位置前进读取的字节数。
        使用 Read 将内存流的内容从当前位置开始读入缓冲区。 Read 将从内存中的当前位置读取最多 Count 个字节。如果 Count 字节超出内存缓冲区的末尾，Read 将仅将数据传输到相关内存缓冲区的末尾。 Read 返回实际传输到 Buffer 的字节数，并相应地前进当前位置。如果返回值小于Count，则表示读取到流数据末尾。
        内存流的所有其他数据读取方法（ReadBuffer、ReadComponent）均调用 Read 来进行实际读取。

        注意：Read 将 Count 视为上限。相比之下，如果无法读取 Count 个字节，则 ReadBuffer 方法会引发异常。"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def SaveToFile(self, FileName: str) -> None:
        """TCustomMemoryStream.SaveToFile(FileName: str) -> 无

        将内存流的全部内容写入具有给定文件名的文件。
        使用 SaveToFile 将 Memory 的内容写入文件。 SaveToFile 允许应用程序写出内存流的内容，而无需显式创建和释放文件流对象。如果文件已经存在，当前文件内容将被新文件完全替换。如果无法创建或打开指定的文件，SaveToFile 将引发 EFCreateError 异常。"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TCustomMemoryStream.SaveToStream(Stream: Stream) -> 无

        将内存流的全部内容写入 Stream 指定的流对象。
        使用 SaveToStream 将内存中存储的数据复制到另一个存储介质中。 SaveToStream 将 Memory 的全部内容写入指定的流对象，从作为参数传递的流中的当前位置开始。
        当 Stream 参数是 TFileStream 对象时，SaveToStream 执行的操作与 SaveToFile 方法基本相同。但是，SaveToStream 写入目标流中的当前位置。因此，例如，SaveToStream 可用于将 Memory 的内容附加到文件流，而不是像 SaveToFile 那样替换文件的内容。
        如果内存流的全部内容无法写入目标流，SaveToStream 会引发 EWriteError 异常。"""
    def Seek(self, Offset: int, Origin: SeekOrigin) -> int:
        """TCustomMemoryStream.Seek(Offset: int, Origin: SeekOrigin) -> int

        相对于 Origin 指定的原点，将流的当前位置移动 Offset 个字节。
        使用 Seek 将内存流中的当前位置移动指定的偏移量。Seek 允许应用程序读取或写入与内存流关联的内存中的特定位置。
        如果 Offset 为负数，则从指定的原点向后查找。下表显示了 Origin 的不同值及其查找含义：

        值 含义
        soBeginning Offset 是从内存的开头开始的。Seek 移动到位置 Offset。Offset 必须 >= 0。
        soCurrent Offset 是从当前位置开始的。Seek 移动到位置 + Offset。
        soEnd Offset 是从内存的末尾开始的。Offset 必须 <= 0 以指示内存缓冲区末尾之前的字节数。
        Seek 返回 Position 属性的新值。

        注意：Seek 不会对为 Offset 提供的值进行错误检查。请勿使用会导致当前位置小于 0（在 Memory 开头之前）或大于 Size（超出内存缓冲区末尾）的偏移量来调用 Seek。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomMultiSelectListControl(CustomListControl):
    """TCustomMultiSelectListControl 的包装"""
    __hash__: ClassVar[None] = ...
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    MultiSelect: bool
    """布尔：用于控制是否允许用户选择多个列表项。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    SelCount: int
    """整数：选择的条目数量。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomNumberBox(CustomEdit):
    """TCustomEdit 是派生所有编辑框和备注控件的基类。

    Vcl.NumberBox.TCustomNumberBox 继承自Vcl.StdCtrls.TCustomEdit。该行以下的所有内容均引用Vcl.StdCtrls.TCustomEdit。
    TCustomEdit 是派生所有编辑框和备注控件的基类。
    TCustomEdit 通过引入提供以下功能的方法和属性来封装所有用于编辑文本的组件共有的行为：
    基本的文本编辑功能，例如选择文本、修改所选文本和大小写转换。
    对文本内容变化做出反应的能力。
    文本的访问控制，使其只读或引入密码字符来隐藏实际值。
    不要创建 TCustomEdit 的实例。在声明允许用户输入或修改文本的控件对象时，使用 TCustomEdit 作为基类。 TCustomEdit 的属性和方法提供了后代类继承的基本行为以及组件可以重写以自定义其行为的行为。"""
    __hash__: ClassVar[None] = ...
    AcceptExpressions: bool
    """bool： 目前没有任何其他信息。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    CurrencyFormat: NumberBoxCurrencyFormat
    """NumberBoxCurrencyFormat： 目前没有任何其他信息。"""
    CurrencyString: str
    """str： 目前没有任何其他信息。"""
    Decimal: int
    """int： 目前没有任何其他信息。"""
    DisplayFormat: str
    """str： 目前没有任何其他信息。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    LargeStep: float
    """float： 目前没有任何其他信息。"""
    MaxValue: float
    """float： 目前没有任何其他信息。"""
    MinValue: float
    """float： 目前没有任何其他信息。"""
    Mode: NumberBoxMode
    """NumberBoxMode： 目前没有任何其他信息。"""
    NegativeValueColor: int
    """int： 目前没有任何其他信息。"""
    OnChangeValue: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnEvaluateExpression: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnValidateChar: Any
    """可调用[[unicodechr(str), bool], None]:"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SmallStep: float
    """float： 目前没有任何其他信息。"""
    SpinButtonOptions: NumberBoxSpinButtonOptions
    """NumberBoxSpinButtonOptions： 目前没有任何其他信息。"""
    UseMouseWheel: bool
    """bool： 目前没有任何其他信息。"""
    UseNaNValue: bool
    """bool： 目前没有任何其他信息。"""
    UseUpDownKeys: bool
    """bool： 目前没有任何其他信息。"""
    Value: float
    """float： 目前没有任何其他信息。"""
    ValueCurrency: float
    """浮动： 目前没有任何其他信息。"""
    ValueFloat: float
    """float： 目前没有任何其他信息。"""
    ValueInt: int
    """int： 目前没有任何其他信息。"""
    Wrap: bool
    """bool： 目前没有任何其他信息。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以接收焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomNumberBox.Create(AOwner: Component) -> None

        创建 TCustomEdit 的一个实例。
        Vcl.NumberBox.TCustomNumberBox.Create 继承自 Vcl.StdCtrls.TCustomEdit.Create。此行以下的所有内容均引用 Vcl.StdCtrls.TCustomEdit.Create。
        创建 TCustomEdit 的一个实例。
        调用 Create 来创建并初始化 TCustomEdit 的一个实例。
        AOwner 是另一个组件，通常是表单，负责释放编辑控件。它成为 Owner 属性的值。
        覆盖 Create 方法的派生对象应在执行任何其他初始化之前调用继承的 Create。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TWinControl 的一个实例。

        Vcl.NumberBox.TCustomNumberBox.Destroy 继承自 Vcl.Controls.TWinControl.Destroy。此行以下所有内容均引用 Vcl.Controls.TWinControl.Destroy。
        销毁 TWinControl 的一个实例。
        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会验证 TWinControl 引用是否为空，然后才调用 Destroy。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomPrototypeBindSource(BaseObjectBindSource):
    """是实现用于创建示例数据的绑定源的基类。

    如果您想创建自己的自定义原型绑定源，则应从 TCustomPrototypeBindSource 派生类。设计应用程序时，可从工具面板获取 TPrototypeBindSource。"""
    __hash__: ClassVar[None] = ...
    AutoEdit: bool
    """bool： 目前没有任何其他信息。"""
    AutoPost: bool
    """bool： 目前没有任何其他信息。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    DataGenerator: CustomDataGeneratorAdapter
    """CustomDataGeneratorAdapter： 目前没有任何其他信息。"""
    FieldDefs: GeneratorFieldDefs
    """GeneratorFieldDefs： 目前没有任何其他信息。"""
    Owner: Any
    """返回组件所有者"""
    RecordCount: int
    """int： 目前没有任何其他信息。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomPrototypeBindSource.Create(AOwner: Component) -> 无

        分配内存并构造安全初始化的组件实例。
        Data.Bind.ObjectScope.TCustomPrototypeBindSource.Create 继承自 System.Classes.TComponent.Create。该行下面的所有内容均引用System.Classes.TComponent.Create。
        分配内存并构造安全初始化的组件实例。
        所有对象都有一个构造对象的 Create 方法。 TComponent 重新定义了 Create，以便对于组件，Create 还可以：

        建立组件与其所有者的关系，如 AOwner 参数所示。
        将 ComponentStyle 属性设置为 csInheritable，这意味着该组件可以由后代表单类型继承。
        无需显式创建在表单设计器中添加的组件。这些组件在应用程序运行时自动创建，并在应用程序关闭时销毁。
        对于以编程方式创建的组件（即不是在表单设计器中创建的组件），请调用 Create 并将所有者组件作为 AOwner 参数传递。当组件被毁坏时，所有者将对其进行处置。如果组件不被拥有，则在需要销毁时使用 Free。

        提示：将 Self 作为 Owner 参数传递时，请考虑 Self 引用的内容。如果一个组件在其一个方法中创建另一个组件，则 Self 引用第一个组件，而不是正在创建的组件，该组件随后由第一个组件拥有。
        注意：TComponent 构造函数部分是虚拟的，以允许类引用的多态实例化。这对于流系统和表单设计器至关重要。声明新组件的 Create 构造函数时，不要忘记使用 override 指令。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomStatusBar(WinControl):
    """TCustomStatusBar 是表示状态栏的对象的基类。

    TCustomStatusBar 组件是状态栏控件的基类。状态栏由一排面板组成，通常排列在窗体的底部，用于显示应用程序运行时的信息。每个面板都由 Panels 属性中列出的 TStatusPanel 对象表示。
    TCustomStatusBar 仅用作基类。要将状态栏添加到窗体，请使用 TCustomStatusBar 后代，例如 TStatusBar。"""
    __hash__: ClassVar[None] = ...
    AutoHint: bool
    """bool：指定状态栏的文本是否自动设置为当前提示。

        使用 AutoHint 指定状态栏的文本是否自动设置为当前提示。当 AutoHint 为 True 时，状态栏通过在第一个面板中显示提示文本的长版本来自动响应提示操作。"""
    Canvas: Canvas
    """Canvas：提供对状态栏绘图表面的运行时访问。

        只读 Canvas 属性提供对状态栏绘图表面的访问，您可以在实现 OnDrawPanel 事件的处理程序时使用该表面。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnCreatePanelClass: Callable[[CustomStatusBar,StatusPanelClass],None]
    """可调用[[CustomStatusBar，StatusPanelClass]，无]："""
    OnDrawPanel: Callable[[CustomStatusBar,StatusPanel,Rect],None]
    """可调用[[CustomStatusBar、StatusPanel、矩形]、无]："""
    OnHint: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Panels: StatusPanels
    """StatusPanels：列出状态栏中的面板（TStatusPanel 对象）。

        Panels 属性保存一个 TStatusPanels，即 TStatusPanel 对象的集合。在设计时，您可以使用面板编辑器添加、删除或修改面板。要打开面板编辑器，请在对象检查器中选择面板属性，然后双击右侧的值列或单击省略号 (...) 按钮。
        在设计时，您可以使用面板编辑器添加、删除或修改面板：

        要从对象检查器打开面板编辑器，请选择面板属性，然后双击右侧的值列或单击省略号 (...) 按钮。
        要从表单设计器打开面板编辑器，请右键单击 TStatusBar 并从上下文菜单中选择面板编辑器。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SimplePanel: bool
    """bool：确定状态栏是显示单个面板还是多个面板。
        如果 SimplePanel 设置为 True，则状态栏包含一个以 SimpleText 形式显示文本的面板。如果 SimplePanel 设置为 False，状态栏会为其 Panels 属性中的每个项目显示一个单独的面板。

        注意：当 SimplePanel 为 False 时，无法使用 SimpleText 属性在状态栏中显示文本。相反，您必须在面板对象之一上设置 Text 属性。"""
    SimpleText: str
    """str：包含当 SimplePanel 为 True 时要在状态面板中显示的文本字符串。

        注意：Microsoft Windows XP 和早期版本将字符串的大小限制为 127 个字符。在 Microsoft Windows Vista、Windows 7 或更高版本的 Windows 操作系统下，SimpleText 没有此类限制。"""
    SizeGrip: bool
    """bool：确定状态栏在运行时是否可调整大小。

        如果 SizeGrip 设置为 True，则状态栏右下角有一个三角形夹点。用户可以通过用鼠标拖动夹点来调整状态栏的大小。
        除非 Parent 属性引用 BorderStyle 为 bsSizeable 或 bsSizeToolWin 的 TCustomForm 后代的子级，否则不会绘制尺寸夹点。

        注意：如果“对齐”设置为 alBottom、alRight 或 alClient，则调整大小夹点将不起作用。如果状态栏中最后一个面板的 Alignment 属性设置为 taRightJustify，则调整大小夹点将截断面板的文本。"""
    UseSystemFont: bool
    """bool：指定状态栏是否使用系统字体。

        UseSystemFont 指定状态栏是否使用系统字体。要更改字体，请使用 Font 属性。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomStatusBar.Create(AOwner: Component) -> None

        创建并初始化 TCustomStatusBar 组件。
        Create 方法会创建状态栏及其画布和状态面板。
        AOwner 是一个组件，通常是表单，它会成为 Owner 属性的值。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomStatusBar 并释放其内存。

        不要直接调用 Destroy。相反，请使用 Free 方法，该方法在调用 Destroy 之前检查 nil 对象。
        Destroy 方法会销毁状态栏及其画布和状态面板。"""
    def ExecuteAction(self, Action: BasicAction) -> bool:
        """TCustomStatusBar.ExecuteAction(Action: BasicAction) -> bool

        处理状态栏的操作。
        当执行某个操作时，应用程序会进行一系列调用来响应该操作。如果在该处理过程中，应用程序将状态栏识别为操作的潜在目标，则会调用状态栏的 ExecuteAction 方法。
        如果该操作在提示操作 (THintAction) 中，则 ExecuteAction 将检查 AutoHint 属性，如果为 true，则显示提示并返回 true。否则，它允许继承的方法响应任何其他操作。
        Action 参数指定被调用的操作。
        如果操作已成功分派，则 ExecuteAction 返回 true；如果组件无法处理该操作，则返回 false。"""
    def FlipChildren(self, AllLevels: bool) -> None:
        """TCustomStatusBar.FlipChildren(AllLevels: bool) -> 无

        反转状态栏面板的位置。
        FlipChildren 遍历状态栏的面板，颠倒它们的顺序，但保持它们的属性不变。
        AllLevels 指定是否应在控件的子级上递归调用 FlipChildren。反转面板时，TCustomStatusBar 会忽略此参数。"""
    def SetBounds(self, ALeft: int, ATop: int, AWidth: int, AHeight: int) -> None:
        """TCustomStatusBar.SetBounds(ALeft: int, ATop: int, AWidth: int, AHeight: int) -> 无

        一次设置“Left”、“Top”、“Width”和“Height”属性。
        TCustomStatusBar 覆盖 SetBounds 以更新尺寸夹点。
        ALeft、ATop、AWidth 和 AHeight 分别指定 Left、Top、Width 和 Height 属性的新值。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomStyleServices(Object):
    """TCustomStyleServices 是一个提供对样式功能的访问的类。

    使用 TCustomStyleServices 的方法和属性来获取有关样式的信息或执行自定义控件的绘制。
    不要实例化 TCustomStyleServices；相反，调用 StyleServices 函数来访问 TCustomStyleServices 的方法和属性。"""
    __hash__: ClassVar[None] = ...
    Available: bool
    """bool：确定操作系统是否支持样式。

        使用Available 检查操作系统是否支持样式。"""
    ClassName: Any
    """返回 TObject.ClassName"""
    DesigningState: bool
    """bool： 目前没有任何其他信息。"""
    Enabled: bool
    """bool：确定当前应用程序是否启用样式。

        使用Enabled检查当前应用程序是否启用了样式。"""
    Flags: CustomStyleServices.TStyleFlags
    """CustomStyleServices.TStyleFlags：返回为当前样式设置的标志。

        使用 Flags 获取为当前样式设置的标志。"""
    IsSystemStyle: bool
    """bool：判断当前样式是否为系统样式。

        如果当前样式是默认操作系统样式，则 IsSystemStyle 返回 True；如果是自定义样式，则返回 False。"""
    Name: str
    """str：返回当前样式的名称。

        使用 Name 获取表示当前样式名称的字符串。您可以使用该名称与 StyleManager.SetStyle 激活样式相同。"""
    OnThemeChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Theme: int
    """整数：用于指定或获取当前应用程序的整体主题。"""
    ThemeForDPI: int
    """整数：用于获取或设置当前 DPI（Dots Per Inch，每英寸点数）下应用的主题。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def ApplyThemeChange(self, *args, **kwargs) -> Any:
        """重置应用程序主题。

        每当操作系统主题更改时，TApplication 对象都会自动调用ApplyThemeChange。

        注意：ApplyThemeChange 由 VCL 内部使用，不应由应用程序手动调用。"""
    def ColorToRGB(self, Color: int, Details: PhemedElementDetails) -> int:
        """TCustomStyleServices.ColorToRGB（颜色：int，详细信息：PhemedElementDetails）-> int

        获取指定 TColor 的颜色参考。
        使用 ColorToRGB 将 Color 参数转换为其 RGB 表示形式。
        如果Details不为nil，该函数返回为当前样式下的Color定义的系统颜色。例如，如果 Color 为 clBtnFace，则该函数返回为当前样式的按钮面定义的系统颜色，作为 TColorRef 值。\r
        获取指定 TColor 的颜色参考。
        使用 ColorToRGB 将 Color 参数转换为其 RGB 表示形式。
        如果Details不为nil，该函数返回为当前样式下的Color定义的系统颜色。例如，如果 Color 为 clBtnFace，则该函数返回为当前样式的按钮面定义的系统颜色，作为 TColorRef 值。"""
    def ContentRect(self, DC: int, Details: ThemedElementDetails, BoundingRect: Rect) -> Rect:
        """TCustomStyleServices.ContentRect(DC: int, 详细信息: ThemedElementDetails, BoundingRect: 矩形) -> 矩形"""
    def Create(self, *args, **kwargs) -> Any:
        """构造一个对象并在首次使用该对象之前初始化其数据。

        Vcl.Themes.TCustomStyleServices.Create继承自System.TObject.Create。该行以下的所有内容均引用System.TObject.Create。
        构造一个对象并在首次使用该对象之前初始化其数据。
        Create 构造一个对象。对象的用途、大小和行为差异很大。 TObject 定义的 Create 构造函数分配内存但不初始化数据。
        后代对象通常定义一个构造函数来创建特定类型的对象并初始化其数据。

        注意：如果异常从构造函数中逃逸，则会调用对象的析构函数来清理失败的实例。"""
    def DrawEdge(self, DC: int, Details: ThemedElementDetails, R: Rect, Edges: int, Flags: int, ContentRect: PRect) -> bool:
        """TCustomStyleServices.DrawEdge（DC：int，详细信息：ThemedElementDetails，R：矩形，边缘：int，标志：int，ContentRect：PRect）-> bool

        绘制包含当前样式元素的矩形的一条或多条边。
        调用 DrawEdge 绘制给定元素的一条或多条边。
        Edge 表示内边缘和外边缘的类型，Flags 指定边框的类型。

        注意：该方法的第一个重载已被弃用；请改用第二个重载。\r
        绘制包含当前样式元素的矩形的一条或多条边。
        调用 DrawEdge 绘制给定元素的一条或多条边。
        Edge 表示内边缘和外边缘的类型，Flags 指定边框的类型。

        注意：该方法的第一个重载已被弃用；请改用第二个重载。"""
    def DrawElement(self, DC: int, Details: ThemedElementDetails, R: Rect, ClipRect: Rect, DPI: int) -> bool:
        """TCustomStyleServices.DrawElement(DC: int, Details: ThemedElementDetails, R: Rect, ClipRect: Rect, DPI: int) -> bool

        绘制指定元素。
        调用 DrawElement 以使用当前样式绘制由 Details 指定的元素。
        R 是绘制元素的矩形，ClipRect 是剪切矩形。\r
        绘制指定元素。
        调用 DrawElement 以使用当前样式绘制由 Details 指定的元素。
        R 是绘制元素的矩形，ClipRect 是剪切矩形。"""
    def DrawIcon(self, DC: int, Details: ThemedElementDetails, R: Rect, Images: int, Index: int) -> bool:
        """TCustomStyleServices.DrawIcon（DC：int，详细信息：ThemedElementDetails，R：矩形，图像：int，索引：int）-> bool

        在给定元素上绘制图标。
        调用DrawIcon绘制位于Images指定的图像列表中Index索引处的图像。图标绘制在 R 指定的矩形中，位于详细信息指示的元素上方。"""
    def DrawParentBackground(self, Window: int, Target: int, Details: PhemedElementDetails, OnlyIfTransparent: bool, Bounds: Rect) -> bool:
        """TCustomStyleServices.DrawParentBackground（窗口：int，目标：int，详细信息：PhemedElementDetails，OnlyIfTransparent：bool，边界：矩形）-> bool

        绘制给定用户界面元素的父元素的背景。
        调用 DrawParentBackground 使用当前样式绘制用户界面元素的父元素的背景。
        如果 OnlyIfTransparent 为 True，则仅当元素在当前样式中透明时才执行绘制。 Bounds 表示要绘制的区域。\r
        绘制给定用户界面元素的父元素的背景。
        调用 DrawParentBackground 使用当前样式绘制用户界面元素的父元素的背景。
        如果 OnlyIfTransparent 为 True，则仅当元素在当前样式中透明时才执行绘制。 Bounds 表示要绘制的区域。\r
        绘制给定用户界面元素的父元素的背景。
        调用 DrawParentBackground 使用当前样式绘制用户界面元素的父元素的背景。
        如果 OnlyIfTransparent 为 True，则仅当元素在当前样式中透明时才执行绘制。 Bounds 表示要绘制的区域。"""
    def DrawText(self, DC: int, Details: ThemedElementDetails, S: str, R: Rect, Flags: int, Flags2: int, DPI: int) -> bool:
        """TCustomStyleServices.DrawText（DC：int，详细信息：ThemedElementDetails，S：str，R：矩形，Flags：int，Flags2：int，DPI：int）-> bool

        使用当前样式在元素上绘制文本。
        调用DrawText在R指定的矩形中绘制S字符串。S字符串具有Flags和Options参数指示的格式和附加选项。绘图是使用当前样式的设置进行的。

        注意：此函数的第一个重载已被弃用。使用以下两个使用 TTextFormat 的重载来指定文本格式。\r
        使用当前样式在元素上绘制文本。
        调用DrawText在R指定的矩形中绘制S字符串。S字符串具有Flags和Options参数指示的格式和附加选项。绘图是使用当前样式的设置进行的。

        注意：此函数的第一个重载已被弃用。使用以下两个使用 TTextFormat 的重载来指定文本格式。\r
        使用当前样式在元素上绘制文本。
        调用DrawText在R指定的矩形中绘制S字符串。S字符串具有Flags和Options参数指示的格式和附加选项。绘图是使用当前样式的设置进行的。

        注意：此函数的第一个重载已被弃用。使用以下两个重载，它们使用 TTextFormat 来指定文本格式。"""
    def GetElementColor(self, Details: ThemedElementDetails, ElementColor: ElementColor, Color: int) -> bool:
        """TCustomStyleServices.GetElementColor（详细信息：ThemedElementDetails，ElementColor：ElementColor，颜色：int）-> bool

        确定由“详细信息”指定的元素的颜色。
        GetElementColor 确定用于由 ElementColor 确定的属性的颜色值。"""
    def GetElementContentRect(self, DC: int, Details: ThemedElementDetails, BoundingRect: Rect, ContentRect: Rect) -> bool:
        """TCustomStyleServices.GetElementContentRect（DC：int，详细信息：ThemedElementDetails，BoundingRect：矩形，ContentRect：矩形）-> bool

        获取元素内容区域的背景矩形。
        当启用样式时，调用 GetElementContentRect 检索包含控件背景区域的矩形。
        详细信息表示从中检索信息的用户界面元素。"""
    def GetElementMargins(self, DC: int, Details: ThemedElementDetails, ElementMargin: ElementMargin, Margins: _MARGINS, DPI: int) -> bool:
        """TCustomStyleServices.GetElementMargins(DC: int, 详细信息: ThemedElementDetails, ElementMargin: ElementMargin, 边距: _MARGINS, DPI: int) -> bool

        确定当前样式中元素的边距。
        调用 GetElementMargins 以检索详细信息指定的控件的边距。\r
        确定当前样式中元素的边距。
        调用 GetElementMargins 以检索“详细信息”指定的控件的边距。"""
    def GetElementRegion(self, Details: ThemedElementDetails, Rect: Rect, Region: int) -> bool:
        """TCustomStyleServices.GetElementRegion（详细信息：ThemedElementDetails，矩形：矩形，区域：int）-> bool

        确定当前样式中元素的区域。
        调用 GetElementRegion 获取以给定矩形为边界的元素区域。\r
        确定当前样式中元素的区域。
        调用 GetElementRegion 获取以给定矩形为边界的元素区域。"""
    def GetElementSize(self, DC: int, Details: ThemedElementDetails, ElementSize: ElementSize, Size: Size, DPI: int) -> bool:
        """TCustomStyleServices.GetElementSize(DC: int, 详细信息: ThemedElementDetails, ElementSize: ElementSize, 大小: Size, DPI: int) -> bool

        确定控件指定部分的大小。
        调用 GetElementSize 获取包含由 Details 指定的控件部分的矩形的大小。
        ElementSize 表示要返回的大小类型: 最小、实际或拉伸。\r
        确定控件指定部分的大小。
        调用 GetElementSize 获取包含由 Details 指定的控件部分的矩形的大小。
        ElementSize 表示要返回的大小类型：最小、实际或拉伸。"""
    def GetStyleColor(self, Color: StyleColor) -> int:
        """TCustomStyleServices.GetStyleColor(颜色: StyleColor) -> int

        返回在由 Color 指定的元素的样式中定义的颜色。
        使用 GetStyleColor 获取为某个控件定义的颜色。
        例如，如果 Color 为 scButtonPressed，则 GetStyleColor 返回按下按钮时分配给该按钮的颜色。
        样式颜色使您可以访问当前样式中控件所使用的颜色。风格颜色有两类。第一类包括用于直接从图像渲染的控制部分的颜色。在这种情况下，样式颜色为您提供了一种访问该图像颜色的方法，并且纯粹是信息性的。第二类包括用于在运行时从代码呈现的控件（面板、列表框、网格等）的颜色。"""
    def GetStyleFontColor(self, Font: StyleFont) -> int:
        """TCustomStyleServices.GetStyleFontColor(字体：StyleFont) -> int

        返回 Font 指定的元素的字体颜色。
        调用 GetStyleFontColor 获取当前样式中为控件的特定部分和状态定义的字体颜色。
        例如，如果 Font 为 sfEditBoxDisabled，则当编辑框被禁用时，GetStyleFontColor 返回编辑框中文本的颜色。"""
    def GetSystemColor(self, Color: int) -> int:
        """TCustomStyleServices.GetSystemColor(Color: int) -> int

        返回当前样式中定义的系统颜色。
        当前样式具有一组为系统颜色常量定义的颜色，类似于样式颜色。例如，您可以使用 clBtnFace 调用 GetSystemColor 来获取按钮表面的样式颜色。"""
    def GetTextExtent(self, DC: int, Details: ThemedElementDetails, Text: str, Flags: TextFormat, ExtentRect: Rect) -> bool:
        """TCustomStyleServices.GetTextExtent（DC：int，详细信息：ThemedElementDetails，文本：str，标志：TextFormat，ExtentRect：矩形）-> bool

        返回包含以当前样式绘制的给定文本的矩形。
        调用 GetTextExtent 获取以当前样式绘制具有指定格式的给定文本所需的矩形。\r
        返回包含以当前样式绘制的给定文本的矩形。
        调用 GetTextExtent 获取以当前样式绘制具有指定格式的给定文本所需的矩形。"""
    def GetTheme(self, Element: ThemedElement) -> int:
        """TCustomStyleServices.GetTheme(元素：ThemedElement) -> int"""
    def GetThemeForDPI(self, Element: ThemedElement, DPI: int) -> int:
        """TCustomStyleServices.GetThemeForDPI（元素：ThemedElement，DPI：int）-> int"""
    def HasElementFixedPosition(self, Details: ThemedElementDetails) -> bool:
        """TCustomStyleServices.HasElementFixedPosition（详细信息：ThemedElementDetails）-> bool

         目前没有任何其他信息。"""
    def HasTransparentParts(self, Details: ThemedElementDetails) -> bool:
        """TCustomStyleServices.HasTransparentParts（详细信息：ThemedElementDetails）-> bool

        确定给定元素是否具有透明部分。
        调用HasTransparentParts检查Details指定的元素在当前样式中是否有透明部分。"""
    @classmethod
    def IsValidStyle(cls, Stream: Stream) -> bool:
        """TCustomStyleServices.IsValidStyle(Stream: Stream) -> bool

        检查提供的样式是否是有效的样式。
        调用 IsValidStyle 验证 Stream 指定的样式是否为有效样式。\r
        检查提供的样式是否是有效的样式。
        调用IsValidStyle验证Stream指定的样式是否为有效样式。"""
    @classmethod
    def LoadFromFile(cls, FileName: str) -> CustomStyleServices:
        """TCustomStyleServices.LoadFromFile(FileName: str) -> CustomStyleServices

        从指定文件加载样式。
        调用 LoadFromFile 从指定文件加载样式。"""
    def PaintBorder(self, Control: WinControl, EraseLRCorner: bool) -> None:
        """TCustomStyleServices.PaintBorder(Control: WinControl, EraseLRCorner: bool) -> 无

        绘制控件的边框。
        调用 PaintBorder 使用当前样式绘制控件的边框。"""
    def SaveToFile(self, FileName: str) -> None:
        """TCustomStyleServices.SaveToFile(FileName: str) -> 无

        将当前样式设置保存到指定文件。
        调用 SaveToFile 将当前样式保存到指定文件名中。"""
    def ThemesAvailable(self, *args, **kwargs) -> Any: ...
    def ThemesEnabled(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomTabControl(WinControl):
    """TCustomTabControl 是选项卡控件组件（例如 TTabControl 和 TPageControl）的基本类型。
    定义顶部包含一组笔记本样式选项卡的控件时，使用 TCustomTabControl 作为基类。 TCustomTabControl 引入了许多属性、方法和事件来管理选项卡的外观和行为，并在用户选择选项卡之一时进行响应。

    注意：使用其中一个页面控件时，如果要限制用户切换到选项卡，则不能将 TTabSheet.Enabled 设置为 false 来实现该限制。相反，请使用 OnChanging 事件来阻止用户选择选项卡。"""
    __hash__: ClassVar[None] = ...
    Canvas: Canvas
    """画布：允许访问选项卡控件的画布。

        在 OnDrawTab 事件期间使用 Canvas 在选项卡控件的画布上进行绘制。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    ParentWindow: Any
    """用于设置或获取该选项卡控件所附加的父窗口句柄。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomTabControl.Create(AOwner: Component) -> 无

        创建并初始化 TCustomTabControl 的实例。
        调用 Create 在运行时实例化选项卡控件。在设计时放置在窗体上的选项卡控件是自动创建的。 Create 调用继承的 Create 方法并设置选项卡控件的初始值，包括创建包含选项卡文本字符串的选项卡列表。
        AOwner 是一个组件，通常是表单，负责释放选项卡控件。它成为所有者财产的价值。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomTabControl 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。 Destroy 释放保存选项卡文本字符串列表的选项卡列表，并调用继承的析构函数。"""
    def GetHitTestInfoAt(self, X: int, Y: int) -> HitTests:
        """TCustomTabControl.GetHitTestInfoAt(X: int, Y: int) -> HitTests

        返回有关点相对于选项卡控件的工作区的位置的信息。
        调用 GetHitTestInfoAt 以确定选项卡控件的哪一部分（如果有）位于 X 和 Y 参数指定的点下方。
        GetHitTestInfo 返回 THitTests 类型。该集合描述了鼠标下可能的元素。在解释这些值时，每个选项卡都可以被视为选项卡控件的一个“项目”。"""
    def IndexOfTabAt(self, X: int, Y: int) -> int:
        """TCustomTabControl.IndexOfTabAt(X: int, Y: int) -> int

        指示指定点处选项卡的索引。
        使用 IndexOfTabAt 定位哪个选项卡位于由 X 和 Y 指定的点处。如果 X 坐标为 X 且 Y 坐标为 Y 的点位于选项卡上方，则 IndexOfTabAt 在 Tabs 属性 (TTabControl) 中返回该选项卡的 0 偏移索引）或在 Pages 属性 (TPageControl) 中。如果 X 和 Y 定义的点不在制表符上方，则 IndexOfTabAt 返回 1。"""
    def RowCount(self, *args, **kwargs) -> Any:
        """设置 TabIndex 属性。

        调用 RowCount 来更改 TabIndex 属性的值。后代类应该重写 RowCount 以提供此属性的特殊实现。"""
    def ScrollTabs(self, Delta: int) -> None:
        """TCustomTabControl.ScrollTabs(Delta: int) -> 无

        当选项卡控件不是多行时，滚动可见的选项卡。
        调用 ScrollTabs 来更改选项卡控件中可见的选项卡。当 Delta 为正数时，右侧的 Delta 附加选项卡会滚动到视图中。当 Delta 为负数时，左侧的选项卡会滚动到视图中，Delta 的绝对值表示滚动的选项卡数量。如果指示方向上的 Delta 选项卡数量少于绝对值，则 ScrollTabs 会尽可能滚动。
        如果没有滚动选项卡，ScrollTabs 不起作用，这可能是因为控件足够宽以显示所有选项卡，也可能是因为 MultiLine 属性为 true。

        注意：ScrollTabs 滚动可见选项卡。它不会改变当前的选择。调用 ScrollTabs 可能会将选定的选项卡滚动到视图之外。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def TabRect(self, Index: int) -> Rect:
        """TCustomTabControl.TabRect(Index: int) -> 矩形

        返回指定选项卡的边界矩形。
        使用 TabRect 确定具有指定索引的选项卡的当前位置。 Index 是 Tabs 属性 (TTabControl) 或 Pages 属性 (TPageControl) 中选项卡的 0 偏移索引。 TabRect 返回指定选项卡的边界矩形（在客户端坐标中）。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomToggleSwitch(CustomControl):
    """TToggleSwitch 的基类。

    TToggleSwitch 实现了一个可点击的控件，允许用户在“打开”状态和“关闭”状态之间切换。"""
    __hash__: ClassVar[None] = ...
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    Parent: Any
    """返回/设置控制父级"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。
        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TCustomToggleSwitch.Create(AOwner: Component) -> 无

        创建 TCustomToggleSwitch 的实例。
        创建为所有切换开关属性设置默认值。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TCustomControl 的实例。

        Vcl.WinXCtrls.TCustomToggleSwitch.Destroy 继承自 Vcl.Controls.TCustomControl.Destroy。该行以下的所有内容均引用Vcl.Controls.TCustomControl.Destroy。
        销毁 TCustomControl 的实例。
        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。
        应用程序只应在调用构造函数时显式释放控件，而不为控件分配所有者。
        当控件被销毁时，它会销毁其 Canvas 属性中的 TCanvas 对象。
        重写 Destroy 以释放在 Create 方法中分配的所有内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并调用继承的 Destroy 作为重新声明方法中的最后一个语句。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果异常从构造函数中逃逸，则调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前检查所有数据字段是否为零。"""
    def GetControlsAlignment(self, *args, **kwargs) -> Any:
        """指示文本在控件内的对齐方式。

        Vcl.WinXCtrls.TCustomToggleSwitch.GetControlsAlignment 继承自 Vcl.Controls.TControl.GetControlsAlignment。该行下面的所有内容均引用Vcl.Controls.TControl.GetControlsAlignment。
        指示文本在控件内的对齐方式。
        使用 GetControlsAlignment 确定控件的对齐方式。对于没有 Alignment 属性的控件，GetControlsAlignment 返回 taLeftJustify。

        注意：GetControlsAlignment 返回由 BiDiMode 属性更改之前文本的对齐方式。要检查是否应反转对齐以反映 BiDiMode 属性，请调用 UseRightToLeftAlignment。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def IsOn(self, *args, **kwargs) -> Any:
        """指示切换开关是否处于开启状态。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomTreeView(WinControl):
    __hash__: ClassVar[None] = ...
    Canvas: Canvas
    """画布："""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    DropTarget: TreeNode
    """树节点：用于指定一个控件是否可以作为拖放操作的目标控件。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    Selected: TreeNode
    """树节点：用于标识控件当前选定的项或节点。"""
    SelectionCount: int
    """整数：用于确定控件中当前选中项的数量。"""
    Selections: TreeNode
    """树节点：用于控制和管理用户在界面上选择的内容。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TopItem: TreeNode
    """树节点：用于控制控件中可见项的顶部项。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def AlphaSort(self, ARecurse: bool) -> bool:
        """TCustomTreeView.AlphaSort(ARecurse: bool) -> bool"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以接收焦点。"""
    def ClearSelection(self, KeepPrimary: bool) -> None:
        """TCustomTreeView.ClearSelection(KeepPrimary: bool) -> 无"""
    def Create(self, AOwner: Component) -> None:
        """TCustomTreeView.Create(AOwner: Component) -> 无

        创建 TWinControl 的实例。
        调用 Create 来构造并初始化一个新控件，并将新构造的控件插入到其所有者中，如 AOwner 参数所指定的那样。 Create 通过调用所有者的 InsertComponent 方法将控件插入所有者中。
        大多数控件都会重写 Create 以初始化其独特的属性。重写 Create 方法的对象必须始终首先调用继承的 Create 方法，然后继续进行特定于组件的初始化。重写 Create 方法时指定重写指令。
        如果组件的 Create 方法分配资源或内存，请重写 Destroy 方法以释放这些资源。"""
    def CustomSort(self, SortProc: Callable[[int,int,int],int], Data: int, ARecurse: bool) -> bool:
        """TCustomTreeView.CustomSort(SortProc: Callable[[int, int, int], int], Data: int, ARecurse: bool) -> bool"""
    def Deselect(self, Node: TreeNode) -> None:
        """TCustomTreeView.Deselect(Node: TreeNode) -> None"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TWinControl 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free，因为Free会检查引用是否为空，然后才调用 Destroy。"""
    def FindNextToSelect(self, *args, **kwargs) -> Any: ...
    def FullCollapse(self, *args, **kwargs) -> Any: ...
    def FullExpand(self, *args, **kwargs) -> Any: ...
    def GetDragImages(self, *args, **kwargs) -> Any:
        """返回控件的图像列表，其中包含拖动时要显示的图像。

        重写 GetDragImages 为控件提供自定义图像列表。正如在 TControl 中实现的那样，GetDragImages 返回空。"""
    def GetHitTestInfoAt(self, X: int, Y: int) -> HitTests:
        """TCustomTreeView.GetHitTestInfoAt(X: int，Y: int) -> HitTests"""
    def GetNodeAt(self, X: int, Y: int) -> TreeNode:
        """TCustomTreeView.GetNodeAt(X: int, Y: int) -> TreeNode"""
    def GetSelections(self, AList: List) -> TreeNode:
        """TCustomTreeView.GetSelections(AList: List) -> TreeNode"""
    def IsEditing(self, *args, **kwargs) -> Any: ...
    def LoadFromFile(self, FileName: str) -> None:
        """TCustomTreeView.LoadFromFile(FileName: str) -> 无"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TCustomTreeView.LoadFromStream(Stream: Stream) -> 无"""
    def SaveToFile(self, FileName: str) -> None:
        """TCustomTreeView.SaveToFile(FileName: str) -> 无"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TCustomTreeView.SaveToStream(Stream: Stream) -> 无"""
    def Select(self, Node: TreeNode, ShiftState: ShiftState) -> None:
        """TCustomTreeView.Select(Node: TreeNode, ShiftState: ShiftState) -> None"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def Subselect(self, Node: TreeNode, Validate: bool) -> None:
        """TCustomTreeView.Subselect(Node: TreeNode, Validate: bool) -> None"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class DateTimePicker(WinControl):
    """TDateTimePicker 显示用于输入日期或时间的列表框。

    TDateTimePicker 是专门为输入日期或时间而设计的可视化组件。在 dmComboBox 日期模式下，它类似于列表框或组合框，只不过下拉列表被替换为日历插图；用户可以从日历中选择日期。还可以通过向上和向下箭头滚动并键入来选择日期或时间。
    日期时间选择器忽略从右到左阅读的 BiDiMode 设置，根据系统区域设置显示日期。
    TDateTimePicker 根据用户系统上控制面板的区域设置中的日期和时间设置来格式化日期和时间值。由于 TDateTimePicker 是 Windows 控件的包装器，因此无法通过更改 SysUtils 单元中的格式变量来更改这些格式。但是，您可以使用 Windows API 调用 DateTime_SetFormat 以编程方式指定这些设置。

    注意：众所周知，当用于设置 1752 年（英语国家/地区更改为公历的那一年）的日期时，底层 Windows 控件的行为会出现不可预测的情况。使用非英语区域设置时，不同的日期可能会出现类似的问题。如果应用程序可能用于指定当前区域设置中转换时或之前的日期（例如，俄语区域设置中的 1918 年或之前），请务必使用受影响的日期来测试应用程序。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜面的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜面的。BevelInner、BevelOuter 和 BevelKind 属性确定指定边缘的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        使用 BiDiMode 可使控件在应用程序运行在从右到左而不是从左到右阅读的区域设置中时自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    CalAlignment: DTCalAlignment
    """DTCalAlignment：确定下拉日历的对齐方式。

        将 CalAlignment 设置为 dtaLeft 或 dtaRight，以使下拉日历在组件的左侧或右侧对齐。仅当 Kind 属性为 dtkDate 并且 DateMode 属性为 dmComboBox 时，此属性才适用。"""
    CalColors: MonthCalColors
    """月份卡尔颜色："""
    Checked: bool
    """bool：指示是否选中日期或时间旁边的复选框。

        如果选中 TDateTimePicker 组件中的复选框，则 Checked 为 true。在设计时将 Checked 设置为 true 会使该复选框默认显示为选中状态。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用 Constraints 指定控件的最小和最大宽度和高度。当 Constraints 包含最大值或最小值时，控件不能调整大小以违反这些约束。

        注意：约束适用于窗体的高度。但是，窗体的高度取决于 Windows 的标题栏大小。例如，Windows XP 使用的标题栏比其他窗口系统大得多。要解决此问题，请在设计窗体时注意 ClientHeight，并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：不要设置与 Align 或 Anchors 属性值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Date: float
    """浮点：日期"""
    DateFormat: DTDateFormat
    """DTDateFormat：指定日期的显示格式。

        如果 DateFormat 设置为 dfShort，则使用 Windows 控制面板中指定的短日期格式设置日期格式。默认情况下，它显示为：3/21/97。
        如果 DateFormat 设置为 dfLong，则使用 Windows 控制面板中指定的长日期格式来格式化日期。默认情况下，它显示为：Friday, March 21, 1997。（仅当 Kind 为 dtkDate 时适用。）
        对于自定义日期格式，请设置 Format 属性。"""
    DateMode: DTDateMode
    """DTDateMode：确定组件使用的日期选择方法。

        如果 DateMode 为 dmComboBox，则组件具有下拉日历图示，用户可以从中选择日期。如果 DateMode 为 dmUpDown，则组件具有向上/向下箭头，用户可以使用它调整日期。（仅适用于 Kind 为 dtkDate 的情况。）"""
    DateTime: float
    """浮点：日期时间"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DroppedDown: bool
    """bool：指定日期时间选择器控件是否下拉。

        DroppedDown 指定日期时间选择器控件是否下拉。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Format: str
    """str：指定日期时间字符串的格式。

        格式指定日期时间显示的自定义格式字符串，覆盖控制面板字符串。自定义格式可以同时包含日期和时间字段，但时间字段不可编辑，除非 Kind 属性为 dtkTime。可以理解以下格式字符。

        元素 描述
        d 一位数或两位数的日期。
        DD 两位数的日期。个位数的日期值前面有一个零。
        ddd 三字符工作日缩写。
        dddd 完整的工作日名称。
        h 12 小时格式的一位数或两位数小时。
        hh 12 小时格式的两位数小时。个位数的值前面有一个零。
        H 24 小时格式的一位数或两位数小时。
        HH 24 小时格式的两位数小时。个位数的值前面有一个零。
        m 一位数或两位数的分钟。
        mm 两位数的分钟。个位数的值前面有一个零。
        M 一位或两位数的月份数字。
        MM 两位数的月份数字。个位数的值前面有一个零。
        MMM 三个字符的月份缩写。
        MMMM 完整的月份名称。
        t 单字母 AM/PM 缩写（即 AM 显示为“A”）。
        tt 两个字母的 AM/PM 缩写（即 AM 显示为“AM”）。
        yy 年份的最后两位数字（即 2001 年将显示为“01”）。
        yyyy 全年（即 2001 年将显示为“2001”）。

        要在格式中包含文字字符串，请将它们用单引号引起来。不引用文字字符串可能会产生不可预测的结果，即使它们不包含格式化代码。使用两个单引号来表示文字字符串中的一个单引号字符。例如，
        今天的日期：MMM dd, yyyy
        在属性编辑器中输入，会产生 2001 年 4 月 1 日的以下结果：
        “今天的日期：2001 年 4 月 1 日”

        注意：在代码中以编程方式设置 Format 时，请将单引号转义。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定使用哪个 IME 来转换击键。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量获取当前安装的 IME 列表。
        如果 ImeName 指定不可用的 IME，则将使用应用程序启动时处于活动状态的 IME。不会产生异常。

        注意：ImeName 的值仅在控件获得焦点时才生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    Kind: DateTimeKind
    """DateTimeKind：确定组件是日期选择器还是时间选择器。

        如果 Kind 属性为 dtkDate，则该控件配置为支持日期编辑。默认格式仅提供控件值的日期部分，并且如果 DateMode 属性为 dmComboxBox，则下拉日历可用。
        如果 Kind 属性为 dtkTime，则该控件配置为支持时间编辑。默认格式仅提供控件值的时间部分，但如果格式属性包含日期字段代码，则也可以编辑日期部分。"""
    MaxDate: float
    """漂浮："""
    MinDate: float
    """漂浮："""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnCloseUp: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnDropDown: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    OnUserInput: Callable[[Object,str,float,bool],None]
    """Callable[[Object, str, float, bool], None]:"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    ParseInput: bool
    """bool：启用 OnUserInput 事件。

        如果 ParseInput 为 True，则只要用户在组件的编辑框中键入内容，就会发生 OnUserInput 事件。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowCheckbox: bool
    """bool：在日期或时间旁边显示一个复选框。

        将 ShowCheckbox 设置为 true 可在 TDateTimePicker 组件中显示复选框。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Time: float
    """float：表示用户输入的时间。

        时间表示用户输入的时间。在程序代码或对象检查器中设置时间以确定默认选择的时间。 （仅当 Kind = dtkTime 时适用。）"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否显示在屏幕上。

        使用 Visible 属性控制运行时控件的可见性。如果 Visible 为 True，则控件显示。如果 Visible 为 False，则控件不可见。
        调用 Show 方法将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子代，Show 和 ShowModal 方法将 Visible 设置为 True，并将表单置于所有打开窗口的前面。
        对于 TTabSheet 子代，Visible 不控制运行时控件的可见性。有关更多信息，请参阅 TabVisible 属性的描述。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TDateTimePicker.Create(AOwner: Component) -> None

        创建并初始化 TDateTimePicker 实例。
        Create 调用继承的构造函数方法并将日期和时间属性初始化为当前日期和时间。它还设置以下 ControlStyle 标志：csCaptureMouse、csOpaque、csClickEvents、csDoubleClicks 和 csFixedHeight。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class DelphiDefaultContainer:
    """Delphi 的抽象容器类型"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __delitem__(self, other) -> Any:
        """删除自身[key]。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""
    def __setitem__(self, index, object) -> None:
        """将 self[key] 设置为值。"""

class DelphiDefaultIterator:
    """抽象容器的迭代器"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __next__(self) -> Any:
        """实施下一个（自我）。"""

class DelphiDefaultMapping:
    """Delphi 的抽象映射类型"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __delitem__(self, other) -> Any:
        """删除自身[key]。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""
    def __setitem__(self, index, object) -> None:
        """将 self[key] 设置为值。"""

class DelphiMethod:
    """Delphi 方法的包装器"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def __call__(self, *args, **kwargs) -> Any:
        """使实例对象可以像函数一样被调用。"""

class DragImageList(CustomImageList):
    """TDragImageList 的包装器"""
    __hash__: ClassVar[None] = ...
    ColorDepth: ColorDepth
    """颜色深度："""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    DragCursor: int
    """整数：用于指定拖动控件时鼠标指针的外观。"""
    DragHotspot: Point
    """点：用于指定拖放操作中鼠标指针的热点位置。"""
    Dragging: bool
    """布尔：用于指示控件当前是否正在进行拖放操作。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BeginDrag(self, Window: int, X: int, Y: int) -> bool:
        """TDragImageList.BeginDrag(Window: int, X: int, Y: int) -> bool"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def DragLock(self, Window: int, XPos: int, YPos: int) -> bool:
        """TDragImageList.DragLock(Window: int, XPos: int, YPos: int) -> bool"""
    def DragMove(self, X: int, Y: int) -> bool:
        """TDragImageList.DragMove(X: int, Y: int) -> bool"""
    def DragUnlock(self, *args, **kwargs) -> Any: ...
    def EndDrag(self, *args, **kwargs) -> Any: ...
    def GetHotSpot(self, *args, **kwargs) -> Any: ...
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def HideDragImage(self, *args, **kwargs) -> Any: ...
    def SetDragImage(self, Index: int, HotSpotX: int, HotSpotY: int) -> bool:
        """TDragImageList.SetDragImage(索引: int, HotSpotX: int, HotSpotY: int) -> bool"""
    def ShowDragImage(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class DrawGrid(CustomDrawGrid):
    """TDrawGrid 表示以列和行格式显示信息的网格控件。

    将 TDrawGrid 对象添加到表单中，以表格格式呈现任意信息。 TDrawGrid 提供了许多属性来控制网格的外观，以及利用网格的表格组织来响应用户操作的事件和方法。
    TDrawGrid 引入了多个事件和方法，允许应用程序自定义网格的外观和行为。
    如果网格的单元格包含表示对象的文本字符串，请考虑改用 TStringGrid 对象。如果网格显示数据集中记录的字段值，请改用 TDBGrid。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """BorderStyle：确定是否在网格周围绘制单线边框。

        将 BorderStyle 设置为 bsSingle 以在网格图像周围添加单线边框。将 BorderStyle 设置为 bsNone 以省略边框。"""
    Canvas: Any
    """指定为控件呈现绘图表面的 TCanvas 对象。"""
    Col: Any
    """指定包含所选单元格的列的索引。"""
    ColCount: int
    """int：指定网格中的列数。

        读取 ColCount 以确定 ColWidths 数组中的条目数。设置 ColCount 以添加或删除网格右侧的列。ColCount 的值包括网格左侧的任何固定列以及网格主体中的可滚动列。"""
    ColWidths: Any
    """指定网格的列宽"""
    Color: int
    """int：指定控件的背景颜色。

        使用 Color 读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父级的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        除非您将 TLabel.Transparent 设置为 False，否则 TLabel 的 Color 始终是背景颜色。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DefaultColAlignment: Alignment
    """对齐方式：DefaultColAlignment 是未使用 TCustomGrid.ColAlignments 显式指定对齐方式的所有列的默认文本对齐方式。"""
    DefaultColWidth: int
    """int：确定尚未显式调整大小的所有列的宽度（以像素为单位）。

        设置 DefaultColWidth 以更改网格中所有列的大小。设置 DefaultColWidth 后，使用鼠标或通过设置 ColWidths 属性调整大小的列也会被赋予 DefaultColWidth。
        当使用 ColCount 属性将新列添加到网格时，将创建宽度为 DefaultColWidth 的新列。"""
    DefaultDrawing: bool
    """bool：决定绘制网格时是否绘制Cells。

        将 DefaultDrawing 设置为 true 可使网格自动绘制网格中的单元格，包括添加背景颜色、固定单元格上的 3-D 效果以及所选单元格周围的焦点矩形。将 DefaultDrawing 设置为 false 可在绘制网格时跳过单元格的绘制。
        当 DefaultDrawing 为 false 时，应使用 DrawCell 方法绘制单元格。对于TCustomGrid来说，DrawCell是一个抽象方法。 TCustomGrid 的后代使用 DrawCell 来提供自己的自定义绘图代码，或生成 OnDrawCell 事件。"""
    DefaultRowHeight: int
    """int：指定所有未明确调整大小的行的高度（以像素为单位）。

        设置 DefaultRowHeight 可更改网格中所有行的大小。设置 DefaultRowHeight 后，使用鼠标或通过设置 RowHeights 属性调整大小的行也会被赋予 DefaultRowHeight。
        使用 RowCount 属性将新行添加到网格时，新行的高度为 DefaultRowHeight。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DrawingStyle: GridDrawingStyle
    """GridDrawingStyle：确定绘制网格时使用的样式。

        DrawingStyle 确定用于绘制网格的样式。下表列出了 DrawingStyle 的可能值。

        值 含义
        gdsClassic 网格控件使用标准的、无主题的样式。
        gdsThemed 网格控件使用当前操作系统主题。
        gdsGradient 网格控件使用渐变来设置样式。

        关于 Vcl.Grids.TStringGrid 的 DrawingStyle 的注意事项：
        除非您还将 DrawingStyle 设置为 gdsClassic，否则设置 FixColor 不会产生任何效果。
        除非将 DrawingStyle 的值设置为 gdsGradient，否则设置 GradientStartColor 和 GradientEndColor 不会产生任何效果。"""
    EditorMode: Any
    """确定当前单元格是否可以编辑。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    FixedColor: int
    """int：指定网格中固定行和列的背景颜色。

        设置固定颜色以指定网格中非滚动单元格的颜色。网格的滚动区域是使用 Color 属性绘制的。"""
    FixedCols: int
    """int：指定网格左侧不可滚动的列数。

        设置FixedCols 来创建或删除非滚动列。非滚动列出现在网格的左侧，并且始终可见，即使用户滚动网格中的其他列也是如此。使用非滚动列来显示行标题或行号，或实现用户可以设置的滚动锁。
        非滚动列在视觉上与网格中的可滚动列不同。它们涂有单独的背景颜色，并且它们的单元格具有凸起的 3D 外观。

        注意：网格必须至少包含一个滚动列。不要将 FixCols 设置为大于 ColCount - 1 的值。"""
    FixedRows: int
    """int：指定网格顶部不可滚动的行数。

        设置FixedRows 以创建或删除非滚动行。非滚动行显示在网格顶部，并且始终可见，即使用户滚动网格中的其他行也是如此。使用非滚动行来显示列标题或列号。
        非滚动行在视觉上与网格中的可滚动行不同。它们涂有单独的背景颜色，并且它们的单元格具有凸起的 3D 外观。

        注意：网格必须至少包含一个滚动行。不要将 FixRows 设置为大于 RowCount - 1 的值。"""
    Font: Font
    """字体：指定控件上或控件中的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用备用控件，其 Font 属性将更改标题或文本的颜色（如 TBitBtn 或 TSpeedButton）。"""
    GradientEndColor: int
    """int：确定结束渐变颜色。

        GradientEndColor 确定结束渐变颜色。当 DrawingStyle 的值为 gdsGradient 时，使用 GradientEndColor。 GradientEndColor 和 GradientStartColor 定义在网格控件内绘制单个单元格时使用的颜色范围。"""
    GradientStartColor: int
    """int：确定起始渐变颜色。

        GradientStartColor 确定起始渐变颜色。当 DrawingStyle 的值为 gdsGradient 时，使用 GradientStartColor。GradientEndColor 和 GradientStartColor 定义在网格控件内绘制单个单元格时使用的颜色范围。"""
    GridHeight: Any
    """指定网格的高度（以像素为单位）。"""
    GridLineWidth: int
    """int：指定分隔网格单元格的线的宽度（以像素为单位）。

        设置 GridLineWidth 以使网格中分隔单元格的线条更粗或更细。当 GridLineWidth 为零时，网格单元格之间不绘制分隔符。
        如果 Options 属性不包含 goFixedHorzLine、goFixedVertLine、goHorzLine 或 goVertLine，则 GridLineWidth 将无效。

        注意：对于在 Windows 9x 或 Windows ME 上运行的应用程序，建议不要使用大于 3 像素的值，因为可能会出现失真。"""
    GridWidth: Any
    """指定网格的宽度（以像素为单位）。"""
    LeftCol: Any
    """指定网格中第一个可见的可滚动列的索引。"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnColumnMoved: Callable[[Object,int,int],None]
    """可调用[[对象，int，int]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnDrawCell: Callable[[Object,int,int,Rect,GridDrawState],None]
    """Callable[[Object, int, int, Rect, GridDrawState], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnFixedCellClick: Callable[[Object,int,int],None]
    """可调用[[对象，int，int]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnGetEditMask: Callable[[Object,int,int,str],None]
    """Callable[[Object, int, int, str], None]:"""
    OnGetEditText: Callable[[Object,int,int,str],None]
    """Callable[[Object, int, int, str], None]:"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnMouseWheelDown: Callable[[Object,ShiftState,Point,bool],None]
    """Callable[[Object, ShiftState, Point, bool], None]:"""
    OnMouseWheelUp: Callable[[Object,ShiftState,Point,bool],None]
    """Callable[[Object, ShiftState, Point, bool], None]:"""
    OnRowMoved: Callable[[Object,int,int],None]
    """可调用[[对象，int，int]，无]："""
    OnSelectCell: Callable[[Object,int,int,bool],None]
    """Callable[[Object, int, int, bool], None]:"""
    OnSetEditText: Callable[[Object,int,int,str],None]
    """Callable[[Object, int, int, str], None]:"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    OnTopLeftChanged: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Options: GridOptions
    """GridOptions：指定网格的各种显示和行为属性。

        设置选项以包括网格所需的属性。有关这些属性的定义，请参阅类型 Vcl.Grids.TGridOptions。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟到父级的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，表示此组件的 DoubleBuffered 属性被父级的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    Row: Any
    """指定包含所选单元格的行的索引。"""
    RowCount: int
    """int：指定网格中的行数。

        读取 RowCount 以确定 RowHeights 数组中的条目数。设置 RowCount 以在网格底部添加或删除行。 RowCount 的值包括网格顶部的任何固定行以及网格主体中的可滚动行。"""
    RowHeights: Any
    """指定网格的行高"""
    ScrollBars: ScrollStyle
    """ScrollStyle：指定网格是否包含水平和垂直滚动条。
        使用 ScrollBars 为网格提供水平或垂直滚动​​条。

        注意：如果网格中的所有单元格都适合 ClientWidth，则不会出现水平滚动条，即使 ScrollBars 为 ssHorizo​​ntal 或 ssBoth。如果所有单元格都适合 ClientHeight，则不会出现垂直滚动条，即使 ScrollBars 为 ssVertical 或 ssBoth。"""
    Selection: Any
    """指示当前选择的边界。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TopRow: Any
    """指定网格中第一个可见的可滚动行的索引。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    VisibleColCount: int
    """int：表示网格中可见的可滚动列的数量。

        使用 VisibleColCount 确定网格中完全可见的可滚动列的数量。 VisibleColCount 不包括由FixedCols 属性计数的固定列。它不包括网格右边缘上任何部分可见的列。"""
    VisibleRowCount: int
    """int：表示网格中可见的可滚动行数。

        使用 VisibleRowCount 确定网格中完全可见的可滚动行数。 VisibleRowCount 不包括由FixedRows 属性计数的固定行。它不包括网格底部任何部分可见的行。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Edit(CustomEdit):
    """TEdit 是 Windows 单行编辑控件的包装器。

    使用 TEdit 对象将标准 Windows 编辑控件放在表单上。编辑控件用于检索用户键入的文本。编辑控件还可以向用户显示文本。
    仅向用户显示文本时，选择一个编辑控件以允许用户选择文本并将其复制到剪贴板。如果不需要编辑控件的选择功能，请选择标签对象。
    TEdit 实现了 TCustomEdit 中引入的通用行为。TEdit 发布了从 TCustomEdit 继承的许多属性，但没有引入任何新行为。对于专门的编辑控件，请使用 TCustomEdit 的其他后代类或从其派生。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """对齐方式：确定文本在文本编辑控件内的对齐方式。

        使用对齐方式更改文本在文本编辑控件中的格式设置方式。对齐方式可以采用以下值之一：

        值 含义
        taLeftJustify 将文本与控件的左侧对齐
        taCenter 文本在控件中水平居中。
        taRightJustify 将文本与控件的右侧对齐。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSelect: bool
    """bool：决定当控件获得焦点时是否自动选择编辑控件中的所有文本。

        设置自动选择以在编辑控件获得焦点时选择所有文本。自动选择仅适用于单行编辑控件。
        当用户更有可能替换编辑控件中的文本而不是追加到其中时，请使用自动选择。"""
    AutoSize: bool
    """bool：确定编辑控件的高度是否自动调整大小以适应文本。
        使用 AutoSize 使编辑控件自动调整其大小，以便工作区适应文本的高度。当 AutoSize 为 false 时，编辑控件具有固定高度。当 AutoSize 为 true 时，只要发生可能影响控件高度的更改（例如字体或边框样式的更改），控件的大小就会重新调整。

        注意：AutoSize 仅调整编辑控件的高度。即使将 AutoSize 设置为 true，编辑控件中的文本如果超出控件的宽度，也可能会被截断。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """BorderStyle：确定编辑控件在工作区周围是否有单线边框。

        使用 BorderStyle 可以影响编辑控件的工作区突出的清晰度。 BorderStyle 的值可以是 bsSingle 或 bsNone。如果 BorderStyle 为 bsSingle，则编辑控件在工作区周围有单线边框。如果 BorderStyle 为 bsNone，则不会有边框。"""
    CanUndoSelText: bool
    """bool：当设置为 True 时，它​​允许您调用或调用 Undo 操作，以撤消之前使用 SetSelText 或 SetSelTextBuf 所做的更改。默认情况下它设置为 false。"""
    CharCase: EditCharCase
    """EditCharCase：确定编辑控件中文本的大小写。

        使用 CharCase 强制编辑控件的内容采用特定的大小写。
        当 CharCase 设置为 ecLowerCase 或 ecUpperCase 时，字符的大小写会在用户将字符键入编辑控件时进行转换。将 CharCase 属性更改为 ecLowerCase 或 ecUpperCase 会更改文本的实际内容，而不仅仅是外观。任何案例信息都会丢失，并且无法通过将 CharCase 更改为 ecNormal 来重新捕获。"""
    Color: int
    """int：指定控件的背景颜色。

        使用 Color 读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父级的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        除非您将 TLabel.Transparent 设置为 False，否则 TLabel 的 Color 始终是背景颜色。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。
        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。
        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HideSelection: bool
    """bool：确定当焦点转移到另一个控件时是否保留所选文本的视觉指示。

        将 HideSelection 设置为 false 可以提供文本选定部分的视觉反馈，即使编辑控件没有焦点也是如此。将 HideSelection 设置为 true 可以仅在编辑控件具有焦点时显示所选内容。 HideSelection 不会影响选择的实际值，只会影响视觉指示。始终将 HideSelection 设置为 false 可能会使具有许多编辑控件的表单看起来过于繁忙。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定使用哪个 IME 来转换击键。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量获取当前安装的 IME 列表。
        如果 ImeName 指定不可用的 IME，则将使用应用程序启动时处于活动状态的 IME。不会产生异常。

        注意：ImeName 的值仅在控件获得焦点时才生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    MaxLength: int
    """int：指定用户可以输入到编辑控件中的最大字符数。

        使用 MaxLength 限制可以输入到编辑控件中的字符数。值 0 表示没有应用程序定义的长度限制。
        如果编辑控件中的文本将被复制到固定长度的缓冲区中，则可以使用 MaxLength 来限制该文本的长度。

        注意：设置 MaxLength 不会截断现有文本，它只是阻止用户在达到 MaxLength 字符限制后添加更多文本。
        注意：即使 MaxLength 为 0，操作系统也可能对可输入编辑控件的字符数施加限制。
        注意：如果应用程序使用主题，则 MaxLength 的单位是字符（而不是字节）。"""
    NumbersOnly: bool
    """bool：仅允许在文本编辑中输入数字。

        使用 NumbersOnly 禁止在文本字段中输入非数字字符。但请注意，即使设置了此属性，用户也可以在文本字段中粘贴非数字字符。"""
    OEMConvert: bool
    """bool：确定在编辑控件中键入的字符是否从 ANSI 转换为 OEM，然后再转换回 ANSI。

        要确保在编辑控件中键入的任何字符都可以明确地转换为 OEM 字符集，请将 OEMConvert 设置为 true。这会导致所有字符在键入时从 ANSI 转换为 OEM，然后再转换回 ANSI。当文本是否可以明确映射到 OEM 字符串并不重要时，将 OEMConvert 设置为 false 以避免此转换的开销。
        当应用程序不使用 Unicode 文件名时，OEMConvert 对于用于输入文件名的编辑控件最有用。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父控件的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        将表单中所有控件的 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东地区。
        当控件的 BiDiMode 属性值发生变化时，ParentBiDiMode 会自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PasswordChar: Any
    """unicodechr(str)：指示要显示的字符（如果有），以代替在控件中键入的实际字符。

        使用PasswordChar 属性创建一个编辑控件，该控件显示特殊字符来代替任何输入的文本。如果将PasswordChar 设置为空字符（ANSI 字符零），则编辑控件将正常显示其文本。如果PasswordChar 是任何其他字符，则编辑控件将显示PasswordChar 来代替键入的每个字符。 PasswordChar 仅影响编辑控件的外观。 Text 属性的值反映了键入的实际字符。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 分配一个值，以便在用户选择控件并单击鼠标右键时显示​​弹出菜单。如果 TPopupMenu 的 AutoPopup 属性为 True，则弹出菜单会自动显示。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """bool：确定用户是否可以更改编辑控件的文本。

        要将编辑控件限制为仅显示，请将 ReadOnly 属性设置为 true。将 ReadOnly 设置为 false 以允许编辑编辑控件的内容。
        将 ReadOnly 设置为 true 可确保文本不被更改，同时仍允许用户选择文本。然后应用程序可以操作所选文本，或将其复制到剪贴板。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，则可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，用于指定当前样式的哪些元素将应用于此控件。默认情况下，样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Text: str
    """str：包含与控件关联的文本字符串。
        使用 Text 属性读取控件的 Text 或为 Text 值指定新字符串。默认情况下，Text 是控件名称。对于编辑控件和备忘录，文本出现在控件内。对于组合框，文本是组合框的编辑控制部分的内容。

        注意：显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用哪个属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。"""
    TextHint: str
    """str：当 Text 属性为空时显示的提示或消息。

        使用 TextHint 提示用户在文本字段中需要输入什么类型的内容。必须启用运行时主题。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class FileOpenDialog(Component):
    """Vista 和更新的 Windows 操作系统样式文件打开对话框的类。

    此类扩展了 TCustomFileOpenDialog。它允许创建 Microsoft Windows Vista（或更新的 Windows 操作系统）样式的文件打开对话框 CLSID_FileOpenDialog 并实现 IFileOpenDialog 接口。"""
    __hash__: ClassVar[None] = ...
    ClientGuid: str
    """字符串："""
    DefaultExtension: str
    """字符串：用于指定在用户未指定文件扩展名时默认使用的文件扩展名。"""
    DefaultFolder: str
    """字符串：用于设置文件打开对话框的默认文件夹路径。"""
    FavoriteLinks: FavoriteLinkItems
    """最喜欢的链接项目：用于管理和显示文件打开对话框中的收藏夹链接。"""
    FileName: Any
    """文件名"""
    FileNameLabel: str
    """字符串：用于设置文件打开对话框中显示文件名编辑框的标签文字。"""
    FileTypeIndex: int
    """整数：用于设置或获取文件打开对话框中默认选中的文件类型索引。"""
    FileTypes: FileTypeItems
    """文件类型项目：用于指定用户可以选择的文件类型。"""
    OkButtonLabel: str
    """字符串：用于设置对话框中确认选择的按钮的文本标签。"""
    OnExecute: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnFileOkClick: Callable[[Object,bool],None]
    """可调用[[对象，布尔]，无]："""
    OnFolderChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnFolderChanging: Callable[[Object,bool],None]
    """可调用[[对象，布尔]，无]："""
    OnSelectionChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnShareViolation: Callable[[Object,FileDialogShareViolationResponse],None]
    """可调用[[对象，FileDialogShareViolationResponse]，无]："""
    OnTypeChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Options: FileDialogOptions
    """文件对话框选项：用来设置对话框的行为和外观。"""
    Title: str
    """字符串：用于设置对话框的标题栏文本。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Execute(self) -> Any:
        """TFileOpenDialog.Execute()

        显示对话框"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class FileStream(HandleStream):
    """TFileStream 使应用程序能够读取和写入磁盘上的文件。

    使用TFileStream访问磁盘文件中的信息。 TFileStream 将打开一个命名文件并提供读取或写入该文件的方法。如果应用程序已经拥有该文件的句柄，并以适当的模式打开，请改用 THandleStream。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """返回 TObject.ClassName"""
    FileName: str
    """str：保留与文件流关联的文件的文件名。

        使用 FileName 显示 TFileStream 从磁盘访问的文件的名称。这是只读属性。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AFileName: str, Mode: int) -> None:
        """TFileStream.Create(AFileName: str, Mode: int) -> None

        创建 TFileStream 的实例。
        调用 Create 实例化文件流以读取或写入指定文件。指定文件名和文件打开方式作为参数。
        Mode 参数指示文件的打开方式。模式参数由开放模式和（可能）共享模式或组合在一起组成。打开模式必须是以下值之一：
        值 含义 声明于
        fmCreate 创建具有给定名称的文件。如果给定名称的文件存在，则覆盖现有文件并以写入模式打开它。 System.Classes
        fmOpenRead 打开文件以只读方式。 System.SysUtils
        fmOpenWrite 打开文件仅用于写入。写入文件将完全替换当前内容。System.SysUtils
        fmOpenReadWrite 打开文件以修改当前内容而不是替换它们。 System.SysUtils
        共享模式必须是以下值之一：
        值 含义 声明于
        fmShareCompat 共享与 FCB 的打开方式兼容。 System.SysUtils
        fmShareExclusive 其他应用程序因任何原因无法打开该文件。 System.SysUtils
        fmShareDenyWrite 其他应用程序可以打开该文件进行读取，但不能进行写入。 System.SysUtils
        fmShareDenyRead 其他应用程序可以打开该文件进行写入，但不能进行读取。 System.SysUtils
        fmShareDenyNone 不会尝试阻止其他应用程序读取或写入该文件。 System.SysUtils

        注意：在 Windows 上，Rights 参数被忽略。
        如果无法打开该文件，Create 将引发异常。\r
        创建 TFileStream 的实例。
        调用 Create 实例化文件流以读取或写入指定文件。指定文件名和文件打开方式作为参数。
        Mode 参数指示文件的打开方式。模式参数由开放模式和（可能）共享模式或组合在一起组成。打开模式必须是以下值之一：

        值 含义 声明于
        fmCreate 创建具有给定名称的文件。如果给定名称的文件存在，则覆盖现有文件并以写入模式打开它。 System.Classes
        fmOpenRead 打开文件以只读方式。 System.SysUtils
        fmOpenWrite 打开文件仅用于写入。写入文件将完全替换当前内容。 System.SysUtils
        fmOpenReadWrite 打开文件以修改当前内容而不是替换它们。 System.SysUtils
        共享模式必须是以下值之一：
        值 含义 声明于
        fmShareCompat 共享与 FCB 的打开方式兼容。 System.SysUtils
        fmShareExclusive 其他应用程序因任何原因无法打开该文件。 System.SysUtils
        fmShareDenyWrite 其他应用程序可以打开该文件进行读取，但不能进行写入。 System.SysUtils
        fmShareDenyRead 其他应用程序可以打开该文件进行写入，但不能进行读取。 System.SysUtils
        fmShareDenyNone 不会尝试阻止其他应用程序读取或写入该文件。 System.SysUtils

        注意：在 Windows 上，Rights 参数被忽略。
        如果无法打开文件，Create 会引发异常。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TFileStream 的实例。

        不要直接在应用程序中调用 Destroy。相反，调用 Free，它会检查 TFileStream 引用不为零，然后才调用 Destroy。
        Destroy 在释放对象之前关闭文件流的句柄。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Form(CustomForm):
    """TForm 代表一个标准的应用程序窗口（表单）。

    当您在设计时在表单设计器中创建表单时，它们将作为 TForm 的后代实现。窗体可以代表应用程序的主窗口、对话框或 MDI 子窗口。窗体可以包含其他对象，例如 TButton、TCheckBox 和 TComboBox 对象。
    表单的示例包括 TLoginDialog 和 TPasswordDialog 对象。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    ActiveControl: WinControl
    """WinControl：指定窗体上具有焦点的控件。

        使用 ActiveControl 获取或设置窗体上具有焦点的控件。在应用程序中，一次只能有一个控件具有焦点。
        如果窗体没有焦点，则 ActiveControl 是窗体上将在窗体获得焦点时获得焦点的控件。

        注意：当焦点转移到另一个控件时，ActiveControl 会在 OnExit 事件发生之前更新。"""
    ActiveMDIChild: Form
    """Form：指定具有焦点的 MDI 子项。

        使用 ActiveMDIChild 获取具有焦点的 MDI 子项。
        如果窗体不是 MDI 父窗体（即窗体的 FormStyle 属性不是 fsMDIForm），则 ActiveMDIChild 返回空。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    AlphaBlend: bool
    """bool：指定表单是否半透明。

        设置 AlphaBlend 以指定窗体表示允许半透明颜色的分层窗口。 AlphaBlendValue 属性指定半透明度。

        注意：AlphaBlend 并不适用于所有系统。该应用程序必须在 Windows 2000 或更高版本下运行，并且计算机必须是 P90 或更高版本。"""
    AlphaBlendValue: int
    """int：指定半透明表单的半透明程度。

        将 AlphaBlendValue 设置为 0 到 255 之间的值，以指示 AlphaBlend 属性为 true 时的半透明程度。值为 0 表示完全透明的窗口。值为 255 表示完全不透明。

        注意：AlphaBlendValue 仅当 AlphaBlend 属性为 true 时才有效。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoScroll: bool
    """bool：指示如果滚动窗口控件不够大，无法显示其所有控件，滚动条是否自动出现在滚动窗口控件上。

        如果 AutoScroll 为 true，则滚动条会在必要时自动出现。例如，如果用户调整控件的大小，使其部分控件被部分遮挡，则会出现滚动条。
        如果 AutoScroll 为 false，则不会自动显示滚动条。在这种情况下，请使用 HorzScrollBar 和 VertScrollBar 属性来显示滚动条。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderIcons: BorderIcons
    """BorderIcons：指定哪些图标出现在窗体的标题栏上。

        使用 BorderIcons 获取或设置出现在窗体标题栏上的图标。 BorderIcons 可以包含以下任意 TBorderIcons 值：

        值 含义
        biSystemMenu 该窗体有一个控制菜单（也称为系统菜单）。
        biMinimize 该表单有一个最小化按钮
        biMaximize 该表单有一个最大化按钮
        biHelp 如果 BorderStyle 为 bsDialog 或排除 biMinimize 和 biMaximize，则窗体标题栏中会出现一个问号，单击时光标会变为 crHelp；否则，不会出现问号。

        注意：BorderIcons 和 BorderStyle 属性的某些组合是互斥的。例如，BorderIcons biMax、biMin 与 bsDialog 的 BorderStyle 是互斥的。"""
    BorderStyle: FormBorderStyle
    """FormBorderStyle：指定表单边框的外观和行为。

        使用 BorderStyle 获取或设置表单边框的外观和行为。 BorderStyle 可以是以下任意 TForm BorderStyle 值：

        值 含义
        bsDialog 不可调整大小；没有最小化/最大化菜单
        bsSingle 不可调整大小；最小化/最大化菜单
        bsNone 不可调整大小；没有可见的边界线
        bsSizeable 标准可调整大小的边框
        bsToolWindow 类似于 bsSingle，但标题较小
        bsSizeToolWin 像 bsSizeable 一样，标题较小

        注意：将 MDI 子窗体的边框样式更改为 bsDialog 或 bsNone 无效。"""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    ClientHandle: int
    """int：提供对窗体内部 MDI 客户端窗口句柄的访问。

        使用 ClientHandle 获取窗体内部 MDI 客户端窗口的句柄。
        ClientHandle 仅在窗体是 MDI 父级时才有意义（即，如果窗体的 FormStyle 属性设置为 fsMDIForm）。

        注意：使用 Handle 属性来获取窗体窗口本身的句柄。"""
    ClientHeight: int
    """int：指定控件工作区的高度（以像素为单位）。

        使用 ClientHeight 读取或更改控件客户区的高度。
        对于 TControl，ClientHeight 与 Height 相同。派生类可以实现与 Height 不同的 ClientHeight 属性。例如，窗体的 ClientHeight 是 Height 属性的值减去标题栏、调整边框和滚动条的高度。"""
    ClientWidth: int
    """int：指定控件工作区的水平尺寸（以像素为单位）。

        使用 ClientWidth 读取或更改控件客户区的宽度。 ClientWidth 相当于 ClientRect.Right。
        对于 TControl，ClientWidth 与 Width 相同。派生类可以实现与 Width 不同的 ClientWidth 属性。例如，窗体的 ClientWidth 是 Width 属性的值减去调整大小边框和滚动条的宽度。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    Ctl3D: bool
    """bool：确定控件是具有三维 (3-D) 外观还是二维外观。

        Ctl3D 是为了向后兼容而提供的。32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，它偶尔会使用。
        在早期平台上，Ctl3D 控制控件是具有平面外观还是斜面外观。"""
    CustomTitleBar: TitleBar
    """TitleBar： 目前没有任何其他信息。"""
    DefaultMonitor: DefaultMonitor
    """DefaultMonitor：指定显示表单的监视器。

        使用 DefaultMonitor 将窗体与多监视器应用程序中的特定监视器关联。下表列出了可能的值：

        值 含义
        dmDesktop 不会尝试将表单放置在特定监视器上。
        dmPrimary 该窗体位于全局屏幕对象的 Monitors 属性中列出的第一个监视器上。
        dmMainForm 该表单与应用程序的主表单显示在同一台显示器上。
        dmActiveForm 该表单与当前活动表单显示在同一监视器上。

        注意：如果应用程序没有主窗体，则 DefaultMonitor 不起作用。"""
    DockManager: IDockManager
    """IDockManager：指定控件的停靠管理器界面。

        使用 DockManager 指定控件的停靠管理器。对接管理器处理对接区域（控件对接的位置）的布局以及与对接区域相关的任何绘制。
        如果将 DockSite 和 UseDockManager 设置为 true，但不为 DockManager 赋值，则窗口控件将使用全局 DefaultDockTreeClass 变量生成默认停靠管理器。"""
    DockSite: bool
    """bool：指定控件是否可以作为拖放操作的目标。

        将 DockSite 设置为 true 以允许其他控件停靠到此窗口控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。某些禁用的控件会变暗（例如：按钮、复选框、标签），而其他控件（容器控件）只会失去其功能而不会改变其外观。如果将 Enabled 设置为 False，则控件会忽略鼠标、键盘和计时器事件。

        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    FormStyle: FormStyle
    """FormStyle：确定表单的样式。

        使用 FormStyle 获取或设置表单的样式。 FormStyle 是以下值之一：
        值 含义
        fsNormal 该窗体既不是 MDI 父窗口，也不是 MDI 子窗口。
        fsMDIChild 该窗体是一个 MDI 子窗口。
        fsMDIForm 该窗体是 MDI 父窗口。
        fsStayOnTop 此窗体保留在桌面和项目中其他窗体的顶部，但 FormStyle 设置为 fsStayOnTop 的任何其他窗体除外。如果一个 fsStayOnTop 表单启动另一个表单，则这两个表单都不会始终保持在顶部。
        如果该窗体是 MDI 应用程序的主窗体，则其 FormStyle 属性必须设置为 fsMDIForm。

        注意：不建议在运行时更改 FormStyle。
        警告：放置在 FormStyle 设置为 fsMDIForm 的窗体客户区中的 TGraphicControl 后代将不会绘制。"""
    GlassFrame: GlassFrame
    """GlassFrame：在 Windows Vista、Windows 7 或更高版本的 Windows 操作系统下访问 Glass Frame。

        使用 GlassFrame 使您的表单与 Windows Vista 或 Windows 7 Aero 兼容，显示玻璃效果。
        GlassFrame 是为任何表单自动创建的 TGlassFrame 对象的属性。

        注意：该属性仅适用于带有 Aero 的 Windows Vista 或 Windows 7。否则，玻璃框架将被忽略。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    HelpFile: str
    """str：指定表单用于显示帮助的帮助文件的名称。

        如果您的窗体应该有一个与使用全局 TApplication 类型对象的 TApplication.HelpFile 属性指定的应用程序的默认帮助文件不同的帮助文件，则使用窗体的 HelpFile 属性来指定窗体将要使用的帮助文件的名称。用于显示来自的帮助。
        当窗体获得焦点时，TApplication.HelpSystem 指定的帮助系统显示窗体的 HelpFile 属性指定的帮助文件中的帮助主题。"""
    HorzScrollBar: ControlScrollBar
    """ControlScrollBar：表示滚动窗口控件的水平滚动条。

        使用 HorzScrollBar 隐藏、显示或操作滚动窗口控件的水平滚动条。"""
    Icon: Icon
    """图标：指定窗体最小化时出现的图标。

        设置 Icon 属性以为窗体提供图标。如果未设置 Icon，则系统在窗体最小化时提供默认图标。"""
    KeyPreview: bool
    """bool：指定窗体是否应在活动控件之前接收键盘事件。

        如果 KeyPreview 为 true，则键盘事件先在窗体上发生，然后再在活动控件上发生。 （活动控件由 ActiveControl 属性指定。）
        如果 KeyPreview 为 false，则键盘事件仅发生在活动控件上。
        导航键（Tab、BackTab、箭头键等）不受 KeyPreview 的影响，因为它们不生成键盘事件。同样，当按钮具有焦点或其 Default 属性为 true 时，Enter 键不受 KeyPreview 影响，因为它不会生成键盘事件。
        KeyPreview 默认为 false。"""
    MDIChildCount: int
    """int：指定打开的MDI子窗体的数量。

        使用 MDIChildCount 获取打开的 MDI 子窗体的数量。
        仅当窗体是 MDI 父窗体（即窗体的 FormStyle 属性设置为 fsMDIForm）时，MDIChildCount 才有意义。"""
    MDIChildren: Form
    """表单：用于访问当前MDI（Multiple Document Interface，多文档界面）主窗体下所有的子窗体。"""
    Menu: MainMenu
    """MainMenu：指定窗体的主菜单。

        使用 Menu 获取或设置窗体的主菜单。在设计时，Menu 设置为添加到窗体中的第一个 TMainMenu 组件。"""
    ModalResult: Any
    """表示用作模式对话框的表单的返回值。"""
    ObjectMenuItem: MenuItem
    """MenuItem：表示对 OLE 对象的选择做出反应的 OLE 对象菜单项。

        使用 ObjectMenuItem 获取或设置一个菜单项，当分别选择或取消选择窗体上的 OLE 对象时，该菜单项将启用或禁用。
        OLE 对象菜单项可用于标准 OLE 命令，例如“激活”或“转换”。 （这些命令的实现由 OLE 服务器提供。）"""
    OnActivate: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnAfterMonitorDpiChanged: Callable[[Object,int,int],None]
    """可调用[[对象，int，int]，无]："""
    OnAlignInsertBefore: Callable[[WinControl,Control,Control],bool]
    """可调用[[WinControl, Control, Control], bool]:"""
    OnAlignPosition: Callable[[WinControl,Control,int,int,int,int,Rect,AlignInfo],None]
    """Callable[[WinControl, Control, int, int, int, int, Rect, AlignInfo], None]:"""
    OnBeforeMonitorDpiChanged: Callable[[Object,int,int],None]
    """可调用[[对象，int，int]，无]："""
    OnCanResize: Callable[[Object,int,int,bool],None]
    """Callable[[Object, int, int, bool], None]:"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClose: Callable[[Object,CloseAction],None]
    """可调用[[对象，CloseAction]，无]："""
    OnCloseQuery: Callable[[Object,bool],None]
    """可调用[[对象，布尔]，无]："""
    OnConstrainedResize: Callable[[Object,int,int,int,int],None]
    """可调用[[对象，int，int，int，int]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnCreate: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDeactivate: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDestroy: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """Callable[[Object, DragDockObject, int, int], None]:"""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """Callable[[Object, DragDockObject, int, int, DragState, bool], None]:"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """可调用[[对象、控件、矩形、点、布尔]、无]："""
    OnHelp: Callable[[int,int,bool],bool]
    """可调用[[int, int, bool], bool]："""
    OnHide: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnKeyPress: Any
    """可调用[[对象，unicodechr(str)]，无]："""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """Callable[[Object, int, ShiftState], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnMouseWheel: Callable[[Object,ShiftState,int,Point,bool],None]
    """Callable[[Object, ShiftState, int, Point, bool], None]:"""
    OnMouseWheelDown: Callable[[Object,ShiftState,Point,bool],None]
    """Callable[[Object, ShiftState, Point, bool], None]:"""
    OnMouseWheelUp: Callable[[Object,ShiftState,Point,bool],None]
    """Callable[[Object, ShiftState, Point, bool], None]:"""
    OnPaint: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnResize: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnShortCut: Callable[[WMKey,bool],None]
    """可调用[[WMKey, bool], None]:"""
    OnShow: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """Callable[[Object, Control, WinControl, bool], None]:"""
    Padding: Padding
    """填充：指定控件的填充。

        使用 Padding 指定控件的填充。该值是 TPadding 类的实例。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父控件的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        将表单中所有控件的 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东地区。
        当控件的 BiDiMode 属性值发生变化时，ParentBiDiMode 会自动变为 false。"""
    ParentFont: bool
    """bool：指定控件查找字体信息的位置。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认将 ParentFont 设置为 true，以便表单或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值发生变化时，ParentFont 会自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体为 Tahoma 8 pt。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    PopupMode: PopupMode
    """PopupMode：控制顶级表单相对于 Window 的 WS_POPUP 样式的行为方式。

        PopupMode 属性控制顶级表单相对于 Window 的 WS_POPUP 样式的行为方式。具有 WS_POPUP 样式的窗口在 Z 顺序中始终位于其“所有者”之上。您可以将 PopupMode 属性与 PopupParent 属性结合使用，以避免由于模式对话框显示在屏幕上另一个窗体后面而导致出现应用程序挂起的情况。

        注意：使用 PopupMode 属性类似于为 FormStyle 属性指定 fsStayOnTop，但可以更好地控制分层。
        当调用 ShowModal 方法时，PopupMode 属性会自动设置为 pmAuto。但是，这会导致重新创建窗口句柄，这通常是不可取的。为了避免重新创建窗口句柄，您可以在调用 ShowModal 方法之前（例如在设计时）将 PopupMode 属性显式设置为 pmAuto。
        对于非模态设计窗口（例如工具选项板和其他浮动工具窗口），将 PopupMode 属性设置为 pmExplicit。这会导致窗口始终保持在主窗体的顶部。在拼合设计（其中窗口停靠到主窗体）的情况下，设计窗口保留在设计器的顶部。

        注意：对于未停靠的窗口，设计窗口保留在主窗体上方，允许其他顶级窗体遮盖设计窗口。
        您可以通过将 PopupParent 属性设置为显式 TCustomForm 来强制表单的 Z 顺序并创建用户无法更改的“堆叠”外观。如果 PopupMode 属性为 pmExplicit 并且 PopupParent 为 nil，则 Application.MainForm 将隐式用作 PopupParent。如果未分配 Application.MainForm，则使用 Application.Handle 作为 PopupParent。如果 PopupMode 属性设置为 pmAuto，则 Screen.ActiveForm 将用作 PopupParent。"""
    PopupParent: CustomForm
    """CustomForm：设置用户无法更改的堆叠表单的顺序。

        如果 PopupMode 属性设置为 pmExplicit 且 PopupParent 为 nil，则 Application.MainForm 隐式用作 PopupParent。 如果未分配 Application.MainForm，则 Application.Handle 用作 PopupParent。
        如果 PopupMode 属性设置为 pmAuto，则 Screen.ActiveForm 用作 PopupParent 属性。"""
    Position: Position
    """位置：表示表单的大小和位置。

        使用 Position 获取或设置表单的大小和位置。位置可以具有以下 TPosition 值之一：
        值 含义
        poDesigned 该表单出现在屏幕上，并且具有与设计时相同的高度和宽度。
        poDefault 窗体出现在屏幕上的某个位置，其高度和宽度由操作系统确定。每次运行应用程序时，窗体都会稍微向下和向右移动。无论屏幕分辨率如何，窗体的右侧始终靠近屏幕的最右侧，窗体的底部始终靠近屏幕的底部。
        操作系统仅支持重叠窗口。对于弹出窗口或子窗口（例如，其 BorderStyle 为 bsDialog 或 bsNone），该窗口位于屏幕的左上角。
        poDefaultPosOnly 窗体以您在设计时创建的大小显示，但操作系统选择其在屏幕上的位置。每次运行应用程序时，窗体都会稍微向下和向右移动。当表单无法再向下和向右移动并保持相同大小同时在屏幕上完全可见时，表单将显示在屏幕的左上角。
        操作系统仅支持重叠窗口。对于弹出窗口或子窗口（例如，其 BorderStyle 为 bsDialog 或 bsNone），该窗口位于屏幕的左上角。
        poDefaultSizeOnly 窗体显示在设计时保留的位置，但操作系统选择其大小。无论屏幕分辨率如何，窗体的右侧始终靠近屏幕的最右侧，窗体的底部始终靠近屏幕的底部。
        poScreenCenter 表单仍保持设计时的大小，但位于屏幕中央。在多显示器应用程序中，窗体可以从该中心位置移动，以便它完全落在一个显示器上，如 DefaultMonitor 属性所指定的。
        poDesktopCenter 表单仍保持设计时的大小，但位于屏幕中央。没有针对多显示器应用程序进行任何调整。
        poMainFormCenter 该窗体保持设计时保留的大小，但位于应用程序主窗体的中心。没有针对多显示器应用程序进行任何调整。此位置只能与辅助形式一起使用。如果设置为主窗体，它的作用类似于 poScreenCenter。
        poOwnerFormCenter 该窗体仍保持设计时的大小，但位于由 Owner 属性指定的窗体的中心。如果 Owner 属性未指定表单，则此位置的作用类似于 poMainFormCenter。

        请注意，如果 Position 设置为 poDefault、poDefaultPosOnly 或 poDefaultSizeOnly，并且 BorderStyle 设置为 bsDialog 或 bsNone，则窗体将定位在 (0,0)。"""
    PrintScale: PrintScale
    """PrintScale：表示打印表格的比例。
    
        使用 PrintScale 获取或设置打印表单的比例。 PrintScale 可以具有以下 TPrintScale 值之一：
        值 含义
        poNone 不会发生特殊的缩放；因此，打印的表格以及表格在屏幕上的显示方式可能会显得被压扁或拉伸。
        poProportional 打印表格时，打印图像的可见尺寸与屏幕上的可见尺寸大致相同 (WYSIWYG)。表单图像经过缩放，以便打印的图像与屏幕上的可见尺寸大致相同。
        poPrintToFit 该表格使用相同的屏幕比例打印，但尺寸恰好适合打印页面。"""
    Scaled: bool
    """bool：指定是否根据 PixelsPerInch 属性的值调整窗体的大小。

        缩放确定表单是否根据设计时使用的字体与运行时系统使用的当前系统字体之间的差异进行调整。如果 Scaled 为 true，则窗体会调整自身及其所有子控件的大小，以维持控件大小和以默认字体显示的文本高度之间的关系。如果 Scaled 为 false，则不会发生此类调整大小。
        通过将 Scaled 设置为 true，表单可以调整为不可缩放的字体（即，仅提供离散点大小的字体）或差异，例如在设计时使用小字体设计但在使用大字体的系统上运行的表单。
        调整大小的程度由 PixelsPerInch 属性确定，该属性测量设计表单时使用的系统上字体的比例。"""
    ScreenSnap: bool
    """bool：指定表单是否紧贴屏幕边缘。

        ScreenSnap 确定当用户移动表单时，表单的边缘是否与屏幕边缘对齐。要控制捕捉距离，请设置 SnapBuffer 属性。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    SnapBuffer: int
    """int：指定屏幕捕捉的距离。

        如果 ScreenSnap 为 true，则 SnapBuffer 确定在窗体捕捉到屏幕边缘之前窗体边缘和屏幕边缘之间的最大像素数。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TileMode: TileMode
    """TileMode：表示调用Tile方法时MDI子窗体的排列方式。

        TileMode 可以具有以下 TTileMode 值之一：
        值 含义
        tbHorizontal 每个表单都延伸到父表单的宽度上
        tbVertical 每个窗体沿着父窗体的高度延伸

        仅当窗体是 MDI 子窗体（即窗体的 FormStyle 属性设置为 fsMDIChild）时，TileMode 才有意义。"""
    TipMode: TipMode
    """TipMode：TipMode 指示当控件接收焦点或接收手势时 TabTip（屏幕键盘等效项）是打开还是关闭。

        例如，在从 TButtonControl 派生的控件中，默认模式是tipClose，因此当控件接收到焦点或手势时，TabTip 会被指示消失。从 TCustomEdit 派生的控件的默认值是tipOpen。

        注：以上仅适用于支持触摸屏的设备"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    TransparentColor: bool
    """bool：指定表单上的颜色是否显示为透明。
        使用TransparentColor 指示窗体上的一种颜色应被视为透明，从而允许窗体后面的窗口完全显示出来。 TransparentColorValue 属性指示完全透明的颜色。

        注意：要使整个表单透明，或使其半透明而不是透明，请使用 AlphaBlend 和 AlphaBlendValue 属性。
        注意：TransparentColor 并不适用于所有系统。该应用程序必须在 Windows 2000 或更高版本下运行，并具有足够的硬件。"""
    TransparentColorValue: int
    """int：表示当TransparentColor为true时窗体上显示为透明的颜色。
        使用TransparentColorValue 指示当TransparentColor 属性为true 时显示为透明的颜色。

        注意：如果应用程序使用 16 位调色板，TransparentColorValue 必须是基本颜色。"""
    UseDockManager: bool
    """bool：指定在拖放操作中是否使用停靠管理器。

        使用 UseDockManager 获取或设置是否在拖放操作中使用停靠管理器。
        对接管理器处理对接控件的定位以及这些控件周围对接区域的任何绘制。如果不使用停靠管理器，则停靠控件将根据距它们释放位置最近的边缘与窗口控件对齐。当您不使用停靠管理器时，用户没有区域可以抓住来自动取消停靠的控件。"""
    VertScrollBar: ControlScrollBar
    """ControlScrollBar：表示滚动窗口控件的垂直滚动条。

        使用 VertScrollBar 隐藏、显示或操作滚动窗口控件的垂直滚动条。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。
        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    WindowMenu: MenuItem
    """MenuItem：指定 MDI 父窗体的窗口菜单。

        使用 WindowMenu 获取或设置 MDI 父窗体的窗口菜单。窗口菜单是 MDI 应用程序中的标准菜单。它包含让用户管理应用程序中的窗口的命令。菜单项通常包括级联、排列图标、平铺等。
        窗口菜单还列出（在底部）当前在应用程序中打开的子窗口。当用户从菜单中选择这些窗口之一时，该窗口将成为应用程序中的活动窗口。
        尽管此菜单通常称为“窗口”菜单，但它可以具有与菜单栏上现有菜单项相对应的任何名称。打开的子窗体的名称会在运行时自动合并到菜单中。
        仅当窗体是 MDI 父窗体（即窗体的 FormStyle 属性设置为 fsMDIForm）时，WindowMenu 才有意义。"""
    WindowState: WindowState
    """WindowState：表示窗体在屏幕上的显示方式。

        设置 WindowState 以最小化、最大化或恢复窗体窗口。读取 WindowState 以确定窗体是最小化、最大化还是处于正常状态。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def ArrangeIcons(self, *args, **kwargs) -> Any:
        """排列最小化 MDI 子窗体的图标。

        使用 ArrangeIcons 排列最小化 MDI 子窗体的图标，使它们均匀分布且不重叠。
        仅当窗体是 MDI 父窗体（即窗体的 FormStyle 属性为 fsMDIForm）时，ArrangeIcons 才起作用。"""
    def Cascade(self, *args, **kwargs) -> Any:
        """排列 MDI 子窗体以使它们重叠。

        使用 Cascade 排列 MDI 子窗体，使它们重叠。
        仅当窗体是 MDI 父窗体（即窗体的 FormStyle 属性为 fsMDIForm）时，级联才起作用。"""
    def Close(self) -> Any:
        """TForm.Close()

        关闭封装的表单"""
    def CloseQuery(self) -> Any:
        """TForm.CloseQuery()

        询问包装好的Form是否可以关闭"""
    def LoadProps(self) -> Any:
        """TForm.LoadProps()

        从 .pydfm 文件加载属性"""
    def Next(self, *args, **kwargs) -> Any:
        """激活表单序列中的下一个子表单。

        使用 Next 更改 MDI 父窗体的活动子窗体。例如，如果父窗体中有三个子窗体，并且 Form2 是活动窗体，则 Next 方法会使 Form3 成为活动窗体。再次调用 Next 会使 Form4 处于活动状态。下次应用程序调用 Next 时，序列会重新开始，Form2 再次成为活动表单。
        Next 方法仅适用于作为 MDI 父窗体的窗体（FormStyle 属性值为 fsMDIForm）。"""
    def Previous(self, *args, **kwargs) -> Any:
        """激活表单序列中的上一个 MDI 子表单。

        使用 Previous 更改 MDI 父窗体的活动子窗体。例如，如果父窗体中有三个子窗体，并且 Form4 是活动窗体，则 Previous 方法会使 Form3 成为活动窗体。再次调用 Previous 会使 Form2 处于活动状态。下次应用程序调用 Previous 时，序列会重新开始，Form4 再次成为活动表单。
        Previous 方法仅适用于作为 MDI 父窗体的窗体（FormStyle 属性值为 fsMDIForm）。"""
    def Release(self) -> Any:
        """TForm.Release()

        释放（销毁）包装的 Form"""
    def ShowModal(self) -> Any:
        """TForm.ShowModal()

        将包装的表单显示为模态表单"""
    def Tile(self, *args, **kwargs) -> Any:
        """排列 MDI 子窗体，使它们具有相同的大小。

        使用 Tile 排列 MDI 子窗体，使它们具有相同的大小。平铺表单完全填满了父表单的客户区域。表单如何自行排列取决于其 TileMode 属性的值。
        仅当窗体是 MDI 父窗体（即窗体的 FormStyle 属性为 fsMDIForm）时，Tile 才起作用。"""
    def get_MDIChildren(self, I: int) -> Form:
        """TForm.get_MDIChildren(I: int) -> Form

        目前没有任何其他信息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Graphic(Persistent):
    """TGraphic 是可以存储和显示可视图像的对象（例如图标、位图和图元文件）的抽象基类类型。

    TGraphic是一个抽象类，无法实例化。后代图形对象重写 TGraphic 的许多方法来满足其特定文件格式和图形特性的需求。 TGraphic 还引入了与 TPicture 对象和剪贴板一起使用的方法。 TGraphic 的属性提供有关图形图像的状态和大小的信息。
    当图形的类型已知时，将图形存储在其特定类型对象中。否则，使用可以容纳任何类型 TGraphic 的 TPicture 对象。"""
    __hash__: ClassVar[None] = ...
    Empty: Any
    Height: Any
    Modified: Any
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnProgress: Callable[[Object,ProgressStage,int,bool,Rect,str],None]
    """Callable[[Object, ProgressStage, int, bool, Rect, str], None]:"""
    Palette: Any
    PaletteModified: Any
    ScaledDrawer: ScaledGraphicDrawer
    """ScaledGraphicDrawer：返回对缩放抽屉的引用。
        当为图形启用缩放抽屉时，ScaledDrawer 属性将返回对其的引用。

        也可以看看EnableScaledDrawer"""
    SupportsPartialTransparency: bool
    """bool：指示图形是否支持部分透明度或 Alpha 通道。

        SupportsPartialTransparency 指示图形是否支持部分透明度或 Alpha 通道。
        一些 TGraphic 后代，例如 TBitmap 和 TPngImage，可以支持部分透明度或 Alpha 通道。当使用 DrawTransparent 在画布上绘制支持部分透明的图形时，应根据 Alpha 通道的值将其与画布上的像素混合。"""
    Transparent: Any
    Width: Any
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    @classmethod
    def CanLoadFromStream(cls, Stream: Stream) -> bool:
        """TGraphic.CanLoadFromStream(Stream: Stream) -> bool

        当指定的流包含特定 TGraphic 子类的流图像时，CanLoadFromStream 返回 True。
        该方法使用当前流位置，它不会更改当前流位置。"""
    def Create(self, *args, **kwargs) -> Any:
        """创建 TGraphic 对象。

        该方法创建并初始化一个 TGraphic 对象。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TPersistent 实例并释放其内存。

        Vcl.Graphics.TGraphic.Destroy继承自System.Classes.TPercient.Destroy。此行以下的所有内容均引用 System.Classes.TPercient.Destroy。
        销毁 TPersistent 实例并释放其内存。
        不要直接调用 Destroy。请调用Free，在调用 Destroy 之前，Free 检查对象引用是否不为 nil。"""
    def DisableScaledDrawer(self, *args, **kwargs) -> Any:
        """DisableScaledDrawer 禁用图形的缩放抽屉。

        也可以看看 ScaledDrawer EnableScaledDrawer"""
    def EnableScaledDrawer(self, AGraphicScalerClass: ScaledGraphicDrawerClass, AInitialize: bool) -> None:
        """TGraphic.EnableScaledDrawer(AGraphicScalerClass: ScaledGraphicDrawerClass, AInitialize: bool) -> 无

        EnableScaledDrawer 启用图形缩放抽屉，用于缩放图形。
        AGraphicScalerClass 指定缩放抽屉类，例如 TWICScaledGraphicDrawer。

        也可以看看 ScaledDrawer DisableScaledDrawer"""
    def Equals(self, Obj: Object) -> bool:
        """TGraphic.Equals(Obj: Object) -> bool

        将图形与另一个 TGraphic 对象进行比较，如果对象包含相同的图形，则返回 true。
        Equals 比较两个 TGraphic 对象的内容。如果 TGraphic 是不同的类或者它们包含不同的图形数据，则 Equals 返回 false。"""
    def LoadFromClipboardFormat(self) -> Any:
        """TGraphic.LoadFromClipboardFormat()"""
    def LoadFromFile(self) -> Any:
        """TGraphic.从文件加载()"""
    def LoadFromStream(self) -> Any:
        """TGraphic.从流加载()"""
    def SaveToClipboardFormat(self) -> Any:
        """TGraphic.SaveToClipboardFormat()"""
    def SaveToFile(self) -> Any:
        """TGraphic.SaveToFile()"""
    def SaveToStream(self) -> Any:
        """TGraphic.SaveToStream()"""
    def SetSize(self, AWidth: int, AHeight: int) -> None:
        """TGraphic.SetSize(AWidth: int, AHeight: int) -> 无

        指定图形的大小。
        使用 SetSize 方法设置图形的高度和宽度。这比单独设置高度和宽度具有更好的性能。"""
    def UpdateScaledDrawer(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class GroupBox(CustomControl):
    """TGroupBox 代表 Windows 组框。

    TGroupBox 组件代表一个标准的 Windows 组框，用于对窗体上的相关控件进行分组。当另一个控件组件放置在组框中时，该组框将成为该组件的父组件。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """Anchors：指定控件如何锚定到其父级。

        使用 Anchors 可确保控件保持其相对于其父级边缘的当前位置，即使父级的大小已调整。当其父级的大小已调整时，控件将保持其相对于其锚定到的边缘的位置。
        如果控件锚定到其父级的相对边缘，则控件会在其父级的大小调整时拉伸。例如，如果控件的 Anchors 属性设置为 [akLeft, akRight]，则控件会在其父级的宽度更改时拉伸。
        仅在调整父级大小时强制使用 Anchors。因此，例如，如果控件在设计时锚定到窗体的相对边缘，并且窗体是在最大化状态下创建的，则控件不会拉伸，因为窗体在创建控件后不会调整大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与 Anchors 不同，Alignment 允许控件根据其他对齐的同级控件的大小变化以及父级控件的大小变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定用于向用户标识控件的文本字符串。

        使用 Caption 指定标记控件的文本字符串。
        要为标记组件的 Caption 中的字符加下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        注意：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。所使用的属性取决于控件的类型。通常，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件（如 TButton），无法更改 Caption 的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型（如 TSpeedButton 或 TBitBtn），而不是 TButton。无论是 TSpeedButton 还是 TBitBtn，您都可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，可以在运行时或设计时在 Caption 属性内声明一个 HTML 标记。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。
        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DefaultHeaderFont: bool
    """布尔："""
    DockSite: bool
    """bool：指定控件是否可以作为拖放操作的目标。

        将 DockSite 设置为 true 以允许其他控件停靠到此窗口控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。
        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的底层 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HeaderFont: Font
    """字体："""
    OnAlignInsertBefore: Callable[[WinControl,Control,Control],bool]
    """可调用[[WinControl, Control, Control], bool]:"""
    OnAlignPosition: Callable[[WinControl,Control,int,int,int,int,Rect,AlignInfo],None]
    """Callable[[WinControl, Control, int, int, int, int, Rect, AlignInfo], None]:"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """可调用[[Object, DragDockObject, int, int], None]："""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """Callable[[Object, DragDockObject, int, int, DragState, bool], None]:"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnExit: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """可调用[[对象、控件、矩形、点、布尔]、无]："""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """Callable[[Object, Control, WinControl, bool], None]:"""
    Padding: Padding
    """Padding：指定控件的填充。

        使用 Padding 指定控件的填充。此值是 TPadding 类的一个实例。"""
    ParentBackground: bool
    """bool：确定控件是否使用其父级的主题背景。

        如果 ParentBackground 为 True，则控件使用父级的主题背景来绘制自己的背景。
        如果 ParentBackground 为 False，则控件使用其自己的属性（例如 Color）来绘制其背景。
        除非启用 XP 主题，否则 ParentBackground 无效。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """bool：指定控件在何处查找是否应显示其帮助提示。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """对父级底层控件的引用。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowFrame: bool
    """布尔：用于控制窗体或控件是否显示边框。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class HandleStream(Stream):
    """THandleStream 使应用程序能够读取和写入由句柄标识的通信资源。

    使用 THandleStream 访问文件、套接字、命名管道、邮槽或其他在打开时提供句柄的通信资源。例如，FileOpen 函数提供磁盘上文件的句柄。 THandleStream 允许应用程序在使用句柄执行 I/O 时使用统一的流接口。
    为了避免管理文件句柄的开销，请使用 TFileStream 来处理磁盘文件。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """返回 TObject.ClassName"""
    Handle: int
    """int：指定流读取和写入的通信资源的句柄。

        读取Handle来获取文件管理函数的句柄。要读取或写入资源，请使用 THandleStream 对象的方法。
        句柄是只读属性。无法更改句柄属性以允许句柄流从读取切换到写入，反之亦然。例如，要从以只读模式打开的文件句柄更改为以写入模式打开的文件句柄：

        释放流对象。
        调用 FileClose 关闭文件。
        以写入模式重新打开文件并使用句柄创建句柄流的新实例。或者，打开文件的 TFileStream 对象，指定流的写入模式。
        注意：在 THandleStream 对象被销毁之前，不要对 Handle 调用 FileClose 函数。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AHandle: int) -> None:
        """THandleStream.Create(AHandle: int) -> 无

        创建 THandleStream 的实例。
        调用 Create 来实例化给定句柄的 THandleStream。
        必须通过以适当的模式打开或创建资源来获取句柄。例如，要创建用于读取文件的句柄流，请通过使用 fmOpenRead 或 fmOpenReadWrite 模式打开文件来获取文件句柄。要创建用于写入文件的句柄流，请通过使用 fmOpenWrite 或 fmOpenReadWrite 模式打开文件来获取文件句柄。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def Read(self, Buffer, Count: int) -> int:
        """THandleStream.Read(Buffer, Count: int) -> int

        从与句柄流关联的资源中将最多 Count 个字节的数据读入缓冲区。
        当文件中的字节数未知时，使用 Read 从与句柄流关联的资源中读取数据。 Read 从当前位置开始从资源传输最多 Count 个字节，然后将资源中的当前位置前进实际传输的字节数。 Read 返回实际传输的字节数，如果遇到文件结束标记，则该字节数可能小于 Count。
        句柄流的所有其他数据读取方法（ReadBuffer、ReadComponent）都调用 Read 来执行实际读取。"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮点。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def Seek(self, Offset: int, Origin: SeekOrigin) -> int:
        """THandleStream.Seek(偏移量：int，原点：SeekOrigin) -> int

        重置句柄流的当前位置。
        使用 Seek 将与句柄流关联的资源中的当前位置移动指定的偏移量。 Seek 允许应用程序读取或写入资源中的特定位置。
        Origin 参数指示如何解释 Offset 参数。原点应该是以下值之一：

        值 含义
        soFromBeginning 偏移量是从资源的开头开始的。 Seek 移动到 Offset 位置。偏移量必须 >= 0。
        soFromCurrent 偏移量是从资源中的当前位置开始的。寻找移动到位置+偏移。
        soFromEnd 偏移量是从资源末尾开始的。偏移量必须 <= 0 以指示文件末尾之前的字节数。

        或者，您也可以使用 TSeekOrigin 及其值来指示从何处开始查找操作。
        Seek 返回 Position 属性的新值，即资源中的新当前位置。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def Write(self, Buffer, Count: int) -> int:
        """THandleStream.Write(Buffer, Count: int) -> int

        将 Count 个字节从 Buffer 写入资源中的当前位置。
        使用 Write 将 Count 个字节写入与句柄流关联的资源（从当前位置开始）。写入资源后，Write 将当前位置前进所写入的字节数，并返回写入的字节数。
        句柄流的所有其他数据写入方法（WriteBuffer、WriteComponent）均调用 Write 来执行实际写入操作。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮点。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Header(CustomControl):
    """THeader 是一个分段可视控件，用于显示文本并允许使用鼠标调整每个部分的大小。

    提供 THeader 是为了向后兼容。新应用程序应改用 THeaderControl。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    AllowResize: bool
    """bool：确定用户是否可以在运行时用鼠标修改标题的大小。

        如果AllowResize 为 false，则无法调整标头内各部分的大小。如果AllowResize 为true，则单击标题部分的边框并向左或向右拖动可更改该部分的宽度。默认值是true。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BorderStyle: BorderStyle
    """BorderStyle：确定标头控件是否有边框。

        这些是可能的值：
        值 含义
        bsNone 无可见边框
        bsSingle 单线边框"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。
        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnSized: Callable[[Object,int,int],None]
    """可调用[[Object, int, int], None]："""
    OnSizing: Callable[[Object,int,int],None]
    """可调用[[对象，int，int]，无]："""
    ParentDoubleBuffered: bool
    """bool：ParentDoubleBuffered 将此组件的 DoubleBuffered 属性推迟为父组件的 DoubleBuffered 属性的值。

        ParentDoubleBuffered 是一个布尔值，指示该组件的 DoubleBuffered 属性将被父组件的 DoubleBuffered 属性的值覆盖。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    SectionWidth: int
    """整数："""
    Sections: Strings
    """字符串：列出包含标题各部分文本的字符串。

        字符串列表的行数决定了标题的节数。如果字符串列表为空，则标头有一个空白部分。如果此字符串列表包含一行或多行，则每一行的文本都位于其自己的部分中。第一行位于最左侧的部分，第二行位于右侧的下一个部分，依此类推。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序始终是控件添加到窗体的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：仅当 TabStop 属性为 True 并且控件具有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以使用 Tab 键切换到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件按 Tab 键顺序排列。如果 TabStop 为 False，则该控件不符合 Tab 键顺序，用户无法按 TAB 键移动到该控件。

        注意：TabStop 对于表单没有意义，除非该表单指定另一个表单作为其父表单。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """THeader.Create(AOwner: Component) -> 无

        创建一个新的 THeader 对象。
        调用 Create 在运行时实例化标头。在设计时添加到表单的标题是自动创建的。
        AOwner 参数初始化标头的 Owner 属性。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """释放与 THeader 对象关联的内存。

        不要直接调用 Destroy。相反，请使用 Free 方法，该方法在调用 Destroy 之前检查 THeader 引用是否为零。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Icon(Graphic):
    """TIcon 是 Windows 图标的封装。

    使用 TIcon 代表图像列表中的图标之一。将图标分配给具有 Icon 属性的对象，例如 TForm 或 TPicture。
    图标对象表示从 Windows 图标文件（.ICO 文件）加载的值。使用 TCanvas 对象的 Draw 方法在画布上绘制图标。图标不会拉伸，因此请勿将 StretchDraw (TCanvas) 与图标一起使用。

    注意：TIcon 可用于显示多分辨率（>16 色）图标的值。但是，它不支持创建多分辨率图标，也不支持从文件或流加载图像后调整图像大小。"""
    __hash__: ClassVar[None] = ...
    Handle: Any
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Assign(self, Source: Persistent) -> None:
        """从另一个 TIcon 对象复制图标图像。
        调用Assign 来复制另一个图标对象。如果它是另一个 TIcon 对象，Assign 会从 Source 参数复制图标图像。否则，Assign 调用继承的方法，该方法从任何源对象复制图标图像，该源对象在其 AssignTo 方法中指定如何复制到 TIcon。"""
    def AssignTo(self, Dest: Persistent) -> None:
        """TIcon.AssignTo（目标：持久）-> 无

        将图标图像复制到 TBitmap 图形对象。
        调用AssignTo 将图标复制到TBitmap 对象。如果是 TBitmap 对象，AssignTo 会将图标图像复制到 Dest 参数。否则，AssignTo 失败。
        将图标图像复制到位图的首选方法是使用 TBitmap 类的 Assign 方法，将图标对象作为 Source 参数传递。

        注意：调用AssignTo 后生成的位图始终具有Alpha 通道（透明度）信息和32 位颜色深度。"""
    @classmethod
    def CanLoadFromStream(cls, Stream: Stream) -> bool:
        """TIcon.CanLoadFromStream(Stream: Stream) -> bool

        Vcl.Graphics.TIcon.CanLoadFromStream 继承自 Vcl.Graphics.TGraphic.CanLoadFromStream。此行以下所有内容均引用 Vcl.Graphics.TGraphic.CanLoadFromStream。
        当指定流包含特定 TGraphic 子类的流图像时，CanLoadFromStream 返回 True。
        该方法使用当前流位置，它不会更改当前流位置。"""
    def Create(self, *args, **kwargs) -> Any:
        """创建 TIcon 的实例。

        调用 Create 创建一个空的图标对象。一旦图像从文件或流读入图标，或者通过分配另一个图标对象，就可以在画布上绘制图标或将其添加到图像列表中。不要创建图标对象来设置表单或图片的图标属性。这些对象在它们自己的构造函数中创建一个 TIcon 对象。相反，请对可通过读取 Icon 属性获取的 TIcon 对象使用 LoadFromFile、LoadFromStream 或 LoadFromClipboardFormat 方法。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TIcon 的一个实例。

        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会验证 TIcon 引用是否为空，然后才调用 Destroy。"""
    def HandleAllocated(self, *args, **kwargs) -> Any:
        """指示 TIcon 对象是否已获取基础 GDI 对象的句柄。

        使用 HandleAllocation 确定 Handle 属性是否设置为 HICON 值。 HandleAllocation 指示基础 GDI 对象是否已创建。使用 HandleAllocation 而不是读取 Handle 属性。当应用程序读取 Handle 属性时，如果基础 GDI 对象尚不存在，它会自动创建一个图标并返回其句柄。"""
    def LoadFromClipboardFormat(self, AFormat: int, AData: int, APalette: int) -> None:
        """TIcon.LoadFromClipboardFormat(AFormat: int, AData: int, APalette: int) -> None

        阻止应用程序从剪贴板加载图标。
        LoadFromClipboardFormat 在 TIcon 中被覆盖，因为不支持剪贴板格式。"""
    def LoadFromResourceID(self, Instance: int, ResID: int) -> None:
        """TIcon.LoadFromResourceID（实例：int，ResID：int）->无

        目前没有任何其他信息。"""
    def LoadFromResourceName(self, Instance: int, ResName: str) -> None:
        """TIcon.LoadFromResourceName(Instance: int, ResName: str) -> None

        将图标资源加载到图标对象中。
        LoadFromResourceName 从模块的可执行文件中加载指定的图标资源。
        Instance 是包含资源的模块的句柄。
        ResName 是要加载的资源的名称。"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TIcon.LoadFromStream(Stream: Stream) -> 无

        从流中加载图标。
        使用 LoadFromStream 从流中读取图标图像。将 Stream 参数设置为一个流对象，该对象提供对图标内存图像的访问。要从 .ico 文件加载图标，请使用 LoadFromFile 方法。要从剪贴板加载图标，请使用 LoadFromClipboardFormat 方法。"""
    def ReleaseHandle(self) -> Any:
        """TIcon.ReleaseHandle()"""
    def SaveToClipboardFormat(self, Format: int, Data: int, APalette: int) -> None:
        """TIcon.SaveToClipboardFormat（格式：int，数据：int，APalette：int）->无

        阻止应用程序将图标保存到剪贴板。
        SaveToClipboardFormat 在 TIcon 中被重写，因为剪贴板不支持该格式。"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TIcon.SaveToStream(Stream: Stream) -> 无

        将图标保存到流中。
        使用 SaveToStream 将图标图像写入流。将 Stream 参数指定为接收图标的内存图像的流对象。要将图标写入 .ico 文件，请使用 SaveToFile 方法。要将图标写入剪贴板，请使用 SaveToClipboardFormat 方法。"""
    def SetSize(self, AWidth: int, AHeight: int) -> None:
        """TIcon.SetSize(AWidth: int, AHeight: int) -> 无

        指定图标的大小。
        使用 SetSize 方法设置图标的高度和宽度。这比单独设置高度和宽度具有更好的性能。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Image(Control):
    """TImage 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    Canvas: Canvas
    """画布："""
    Center: bool
    """布尔：居中"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。
        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DragCursor: int
    """int：指定拖动控件时用于表示鼠标指针的图像。
        使用 DragCursor 属性可更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    IncrementalDisplay: bool
    """布尔："""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnFindGraphicClass: Callable[[Object,FindGraphicClassContext,GraphicClass],None]
    """可调用[[对象，FindGraphicClassContext，GraphicClass]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnProgress: Callable[[Object,ProgressStage,int,bool,Rect,str],None]
    """Callable[[Object, ProgressStage, int, bool, Rect, str], None]:"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[对象，DragDockObject]，无]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    Parent: Any
    """返回/设置控制父级"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用 ParentShowHint 确保窗体上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果 ParentShowHint 为 True，则控件使用其父控件的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性值。
        要仅为窗体上的选定控件提供帮助提示，请将那些应该有帮助提示的控件的 ShowHint 属性设置为 True，ParentShowHint 将自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    Picture: Picture
    """图片："""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    Proportional: bool
    """布尔：用于决定控件在调整大小时是否保持宽高比例。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Stretch: bool
    """布尔：用于控制显示在控件中的图像是否拉伸以适应控件的大小。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Transparent: bool
    """布尔：用于指定控件是否具有透明背景。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TImage.Create(AOwner: 组件) -> 无

        创建 TControl 的实例。
        调用 Create 构造并初始化 TControl 的实例。但是，您永远不应该尝试实例化 TControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。
        Create 调用父构造函数并初始化控件。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TControl 的一个实例。

        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会验证控件是否为空，然后才调用 Destroy。
        应用程序应仅在调用构造函数时显式释放控件，而无需为控件分配所有者。
        销毁控件时，它会：

        释放其 Font 属性中的 TFont 对象。
        调用其继承的析构函数。
        重写 Destroy 以释放 Create 方法中分配的任何内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并将继承的 Destroy 作为重新声明的方法中的最后一个语句调用。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果构造函数中出现异常，则会调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前，请检查所有数据字段是否为零。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ImageList(DragImageList):
    """TImageList 的包装"""
    __hash__: ClassVar[None] = ...
    AllocBy: int
    """整数：它指定在初始化时分配的图像列表的初始大小。这个属性主要影响在程序运行时向TImageList添加图像时的性能和内存分配。"""
    BkColor: int
    """整数：用于指定图像列表的背景颜色。"""
    BlendColor: int
    """整数：用于指定一个颜色，该颜色会与图像列表中的所有图像进行混合（blending）。"""
    ColorDepth: ColorDepth
    """颜色深度：用于指定图像列表中图像的颜色深度。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    DrawingStyle: DrawingStyle
    """绘图风格：用于定义图像在被绘制时的绘制风格或对齐方式。"""
    GrayscaleFactor: int
    """整数：用于控制图像列表中的图像是否以灰度方式显示，以及灰度显示的程度。"""
    Height: int
    """整数：用于设置或获取图像列表中每个图像的高度。"""
    ImageType: ImageType
    """图像类型：用于定义图像列表中图像的类型，即图像如何存储和呈现的方式。"""
    Masked: bool
    """布尔值：用于指示图像列表中的图像是否使用遮罩来表示透明区域。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    Owner: Any
    """返回组件所有者"""
    ShareImages: bool
    """布尔：用于指定是否共享图像列表中的图像数据。"""
    Width: int
    """整数：用于设置或获取图像列表中每个图像的宽度。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Label(Control):
    """TLabel 是一个非窗口控件，用于在窗体上显示文本。

    使用 TLabel 添加用户无法在表单上编辑的文本。该文本可用于标记另一个控件，并可在用户键入快捷键时将焦点设置到该控件。 Caption 属性可用于定义标签控件的快捷键。
    因为TLabel不是TWinControl的后代，所以它没有自己的窗口，不能接收来自键盘的直接输入。要将对象添加到除了显示文本之外还可以响应键盘输入（而不是在键入快捷键时将焦点设置到另一个对象）的对象，请使用 TStaticText。
    要将对象添加到显示用户可以滚动或编辑的文本的表单，请使用 TEdit。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """对齐：用于控制文本在控件内部的对齐方式。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。
        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。
        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    EllipsisPosition: EllipsisPosition
    """省略号位置：用于指定当标签文本过长时如何显示省略号（ellipsis）。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    FocusControl: WinControl
    """控制：用于指定当用户按下标签上的快捷键（通常是 Alt + 标签上的字符）时，焦点应该移动到哪个控件上。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。
        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    GlowSize: int
    """整数：用于控制文本的发光效果大小。"""
    Layout: TextLayout
    """文本布局：用于控制文本和图标在 Label 内部的布局方式。"""
    OnClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """可调用[[对象，点，布尔]，无]："""
    OnDblClick: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """Callable[[Object, Object, int, int, DragState, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """可调用[[对象，对象，int，int]，无]："""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """Callable[[Object, MouseButton, ShiftState, int, int], None]:"""
    OnMouseEnter: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """可调用[[对象，拖动对象]，无]："""
    Parent: Any
    """返回/设置控制父级"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentFont: bool
    """bool：指定控件在何处查找其字体信息。

        要让控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件使用其自己的 Font 属性。许多控件默认 ParentFont 为 true，以便窗体或其他容器中的所有控件呈现统一的外观。当控件的 Font 属性值更改时，ParentFont 自动变为 false。
        当表单的 ParentFont 为 true 时，表单将使用默认字体。目前，默认字体是 Tahoma 8 pt。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用 ParentShowHint 可确保窗体上的所有控件统一显示其帮助提示或统一不显示它们。
        如果 ParentShowHint 为 True，则控件使用其父级的 ShowHint 属性值。如果 ParentShowHint 为 False，则控件使用其自己的 ShowHint 属性的值。
        要仅为窗体上选定的控件提供帮助提示，请将那些应具有帮助提示的控件的 ShowHint 属性设置为 True，并且 ParentShowHint 自动变为 False。

        注意：使用应用程序对象的 ShowHint 属性启用或禁用整个应用程序的所有帮助提示。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowAccelChar: bool
    """布尔：用于控制是否显示加速键字符（accelerator character）。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """str： 风格名称"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Transparent: bool
    """布尔：用于指示控件的背景是否透明。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WordWrap: bool
    """布尔：用于控制文本是否自动换行显示。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LabeledEdit(CustomEdit):
    """TLabeledEdit 是一个具有关联标签的编辑控件。

    使用 TLabeledEdit 将带有标签的编辑控件添加到窗体中。 TLabeledEdit 与关联的标签控件一起使用，该控件是其 EditLabel 属性的值。该标签相对于编辑控件的位置由 LabelPosition 和 LabelSpacing 属性确定。
    使用 Text 属性可处理控件中的文本，使用标签的 Caption 属性可处理标签中的文本。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """对齐方式：确定文本在文本编辑控件内的对齐方式。

        使用对齐方式更改文本在文本编辑控件中的格式设置方式。对齐方式可以采用以下值之一：
        值 含义
        taLeftJustify 将文本与控件的左侧对齐
        taCenter 文本在控件中水平居中。
        taRightJustify 将文本与控件的右侧对齐。"""
    Anchors: Anchors
    """Anchors：指定控件如何锚定到其父级。

        使用 Anchors 可确保控件保持其相对于其父级边缘的当前位置，即使父级的大小已调整。当其父级的大小已调整时，控件将保持其相对于其锚定到的边缘的位置。
        如果控件锚定到其父级的相对边缘，则控件会在其父级的大小调整时拉伸。例如，如果控件的 Anchors 属性设置为 [akLeft, akRight]，则控件会在其父级的宽度更改时拉伸。
        仅在调整父级大小时强制使用 Anchors。因此，例如，如果控件在设计时锚定到窗体的相对边缘，并且窗体是在最大化状态下创建的，则控件不会拉伸，因为窗体在创建控件后不会调整大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与 Anchors 不同，Alignment 允许控件根据其他对齐的同级控件的大小变化以及父级控件的大小变化进行调整。"""
    AutoSelect: bool
    """bool：确定编辑控件获得焦点时是否自动选择该控件中的所有文本。

        设置 AutoSelect 以在编辑控件获得焦点时选择所有文本。AutoSelect 仅适用于单行编辑控件。
        当用户更有可能替换编辑控件中的文本而不是向其添加文本时，请使用 AutoSelect。"""
    AutoSize: bool
    """bool：确定编辑控件的高度是否自动调整大小以适应文本。

        使用 AutoSize 使编辑控件自动调整其大小，以便客户端区域适应文本的高度。当 AutoSize 为 false 时，编辑控件具有固定高度。当 AutoSize 为 true 时，只要发生可能影响控件高度的更改（例如字体或边框样式的更改），就会重新调整控件的大小。

        注意：AutoSize 仅调整编辑控件的高度。即使将 AutoSize 设置为 true，如果编辑控件中的文本超出控件的宽度，它也可能看起来被截断了。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """BorderStyle：确定编辑控件在工作区周围是否有单线边框。

        使用 BorderStyle 可以影响编辑控件的工作区突出的清晰度。 BorderStyle 的值可以是 bsSingle 或 bsNone。如果 BorderStyle 为 bsSingle，则编辑控件在工作区周围有单线边框。如果 BorderStyle 为 bsNone，则不会有边框。"""
    CharCase: EditCharCase
    """EditCharCase：确定编辑控件中文本的大小写。

        使用 CharCase 强制编辑控件的内容采用特定大小写。
        当 CharCase 设置为 ecLowerCase 或 ecUpperCase 时，字符的大小写会在用户将字符输入编辑控件时进行转换。将 CharCase 属性更改为 ecLowerCase 或 ecUpperCase 会更改文本的实际内容，而不仅仅是外观。任何大小写信息都会丢失，并且无法通过将 CharCase 更改为 ecNormal 来重新获取。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    EditLabel: BoundLabel
    """绑定标签："""
    EditMask: str
    """字符串："""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。
        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。某些禁用的控件会变暗（例如：按钮、复选框、标签），而其他控件（容器控件）只会失去其功能而不会改变其外观。如果将 Enabled 设置为 False，则控件会忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。
        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的基础 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HideSelection: bool
    """bool：确定当焦点转移到另一个控件时是否保留所选文本的视觉指示。

        将 HideSelection 设置为 false 可以提供文本选定部分的视觉反馈，即使编辑控件没有焦点也是如此。将 HideSelection 设置为 true 可以仅在编辑控件具有焦点时显示所选内容。 HideSelection 不会影响选择的实际值，只会影响视觉指示。始终将 HideSelection 设置为 false 可能会使具有许多编辑控件的表单看起来过于繁忙。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定使用哪个 IME 来转换击键。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量获取当前安装的 IME 列表。
        如果 ImeName 指定不可用的 IME，则将使用应用程序启动时处于活动状态的 IME。不会产生异常。

        注意：ImeName 的值仅在控件获得焦点时才生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    LabelPosition: LabelPosition
    """标签位置："""
    LabelSpacing: int
    """整数："""
    MaxLength: int
    """int：指定用户可以输入到编辑控件中的最大字符数。

        使用 MaxLength 限制可以输入到编辑控件中的字符数。值 0 表示没有应用程序定义的长度限制。
        如果编辑控件中的文本将被复制到固定长度的缓冲区中，则可以使用 MaxLength 来限制该文本的长度。

        注意：设置 MaxLength 不会截断现有文本，它只是阻止用户在达到 MaxLength 字符限制后添加更多文本。
        注意：即使 MaxLength 为 0，操作系统也可能对可输入编辑控件的字符数施加限制。
        注意：如果应用程序使用主题，则 MaxLength 的单位是字符（而不是字节）。"""
    NumbersOnly: bool
    """bool：仅允许在文本编辑中输入数字。

        使用 NumbersOnly 禁止在文本字段中输入非数字字符。但请注意，即使设置了此属性，用户也可以在文本字段中粘贴非数字字符。"""
    OEMConvert: bool
    """bool：确定在编辑控件中输入的字符是否从 ANSI 转换为 OEM，然后再转换回 ANSI。

        要确保在编辑控件中输入的任何字符都可以明确地转换为 OEM 字符集，请将 OEMConvert 设置为 true。这样，所有字符在输入时都会从 ANSI 转换为 OEM，然后再转换回 ANSI。将 OEMConvert 设置为 false，以避免在文本是否可以明确地映射到 OEM 字符串无关紧要时产生此转换的开销。
        当应用程序不使用 Unicode 文件名时，OEMConvert 对于用于输入文件名的编辑控件最有用。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """Callable[[Object, GestureEventInfo, bool], None]:"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

       ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PasswordChar: Any
    """unicodechr(str)：指示要显示的字符（如果有），以代替在控件中键入的实际字符。

        使用PasswordChar 属性创建一个编辑控件，该控件显示特殊字符来代替任何输入的文本。如果将PasswordChar 设置为空字符（ANSI 字符零），则编辑控件将正常显示其文本。如果PasswordChar 是任何其他字符，则编辑控件将显示PasswordChar 来代替键入的每个字符。 PasswordChar 仅影响编辑控件的外观。 Text 属性的值反映了键入的实际字符。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """bool：确定用户是否可以更改编辑控件的文本。

        要将编辑控件限制为仅显示，请将 ReadOnly 属性设置为 true。将 ReadOnly 设置为 false 以允许编辑编辑控件的内容。
        将 ReadOnly 设置为 true 可确保文本不被更改，同时仍允许用户选择文本。然后应用程序可以操作所选文本，或将其复制到剪贴板。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Text: str
    """str：包含与控件关联的文本字符串。
        使用 Text 属性读取控件的 Text 或为 Text 值指定新字符串。默认情况下，Text 是控件名称。对于编辑控件和备忘录，文本出现在控件内。对于组合框，文本是组合框的编辑控制部分的内容。

        注意：显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用哪个属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。"""
    TextHint: str
    """str：当 Text 属性为空时显示的提示或消息。

        使用 TextHint 提示用户在文本字段中需要输入什么类型的内容。必须启用运行时主题。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkControlDelegate(BindComponentDelegate):
    """是一个绑定组件，它包装另一个绑定组件并引用一个控件。

    TLinkControlDelegate 类实现一个绑定组件，该组件包装另一个绑定组件并引用一个控件。
    有关委托的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """返回拥有组件的迭代器"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def CanSetControlComponent(self, Value: Component) -> bool:
        """TLinkControlDelegate.CanSetControlComponent(Value: Component) -> bool

        返回给定参数是否可以用作此绑定组件的控制组件。
        CanSetControlComponent 返回给定 Value（其本身是一个 TComponent）是否可以用作此绑定组件的控制组件。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkControlToField(CustomLinkControlToField):
    """将列表控件链接到字段。

    TLinkListControlToField 类使用已发布的属性扩展了 TCustomLinkListControlToField。

    提示：如果方向是双向的，则控件必须支持 IEditLinkObserver 接口。"""
    __hash__: ClassVar[None] = ...
    AutoActivate: bool
    """用于指定当数据源与控件绑定时是否自动激活数据源。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """用于获取容器控件中包含的所有子控件的列表。"""
    Control: Component
    """用于指定要与数据源字段绑定的控件。"""
    CustomFormat: str
    """用于指定在将数据源字段的值显示在控件之前，对该值进行自定义格式化的字符串。"""
    CustomParse: str
    """用于指定在从控件中获取值并写入数据源字段之前，对该值进行自定义解析的字符串。"""
    DataSource: BaseLinkingBindSource
    """BaseLinkingBindSource：指定此委托组件链接到的 TBaseLinkingBindSource 对象。

        使用 DataSource 确定或设置连接到特定数据集的 TBaseLinkingBindSource 对象。"""
    Direction: LinkControlToFieldDirection
    """用于在数据源字段和控件属性之间建立绑定关系，Direction 属性定义了数据流的方向。"""
    FieldName: str
    """用于指定要与控件绑定的数据源字段的名称。"""
    LookupDataSource: BaseLinkingBindSource
    """用于指定要与控件绑定的数据源。"""
    LookupKeyFieldName: str
    """用于指定用于查找数据源记录的字段名称。"""
    LookupValueFieldName: str
    """用于指定从数据源中获取值的字段名称。"""
    OnActivated: Callable[[Object],None]
    """用于在数据源与控件绑定激活时触发的事件。"""
    OnActivating: Callable[[Object],None]
    """用于在数据源字段与控件属性之间建立绑定关系时触发。"""
    OnAssignedValue: Callable[[Object,BindingAssignValueRec,Value],None]
    """用于在将数据源字段的值分配给控件属性时触发。"""
    OnAssigningValue: Callable[[Object,BindingAssignValueRec,Value,bool],None]
    """用于在将数据源字段的值分配给控件属性之前触发。"""
    OnEvalError: Callable[[Object,Exception],None]
    """用于处理在将数据源字段的值分配给控件属性时发生错误的情况。"""
    Owner: Any
    """用于获取拥有或拥有LinkControlToField组件的对象。"""
    Track: bool
    """用于指定是否跟踪控件属性的更改并将其应用到数据源字段。"""
    UseEvalShortcuts: bool
    """bool：确定此绑定组件委托是否使用求值快捷方式（True）或不使用（False）。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkControlToFieldDelegate(LinkControlDelegate):
    """是一个绑定组件，它包装另一个绑定组件并引用控件、数据源和字段。

    TLinkControlToFieldDelegate 类实现一个绑定组件，该组件包装另一个绑定组件并引用控件、数据源和字段。
    有关委托的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """用于获取容器控件中包含的所有子控件的列表。"""
    DataSource: BaseLinkingBindSource
    """BaseLinkingBindSource：指定此委托组件链接到的 TBaseLinkingBindSource 对象。

        使用 DataSource 确定或设置连接到特定数据集的 TBaseLinkingBindSource 对象。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkLabel(CustomLinkLabel):
    """TLinkLabel 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    Alignment: CustomLinkLabel.TLinkAlignment
    """CustomLinkLabel.TLinkAlignment："""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜面样式。

        使用 BevelKind 修改斜面的外观。BevelKind 影响斜面的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜面切口相结合，可以创建各种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜面的切割。

        使用 BevelOuter 指定外斜面是凸起、降低还是平坦的外观。
        外斜面立即出现在边框内和内斜面的外部。"""
    Caption: str
    """str：指定用于向用户标识控件的文本字符串。

        使用 Caption 指定标记控件的文本字符串。
        要为标记组件的 Caption 中的字符加下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        注意：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。所使用的属性取决于控件的类型。通常，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件（如 TButton），无法更改 Caption 的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型（如 TSpeedButton 或 TBitBtn），而不是 TButton。无论是 TSpeedButton 还是 TBitBtn，您都可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，可以在运行时或设计时在 Caption 属性内声明一个 HTML 标记。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于获取容器控件中包含的所有子控件的列表。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnLinkClick: Callable[[Object,str,SysLinkType],None]
    """用于响应用户单击LinkLabel中的链接时触发的事件。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """用于响应鼠标移动到LinkLabel控件上时触发的事件。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    UseVisualStyle: bool
    """用于指定LinkLabel控件是否使用视觉样式（Visual Styles）来绘制。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkListControlToField(CustomLinkListControlToField):
    """将列表控件链接到字段。

    TLinkListControlToField 类使用已发布的属性扩展了 TCustomLinkListControlToField。

    提示：如果方向是双向的，则控件必须支持 IEditLinkObserver 接口。"""
    __hash__: ClassVar[None] = ...
    AutoActivate: bool
    """用于指定当数据源绑定到列表控件时是否自动激活数据源。"""
    ComponentCount: Any
    """用于获取TComponent对象的子组件数量。"""
    Components: Any
    """用于存储LinkListControlToField组件关联的控件列表。"""
    Control: Component
    """用于指定要与数据源绑定的列表控件。"""
    CustomFormat: str
    """用于指定将数据源字段值格式化为字符串时使用的自定义格式。"""
    DataSource: BaseLinkingBindSource
    """BaseLinkingBindSource：指定此委托组件链接到的 TBaseLinkingBindSource 对象。

        使用 DataSource 确定或设置连接到特定数据集的 TBaseLinkingBindSource 对象。"""
    FieldName: str
    """用于指定要与列表控件绑定的数据源字段的名称。"""
    FillBreakCustomFormat: str
    """str：指定与 FillBreakFieldName 属性定义的字段一起使用的自定义表达式。例如，表达式 StrCopy(%s, 0, 1);当字段的第一个字符不同时会导致中断。该属性是可选的。"""
    FillBreakFieldName: str
    """str：指定用于确定中断的字段。该属性是可选的。"""
    FillBreakGroups: FillBreakGroups
    """FillBreakGroups：指定中断值范围的集合。中断值属于该集合中的一个项目。与该项目关联的显示值显示在标题中。该属性是可选的。"""
    FillExpressions: FormatExpressions
    """FormatExpressions：指定填充列表控件时要使用的其他可选表达式。当需要多个表达式来填充列表中的项目时，请使用此集合。

        例如，您可以使用 FillExpressions 来填充 FireMonkey 列表框项目的 Text 和 Detail 属性。使用 FillDisplayCustomFormat 和 FillDisplayCustomFormat 属性来填充 Text 属性，并将项目添加到 FillExpressions 集合，用于 Detail 属性。"""
    FillHeaderCustomFormat: str
    """str：指定与 FillHeaderFieldName 属性定义的字段一起使用的自定义表达式。例如，表达式 StrCopy(%s, 0, 1);显示标题中字段的第一个字符。该属性是可选的。"""
    FillHeaderExpressions: FormatExpressions
    """FormatExpressions：指定填充列表标题的表达式集合。该属性是可选的。"""
    FillHeaderFieldName: str
    """str：指定要在列表标题中显示的字段。如果 FillBreakFieldName 和 FillBreakCustomFormat 为空，则使用 FillHeaderFieldName 和 FillBreakCustomFormat 控件确定的值会中断。这是导致中断的唯一必需字段。"""
    ListItemStyle: str
    """用于指定列表控件中列表项的样式。"""
    OnActivated: Callable[[Object],None]
    """用于在数据源与列表控件之间建立绑定关系并激活时触发。"""
    OnActivating: Callable[[Object],None]
    """用于在数据源与列表控件之间建立绑定关系时触发。"""
    OnAssignedValue: Callable[[Object,BindingAssignValueRec,Value],None]
    """在将数据源字段的值分配给列表控件的属性时触发。"""
    OnAssigningValue: Callable[[Object,BindingAssignValueRec,Value,bool],None]
    """在将数据源字段的值分配给列表控件的属性之前触发。"""
    OnEvalError: Callable[[Object,Exception],None]
    """用于处理在计算绑定值时发生的错误。"""
    OnFilledList: Callable[[Object],None]
    """在填充列表控件时触发。"""
    OnFilledListItem: Callable[[Object,IBindListEditorItem],None]
    """在填充列表控件的每个列表项时触发。"""
    OnFillingList: Callable[[Object],None]
    """在填充列表控件之前触发。"""
    OnFillingListItem: Callable[[Object,IBindListEditorItem],None]
    """在填充列表控件的每个列表项之前触发。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkPropertyToField(CustomLinkPropertyToField):
    """将组件的属性链接到字段。

    TLinkPropertyToField 类使用已发布的属性扩展了 TCustomLinkPropertyToField。

    提示：不使用观察者监视对此组件的用户输入。"""
    __hash__: ClassVar[None] = ...
    AutoActivate: bool
    """用于指定在关联控件属性和数据字段时是否自动激活数据源。"""
    Component: Component
    """Component：指定此包装绑定组件引用的组件。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    ComponentProperty: str
    """str：指定此包装绑定组件引用的组件的属性名称。"""
    Components: Any
    """返回拥有组件的迭代器"""
    CustomFormat: str
    """str： 目前没有任何其他信息。"""
    DataSource: BaseLinkingBindSource
    """BaseLinkingBindSource：指定此委托组件链接到的 TDataSource 对象。

        使用DataSource来确定或设置连接到特定数据集的TDataSource对象。"""
    FieldName: str
    """str：指定此包装绑定组件引用的字段名称。"""
    LookupDataSource: BaseLinkingBindSource
    """用于指定要绑定的数据源。"""
    LookupKeyFieldName: str
    """用于指定用于查找数据源记录的字段名称。"""
    LookupValueFieldName: str
    """用于指定从数据源中获取值的字段名称。"""
    OnActivated: Callable[[Object],None]
    """用于在绑定激活时触发特定的操作或逻辑。"""
    OnActivating: Callable[[Object],None]
    """在激活绑定之前触发。"""
    OnAssignedValue: Callable[[Object,BindingAssignValueRec,Value],None]
    """用于在将数据源字段的值分配给控件属性时触发。"""
    OnAssigningValue: Callable[[Object,BindingAssignValueRec,Value,bool],None]
    """用于在将数据源字段的值分配给控件属性之前触发。"""
    OnEvalError: Callable[[Object,Exception],None]
    """用于处理在评估绑定值时发生的错误。"""
    Owner: Any
    """用于获取拥有该组件的组件或对象的引用。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class LinkPropertyToFieldDelegate(BindComponentDelegate):
    """是一个绑定组件，它包装另一个绑定组件并引用组件属性、数据源和字段名称。

    TLinkPropertyToFieldDelegate 类实现一个绑定组件，该组件包装另一个绑定组件并引用组件属性、数据源和字段名称。
    有关委托的更多信息，请参阅新 LiveBinding 主题的快速绑定组件参考部分。"""
    __hash__: ClassVar[None] = ...
    Component: Component
    """Component：指定此包装绑定组件引用的组件。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    ComponentProperty: str
    """str：指定此包装绑定组件引用的组件的属性名称。"""
    Components: Any
    """用于获取或设置与 LinkPropertyToFieldDelegate 实例关联的组件列表。"""
    DataSource: BaseLinkingBindSource
    """BaseLinkingBindSource：指定此委托组件链接到的 TDataSource 对象。

        使用DataSource来确定或设置连接到特定数据集的TDataSource对象。"""
    FieldName: str
    """str：指定此包装绑定组件引用的字段名称。"""
    Owner: Any
    """返回组件所有者"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents(prefix)

        如果方法使用以下模式命名，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例：def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ListBox(CustomMultiSelectListControl):
    """TListBox 在可滚动列表中显示项目集合。

    使用 TListBox 显示用户可以选择、添加或删除的可滚动项目列表。 TListBox 是 Windows 列表框控件的包装。对于专用列表框，请使用 TCustomListBox 的其他后代类或从 TCustomListBox 派生您自己的类。
    TListBox 实现了 TCustomListBox 中引入的通用行为。 TListBox 发布了许多从 TCustomListBox 继承的属性，但没有引入任何新行为。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoComplete: bool
    """用于指定ListBox控件是否启用自动完成功能。"""
    AutoCompleteDelay: int
    """用于指定启用自动完成功能后，用户输入字符后的延迟时间。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜面样式。

        使用 BevelKind 修改斜面的外观。BevelKind 影响斜面的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜面切口相结合，可以创建各种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """用于设置ListBox控件的边框样式。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Columns: int
    """用于指定TStringGrid控件中的列数。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于访问容器控件（如 Panel、Form 等）中包含的子控件列表。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接呈现到窗口还是先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件会直接将自身绘制到窗口。 当 DoubleBuffered 为 true 时，窗口控件会将自身绘制到内存中的位图，然后使用该位图绘制窗口。 双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（如 TRichEdit）无法将自身绘制到位图中。 对于此类控件，必须将 DoubleBuffered 设置为 false。"""
    DragCursor: int
    """int：指定拖动控件时用于表示鼠标指针的图像。

        使用 DragCursor 属性可更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    ExtendedSelect: bool
    """用于指定 ListBox 控件是否允许多选。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用备用控件，其 Font 属性将更改标题或文本的颜色（如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定使用哪个 IME 来转换击键。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量获取当前安装的 IME 列表。
        如果 ImeName 指定不可用的 IME，则将使用应用程序启动时处于活动状态的 IME。不会产生异常。

        注意：ImeName 的值仅在控件获得焦点时才生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    IntegralHeight: bool
    """用于指定ListBox控件是否自动调整其高度以适应完整的项目高度。"""
    ItemHeight: int
    """于设置或获取ListBox控件中每个项的高度。"""
    ItemIndex: Any
    """用于获取或设置当前选定项的索引。"""
    Items: Strings
    """用于存储和管理ListBox控件中的项（items）。"""
    MultiSelect: bool
    """用于指定ListBox控件是否允许多选。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnData: Callable[[WinControl,int,str],None]
    """用于在需要时动态加载ListBox中的数据。"""
    OnDataFind: Callable[[WinControl,str],int]
    """用于在ListBox控件中查找数据时触发。"""
    OnDataObject: Callable[[WinControl,int,Object],None]
    """用于在需要时提供与列表框中的项相关联的数据对象。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnDrawItem: Callable[[WinControl,int,Rect,OwnerDrawState],None]
    """用于自定义绘制ListBox控件中每个项的外观。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMeasureItem: Callable[[WinControl,int,int],None]
    """用于在绘制列表框中的每个项之前测量每个项的大小。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父控件的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        将表单中所有控件的 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东地区。
        当控件的 BiDiMode 属性值发生变化时，ParentBiDiMode 会自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ScrollWidth: int
    """用于获取或设置ListBox控件的水平滚动条的宽度。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    Sorted: bool
    """用于指定ListBox控件中的项是否按字母顺序进行排序。"""
    Style: ListBoxStyle
    """用于指定 ListBox 控件的外观风格。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，则可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，用于指定当前样式的哪些元素将应用于此控件。默认情况下，样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    TabWidth: int
    """用于获取或设置ListBox控件中每个选项的制表符宽度。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ListItems(Persistent):
    """用于存储和管理TListView控件中每一项的数据及显示属性。"""
    def Create(self, AOwner: Component) -> None:
        """用于创建一个TListItems对象实例。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """用于销毁TListItems对象实例及其关联的列表项资源。"""
    def Add -> Any:
        """用于向列表项集合中添加一个新的列表项（TListItem）。"""
    def AddItem(self, *args, **kwargs) -> Any:
        """用于向列表项集合中添加一个指定的列表项（TListItem）。"""
    def Assign(self, *args, **kwargs) -> Any:
        """用于将一个列表项集合的内容复制到另一个列表项集合中。"""
    def BeginUpdate(self, *args, **kwargs) -> Any:
        """用于开始更新列表项集合，防止在更新过程中控件重绘。"""
    def Clear(self, *args, **kwargs) -> Any:
        """用于清除列表项集合中的所有列表项。"""
    def Delete(self, *args, **kwargs) -> Any:
        """用于删除列表项集合中指定索引的列表项。"""
    def EndUpdate(self, *args, **kwargs) -> Any:
        """用于结束更新列表项集合，允许控件重新绘制。"""
    def GetEnumerator -> Any:
        """用于获取一个枚举器，用于遍历列表项集合。"""
    def IndexOf(self, *args, **kwargs) -> int:
        """用于查找指定列表项在集合中的索引位置。"""
    def Insert(self, *args, **kwargs) -> Any:
        """用于在列表项集合的指定索引位置插入一个新的列表项。"""
    Count: int
    """用于获取列表项集合中的列表项数量。"""
    Handle: Any
    """用于获取与列表项集合关联的Windows列表视图控件的句柄。"""
    Item: Any
    """用于根据索引访问列表项集合中的特定列表项（TListItem）。"""
    Owner: Any
    """用于获取拥有该列表项集合的TListView控件实例。"""

class ListItem(Persistent):
    """TListItem 的包装"""
    __hash__: ClassVar[None] = ...
    Caption: str
    """用于获取或设置列表视图控件（如 ListView）中列表项的文本内容。"""
    Checked: bool
    """用于表示该项目是否被勾选。"""
    ClassName: Any
    """返回 TObject.ClassName"""
    Cut: bool
    """用于是否将项目剪切到剪贴板。"""
    Data: Pointer
    """用于存储与列表项相关联的自定义数据。"""
    Deleting: bool
    """用于指示该 ListItem 是否正在被删除。"""
    DropTarget: bool
    """用于指示该 ListItem 是否为拖放目标。"""
    Focused: bool
    """用于指示该 ListItem 是否处于焦点状态。"""
    GroupID: int
    """用于获取或设置与列表项相关联的组的 ID。"""
    Handle: int
    """用于获取与列表项关联的 Windows 句柄（Handle）。"""
    ImageIndex: int
    """于获取或设置与列表项关联的图像在图像列表中的索引。"""
    Indent: int
    """用于获取或设置列表项的缩进级别。"""
    Index: int
    """用于获取或设置列表项在 ListView 控件中的索引位置。"""
    Left: int
    """用于获取或设置列表项相对于其父控件（通常是 ListView 控件）的左边缘的位置。"""
    ListView: CustomListView
    """自定义列表视图："""
    OverlayIndex: int
    """用于获取或设置与列表项关联的叠加图像的索引。"""
    Owner: ListItems
    """用于获取拥有当前 TListItem 对象的 TListItems 对象。"""
    Position: Point
    """用于获取或设置列表项在 ListView 控件中的位置。"""
    Selected: bool
    """用于获取或设置列表项是否被选中。"""
    StateIndex: int
    """用于获取或设置与列表项关联的状态图标的索引。"""
    SubItemImages: int
    """用于获取或设置与列表项关联的子项图像的索引。"""
    SubItems: Strings
    """v用于存储列表项的子项（SubItems）文本内容。"""
    Top: int
    """用于获取或设置列表项在 ListView 控件中的顶部位置。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Assign(self, persistent) -> Any:
        """TPersistent.Assign（持久）

        将另一个 TPersistent 对象的值分配给该对象"""
    def CancelEdit(self, *args, **kwargs) -> Any: ...
        """取消对列表项的编辑状态。"""
    def Create(self, AOwner: ListItems) -> None:
        """TListItem.Create(AOwner: ListItems) -> None

        在首次使用对象之前构造一个对象并初始化其数据。
        Create 构造一个对象。对象的用途、大小和行为有很大不同。 TObject 定义的 Create 构造函数分配内存但不初始化数据。
        后代对象通常定义一个构造函数，该构造函数创建特定类型的对象并初始化其数据。

        注意：如果构造函数中出现异常，则调用对象的析构函数来清理失败的实例。"""
    def Delete(self, *args, **kwargs) -> Any: ...
        """用于从 ListView 控件中删除该列表项。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TPersistent 实例并释放其内存。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证 TPersistent 引用是否不为空，然后才会调用 Destroy。"""
    def DisplayRect(self, Code: DisplayCode) -> Rect:
        """用于获取列表项在 ListView 控件中的矩形区域的位置和大小。"""
    def EditCaption(self, *args, **kwargs) -> Any: ...
        """用于在 ListView 控件中编辑列表项的标题文本。"""
    def GetNamePath(self) -> Any:
        """TPersistent.GetNamePath()

        返回对象在对象检查器中显示的名称。"""
    def GetPosition(self, *args, **kwargs) -> Any: ...
        """用于获取列表项在 ListView 控件中的位置。"""
    def MakeVisible(self, PartialOK: bool) -> None:
        """用于确保列表项在 ListView 控件中可见。"""
    def SetPosition(self, Value: Point) -> None:
        """用于设置列表项在 ListView 控件中的位置。"""
    def Update(self, *args, **kwargs) -> Any: ...
        """用于更新列表项在 ListView 控件中的显示。"""
    def WorkArea(self, *args, **kwargs) -> Any: ...
        """用于获取或设置与列表项相关联的工作区索引。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ListView(CustomListView):
    """TListView 的包装"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    AllocBy: int
    """用于设置或获取 ListView 控件的 Item 数组的增量大小。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜面和外斜面的宽度。

        使用 BevelWidth 指定内斜面和外斜面的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """边框样式："""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    Checkboxes: bool
    """用于指示是否在 ListView 控件中显示复选框。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    ColumnClick: bool
    """用于指示是否允许用户点击列标题来对 ListView 控件中的项目进行排序。"""
    Columns: ListColumns
    """用于访问 ListView 控件中的列集合。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于访问 ListView 控件中包含的所有子控件。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖停靠操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    FlatScrollBars: bool
    """用于指示是否使用扁平样式的滚动条来显示 ListView 控件中的滚动条。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    FullDrag: bool
    """用于指示是否启用完整的拖放操作。"""
    GridLines: bool
    """用于指示是否在 ListView 控件中显示网格线。"""
    GroupHeaderImages: CustomImageList
    """自定义图像列表："""
    GroupView: bool
    """用于指示是否启用 ListView 控件的分组视图功能。"""
    Groups: ListGroups
    """用于访问 ListView 控件中包含的所有组（groups）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HideSelection: bool
    """这个属性决定了当控件失去焦点时，其内部的文本选择（即高亮部分）是否应该被隐藏。"""
    HotTrack: bool
    """用于指示是否启用 ListView 控件的热跟踪效果。"""
    HotTrackStyles: ListHotTrackStyles
    """列出 HotTrack 样式："""
    HoverTime: int
    """用于设置鼠标悬停在 ListView 控件上时的延迟时间。"""
    IconOptions: IconOptions
    """用于设置和获取与 ListView 控件中图标相关的选项和属性。"""
    Items: ListItems
    """用于访问和管理 ListView 控件中的列表项（items）。"""
    LargeImages: CustomImageList
    """用于设置或获取 ListView 控件中显示大图标的图像列表（TImageList 对象）。"""
    MultiSelect: bool
    """用于指示是否允许用户在 ListView 控件中进行多选操作。"""
    OnAdvancedCustomDraw: Callable[[CustomListView,Rect,CustomDrawStage,bool],None]
    """用于在绘制 ListView 控件的各个部分时提供自定义的绘制方式。"""
    OnAdvancedCustomDrawItem: Callable[[CustomListView,ListItem,CustomDrawState,CustomDrawStage,bool],None]
    """用于在绘制 ListView 控件的每个项目（Item）时提供自定义的绘制方式。"""
    OnAdvancedCustomDrawSubItem: Callable[[CustomListView,ListItem,int,CustomDrawState,CustomDrawStage,bool],None]
    """用于在绘制 ListView 控件的每个子项目（SubItem）时提供自定义的绘制方式。"""
    OnChange: Callable[[Object,ListItem,ItemChange],None]
    """当用户选择 ListView 控件中的项目或者改变选择时触发。"""
    OnChanging: Callable[[Object,ListItem,ItemChange,bool],None]
    """用于在用户更改 ListView 控件的选择项时触发。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnColumnClick: Callable[[Object,ListColumn],None]
    """在用户单击 ListView 控件的列标题时触发。"""
    OnColumnDragged: Callable[[Object],None]
    """用于在用户拖动 ListView 控件的列标题时触发。"""
    OnColumnRightClick: Callable[[Object,ListColumn,Point],None]
    """用于在用户右键单击 ListView 控件的列标题时触发。"""
    OnCompare: Callable[[Object,ListItem,ListItem,int,int],None]
    """当 ListView 控件需要对项目进行排序时，会触发 OnCompare 事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnCreateItemClass: Callable[[CustomListView,ListItemClass],None]
    """用于在创建 ListView 控件的项目（Item）时触发。"""
    OnCustomDraw: Callable[[CustomListView,Rect,bool],None]
    """用于在绘制 ListView 控件的各个部分时提供自定义的绘制方式。"""
    OnCustomDrawItem: Callable[[CustomListView,ListItem,CustomDrawState,bool],None]
    """用于在绘制 ListView 控件的每个项目（Item）时提供自定义的绘制方式。"""
    OnCustomDrawSubItem: Callable[[CustomListView,ListItem,int,CustomDrawState,bool],None]
    """用于在绘制 ListView 控件的子项目（SubItem）时提供自定义的绘制方式。"""
    OnData: Callable[[Object,ListItem],None]
    """用于在需要显示项目数据时触发。"""
    OnDataFind: Callable[[Object,ItemFind,str,Point,Pointer,int,SearchDirection,bool,int],None]
    """用于在进行数据查找时触发。"""
    OnDataHint: Callable[[Object,int,int],None]
    """用于在需要显示数据提示（Hint）时触发。"""
    OnDataStateChange: Callable[[Object,int,int,ItemStates,ItemStates],None]
    """用于在数据状态发生变化时触发。"""
    OnDblClick: Callable[[Object],None]
    """当用户双击 ListView 控件中的某个项目时触发。"""
    OnDeletion: Callable[[Object,ListItem],None]
    """当用户删除 ListView 控件中的项目时触发。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnDrawItem: Callable[[CustomListView,ListItem,Rect,OwnerDrawState],None]
    """用于在绘制 ListView 控件的每个项目（Item）时提供自定义的绘制方式。"""
    OnEdited: Callable[[Object,ListItem,str],None]
    """当用户编辑 ListView 控件中的项目时触发。"""
    OnEditing: Callable[[Object,ListItem,bool],None]
    """当用户开始编辑 ListView 控件中的项目时触发。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnGetImageIndex: Callable[[Object,ListItem],None]
    """用于在需要为 ListView 控件中的项目指定图像索引时触发。"""
    OnGetSubItemImage: Callable[[Object,ListItem,int,int],None]
    """用于获取 ListView 控件中子图像的索引。"""
    OnInfoTip: Callable[[Object,ListItem,str],None]
    """用于在用户请求有关 ListView 控件中项目的信息提示时触发。"""
    OnInsert: Callable[[Object,ListItem],None]
    """在用户尝试向 ListView 中插入新项时触发。"""
    OnItemChecked: Callable[[Object,ListItem],None]
    """当用户勾选或取消勾选 ListView 控件中的项目时触发。"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当用户在 ListView 控件上移动鼠标时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnResize: Callable[[Object],None]
    """当用户调整 ListView 控件的大小时触发。"""
    OnSelectItem: Callable[[Object,ListItem,bool],None]
    """当用户选择 ListView 控件中的项目时触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """可调用[[Object，DragDockObject]，None]："""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OwnerData: bool
    """用于指示 ListView 控件是否以所有者数据（OwnerData）模式进行操作。"""
    OwnerDraw: bool
    """用于指示是否由应用程序自行绘制 ListView 控件的项目。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于获取或设置与 ListView 控件关联的窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """用于指示是否将 ListView 控件设置为只读模式。"""
    RowSelect: bool
    """用于指示是否允许用户在 ListView 控件中选择整行。"""
    ShowColumnHeaders: bool
    """用于指示是否显示 ListView 控件中的列标题。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    ShowWorkAreas: bool
    """用于指示是否在 ListView 控件中显示工作区域。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SmallImages: CustomImageList
    """自定义图像列表："""
    SortType: SortType
    """用于指定 ListView 控件中项目的排序方式。"""
    StateImages: CustomImageList
    """指定一个自定义的图像列表（TCustomImageList）来显示与每个项目状态相关联的图像。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    ViewStyle: ViewStyle
    """视图样式："""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class MainMenu(Menu):
    """TMainMenu 封装了表单的菜单栏及其随附的下拉菜单。

    使用 TMainMenu 提供窗体的主菜单。要开始设计菜单，请将主菜单添加到窗体中，然后双击该组件。
    TMainMenu 引入了将主菜单的下拉菜单与另一种形式的主菜单合并的属性和方法。
    TMainMenu 引入了用于协助 OLE 容器的菜单协商过程的属性和方法。

    提示：要创建用户可以在运行时配置的菜单，请使用带有操作管理器的 TActionMainMenuBar 组件。"""
    __hash__: ClassVar[None] = ...
    AutoHotkeys: MenuAutoFlag
    """MenuAutoFlag：确定菜单项的快捷键是否可以自动重置。

        设置 AutoHotkeys 以指示菜单是否应自动确保其项目的快捷键在必要时重置，以便每个菜单项都有一个快捷键，并且没有两个项目具有相同的快捷键。这确保了在运行时动态添加的菜单项可以具有不会引入冲突的快捷键。 TMenu 在调整快捷键时尝试保留所有现有的快捷键映射，但可能被迫更改一些以确保每个项目都有唯一的快捷键。
        在显示菜单之前，如果 AutoHotkeys 为 maAutomatic，菜单会检查并调整快捷键映射。当 AutoHotkeys 为 maManual 时，菜单不会更改顶级菜单项，但可能会调整子菜单的快捷键，具体取决于作为子菜单父级的菜单项的 AutoHotkeys 属性。
        当 AutoHotkeys 为 maManual 时，应用程序仍然可以通过调用 Items 属性的 RethinkHotkeys 方法来调整菜单项。 AutoHotkeys 仅控制此调整是否自动发生。

        注意：菜单的 AutoHotkeys 属性链接到实现其 Items 属性的 TMenuItems 对象的 AutoHotkeys 属性。设置一个会设置另一个。"""
    AutoLineReduction: MenuAutoFlag
    """MenuAutoFlag：确定是否自动从菜单中删除多余的分隔栏。

        设置 AutoLineReduction 以指示菜单是否应自动确保菜单不以分隔栏开始或结束，并且两个分隔栏不会彼此相邻出现。这确保了在运行时动态构建的菜单不会在不需要的位置具有分隔栏。
        在显示菜单之前，当 AutoLineReduction 为 maAutomatic 时，它会删除多余的分隔栏。当 AutoLineReduction 为 maManual 时，菜单不会从顶级菜单项中删除分隔符，但可能会从子菜单中删除多余的分隔符，具体取决于作为子菜单父级的菜单项的 AutoLineReduction 属性。
        当 AutoLineReduction 为 maManual 时，应用程序仍然可以通过调用 Items 属性的 RethinkLines 方法来删​​除多余的分隔符。 AutoLineReduction 仅确定此调整是否自动发生。

        注意：菜单的 AutoLineReduction 属性链接到实现其 Items 属性的 TMenuItems 对象的 AutoLineReduction 属性。设置一个会设置另一个。"""
    AutoMerge: bool
    """bool：确定非 MDI 应用程序中辅助窗体的主菜单在运行时是否与主窗体的主菜单合并。

        要将窗体的菜单与主窗体中的主菜单合并，请将要合并的每个主菜单的 AutoMerge 属性设置为 true。确保主窗体的主菜单（合并到的其他菜单）的 AutoMerge 属性保持为 false。菜单合并的方式取决于每个菜单项的 GroupIndex 属性的值。
        如果应用程序是 MDI 应用程序（设置了 FormStyle 属性，因此主窗体是父窗体，后续窗体是子窗体），则菜单合并将自动发生，而无需使用 AutoMerge 属性。"""
    BiDiMode: BiDiMode
    """BiDiMode：确定中东区域设置中的菜单布局。

        设置 BiDiMode 来控制菜单项的布局。 BiDiMode 控制菜单项是从左到右还是从右到左读取。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """用于访问 MainMenu 组件中包含的所有子组件。"""
    Images: CustomImageList
    """CustomImageList：列出可以显示在各个菜单项旁边的图像。

        使用图像来保存可以显示在菜单中的菜单项旁边的一组图像。各个菜单项设置其 ImageIndex 属性来指示列表中的哪个图像出现在菜单项标题的左侧。
        列表中的图像应为 16x16。

        提示：如果应用程序使用操作列表，则此属性应该是操作列表的 Images 属性的值。这样，执行相同操作的菜单项和按钮可以显示相同的图像。"""
    OnChange: Callable[[Object,MenuItem,bool],None]
    """用于创建应用程序的主菜单，而主菜单的选项被点击时会触发 OnClick 事件。"""
    Owner: Any
    """用于获取拥有该 MainMenu 组件的组件或窗体的引用。"""
    OwnerDraw: bool
    """bool：指定菜单项是否由应用程序绘制。

        将 OwnerDraw 设置为 true 以指示应用程序将在 OnDrawItem 事件处理程序中绘制菜单项。当 OwnerDraw 为 true 时，菜单项在需要在屏幕上呈现时会收到 OnMeasureItem 和 OnDrawItem 事件。
        将 OwnerDraw 设置为 false 以接受默认绘图。当 OwnerDraw 为 false 时，菜单项将在左侧显示标题和可选图像（如果设置了 Images 和 ImageIndex 属性）。
        自绘菜单对于显示选择菜单项时出现的值很有用。例如，在允许用户选择颜色的菜单中，所有者绘制菜单可以显示以指定颜色绘制的矩形，而不是颜色名称。"""
    ParentBiDiMode: bool
    """bool：指示 BiDiMode 属性是否继承自使用菜单的控件。

        默认情况下，ParentBiDiMode 为 true，表示菜单项的布局遵循关联窗体或控件的 BiDiMode 设置。将 ParentBiDiMode 更改为 false 以覆盖默认 BiDiMode 设置并独立控制菜单的布局。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetOle2AcceleratorTable(self, AccelTable: int, AccelCount: int, Groups: int) -> None:
        """TMainMenu.GetOle2AcceleratorTable(AccelTable: int, AccelCount: int, Groups: int) -> 无

        返回主菜单的加速表。
        调用 GetOle2AcceleratorTable 获取所有菜单项的加速表句柄，其 GroupIndex 值出现在 Groups 参数中。 AccelTable 参数设置为加速器表句柄，AccelCount 设置为表中的条目数。 GetOle2AcceleratorTable 由 OLE 容器在合并菜单时使用。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def Merge(self, Menu: MainMenu) -> None:
        """TMainMenu.Merge(菜单: MainMenu) -> 无

        在非 MDI 应用程序中将一种窗体的主菜单与另一种窗体的主菜单组合起来。
        调用 Merge 将另一个主菜单与此菜单合并。将要与此菜单合并的菜单指定为 Menu 参数。
        例如，要将应用程序中第一个窗体的主菜单用作应用程序的主菜单，请调用 Merge 将应用程序中任何其他窗体的主菜单与第一个窗体的主菜单合并。
        根据主菜单上菜单项的 GroupIndex 属性的值，合并的菜单项可以替换菜单栏上的菜单项，或者将菜单项插入到菜单栏中。有关如何执行这些操作的信息，请参阅 GroupIndex。
        要在显示其他窗体时自动合并和取消合并主菜单，请在应合并菜单的所有窗体上将 AutoMerge 属性的值更改为 true。"""
    def PopulateOle2Menu(self, SharedMenu: int, Groups: int, Widths: int) -> None:
        """TMainMenu.PopulateOle2Menu(SharedMenu: int, 组: int, 宽度: int) -> 无

        使用主菜单中的项目填充 OLE 菜单。
        调用 PopulateOle2Menu 将具有 Groups 参数指定的 GroupIndex 值的菜单项合并到使用 SharedMenu 句柄的菜单中。 PopulateOle2Menu 将指定组中的所有菜单项附加到菜单，并为附加的每个菜单项增加 Widths 数组中的相应条目。 PopulateOle2Menu 由 OLE 容器在合并菜单时使用。

        注意：PopulateOle2Menu 填充 SharedMenu 参数指定的菜单，但不会将其设置为与该菜单关联的 OLE 菜单。"""
    def SetOle2MenuHandle(self, Handle: int) -> None:
        """TMainMenu.SetOle2MenuHandle(Handle: int) -> 无

        将 OLE 菜单的句柄与主菜单相关联。
        调用 SetOle2MenuHandle 将窗体的菜单临时替换为 Handle 参数表示的菜单。要恢复原始菜单，请调用 SetOle2MenuHandle，并将 Handle 参数设置为 0。SetOle2MenuHandle 允许 OLE 容器使用 OLE 服务器提供的菜单项。"""
    def Unmerge(self, Menu: MainMenu) -> None:
        """TMainMenu.Unmerge(菜单: MainMenu) -> 无

        在非 MDI 应用程序中反转两个菜单的合并。
        调用 Unmerge 可从另一个主菜单中删除使用 Merge 方法添加的项目。 Menu 参数是合并菜单，其项目应从主菜单中删除。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class MediaPlayer(CustomControl):
    """TMediaPlayer 控制提供媒体控制接口（MCI）驱动程序的设备。

    TMediaPlayer 组件包括一组按钮（播放、停止、弹出等），用于控制多媒体设备，例如 CD-ROM 驱动器、MIDI 音序器或 VCR。多媒体设备可以是硬件或软件。
    媒体播放器组件包含多个按钮。这些按钮可以用鼠标单击，但不是单独的对象或按钮组件。

    按钮       值       动作
    Play    btPlay     播放媒体播放器
    Pause   btPause    暂停播放或录音。如果单击时已暂停，则恢复播放或录音。
    Next    btNext     跳到下一个曲目，如果媒体不使用曲目，则跳到末尾
    Prev    btPrev     跳至上一曲目，如果媒体不使用曲目，则跳至开头
    Step    btStep     向前移动几帧
    Back    btBack     向后移动几帧
    Record  btRecord   开始录音
    Eject   btEject    弹出介质

    当用户点击TMediaPlayer组件上的相应按钮时，多媒体设备就会进行播放、暂停、停止等操作。设备还可以通过与按钮对应的控制方法（播放、暂停、停止、下一个、上一个、单步、后退、开始录音和弹出）来控制。
    多媒体设备的类型（例如 dtWaveAudio 或 dtVideodisc）由 DeviceType 属性指定。如果设备将其媒体存储在文件中，则媒体文件的名称由 FileName 属性指定。如果 DeviceType 为 dtAutoSelect，则媒体播放器会尝试根据 FileName 指定的文件扩展名确定设备类型。
    要让媒体播放器在运行时创建媒体播放器组件时尝试自动打开由 DeviceType 指定的设备，请将 AutoOpen 属性设置为 true。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """Anchors：指定控件如何锚定到其父级。

        使用 Anchors 可确保控件保持其相对于其父级边缘的当前位置，即使父级的大小已调整。当其父级的大小已调整时，控件将保持其相对于其锚定到的边缘的位置。
        如果控件锚定到其父级的相对边缘，则控件会在其父级的大小调整时拉伸。例如，如果控件的 Anchors 属性设置为 [akLeft, akRight]，则控件会在其父级的宽度更改时拉伸。
        仅在调整父级大小时强制使用 Anchors。因此，例如，如果控件在设计时锚定到窗体的相对边缘，并且窗体是在最大化状态下创建的，则控件不会拉伸，因为窗体在创建控件后不会调整大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与 Anchors 不同，Alignment 允许控件根据其他对齐的同级控件的大小变化以及父级控件的大小变化进行调整。"""
    AutoEnable: bool
    """bool：确定媒体播放器是否自动启用和禁用组件中的各个按钮。

        使用 AutoEnable 自动启用或禁用媒体播放器上的控制按钮。如果 AutoEnable 为 true，媒体播放器会自动启用或禁用其控制按钮。媒体播放器根据 Mode 属性中指定的当前模式以及 DeviceType 属性中指定的当前多媒体设备类型来确定启用或禁用哪些按钮。
        AutoEnable 会覆盖 EnabledButtons 属性。由媒体播放器自动启用或禁用的按钮将取代使用 EnabledButtons 启用或禁用的任何按钮。
        如果 AutoEnable 为 false，则媒体播放器不会启用或禁用按钮。必须使用 EnabledButtons 属性启用或禁用按钮。"""
    AutoOpen: bool
    """bool：确定应用程序运行时是否自动打开媒体播放器。

        使用 AutoOpen 让媒体播放器在运行时自动打开。
        如果 AutoOpen 为 true，则在运行时创建包含媒体播放器组件的表单时，媒体播放器会尝试打开由 DeviceType 属性（如果 DeviceType 为 dtAutoSelect 则为 FileName）指定的多媒体设备。
        如果 AutoOpen 为 false，则必须通过调用 Open 方法来打开设备。
        如果打开设备时发生错误，则会引发包含错误消息的 EMCIDeviceError 异常类型的异常。完成后，数字错误代码将存储在 Error 属性中，相应的错误消息将存储在 ErrorMessage 属性中。
        Wait 属性确定在打开多媒体设备之前是否将控制权返回给应用程序。 Notify 属性确定打开设备是否生成 OnNotify 事件。"""
    AutoRewind: bool
    """bool：确定媒体播放器控件是否在播放或录制之前快退。

        如果 AutoRewind 为 true 并且当前位置位于媒体末尾，则 Play 或 StartRecording 会在播放或录制之前将当前位置移动到媒体开头。如果 AutoRewind 为 false，则用户必须单击 Prev 按钮或编写代码来调用 Previous 以移至开头。
        如果已为 StartPos 或 EndPos 指定了值，或者多媒体设备使用曲目，则 AutoRewind 对播放或录制没有影响。当调用 Play 或 StartRecording 时，当前位置保留在媒体末尾。"""
    Capabilities: MPDevCapsSet
    """MPDevCapsSet：确定打开的多媒体设备的功能。

        Capability 中指定的各种功能是在使用 Open 方法打开设备时确定的。

        注意：目前无法检查设备是否可以前进或后退。仅当设备类型（在 DeviceType 属性中指定）为动画、AVI 视频、数字视频、覆盖或 VCR 时，功能才包括 mpCanStep。"""
    ColoredButtons: ButtonSet
    """ButtonSet：确定媒体播放器控件上的哪些按钮具有颜色。

        ColoredButtons 控制媒体播放器上的哪些按钮是彩色的。
        如果按钮未使用 ColoredButtons 着色，则它在可见时会显示为黑白。默认情况下，所有媒体播放器控制按钮都是彩色的。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DeviceID: int
    """int：指定当前打开的多媒体设备的设备ID。

        DeviceID 的值是在使用 Open 方法打开设备时确定的。如果没有设备打开，则DeviceID为0。"""
    DeviceType: MPDeviceTypes
    """MPDeviceTypes：指定用媒体播放器打开的多媒体设备类型。

        DeviceType 指定要使用 Open 方法打开的多媒体设备类型。默认为 dtAutoSelect。
        如果 DeviceType 为 dtAutoSelect，则设备类型由 FileName 属性中指定的文件扩展名确定。如果没有与扩展关联的设备类型，则必须通过将 DeviceType 设置为 dtAutoSelect 以外的值来显式指定正确的设备类型。
        当安装多媒体设备时，该设备通常与适当的文件扩展名相关联。关联在注册表或 SYSTEM.INI 文件中指定。有关如何将文件扩展名与设备关联的说明，请参阅特定设备的文档。"""
    Display: WinControl
    """WinControl：指定使用窗口进行输出的多媒体设备的显示窗口。

        要使用“显示”，请将窗口控件（例如窗体或面板）的名称指定给“显示”以显示该控件中的输出。
        Display 的默认值为空，这意味着设备创建自己的窗口来显示输出。此外，通过在打开设备后释放分配给“显示”的控件，视频输出将位于其自己的默认窗口中。
        使用窗口显示输出的多媒体设备的示例有动画、AVI 视频、数字视频、叠加和 VCR。"""
    DisplayRect: Rect
    """矩形：指定控件中由 Display 属性指定的矩形区域，用于显示多媒体设备的输出。

        要在窗体上的特定矩形区域中显示输出，请将 TRect 记录分配给 DisplayRect。 Rect 函数可用于创建 TRect 记录。
        如果使用默认的 DisplayRect 大小，使用矩形显示输出的媒体通常性能最佳。要将 DisplayRect 设置为默认大小，请将矩形定位在左上角，并使用 0, 0 定位右下角。
        如果 Display 为空，则忽略 DisplayRect。
        使用窗口显示输出的多媒体设备的示例有动画、AVI 视频、数字视频、叠加和 VCR。

        注意：只有打开媒体设备后才能设置 DisplayRect。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    EnabledButtons: ButtonSet
    """ButtonSet：确定媒体播放器上的哪些按钮可用。

        EnabledButtons 控制媒体播放器上的哪些按钮已启用且可用。
        启用的按钮是彩色的并且可用。禁用的按钮会变暗并且不可用。如果某个按钮未使用 EnabledButtons 启用，则该按钮将被禁用。默认情况下，所有按钮均已启用。
        如果 AutoEnable 属性为 true，则 AutoEnable 会取代 EnabledButton。由媒体播放器自动启用或禁用的按钮会覆盖使用 EnabledButtons 属性启用或禁用的任何按钮。"""
    EndPos: int
    """int：指定当前加载媒体中停止播放或录制的位置。

        EndPos 使用当前时间格式指定，该格式在 TimeFormat 属性中指定。
        EndPos 属性仅影响设置 EndPos 后调用的下一个 Play 或 StartRecording 方法。重置 EndPos 以影响对 Play 或 StartRecording 的任何后续调用。"""
    Error: int
    """int：指定媒体控制方法返回的MCI错误代码。

        Error 指定最近的媒体控制方法返回的 MCI 错误代码（后退、关闭、弹出、下一个、打开、暂停、仅暂停、播放、上一个、开始录制、恢复、快退、单步或停止）。 ErrorMessage 属性描述错误。
        媒体控制方法返回的错误代码与 mciSendCommand 函数返回的错误代码相同。描述错误代码的消息存储在 ErrorMessage 属性中。
        如果最近的媒体控制方法没有导致错误，则 Error 值为零。如果方法导致错误，则 Error 中将存储非零值。如果在打开设备期间发生错误，则会出现 EMCIDeviceError 异常。"""
    ErrorMessage: str
    """str：描述存储在 Error 属性中的错误代码。

        ErrorMessage 指定描述从最近的媒体控制方法（Back、Close、Eject、Next、Open、Pause、PauseOnly、Play、Previous、StartRecording、Resume、Rewind、Step 或 Stop）返回的错误代码的错误消息。
        消息描述的错误代码存储在 Error 属性中。"""
    FileName: str
    """str：指定打开或保存的媒体文件。

        FileName 指定要通过 Open 方法打开的媒体文件，或要通过 Save 方法保存的文件。
        在设计时，通过单击对象检查器中的省略号按钮 (...)，使用文件打开对话框指定 FileName 属性。"""
    Frames: int
    """int：指定向前或向后移动的帧数。

        Frames 指定 Step 方法前进或 Back 方法后退的帧数。帧默认为当前加载媒体长度的百分之十，由 Length 属性指定。
        帧的定义因多媒体设备而异。对于显示媒体来说，一帧是一幅静止图像。"""
    Length: int
    """int：指定打开的多媒体设备中媒体的长度。

        长度是使用当前时间格式指定的，该格式由 TimeFormat 属性指定。"""
    Mode: MPModes
    """MPModes：指示当前打开的多媒体设备的状态。

        模式指定当前打开的多媒体设备的当前状态或模式。
        TMPModes 类型定义与 TMediaPlayer 一起使用的多媒体设备的模式。"""
    Notify: bool
    """bool：判断是否产生OnNotify事件。

        Notify 确定对媒体控制方法的下一次调用（后退、关闭、弹出、下一步、打开、暂停、PauseOnly、播放、上一个、开始录制、恢复、倒带、单步或停止）在该方法完成时是否生成 OnNotify 事件。
        如果 Notify 为 true，则下一个媒体控制方法完成后会生成 OnNotify 事件，并将通知消息存储在 NotifyValue 属性中。如果 Notify 为 false，则该方法不会生成 OnNotify 事件，并且 NotifyValue 保持不变。
        通知仅影响对媒体控制方法的下一次调用。 OnNotify 事件发生后，必须重置 Notify 以影响任何后续媒体控制方法。
        默认情况下，Play 和 StartRecording 的功能就像 Notify 为 true 一样。在调用 Play 或 StartRecording 之前将 Notify 设置为 false，以防止播放或录音完成时生成 OnNotify 事件。默认情况下，所有其他媒体控制方法的功能就如同 Notify 为 false 一样。

        提示：如果预计下一个媒体控制需要很长时间，请将 Notify 设置为 true，以便在媒体控制方法完成时通知应用程序。如果 Notify 设置为 true，建议将 Wait 设置为 false，以便在媒体控制方法完成之前控制权返回到应用程序。
        注意：当尝试恢复不支持 Resume 的设备时，该设备将像调用 Play 方法一样恢复。如果在调用 Resume（或任何其他媒体控制方法）之前将 Notify 指定为 true，则 Notify 不会影响对 Resume 的调用。 Resume完成后不会生成OnNotify事件，NotifyValue保持不变。"""
    NotifyValue: MPNotifyValues
    """MPNotifyValues：指示最后请求通知的媒体控制方法的结果。

        NotifyValue 报告请求通知的最后一个媒体控制方法（后退、关闭、弹出、下一个、打开、暂停、仅暂停、播放、上一个、开始录制、恢复、快退、单步或停止）的结果。
        要请求通知，请在调用媒体控制方法之前将 Notify 设置为 true。"""
    OnClick: Callable[[Object,MPBtnType,bool],None]
    """可调用[[对象，MPBtnType，布尔]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnEnter: Callable[[Object],None]
    """当 MediaPlayer 控件获得焦点并成为活动控件时触发。"""
    OnExit: Callable[[Object],None]
    """当用户将焦点移动到 MediaPlayer 控件时触发。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnNotify: Callable[[Object],None]
    """用于在媒体播放器控件发出通知时触发相应的操作。"""
    OnPostClick: Callable[[Object,MPBtnType],None]
    """用于在用户单击媒体播放器控件之后触发相应的操作或事件处理程序。"""
    Parent: Any
    """用于获取或设置 MediaPlayer 控件的父容器控件。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 分配一个值，以便在用户选择控件并单击鼠标右键时显示​​弹出菜单。如果 TPopupMenu 的 AutoPopup 属性为 True，则弹出菜单会自动显示。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    Position: int
    """int：指定当前加载的媒体中的当前位置。

        Position 的值根据当前时间格式指定，该格式在 TimeFormat 属性中指定。
        Position 默认为媒体的开头。如果媒体支持多个轨道，则 Position 默认为第一个轨道的开头。"""
    Shareable: bool
    """bool：确定多个应用程序是否可以共享多媒体设备。

        如果 Shareable 为 false，则其他组件或应用程序都无法访问该设备。如果 Shareable 为 true，则多个组件或应用程序可以访问该设备。可共享默认为 false。
        打开设备之前请务必设置可共享。
        有些设备不可共享。如果对于不可共享的设备将 Shareable 设置为 true，则 Open 方法将失败，并且错误代码将返回到 Error 属性。"""
    ShowHint: bool
    """bool：ShowHint 指定当鼠标指针移到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示会出现在控件正下方的框中。
        要为特定控件启用帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True，并且其父级的 ShowHint 属性必须为 True。
        例如，想象一个组框内的复选框。如果组框的 ShowHint 属性为 True，复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍会显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Start: int
    """int：指定当前加载介质中的起始位置。

        对于不使用轨道的设备，Start 是介质的开头；对于使用轨道的设备，Start 是第一个轨道的开头。当使用 Open 方法打开多媒体设备时定义开始。 Start 是根据当前时间格式指定的，该格式存储在 TimeFormat 属性中。 Start 在运行时是只读的，在设计时不可用。"""
    StartPos: int
    """int：指定当前加载媒体中开始播放或录制的位置。

        StartPos 使用当前时间格式指定，该格式在 TimeFormat 属性中指定。
        StartPos 属性仅影响设置 StartPos 后调用的下一个 Play 或 StartRecording 方法。 Reset 必须设置为 StartPos，才能影响对 Play 或 StartRecording 的任何后续调用。
        StartPos 不会影响媒体的当前位置（在 Position 属性中指定），直到调用下一个 Play 或 StartRecording 方法。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    TimeFormat: MPTimeFormats
    """MPTimeFormats：确定用于指定位置信息的格式。

        TimeFormat 确定如何解释 StartPos、Length、Position、Start 和 EndPos 属性。例如，如果 Position 为 180 并且 TimeFormat 为 tfMilliseconds，则当前位置为介质中的 180 毫秒。如果 Position 为 180 并且 TimeFormat 为 tfMSF，则当前位置为介质中的 180 分钟。
        并非所有设备都支持所有格式。当尝试设置不支持的格式时，分配将被忽略。
        当前计时信息始终以 4 字节整数形式传递。在某些格式中，返回的计时信息实际上并不是一个整数，而是包装在长整数中的单字节信息。"""
    TrackLength: int
    """用于获取当前正在播放的音频轨道的长度（时长）以毫秒为单位。"""
    TrackPosition: int
    """用于获取或设置当前媒体文件的播放位置。"""
    Tracks: int
    """int：指定打开的多媒体设备上可播放的曲目数。

        曲目指示打开的多媒体设备上有多少可播放的曲目。
        对于不使用轨道的设备，轨道未定义。"""
    Visible: bool
    """bool：指定组件是否显示在屏幕上。

        使用 Visible 属性控制运行时控件的可见性。如果 Visible 为 True，则控件显示。如果 Visible 为 False，则控件不可见。
        调用 Show 方法将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子代，Show 和 ShowModal 方法将 Visible 设置为 True，并将表单置于所有打开窗口的前面。
        对于 TTabSheet 子代，Visible 不控制运行时控件的可见性。有关更多信息，请参阅 TabVisible 属性的描述。"""
    VisibleButtons: ButtonSet
    """ButtonSet：指示媒体播放器上的哪些按钮可见。

        VisibleButtons 确定媒体播放器上的哪些按钮可见。如果使用 VisibleButtons 未使按钮可见，则它不会出现在媒体播放器控件上。默认情况下，当媒体播放器组件添加到表单时，所有按钮都是可见的。"""
    Wait: bool
    """bool：确定媒体控制方法是否仅在完成后才将控制权返回给应用程序。

        Wait 确定媒体控制方法（Back、Close、Eject、Next、Open、Pause、PauseOnly、Play、Previous、StartRecording、Resume、Rewind、Step 或 Stop）是否仅在完成后才将控制权返回给应用程序。
        等待在设计时不可用。
        如果 Wait 为 true，则媒体播放器组件将等到下一个媒体控制方法完成后再将控制权返回给应用程序。如果 Wait 为 false，应用程序将不会等待下一个媒体控制方法完成后再继续。
        Wait 仅影响设置 Wait 后调用的下一个媒体控制方法。必须重置等待才能影响对媒体控制方法的任何后续调用。
        默认情况下，Play 和 StartRecording 的功能就像 Wait 为 false 一样。在调用 Play 或 StartRecording 之前必须将 Wait 设置为 true，以防止在播放或录制完成之前控制权返回到应用程序。默认情况下，所有其他媒体控制方法的功能就如同 Wait 为 true 一样。

        注意：仅当预计下一个媒体控制需要很长时间时，Wait 通常设置为 false，以便应用程序可以在媒体控制方法完成之前执行其他代码。如果 Wait 设置为 false，则应将 Notify 设置为 true，以便在媒体控制方法完成时通知应用程序。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Back(self, *args, **kwargs) -> Any:
        """在当前加载的媒体中后退一定数量的帧（由 Frames 属性的值确定）。

        当运行时单击媒体播放器控件上的“后退”按钮时，将调用“后退”。
        完成后，Back 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Back 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Back 是否生成 OnNotify 事件。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Close(self, *args, **kwargs) -> Any:
        """关闭打开的多媒体设备。

        完成后，Close 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Close 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Close 是否生成 OnNotify 事件。
        当应用程序终止时，会自动调用 Close。"""
    def Create(self, AOwner: Component) -> None:
        """TMediaPlayer.Create(AOwner: 组件) -> 无

        创建一个媒体播放器对象。
        调用 Create 在运行时实例化媒体播放器。对于在设计时创建的媒体播放器，会自动调用 Create。
        Create 为媒体播放器分配内存并调用继承的 Create。然后，它加载媒体播放器按钮的位图并初始化其属性，将 AutoEnable、AutoRewind、Colored、Enabled 和 Visible 设置为 true，将 AutoOpen 设置为 false，将 DeviceType 设置为 dtAutoSelect。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁媒体播放器的实例。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证 TMediaPlayer 引用是否不为空，然后才会调用 Destroy。
        Destroy 首先验证没有设备打开，然后销毁用于媒体播放器按钮的位图并调用继承的 Destroy。"""
    def Eject(self, *args, **kwargs) -> Any:
        """从打开的多媒体设备中释放加载的媒体。

        当运行时单击媒体播放器控件上的“弹出”按钮时，将调用“弹出”。它将从打开的多媒体设备中弹出加载的媒体。
        完成后，Eject 在 Error 属性中存储数字错误代码，并在 ErrorMessage 属性中存储相应的错误消息。
        Wait 属性确定在 Eject 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Eject 是否生成 OnNotify 事件。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏一个控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Next(self, *args, **kwargs) -> Any:
        """移至当前加载媒体的下一曲目的开头。

        如果调用 Next 时当前位置位于最后一个曲目，Next 会将当前位置设为最后一个曲目的开头。如果多媒体设备不使用轨道，则“下一步”将转到媒体末尾。当运行时单击媒体播放器控件上的“下一步”按钮时，将调用“下一步”。
        完成后，Next 将在 Error 属性中存储数字错误代码，并在 ErrorMessage 属性中存储相应的错误消息。
        Wait 属性确定在 Next 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Next 是否生成 OnNotify 事件。"""
    def Open(self, *args, **kwargs) -> Any:
        """打开多媒体设备。

        使用 Open 打开多媒体设备。在打开设备之前，必须在 DeviceType 属性中指定多媒体设备类型。
        完成后，Open 会在 Error 属性中存储数字错误代码，并在 ErrorMessage 属性中存储相应的错误消息。
        Wait 属性确定在 Open 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Open 是否生成 OnNotify 事件。"""
    def Pause(self, *args, **kwargs) -> Any:
        """打开或关闭打开的多媒体设备。

        如果调用 Pause 时设备已经暂停，则设备通过调用 Resume 方法恢复播放或录音。当运行时单击媒体播放器控件上的“暂停”按钮时，将调用“暂停”。
        完成后，Pause 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Pause 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Pause 是否生成 OnNotify 事件。"""
    def PauseOnly(self, *args, **kwargs) -> Any:
        """暂停打开的多媒体设备。

        如果在调用 PauseOnly 时设备已暂停，则设备将保持暂停状态。
        完成后，PauseOnly 会在 Error 属性中存储数字错误代码，并在 ErrorMessage 属性中存储相应的错误消息。
        Wait 属性确定在 PauseOnly 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 PauseOnly 是否生成 OnNotify 事件。"""
    def Play(self, *args, **kwargs) -> Any:
        """播放打开的多媒体设备中加载的媒体。

        当在运行时单击媒体播放器控件上的“播放”按钮时，将调用“播放”。
        完成后，Play 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Play 方法完成之前是否将控制权返回给应用程序。 Notify 属性决定 Play 是否生成 OnNotify 事件。
        如果设置了 StartPos 属性，则从 StartPos 中指定的位置开始播放。否则，播放将从 Position 属性中指定的当前位置开始。同样，如果设置了 EndPos 属性，则播放会在 EndPos 中指定的位置停止。否则，播放将在媒体结束时停止。
        媒体（在 Position 属性中指定）是否在播放开始前倒带取决于 AutoRewind 属性。"""
    def Previous(self, *args, **kwargs) -> Any:
        """如果调用 Previous 时位置位于轨道的开头，则将当前位置设置为上一轨道的开头。

        如果调用 Previous 时位置位于第一个轨道或轨道开头以外的位置，则 Previous 将当前位置设置为当前轨道的开头。如果设备不使用轨道，则 Previous 将当前位置设置为媒体的开头（在 Start 属性中指定）。当运行时单击媒体播放器控件上的“上一个”按钮时，将调用“上一个”。
        完成后，Previous 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Previous 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Previous 是否生成 OnNotify 事件。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def Resume(self, *args, **kwargs) -> Any:
        """恢复播放或录制当前暂停的多媒体设备。

        当设备暂停时，在运行时单击媒体播放器控件上的“暂停”按钮时，将调用“恢复”。
        完成后，Resume 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Resume 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Resume 是否生成 OnNotify 事件。"""
    def Rewind(self, *args, **kwargs) -> Any:
        """将当前位置设置为媒体的开头，该位置存储在 Start 属性中。

        完成后，Rewind 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Rewind 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Rewind 是否生成 OnNotify 事件。"""
    def Save(self, *args, **kwargs) -> Any:
        """将当前加载的介质保存到 FileName 属性中指定的文件中。

        对于不使用文件中存储的媒体（例如视频光盘）的设备，保存将被忽略。
        完成后，Save 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Save 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Save 是否生成 OnNotify 事件。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def StartRecording(self, *args, **kwargs) -> Any:
        """从当前位置或 StartPos 中指定的位置开始记录。

        当运行时单击媒体播放器控件上的“录制”按钮时，将调用 StartRecording。
        完成后，StartRecording 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 StartRecording 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 StartRecording 是否生成 OnNotify 事件。
        默认情况下，StartRecording 方法完成后，Notify 属性变为 true，Wait 属性变为 false。但是，如果这些属性在调用 StartRecording 之前已设置为特定值，则它们将保持不变。"""
    def Step(self, *args, **kwargs) -> Any:
        """在当前加载的媒体中向前移动多个帧（由 Frames 属性确定）。

        当运行时单击媒体播放器控件上的 Step 按钮时，将调用 Step。
        完成后，Step 将数字错误代码存储在 Error 属性中，并将相应的错误消息存储在 ErrorMessage 属性中。
        Wait 属性确定在 Step 方法完成之前是否将控制权返回给应用程序。 Notify 属性决定Step 是否生成OnNotify 事件。"""
    def Stop(self, *args, **kwargs) -> Any:
        """停止播放或录音。

        当运行时单击媒体播放器控件上的“停止”按钮时，将调用“停止”。
        完成后，Stop 在 Error 属性中存储数字错误代码，并在 ErrorMessage 属性中存储相应的错误消息。
        Wait 属性确定在 Stop 方法完成之前是否将控制权返回给应用程序。 Notify 属性确定 Stop 是否生成 OnNotify 事件。"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Memo(CustomMemo):
    """TMemo 是 Windows 多行编辑控件的包装器。

    使用 TMemo 在窗体上放置标准 Windows 多行编辑控件。多行编辑框允许用户输入多行文本。它们适合表示冗长的信息。
    TMemo 实现了 TCustomMemo 中引入的通用行为。 TMemo 发布了许多从 TCustomMemo 继承的属性，但没有引入任何新行为。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """对齐方式：确定文本在文本编辑控件内的对齐方式。

        使用对齐方式更改文本在文本编辑控件中的格式设置方式。对齐方式可以采用以下值之一：

        左对齐   将文本与控件的左侧对齐
        居中   文本在控件中水平居中。
        右对齐   将文本与控件的右侧对齐。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """BorderStyle：确定编辑控件在工作区周围是否有单线边框。

        使用 BorderStyle 可以影响编辑控件的工作区突出的清晰度。 BorderStyle 的值可以是 bsSingle 或 bsNone。如果 BorderStyle 为 bsSingle，则编辑控件在工作区周围有单线边框。如果 BorderStyle 为 bsNone，则不会有边框。"""
    CanUndoSelText: bool
    """bool：当设置为 True 时，它​​允许您调用或调用 Undo 操作，以撤消之前使用 SetSelText 或 SetSelTextBuf 所做的更改。默认情况下它设置为 false。"""
    CharCase: EditCharCase
    """EditCharCase：确定编辑控件中文本的大小写。

        使用 CharCase 强制编辑控件的内容采用特定的大小写。
        当 CharCase 设置为 ecLowerCase 或 ecUpperCase 时，字符的大小写会在用户将字符键入编辑控件时进行转换。将 CharCase 属性更改为 ecLowerCase 或 ecUpperCase 会更改文本的实际内容，而不仅仅是外观。任何案例信息都会丢失，并且无法通过将 CharCase 更改为 ecNormal 来重新捕获。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    EditMargins: EditMargins
    """用于设置或获取编辑框（Edit）的边距。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """用于表示 TMemo 控件的底层窗口句柄。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HideSelection: bool
    """bool：确定当焦点转移到另一个控件时是否保留所选文本的视觉指示。

        将 HideSelection 设置为 false 可以提供文本选定部分的视觉反馈，即使编辑控件没有焦点也是如此。将 HideSelection 设置为 true 可以仅在编辑控件具有焦点时显示所选内容。 HideSelection 不会影响选择的实际值，只会影响视觉指示。始终将 HideSelection 设置为 false 可能会使具有许多编辑控件的表单看起来过于繁忙。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定使用哪个 IME 来转换击键。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量获取当前安装的 IME 列表。
        如果 ImeName 指定不可用的 IME，则将使用应用程序启动时处于活动状态的 IME。不会产生异常。

        注意：ImeName 的值仅在控件获得焦点时才生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    Lines: Strings
    """字符串：包含备忘录控件中的各个文本行。

        使用“行”在备忘录控件中逐行操作文本。 Lines 是一个 TStrings 对象，因此 TStrings 方法可用于 Lines 执行操作，例如计算文本行数、添加新行、删除行或用新文本替换行。例如：

        MyMemo.Lines.Add(...);

        要同时处理所有文本，请使用 Text 属性。要操作单行文本，Lines 属性效果更好。

        注意：虽然 Lines 是作为 TStrings 后代实现的，但它没有实现将对象与列表中的字符串关联的支持。"""
    MaxLength: int
    """int：指定用户可以输入到编辑控件中的最大字符数。

        使用 MaxLength 限制可以输入到编辑控件中的字符数。值 0 表示没有应用程序定义的长度限制。
        如果编辑控件中的文本将被复制到固定长度的缓冲区中，则可以使用 MaxLength 来限制该文本的长度。

        注意：设置 MaxLength 不会截断现有文本，它只是阻止用户在达到 MaxLength 字符限制后添加更多文本。
        注意：即使 MaxLength 为 0，操作系统也可能对可输入编辑控件的字符数施加限制。
        注意：如果应用程序使用主题，则 MaxLength 的单位是字符（而不是字节）。"""
    OEMConvert: bool
    """bool：确定在编辑控件中键入的字符是否从 ANSI 转换为 OEM，然后再转换回 ANSI。

        要确保在编辑控件中键入的任何字符都可以明确地转换为 OEM 字符集，请将 OEMConvert 设置为 true。这会导致所有字符在键入时从 ANSI 转换为 OEM，然后再转换回 ANSI。当文本是否可以明确映射到 OEM 字符串并不重要时，将 OEMConvert 设置为 false 以避免此转换的开销。
        当应用程序不使用 Unicode 文件名时，OEMConvert 对于用于输入文件名的编辑控件最有用。"""
    OnChange: Callable[[Object],None]
    """用于在用户修改 TMemo 控件中的文本内容时触发。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """用于响应鼠标在 Memo 控件上移动的操作。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指示是否使用父容器的字体样式来显示 TMemo 控件中的文本内容。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于获取或设置与控件关联的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """bool：确定用户是否可以更改编辑控件的文本。

        要将编辑控件限制为仅显示，请将 ReadOnly 属性设置为 true。将 ReadOnly 设置为 false 以允许编辑编辑控件的内容。
        将 ReadOnly 设置为 true 可确保文本不被更改，同时仍允许用户选择文本。然后应用程序可以操作所选文本，或将其复制到剪贴板。"""
    ScrollBars: ScrollStyle
    """ScrollStyle：确定备忘录控件是否有滚动条。

        使用 ScrollBars 提供多行编辑控件水平或垂直滚动​​条。 ScrollBars 可以采用以下值之一：

        ssNone  该控件没有滚动条。
        ssHorizontal  该控件的底部边缘有一个滚动条。
        ssVertical  该控件的右边缘有一个滚动条。
        ssBoth  该控件的底部和右侧边缘都有一个滚动条。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """bool：确定用户是否可以按 Tab 键移动到控件。

        使用 TabStop 允许或禁止使用 Tab 键访问控件。
        如果 TabStop 为 True，则控件处于 Tab 键顺序中。 如果 TabStop 为 False，则控件不在 Tab 键顺序中，用户无法按 TAB 键移动到控件。

        注意：除非表单指定另一个表单作为其父表单，否则 TabStop 对表单没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WantReturns: bool
    """bool：确定用户是否可以在文本中插入回车符。

        将 WantReturns 设置为 true 以允许用户在文本中输入回车字符。将 WantReturns 设置为 false 以允许表单处理返回字符。
        例如，在具有默认按钮（例如“确定”按钮）和备注控件的窗体中，如果 WantReturns 为 false，则按 Enter 键将选择默认按钮。如果 WantReturns 为 true，则按 Enter 键会在文本中插入回车字符。

        注意：如果 WantReturns 为 false，用户仍然可以通过按 Ctrl+Enter 在文本中输入回车字符。"""
    WantTabs: bool
    """bool：确定用户是否可以在文本中插入制表符。

        将 WantTabs 设置为 true 以允许用户在文本中输入制表符。如果您希望制表符选择表单上的下一个控件，请将 WantTabs 设置为 false。

        注意：如果 WantTabs 为 true，则用户可以按 Tab 键进入编辑控件，但不能按 Tab 键退出。"""
    WordWrap: bool
    """bool：确定编辑控件是否插入软回车以便文本在右边距处换行。

        将 WordWrap 设置为 true 可使编辑控件在右边距处换行文本，使其适合工作区。包装仅具有装饰目的。该文本不包含任何未明确输入的返回字符。将 WordWrap 设置为 false 可使编辑控件仅在文本中显式输入返回字符的情况下显示单独的行。

        注意：大多数情况下，当 WordWrap 为 true 时，水平滚动条是不必要的。然而，也有例外的情况出现；当线不能被切成碎片时，就不能发生缠绕。在这些情况下，仍然需要滚动条。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class MemoryStream(CustomMemoryStream):
    """TMemoryStream 是一个将数据存储在动态内存中的流。

    使用 TMemoryStream 将数据存储在动态内存缓冲区中，该缓冲区通过类似文件的访问功能得到增强。 TMemoryStream 提供流对象的通用 I/O 功能，同时引入方法和属性来管理动态内存缓冲区。
    内存流作为中间对象非常有用，它可以保存信息以及从另一个存储介质读取信息或将其写入到另一个存储介质。它们提供了一种有用的格式来比较流的内容，或操作存储在不易访问的介质中的数据。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """返回 TObject.ClassName"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Clear(self, *args, **kwargs) -> Any:
        """释放内存缓冲区，丢弃与内存流关联的所有数据。

        使用 Clear 清空内存流的内存缓冲区并释放所有关联的内存。除了释放与内存缓冲区关联的内存之外，清除：

        将 Memory 属性设置为空。
        将位置属性设置为 0。
        将“大小”属性设置为 0。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TMemoryStream 的实例。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证 TMemoryStream 引用是否不为空，然后才会调用 Destroy。
        当不再需要存储或写入数据时销毁 TMemoryStream 对象。 Destroy 在调用继承的析构函数之前调用 Clear 来释放内存缓冲区。"""
    def Free(self) -> Any:
        """TObject.Free()

        用于释放 MemoryStream 对象所占用的内存资源，并销毁该对象。"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def LoadFromFile(self, FileName: str) -> None:
        """TMemoryStream.LoadFromFile(FileName: str) -> 无

        将文件的全部内容加载到内存缓冲区中。
        使用 LoadFromFile 用文件的内容填充内存流。将文件名作为 FileName 参数传递。 LoadFromFile 允许应用程序将文件的内容读入内存流，而无需显式创建和释放文件流对象。
        LoadFromFile 重新分配内存缓冲区，以便文件的内容完全适合。它相应地设置 Size 属性，然后将文件的全部内容读入内存缓冲区。因此，LoadFromFile 将丢弃存储在内存流中的任何预先存在的数据。"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TMemoryStream.LoadFromStream(Stream: Stream) -> 无

        将流的全部内容加载到内存缓冲区中。
        使用 LoadFromStream 用 Stream 参数指定的流的内容填充内存流。在按源流的 Size 属性指示的字节数进行流式传输之前，LoadFromStream 始终将源流的 Position 设置为 0。
        LoadFromStream 重新分配内存缓冲区，以便源流的内容完全适合。它相应地设置 Size 属性，然后将源流的全部内容读入内存缓冲区。因此，LoadFromStream 将丢弃存储在内存流中的任何预先存在的数据。
        如果源流是 TFileStream 对象，则 LoadFromStream 执行与 LoadFromFile 相同的操作，只是应用程序必须创建并释放 TFileStream 对象。 LoadFromStream 还允许应用程序从其他类型的流对象填充内存流对象。"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def SetSize(self, NewSize: int) -> None:
        """TMemoryStream.SetSize(NewSize: int) -> None

        设置内存流的 Size 属性。
        使用 SetSize 在用数据填充内存流之前设置其 Size。SetSize 分配内存缓冲区以保存 NewSize 字节，尽可能多地保留现有数据。
        使用来自各种来源或另一个流的一部分的数据填充内存缓冲区之前使用 SetSize。如果内存流的预期内容与另一个流或文件的内容完全相同，请改用 LoadFromStream 或 LoadFromFile。\r
        设置内存流的 Size 属性。
        使用 SetSize 在用数据填充内存流之前设置其 Size。SetSize 分配内存缓冲区以保存 NewSize 字节，尽可能多地保留现有数据。
        使用来自各种来源或另一个流的一部分的数据填充内存缓冲区之前使用 SetSize。如果内存流的预期内容与另一个流或文件的内容完全相同，请改用 LoadFromStream 或 LoadFromFile。"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def Write(self, Buffer, Count: int) -> int:
        """TMemoryStream.Write(Buffer, Count: int) -> int

        将 Buffer 中的 Count 个字节写入内存缓冲区中的当前位置，并按 Count 个字节更新当前位置。
        使用 Write 将 Count 个字节插入到内存流的内存缓冲区中，从当前位置开始。如果需要，Write 将增加内存缓冲区的大小，以容纳正在写入的数据。如果当前位置不是内存缓冲区的末尾，Write 将覆盖当前位置后面的数据。
        Write 将 Size 属性更新为 Position + Count，并将 Position 属性设置为 Size 的新值。因此，调用 Write 时，当前位置之后 Count 个字节中存储在内存流中的任何数据都会丢失。
        Write 总是将 Count 个字节写入缓冲区，除非出现内存故障。因此，对于TMemoryStream来说，Write相当于WriteBuffer方法。
        内存流的所有其他数据写入方法（WriteBuffer、WriteComponent）均调用 Write 来进行实际写入。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。

        __dir__ 方法返回一个包含字符串的列表，这些字符串表示对象的属性名。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Menu(Component):
    """TMenu 是 TMainMenu 和 TPopupMenu 等菜单组件的基本类型。

    定义表示菜单项集合的组件时，使用 TMenu 作为基类。 TMenu 引入了属性和方法来创建代表一组菜单项的 Windows 菜单、调度与这些菜单项关联的命令以及查找任何这些菜单项的帮助上下文 ID。"""
    __hash__: ClassVar[None] = ...
    AutoHotkeys: MenuAutoFlag
    """MenuAutoFlag：确定菜单项的快捷键是否可以自动重置。

        设置 AutoHotkeys 以指示菜单是否应自动确保其项目的快捷键在必要时重置，以便每个菜单项都有一个快捷键，并且没有两个项目具有相同的快捷键。这确保了在运行时动态添加的菜单项可以具有不会引入冲突的快捷键。 TMenu 在调整快捷键时尝试保留所有现有的快捷键映射，但可能被迫更改一些以确保每个项目都有唯一的快捷键。
        在显示菜单之前，如果 AutoHotkeys 为 maAutomatic，菜单会检查并调整快捷键映射。当 AutoHotkeys 为 maManual 时，菜单不会更改顶级菜单项，但可能会调整子菜单的快捷键，具体取决于作为子菜单父级的菜单项的 AutoHotkeys 属性。
        当 AutoHotkeys 为 maManual 时，应用程序仍然可以通过调用 Items 属性的 RethinkHotkeys 方法来调整菜单项。 AutoHotkeys 仅控制此调整是否自动发生。

        注意：菜单的 AutoHotkeys 属性链接到实现其 Items 属性的 TMenuItems 对象的 AutoHotkeys 属性。设置一个会设置另一个。"""
    AutoLineReduction: MenuAutoFlag
    """MenuAutoFlag：确定是否自动从菜单中删除多余的分隔栏。

        设置 AutoLineReduction 以指示菜单是否应自动确保菜单不以分隔栏开始或结束，并且两个分隔栏不会彼此相邻出现。这确保了在运行时动态构建的菜单不会在不需要的位置具有分隔栏。
        在显示菜单之前，当 AutoLineReduction 为 maAutomatic 时，它会删除多余的分隔栏。当 AutoLineReduction 为 maManual 时，菜单不会从顶级菜单项中删除分隔符，但可能会从子菜单中删除多余的分隔符，具体取决于作为子菜单父级的菜单项的 AutoLineReduction 属性。
        当 AutoLineReduction 为 maManual 时，应用程序仍然可以通过调用 Items 属性的 RethinkLines 方法来删​​除多余的分隔符。 AutoLineReduction 仅确定此调整是否自动发生。

        注意：菜单的 AutoLineReduction 属性链接到实现其 Items 属性的 TMenuItems 对象的 AutoLineReduction 属性。设置一个会设置另一个。"""
    BiDiMode: BiDiMode
    """用于设置或获取菜单的双向模式（BiDiMode）。

        设置 BiDiMode 来控制菜单项的布局。 BiDiMode 控制菜单项是从左到右还是从右到左读取。"""
    ComponentCount: Any
    """用于获取该 Menu 组件中包含的子组件的数量。"""
    Components: Any
    """用于访问 Menu 组件中包含的所有子组件。"""
    Handle: int
    """int：提供对菜单的 Windows 菜单句柄的访问。

        使用 Handle 调用需要菜单句柄的 Windows API 函数。 Handle 是仅包含 Items 属性描述的项目的菜单的句柄。"""
    Images: CustomImageList
    """CustomImageList：列出可以显示在各个菜单项旁边的图像。

        使用图像来保存可以显示在菜单中的菜单项旁边的一组图像。各个菜单项设置其 ImageIndex 属性来指示列表中的哪个图像出现在菜单项标题的左侧。
        列表中的图像应为 16x16。

        提示：如果应用程序使用操作列表，则此属性应该是操作列表的 Images 属性的值。这样，执行相同操作的菜单项和按钮可以显示相同的图像。"""
    Items: MenuItem
    """MenuItem：描述菜单的元素。

        使用 Items 访问有关菜单中元素的信息。 Items 是一个单独的 TMenuItem 对象，它在自己的 Items 属性中描述菜单的元素。

        注意：由于 Items 是 TMenuItem 的默认属性，因此 TMenu 的 Items 属性可以视为描述菜单中各个项目的菜单项索引数组。也就是说，而不是写
        注意：FirstItem = self.Menu1.Items.Items[0]
        注意：您可以使用
        注意：FirstItem = self.Menu1.Items[0]
        在设计时通过单击属性检查器中的 Items 属性来设置 Items 属性。菜单设计器自动插入菜单项。输入每个菜单项时，轮廓区域会出现在其他菜单项的可能位置。单击这些区域可指定其他菜单项。在运行时，创建一个以编程方式描述菜单元素的 TMenuItem，并设置菜单的 Items 属性。"""
    Owner: Any
    """用于指定该 MenuItem 对象所属的父组件。"""
    OwnerDraw: bool
    """bool：指定菜单项是否由应用程序绘制。

        将 OwnerDraw 设置为 true 以指示应用程序将在 OnDrawItem 事件处理程序中绘制菜单项。当 OwnerDraw 为 true 时，菜单项在需要在屏幕上呈现时会收到 OnMeasureItem 和 OnDrawItem 事件。
        将 OwnerDraw 设置为 false 以接受默认绘图。当 OwnerDraw 为 false 时，菜单项将在左侧显示标题和可选图像（如果设置了 Images 和 ImageIndex 属性）。
        自绘菜单对于显示选择菜单项时出现的值很有用。例如，在允许用户选择颜色的菜单中，所有者绘制菜单可以显示以指定颜色绘制的矩形，而不是颜色名称。"""
    ParentBiDiMode: bool
    """bool：指示 BiDiMode 属性是否继承自使用菜单的控件。

        默认情况下，ParentBiDiMode 为 true，表示菜单项的布局遵循关联窗体或控件的 BiDiMode 设置。将 ParentBiDiMode 更改为 false 以覆盖默认 BiDiMode 设置并独立控制菜单的布局。"""
    WindowHandle: int
    """int：提供对使用菜单的窗口句柄的访问。

        读取 WindowHandle 以获取当用户单击菜单中的项目时接收 WM_COMMAND 消息的控件的窗口句柄。选择菜单项后，在 OnClick 事件处理程序中使用此句柄将消息发送到使用该菜单的控件或进行影响该控件的 Windows API 调用。
        设置 WindowHandle 将菜单与控件关联起来。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents(prefix)

        如果方法使用以下模式命名，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例：def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TMenu.Create(AOwner: 组件) -> 无

        创建 TMenu 的实例。
        调用 Create 在运行时创建菜单。设计时放置在表单上的菜单是自动创建的。 Create 调用继承的 Create 方法，然后设置菜单组件的初始值，包括创建 Items 属性。
        AOwner 参数指示负责管理与菜单关联的内存的组件（通常是表单）。"""
    def CreateMenuItem(self, *args, **kwargs) -> Any:
        """ 目前没有任何其他信息。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁菜单组件。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证 TMenu 引用是否不为空，然后才会调用 Destroy。 Destroy 释放 Items 属性，然后调用继承的 Destroy 方法。"""
    def DispatchCommand(self, ACommand: int) -> bool:
        """TMenu.DispatchCommand(ACommand: int) -> bool

        使用指定值作为其 Command 属性来调用菜单项的 Click 方法。
        调用 DispatchCommand 来模拟与命令 ID 关联的菜单项的单击。如果 DispatchCommand 找到与命令 ID 匹配的菜单项，它将调用该菜单项的 Click 方法并返回 true。如果没有这样的项目，DispatchCommand 返回 false。"""
    def DispatchPopup(self, AHandle: int) -> bool:
        """TMenu.DispatchPopup(AHandle: int) -> bool

        调度弹出菜单命令。
        调用 DispatchPopup 模拟与弹出菜单句柄关联的菜单项的单击。如果 DispatchPopup 找到与弹出菜单句柄匹配的菜单项，它将调用该菜单项的 Click 方法并返回 true。如果没有这样的项目，DispatchPopup 返回 false。"""
    def FindItem(self, Value: int, Kind: FindItemKind) -> MenuItem:
        """TMenu.FindItem(值：int，种类：FindItemKind) -> MenuItem

        查找并返回菜单项。
        调用 FindItem 来定位菜单或其子菜单之一中的菜单项。菜单项由弹出菜单句柄、命令 ID 或菜单快捷方式值来标识。 Kind 参数指定如何识别菜单项。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TMenu.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        执行子菜单项的回调。
        GetChildren 由流系统自动调用，以便子菜单项与其父菜单一起保存和读取。"""
    def GetHelpContext(self, Value: int, ByCommand: bool) -> int:
        """TMenu.GetHelpContext(Value: int, ByCommand: bool) -> int

        返回与菜单项关联的帮助上下文 ID。
        调用 GetHelpContext 获取特定菜单项的上下文相关帮助的 ID。将菜单项标识为与 Value 属性匹配的项目。如果 ByCommand 为 true，则 Value 是 TMenuItem 的 Command 属性。如果 ByCommand 为 false，则 Value 为 Handle 属性。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def IsRightToLeft(self, *args, **kwargs) -> Any:
        """指示菜单项是否从右向左阅读。

        调用 IsRightToLeft 确定主菜单项的布局。如果应用程序在具有中东语言环境的系统上运行并且 BiDiMode 属性不是 bdLeftToRight，则 IsRightToLeft 返回 true。"""
    def IsShortCut(self, Message: WMKey) -> bool:
        """TMenu.IsShortCut(消息: WMKey) -> bool

        如果按键消息代表菜单中某个项目的快捷键，则调度该按键消息。
        在处理 KeyDown 消息时调用 IsShortCut 来识别快捷键并触发相应的菜单操作。 IsShortCut 对 Message 参数中传递的关键消息进行解码。然后，它使用键入的字符值对 Shift、Control 和 Alt 键的状态进行编码，以获得菜单项的 ShortCut 属性。如果 IsShortCut 找到与快捷键组合关联的菜单项，它将调用该项目的 Click 方法并返回 true。如果菜单中没有项目具有与该消息对应的快捷方式，则 IsShortCut 返回 false。"""
    def ParentBiDiModeChanged(self, *args, **kwargs) -> Any:
        """确保菜单的布局遵循 BiDiMode 和 ParentBiDiMode 属性的当前设置。

        当必须更新菜单的 BiDiMode 属性以反映其关联控件的双向模式时，将调用 ParentBiDiMode Changed。\r
        确保菜单的布局遵循 BiDiMode 和 ParentBiDiMode 属性的当前设置。
        当菜单的 BiDiMode 属性必须更新以反映其关联控件的双向模式时，将调用 ParentBiDiMode Changed。"""
    def ProcessMenuChar(self, Message: WMMenuChar) -> None:
        """TMenu.ProcessMenuChar(消息: WMMenuChar) -> 无

        响应菜单的键盘输入。
        ProcessMenuChar 处理来自 Windows 的键盘消息。它检查输入的字符是否是菜单项之一的加速符。如果是，则 ProcessMenuChar 执行该菜单项（或者，如果该菜单项被禁用，则选择它）。如果该键不是快捷键，则 ProcessMenuChar 会检查以该字符开头的标题。如果只有一个，则将其视为加速器。否则，将选择以该字符开头的第一个项目。
        以编程方式调用 ProcessMenuChar 时，必须提供 Message 参数的 User、MenuFlag 和 Menu 字段。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class MenuItem(Component):
    """TMenuItem 描述菜单中项目的属性。

    使用 TMenuItem 指定菜单中项目的外观和行为。每个 TMainMenu 或 TPopupMenu 组件可以包含多个菜单项。在设计时定义菜单时，菜单设计器会自动为菜单上的每个命令创建菜单项对象。
    Caption 属性可用于定义 TMainMenu 菜单项的快捷键。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与菜单项关联的操作。

        Action 指定与菜单项关联的操作对象。可以在设计时使用操作列表编辑器将操作与菜单项关联起来。操作是集中用户对命令响应的一种方式。"""
    AutoCheck: bool
    """bool：指示单击菜单项时是否自动切换菜单项的选中状态。

        当 AutoCheck 为 true 时，每次单击菜单项时，Checked 属性的值都会在 OnClick 事件发生之前自动切换。当 AutoCheck 为 false 时，应用程序必须显式设置 Checked 属性的值（例如，在 OnClick 事件处理程序中）。"""
    AutoHotkeys: MenuItemAutoFlag
    """MenuItemAutoFlag：确定子菜单项的快捷键是否可以自动重置。

        设置 AutoHotkeys 以指示是否可以在必要时重置 Items 属性中的项目的快捷键，以确保每个菜单项都有一个快捷键并且没有两个项目具有相同的快捷键。这确保了在运行时动态添加的菜单项可以具有不会引入冲突的快捷键。 TMenuItem 在调整快捷键时尝试保留所有现有的快捷键映射，但可能被迫更改一些映射以确保每个项目都有唯一的快捷键。
        在显示菜单之前，如果 AutoHotkeys 为 maAutomatic，或者如果 AutoHotkeys 为 maParent 并且父菜单项调整快捷键映射，则它会检查并调整快捷键映射。否则，菜单不会更改 Items 属性中列出的项目，但可能会调整子菜单的快捷键，具体取决于作为子菜单父级的菜单项的 AutoHotkeys 属性。

        注意：当 AutoHotkeys 不允许自动调整快捷键时，应用程序仍然可以通过调用 RethinkHotkeys 方法来调整菜单项。 AutoHotkeys 仅控制此调整是否自动发生。"""
    AutoLineReduction: MenuItemAutoFlag
    """MenuItemAutoFlag：确定是否自动从子菜单中删除多余的分隔栏。

        设置 AutoLineReduction 以指示菜单项是否应自动确保其 Items 属性定义的子菜单不以分隔栏开头或结尾，并且两个分隔栏不会彼此相邻出现。这可以确保在运行时动态构建的菜单不会在不需要的位置具有分隔栏。
        在显示菜单之前，如果 AutoLineReduction 为 maAutomatic 或 AutoLineReduction 为 maParent 并且父菜单项会删除多余的分隔栏，则菜单项会删除多余的分隔栏。否则，菜单项不会从 Items 属性中删除分隔符，但可能会从子菜单中删除多余的分隔符，具体取决于作为子菜单父级的菜单项的 AutoLineReduction 属性。

        注意：当 AutoLineReduction 不允许自动删除分隔符时，应用程序仍然可以通过调用 RethinkLines 方法删除多余的分隔符。 AutoLineReduction 仅控制此调整是否自动发生。"""
    Bitmap: Bitmap
    """位图：指定为菜单项绘制的位图。

        使用位图提供显示在菜单项中标题旁边的自定义图像。在所有者绘制菜单上，可以在 OnDrawItem 事件处理程序中使用位图来表示整个菜单项或菜单项的一部分。

        注意：如果设置了 ImageIndex 属性并且父菜单具有非空Images 属性，则使用 ImageIndex 标识的图像而不是 Bitmap。"""
    Break: MenuBreak
    """MenuBreak：确定菜单项是否在菜单中开始一个新列。

        设置“拆分”可将长菜单分成此菜单项描述的项目处的列。 Break 的值指示菜单是否分成列，如果是，则父菜单的列之间是否出现一个栏。
        默认值为 mbNone（不分列）。"""
    Caption: str
    """str：指定菜单项的文本。

        将标题设置为用户在菜单中看到的该项目的字符串。要为字符串中的某个字符添加下划线，请在该字符前添加与号 (&)。这种类型的字符称为加速器字符。如果标题包含加速符，用户可以通过在键入下划线字符时按 Alt 键来选择菜单项。

        提示：要自动分配或调整菜单项标题中的快捷键字符，请使用 RethinkHotkeys 方法。
        使用 Caption 属性将菜单项标识为将菜单分为多个部分的线。指定连字符 (-) 作为菜单项的 Caption 值，以指示该菜单项是分隔符。要将菜单分成多列，请改用 Break 属性。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    Checked: bool
    """bool：指定标题旁边是否应出现复选标记。

        使用 Checked 允许菜单项像复选框一样工作。如果 Checked 为 true，则菜单项显示为已选中。如果 Checked 为 false，则菜单项保持未选中状态。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    Command: int
    """int：指定与菜单项关联的 Windows 命令 ID。

        在直接处理 WM_COMMAND 消息的应用程序中使用 Command。当用户选择菜单项时，Windows 向与该菜单关联的窗口发送 WM_COMMAND。消息的 ItemID 包含所选菜单项的 Command 属性的值。"""
    ComponentCount: Any
    """返回拥有的组件数量"""
    Components: Any
    """常用于访问菜单项（TMenuItem）相关联的组件集合。"""
    Count: int
    """int：表示菜单项的子项数。

        读取 Count 以确定 Items 属性数组中列出的子项目数。当用户单击包含子项的菜单项时，会出现一个下拉菜单，其中显示这些子项。每个子项又可以包含其他子项。 Count 属性仅计算菜单项的直接子项。"""
    Default: bool
    """bool：指定双击父项时是否调用该菜单项。

        设置默认值以指定菜单项是否为子菜单中的默认项。双击父项时会执行默认菜单项，从而允许用户避免导航包含它们的子菜单。
        默认项目以粗体显示。一个子菜单只能有一个默认项。如果父菜单项的 Items 列表已包含默认菜单项，则将 Default 属性设置为 true 会将前一个默认项的 Default 属性设置为 false。"""
    Enabled: bool
    """bool：指定菜单项是否启用。

        使用 Enabled 启用或禁用菜单项。如果 Enabled 为 true，则当用户用鼠标选择该项目时，将调用 Click 方法。如果 Enabled 为 false，菜单项将显示为灰色，用户无法选择它。但是，即使 Enabled 为 false，调用 Click 方法也能正常工作。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    GroupIndex: int
    """int：标识菜单项所属的逻辑组。

        使用 GroupIndex 控制菜单的合并方式。在包含多个表单的应用程序中，当辅助表单的菜单项变为活动状态时，可以将这些表单合并到应用程序的主菜单中。 MDI 应用程序总是将子窗口的菜单与父窗口的主菜单合并。
        默认情况下，菜单栏（主菜单）中的所有菜单项都具有相同的 GroupIndex 值。要使用 GroupIndex 合并菜单，请将每个连续菜单项的 GroupIndex 值设置为等于或大于前一个菜单项的值。
        当合并到应用程序主菜单中的菜单栏中的菜单项与主菜单中的菜单项具有相同的 GroupIndex 值时，应用程序主菜单中的菜单项将被相应的菜单项替换。如果应用程序主菜单中的多个菜单项具有相同的 GroupIndex 值，则它们只能由其他窗体菜单中也具有重复 GroupIndex 值的单独菜单项替换。因此，具有给定值的第一个主菜单项被第二表单中具有该值的第一个项目替换，主表单中的第二个项目被第二表单中的第二个项目替换，依此类推。
        当合并到应用程序主菜单的菜单栏中的菜单项的 GroupIndex 位于应用程序主菜单上两个相邻项的 GroupIndex 值之间时，该菜单项将插入到两个相邻项之间。如果该项目的 GroupIndex 值大于应用程序主菜单中的所有其他 GroupIndex 值，则该项目将显示在主菜单的末尾。如果 GroupIndex 值小于应用程序主菜单中的所有其他 GroupIndex 值，则菜单项将出现在主菜单栏的开头。
        当 OLE 2.0 服务器应用程序创建的对象被激活时，服务器可以尝试将其菜单与容器应用程序的菜单合并。 GroupIndex 属性用于以上述方式用服务器中的项目替换最多三个主菜单项。
        注意：有关 OLE 服务器在就地激活期间是否尝试合并菜单的信息，请参阅 OLE 服务器的文档。
        GroupIndex 还可用于定义类似于单选按钮的菜单项组。要允许菜单项的行为类似于单选按钮，请将组中所有菜单项的 RadioItem 属性设置为 true，并为每个菜单项分配相同的 GroupIndex 值。选中该组中的任何菜单项将取消选中其他菜单项。"""
    Handle: int
    """int：表示与菜单项关联的下拉菜单的Windows菜单句柄。

        调用需要菜单句柄的 Windows API 函数时，请使用 Handle。仅当 Count 属性大于 0 时，句柄才有效。"""
    HelpContext: int
    """int：指定与菜单项关联的帮助上下文 ID。

        使用 HelpContext 将菜单项与应用程序的帮助系统中的屏幕关联起来。帮助系统中的每个屏幕都应该有一个唯一的上下文 ID。使用键盘选择菜单项时，按 F1 将显示帮助屏幕。显示哪个帮助屏幕取决于 HelpContext 属性的值。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    Hint: str
    """str：指定当用户将鼠标指针移到菜单项上时可以出现的文本字符串。

        将 Hint 设置为一个字符串，该字符串提供比标题更多的有关菜单项含义的信息。如果启用了帮助提示（即，如果表单和应用程序的 ShowHint 属性为 True），则当用户将鼠标悬停在菜单项上时，提示文本将显示在状态栏中。它也可用于应用程序的 OnHint 事件处理程序中的代码。
        Hint 的值可以指定帮助提示窗口的短值和 OnHint 事件处理程序使用的较长字符串。要同时提供短提示和长提示，请将 Hint 设置为短字符串，后跟竖线 (|)，最后是长字符串。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    ImageIndex: int
    """int：指示父菜单维护的哪个图像出现在菜单项旁边。

        设置 ImageIndex 以指定绘制菜单项时应显示在标题旁边的图像。在顶级菜单项上，ImageIndex 指定父菜单（TMenu 或 TPopupMenu）的 Images 属性的零偏移索引。在子菜单项上，ImageIndex 是父项的 SubMenuImages 属性的零偏移索引。
        如果父菜单或项不维护图像列表，请使用 Bitmap 属性为单个菜单项提供图像。但是，由 ImageIndex 指定的任何图像都优先于 Bitmap 属性。仅当 ImageIndex 为负值或父级的 Images 或 SubMenuImages 属性为空时，才使用位图。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    ImageName: str
    """str：显示图像集合中链接项目的名称。"""
    Items: MenuItem
    """TMenuItem 组件的子菜单项集合。"""
    MenuIndex: int
    """int：表示菜单项在其父菜单中的索引。

        使用 MenuInde​​x 在其父菜单项的 Items 属性中定位菜单项。更改此值会在其菜单中移动菜单项。

        注意：MenuInde​​x 可能与用户看到的菜单中的项目位置不对应。菜单可以包含不可见的项目。"""
    OnAdvancedDrawItem: Callable[[Object,Canvas,Rect,OwnerDrawState],None]
    """用于自定义菜单项的绘制方式。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnDrawItem: Callable[[Object,Canvas,Rect,bool],None]
    """当菜单项需要绘制时，触发OnDrawItem事件。"""
    OnMeasureItem: Callable[[Object,Canvas,int,int],None]
    """用于在菜单项（MenuItem）绘制之前测量菜单项的大小。"""
    Owner: Any
    """用于获取菜单项所属的父级菜单组件或控件。"""
    Parent: MenuItem
    """MenuItem：标识该菜单项的父菜单项。

        读取 Parent 以确定代表包含此菜单项的下拉菜单的菜单项。如果菜单项是主菜单或弹出菜单中的顶级菜单项，则 Parent 是该菜单的 Items 属性的值。"""
    RadioItem: bool
    """bool：指定菜单项是否与其组中的其他菜单项互斥。

        使用 RadioItem 使菜单项的行为类似于带有一组其他菜单项的单选按钮。菜单项组是弹出或下拉菜单中具有相同 GroupIndex 值的所有菜单项的集合。当 RadioItem 为 true 时，一次只能检查包含该菜单项的组中的一个菜单项。组中单个选定的菜单项由标题旁边的圆点指示。

        注意：当用户在运行时单击 RadioItem 时，RadioItem 不会自动选择该项目：您仍必须显式将 Checked 属性设置为 true 以响应 OnClick 事件。 RadioItem 只是更改 Checked 状态的外观（从复选标记到圆点），并在将 Checked 属性设置为 true 时自动取消选中同一组中的其他菜单项。
        RadioItem 不适用于主菜单中的顶级项目。

        注意：在Windows NT 3.51 下，仅当安装了“新外壳”时才会出现圆点指示器。"""
    ShortCut: int
    """int：打开菜单项的快捷方式。

        此快捷方式的字符串表示形式出现在菜单中菜单项的右侧。

        注意：如果快捷方式由操作提供，则不会将其与菜单项一起存储。"""
    SubMenuImages: CustomImageList
    """CustomImageList：列出可以显示在该菜单项的子菜单中的各个项目旁边的图像。

        使用 SubMenuImages 提供一组可以显示在 Items 属性中列出的项目旁边的图像。各个菜单项设置其 ImageIndex 属性来指示列表中的哪个图像出现在菜单项标题的左侧。

        提示：如果应用程序使用操作列表，则此属性可以是命令列表的 Images 属性的值。这样，执行相同操作的菜单项和按钮可以显示相同的图像。"""
    Visible: bool
    """bool：指定菜单项是否出现在菜单中。

        使用 Visible 可防止用户看到菜单中的项目。例如，删除不适用于 OnPopup 事件处理程序中弹出菜单的当前组件的菜单项。
        如果 Visible 为 true，则显示菜单项。如果 Visible 为 false，则隐藏菜单项。

        注意：如果该属性由 TAction 对象提供，则该属性不会与菜单项一起存储。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Add(self, Item: MenuItem) -> None:
        """TMenuItem.Add(Item: MenuItem) -> 无

        将一个或多个菜单项添加到 Items 属性数组的末尾。
        使用“添加”将新菜单项添加到该菜单项的下拉菜单中。如果此菜单项是主菜单或弹出菜单的 Items 属性的值，则“添加”会将这些项目添加到菜单末尾。
        指定要添加的单个新菜单项作为 Item 参数的值，或指定新菜单项数组作为 AItems 参数的值。 AItems_Size 是 AItems 数组中最后一项的索引（比项数少 1）。\r
        将一个或多个菜单项添加到 Items 属性数组的末尾。
        使用“添加”将新菜单项添加到该菜单项的下拉菜单中。如果此菜单项是主菜单或弹出菜单的 Items 属性的值，则“添加”会将这些项目添加到菜单末尾。
        指定要添加的单个新菜单项作为 Item 参数的值，或指定新菜单项数组作为 AItems 参数的值。 AItems_Size 是 AItems 数组中最后一项的索引（比项数少 1）。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Clear(self, *args, **kwargs) -> Any:
        """删除并释放 Items 属性中列出的所有菜单项。

        使用 Clear 释放 Items 属性数组中列出的所有项目。"""
    def Click(self, *args, **kwargs) -> Any:
        """模拟鼠标点击。

        Click 生成 OnClick 事件，就好像用户单击了菜单项一样。与真正的鼠标单击不同，Click 不会向与菜单关联的窗口生成 WM_COMMAND 消息。
        当用户选择菜单项时，组件编写者可以覆盖 click 以提供不同的响应。"""
    def Create(self, AOwner: Component) -> None:
        """TMenuItem.Create(AOwner: Component) -> 无

        创建 TMenuItem 的实例。
        使用 Create 在运行时创建菜单项。在设计时使用菜单设计器定义的菜单项是自动创建的。
        AOwner 是负责释放菜单项的组件。它成为所有者财产的价值。"""
    def Delete(self, Index: int) -> None:
        """TMenuItem.Delete(Index: int) -> None

        从 Items 属性数组中删除菜单项。
        调用Delete 可从菜单中删除菜单项及其所有子菜单。 Index 参数是要删除的项目的索引，其中 0 指定菜单中的第一项，1 指定第二项，依此类推。
        删除不会释放已删除项目的内存。要从菜单中删除项目并释放其内存，请在要删除的项目中调用 Free 方法。
        要暂时隐藏菜单项而不删除它，请使用 Visible 属性。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TMenuItem 的一个实例。

        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会验证 TMenuItem 引用是否为空，然后才调用 Destroy。"""
    def Find(self, ACaption: str) -> MenuItem:
        """TMenuItem.Find(ACaption: str) -> 菜单项

        在给定标题的 Items 属性数组中定位菜单项。
        使用 Find 在 Items 属性数组中定位菜单项，其标题由 ACaption 参数指定。将项目标题与 ACaption 参数进行比较时，Find 会忽略快捷键字符。
        Find 返回 Items 属性数组中具有指定标题的第一个菜单项。如果未找到任何项目，Find 将返回空。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TMenuItem.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        枚举所有子组件。
        Vcl.Menus.TMenuItem.GetChildren继承自System.Classes.TComponent.GetChildren。此行下面的所有内容均引用 System.Classes.TComponent.GetChildren。
        枚举所有子组件。
        GetChildren 在组件流系统内部使用。没有必要直接调用它。
        GetChildren 需要一个接收所有枚举组件的 TGetChildProc 例程。
        Root 代表将被枚举的组件的所有者。
        此方法在 TComponent 中不执行任何操作，并且预计会在后代中被重写。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TComponent 枚举器。

        Vcl.Menus.TMenuItem.GetEnumerator 继承自System.Classes.TComponent.GetEnumerator。此行下面的所有内容均引用 System.Classes.TComponent.GetEnumerator。
        返回 TComponent 枚举器。
        GetEnumerator 返回一个 TComponentEnumerator 引用，该引用枚举指定包含组件中包含的组件。
        要处理所有这些子组件，请在 While MoveNext do 循环中调用 TComponentEnumerator GetCurrent 方法。"""
    def GetImageList(self, *args, **kwargs) -> Any:
        """返回为菜单项提供图像的图像列表。

        使用 GetImageList 访问包含此菜单项的图像的图像列表。 ImageIndex 属性标识 GetImageList 返回的列表中的特定图像。
        GetImageList 首先检查此菜单项的父级是否有 SubMenuImages 属性。如果父菜单项不维护图像列表，它将检查该菜单项的父菜单项，依此类推，直到到达顶级菜单项（未设置父菜单项的菜单项）。如果父菜单项均不具有 SubMenuImages 属性，则 GetImageList 将检查顶级菜单中的 Images 属性。
        GetImageList 返回它找到的第一个图像列表。如果没有找到图像列表，GetImageList 将返回空。"""
    def GetItem(self, Index: int) -> MenuItem:
        """TMenuItem.GetItem(Index: int) -> MenuItem

         用于获取菜单项（MenuItem）中指定索引位置的子菜单项的方法。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父级。"""
    def GetParentMenu(self, *args, **kwargs) -> Any:
        """返回菜单项所属的主菜单。

        GetParentMenu 返回包含菜单项的菜单。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def IndexOf(self, Item: MenuItem) -> int:
        """TMenuItem.IndexOf(Item: MenuItem) -> int

        返回 Items 数组中菜单项的位置。
        调用IndexOf在以该菜单项为首的子菜单中定位该菜单项。 IndexOf 对于第一个菜单项返回 0，对于第二个菜单项返回 1，依此类推。如果菜单项不在子菜单中，IndexOf 返回 -1。

        注意：如果菜单中包含一些不可见的项目，IndexOf 可能与用户看到的菜单中项目的位置不对应。"""
    def InitiateAction(self, *args, **kwargs) -> Any:
        """如果菜单项与操作链接关联，则调用操作链接的 Update 方法。

        InitiateAction 调用操作链接（如果菜单项有一个操作链接）来更新操作与菜单项之间的关联。"""
    def Insert(self, Index: int, Item: MenuItem) -> None:
        """TMenuItem.Insert(Index: int, Item: MenuItem) -> None

        将菜单项插入 Items 数组中的指定位置。
        使用“插入”将新菜单项插入到该菜单项的下拉菜单中。如果此菜单项是主菜单或弹出菜单的 Items 属性的值，则“插入”会将项目插入到该菜单中。将要添加的新菜单项指定为 Item 参数的值，并将 Items 数组中的位置指定为 Index 参数的值。"""
    def InsertNewLineAfter(self, AItem: MenuItem) -> int:
        """TMenuItem.InsertNewLineAfter(AItem: MenuItem) -> int

        在 Items 属性数组中的指定项目后面插入分隔栏。
        使用 InsertNewLineAfter 在 AItem 指定的菜单项后插入分隔栏。如果 AItem 不是 Items 属性数组中的项目，则 InsertNewLineAfter 会引发异常。
        InsertNewLineAfter 返回 Items 属性数组中新插入的分隔符项的索引。

        提示：在运行时插入分隔条时，最好将 AutoLineReduction 设置为 true，以便可以自动删除多余的分隔符。"""
    def InsertNewLineBefore(self, AItem: MenuItem) -> int:
        """TMenuItem.InsertNewLineBefore(AItem: MenuItem) -> int

        在 Items 属性数组中的指定项目之前插入分隔栏。
        使用 InsertNewLineBefore 在 AItem 指定的菜单项之前插入分隔栏。如果 AItem 不是 Items 属性数组中的项目，则 InsertNewLineBefore 会引发异常。
        InsertNewLineBefore 返回 Items 属性数组中新插入的分隔符项的索引。

        提示：在运行时插入分隔条时，最好将 AutoLineReduction 设置为 true，以便可以自动删除多余的分隔符。"""
    def IsLine(self, *args, **kwargs) -> Any:
        """指示菜单项是否表示分隔条。

        调用 IsLine 来确定菜单项是否为分隔条。IsLine 检查菜单项的 Caption，如果 Caption 的值为“-”，则返回 true。具有此 Caption 的菜单项显示为分隔条。"""
    def NewBottomLine(self, *args, **kwargs) -> Any:
        """在 Items 属性数组的末尾插入分隔栏。

        使用 NewBottomLine 在 items 属性数组的末尾插入分隔栏。这在运行时动态构建子菜单时非常有用。
        NewBottomLine 返回 Items 属性数组中新插入的分隔符项的索引。

        提示：在运行时插入分隔条时，最好将 AutoLineReduction 设置为 true，以便可以自动删除多余的分隔符。"""
    def NewTopLine(self, *args, **kwargs) -> Any:
        """在 Items 属性数组的开头插入分隔栏。

        使用 NewTopLine 在 items 属性数组的开头插入分隔栏。这在运行时动态构建子菜单时非常有用。
        NewTopLine 返回 Items 属性数组中新插入的分隔符项的索引。

        提示：在运行时插入分隔条时，最好将 AutoLineReduction 设置为 true，以便可以自动删除多余的分隔符。"""
    def Remove(self, Item: MenuItem) -> None:
        """TMenuItem.Remove(Item: MenuItem) -> None

        从 Items 属性数组中删除菜单项
        调用 Remove 可从菜单中删除菜单项及其所有子菜单。Item 参数是要删除的项。如果 Item 不是 Items 数组中的菜单项，则 Remove 会引发异常。
        Remove 不会释放项目的内存。要从菜单中删除项目并释放其内存，请在要删除的项目中调用 Free 方法。
        要暂时隐藏菜单项而不删除它，请使用 Visible 属性。"""
    def RethinkHotkeys(self, *args, **kwargs) -> Any:
        """调整子项目的标题，使每个项目都有一个快捷键，并且没有重复的快捷键。

        调用 RethinkHotkeys 来调整 Items 属性中的项目以及这些项目的任何子菜单中的快捷键。 RethinkHotkeys 检查没有快捷键或具有重复快捷键的项目。然后，它会用唯一的字符替换所有重复的快捷键，并将快捷键添加到没有快捷键的项目中。 RethinkHotkeys 优先考虑现有的快捷键映射，但如有必要，可能会更改它们以确保唯一性。
        当 AutoHotkeys 属性为 false 时，RethinkHotkeys 允许菜单调整快捷键。对于任何将 AutoHotkeys 设置为 true 的菜单或子菜单，此调整会自动发生。
        如果 RethinkHotkeys 更改了任何菜单项的 Caption 属性，则 RethinkHotkeys 返回 true，否则返回 false。"""
    def RethinkLines(self, *args, **kwargs) -> Any:
        """从 Items 属性数组中删除多余的分隔线。

        调用 RethinkLines 从 Items 属性中的项目以及这些项目的任何子菜单中删除多余的分隔符。 RethinkLines 删除出现在子菜单开头或结尾的分隔符以及紧随另一个分隔符的分隔符。
        当 AutoLineReduction 属性为 false 时，RethinkLines 允许菜单删除多余的分隔符。对于任何将 AutoLineReduction 设置为 true 的菜单或子菜单，此调整会自动发生。
        如果 RethinkLines 删除了任何菜单项，则 RethinkLines 返回 true，否则返回 false。"""
    def SetParentComponent(self, Value: Component) -> None:
        """TMenuItem.SetParentComponent（值：组件）-> 无

        设置父组件。
        Vcl.Menus.TMenuItem.SetParentComponent继承自System.Classes.TComponent.SetParentComponent。此行下面的所有内容均引用 System.Classes.TComponent.SetParentComponent。
        设置父组件。
        SetParentComponent 在组件流系统内部使用。没有必要直接调用它。
        派生类重写此方法以实现对父子关系的正确处理。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Metafile(Graphic):
    """TMetafile 是 Win32 增强型图元文件的封装。

    TMetafile 包含图元文件图形（EMF 文件格式）。
    TMetafile 的属性指示图元文件的大小和特性。
    要在画布上绘制图元文件，请调用 TCanvas 对象的 Draw 或 StretchDraw 方法，并将 TMetafile 作为参数传递。Enhanced 属性确定图元文件在磁盘上的存储方式。如果 Enhanced 为真，则图元文件将存储为 .EMF（Win32 增强型图元文件）文件。如果 Enhanced 为假，则图元文件将存储为 .WMF（Windows 3.1 图元文件，带有 Aldus 标头）。"""
    __hash__: ClassVar[None] = ...
    CreatedBy: Any
    """用于获取创建Metafile对象的应用程序名称。"""
    Description: Any
    """用于获取或设置Metafile对象的描述信息。"""
    Enhanced: Any
    """用于指示Metafile对象是否是增强型的（enhanced）。"""
    Handle: Any
    """用来在Windows操作系统中定位和操作Metafile对象。"""
    Inch: Any
    """表示每英寸包含的像素数，用于确定Metafile对象在打印或显示时的大小和清晰度。"""
    MMHeight: Any
    """用于获取Metafile对象的高度（height）以毫米（millimeters）为单位的值。"""
    MMWidth: Any
    """用于获取Metafile对象的宽度（Width）值，以毫米（millimeters）为单位表示。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Assign(self, Source: Persistent) -> None:
        """将对象复制到图元文件。
        分配将对象的增强型和调色板属性复制到图元文件。如果元文件为空，Assign 会创建一个。否则，Assign 调用继承的方法。对于分配，图元文件与其他 TGraphic 对象和 TPicture 是多态的。"""
    @classmethod
    def CanLoadFromStream(cls, Stream: Stream) -> bool:
        """TMetafile.CanLoadFromStream(Stream: Stream) -> bool

        Vcl.Graphics.TMetafile.CanLoadFromStream 继承自Vcl.Graphics.TGraphic.CanLoadFromStream。该行以下所有内容均引用Vcl.Graphics.TGraphic.CanLoadFromStream。
        当指定的流包含特定 TGraphic 子类的流图像时，CanLoadFromStream 返回 True。
        该方法使用当前流位置，它不会更改当前流位置。"""
    def Clear(self) -> Any:
        """TMetaFile.Clear()

        用于清空Metafile对象中存储的图形图像数据，将其重置为空状态。"""
    def Create(self, *args, **kwargs) -> Any:
        """实例化图元文件对象。

        调用 Create 在运行时实例化图元文件。
        Create 为图元文件对象分配内存，并调用继承的 Create。然后将“增强”和“透明”属性设置为 true。
        要从头开始创建图元文件图像，请在图元文件画布中绘制图像。当图元文件画布被销毁时，它将图像传输到提供给图元文件画布构造函数的图元文件对象中。在画布上绘制图像并销毁画布后，图像在图元文件对象中“可播放”。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁图元文件对象的实例。

        不要直接在应用程序中调用 Destroy。相反，应用程序应该调用 Free。 Free 在调用 Destroy 之前验证 TMetafile 引用不为零。
        销毁释放图像，当图元文件图像上的引用计数为零时，这会释放图像和句柄。然后Destroy调用继承的Destroy。"""
    def HandleAllocated(self, *args, **kwargs) -> Any:
        """指示 TMetafile 对象是否已获取基础 GDI 对象的句柄。

        使用 HandleAllocation 确定 Handle 属性是否设置为 HMETAFILE 值。 HandleAllocation 指示基础 GDI 对象是否已创建。使用 HandleAllocation 而不是读取 Handle 属性。当应用程序读取 Handle 属性时，如果基础 GDI 对象尚不存在，它会自动创建一个图元文件并返回其句柄。"""
    def LoadFromClipboardFormat(self, AFormat: int, AData: int, APalette: int) -> None:
        """TMetafile.LoadFromClipboardFormat(AFormat: int, AData: int, APalette: int) -> None

        从剪贴板加载图元文件。
        LoadFromClipboardFormat 用剪贴板中的数据替换当前图像。 LoadFromClipboardFormat 忽略 AData 和 APalette 参数。"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TMetafile.LoadFromStream(Stream: Stream) -> 无

        从流加载图元文件。
        通过指定从中加载图元文件的流作为 Stream 的值来使用 LoadFromStream。 LoadFromStream 从流中读取图元文件并用它替换当前图像。"""
    def ReleaseHandle(self) -> Any:
        """TMetaFile.ReleaseHandle()"""
    def SaveToClipboardFormat(self, AFormat: int, AData: int, APalette: int) -> None:
        """TMetafile.SaveToClipboardFormat(AFormat: int, AData: int, APalette: int) -> None

        将图元文件保存为剪贴板格式。
        使用 SaveToClipboardFormat 将图元文件复制为剪贴板格式。然后可以使用剪贴板的 SetAsHandle 方法将结果值复制到 Windows 剪贴板。
        图元文件的调色板在 APalette 参数中返回，格式在 AFormat 参数中返回，数据句柄在 AData 参数中返回。在保存图元文件之前，应用程序必须使用 RegisterClipboardFormat 方法向图元文件对象注册格式。
        要将图元文件保存到文件，请调用 SaveToFile。"""
    def SaveToFile(self, Filename: str) -> None:
        """TMetafile.SaveToFile(文件名: str) -> 无

        将图元文件写入磁盘。
        使用 SaveToFile 将图元文件保存到 Filename 参数提供的文件中。要从文件加载图元文件，请调用 LoadFromFile 方法。

         注意：如果 Filename 参数的扩展名为“.wmf”，则图元文件将保存为 WMF 文件。无需设置Enhanced 属性。"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TMetafile.SaveToStream(Stream: Stream) -> 无

        将图元文件写入流。
        使用 SaveToStream 将图元文件保存到 Stream 参数指定的流中。
        如果Enhanced属性为True，图元文件将保存为EMF；如果为 False，则保存为 WMF。"""
    def SetSize(self, AWidth: int, AHeight: int) -> None:
        """TMetafile.SetSize(AWidth: int, AHeight: int) -> None

        指定图元文件的大小。
        使用 SetSize 方法设置图元文件的高度和宽度。这比单独设置高度和宽度具有更好的性能。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Monitor(Object):
    """TMonitor 代表运行应用程序的监视器。

    TMonitor 代表显示应用程序用户界面的监视器。它引入了描述单个监视器尺寸的属性。此外，“主要”属性将主要属性与系统上的其他监视器区分开来。
    编写多显示器应用程序时，使用 TMonitor 帮助布局表单和对话框，以便它们不会分散在多个显示器上。
    应用程序不会创建 TMonitor 实例。相反，所有可用监视器的监视器组件均由全局 Screen 变量的 Monitors 属性列出。全局 Screen 变量还提供有关运行应用程序的监视器的全局信息，例如屏幕分辨率、可用字体等。"""
    __hash__: ClassVar[None] = ...
    BoundsRect: Any
    """指示显示器的尺寸（以像素为单位）。"""
    Handle: Any
    """指示监视器的 Windows 句柄。"""
    Height: Any
    """指示显示器的垂直尺寸（以像素为单位）。"""
    Left: Any
    """指示显示器左边缘的逻辑位置。"""
    MonitorNum: Any
    """指定全局屏幕对象的监视器列表中监视器的索引。"""
    PixelsPerInch: int
    """用来获取或设置当前设备或上下文的分辨率。"""
    Primary: Any
    """指示这是否是主监视器。"""
    Top: Any
    """指示显示器顶部边缘的逻辑位置。"""
    Width: Any
    """指示显示器的水平尺寸（以像素为单位）。"""
    WorkareaRect: Any
    """指示显示器上可用区域的尺寸。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。

        __dir__ 方法返回一个包含字符串的列表，这些字符串表示对象的属性名。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Notebook(CustomControl):
    """TNotebook 显示多个页面，每个页面都有自己的一组控件。

    笔记本组件经常与选项卡集控件 (TTabSet) 一起使用，让用户通过单击选项卡来选择笔记本中的页面。 TNotebook 是为了向后兼容而提供的。新应用程序应改用 TPageControl。"""
    __hash__: ClassVar[None] = ...
    ActivePage: str
    """str：确定笔记本中显示哪个页面。

        ActivePage 确定笔记本中显示哪个页面。 ActivePage 的值必须是 Pages 属性中包含的字符串之一。
        要通过索引而不是字符串获取或设置活动页面，请改用 PageIndex 属性。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于存储Notebook控件中包含的子控件（例如页面控件）。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接呈现到窗口还是先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件会直接将自身绘制到窗口。 当 DoubleBuffered 为 true 时，窗口控件会将自身绘制到内存中的位图，然后使用该位图绘制窗口。 双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（如 TRichEdit）无法将自身绘制到位图中。 对于此类控件，必须将 DoubleBuffered 设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """用于处理鼠标在窗体或控件上移动的事件。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnPageChanged: Callable[[Object],None]
    """用户切换Notebook控件的当前页时触发的事件。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    PageIndex: int
    """int：确定笔记本控件中显示哪个页面。

        PageIndex 的值决定笔记本中显示哪个页面。更改 PageIndex 值会更改控件中的页面。
        创建页面时，Pages 属性中的每个字符串都会自动分配一个 PageIndex 值。第一页接收值 0，第二页接收值 1，依此类推。如果从 Pages 属性中删除字符串，则将重新分配 PageIndex 值，以便值始终以 0 开头并继续增加，值之间没有任何间隙。
        要使用字符串而不是索引来获取或设置当前页面，请改用 ActivePage 属性。"""
    Pages: Strings
    """字符串：包含标识笔记本控件各个页面的字符串。

        Pages 属性包含标识笔记本控件各个页面的字符串。这两个控件都为 Pages 属性中的每个字符串创建一个单独的页面。例如，如果 Pages 包含三个字符串 First、Second 和 Third，则该控件具有三个单独的页面。
        您可以使用 ActivePage 或 PageIndex 属性访问笔记本或选项卡式笔记本控件中的各个页面。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 分配一个值，以便在用户选择控件并单击鼠标右键时显示​​弹出菜单。如果 TPopupMenu 的 AutoPopup 属性为 True，则弹出菜单会自动显示。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TNotebook.Create(AOwner: 组件) -> 无

        构造一个 TNotebook 组件。
        调用 Create 在运行时实例化笔记本。在设计时放置在表单中的笔记本组件是自动创建的。
        AOwner 参数指定负责释放笔记本的组件（通常是表单）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TNotebook 组件。

        不要直接在应用程序中调用 Destroy。相反，请使用 Free，它会在调用 Destroy 之前检查 TNotebook 引用是否为 nil。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TNotebook.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        为控件的每个子级调用指定的方法。
        Vcl.ExtCtrls.TNotebook.GetChildren 继承自 Vcl.Controls.TWinControl.GetChildren。该行以下的所有内容均引用Vcl.Controls.TWinControl.GetChildren。
        为控件的每个子级调用指定的方法。
        GetChildren 由加载和保存组件的流系统调用。应用程序很少需要调用此例程。
        GetChildren 对 Controls 属性列出的每个子控件执行由 Proc 参数指定的回调，该属性将 Root 参数列为其 Owner。
        重写 GetChildren 以限制或增加与控件一起保存的子控件。重写 GetChildren 时，为每个应保存的子控件调用作为 Proc 参数传递的过程。 Root 参数指示拥有该控件的组件（通常是窗体）。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class NumberBox(CustomNumberBox):
    """TNumberBox 是一个数字输入控件，支持输入整数、具有给定十进制数字和正确格式的浮点数以及货币值。"""
    __hash__: ClassVar[None] = ...
    AcceptExpressions: bool
    """用于指定NumberBox控件是否接受表达式作为输入。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """对齐方式：确定文本在文本编辑控件内的对齐方式。

        使用对齐方式更改文本在文本编辑控件中的格式设置方式。对齐方式可以采用以下值之一：

        taLeftJustify   将文本与控件的左侧对齐
        taCenter   文本在控件中水平居中。
        taRightJustify   将文本与控件的右侧对齐。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSelect: bool
    """bool：决定当控件获得焦点时是否自动选择编辑控件中的所有文本。

        设置自动选择以在编辑控件获得焦点时选择所有文本。自动选择仅适用于单行编辑控件。
        当用户更有可能替换编辑控件中的文本而不是追加到其中时，请使用自动选择。"""
    AutoSize: bool
    """bool：确定编辑控件的高度是否自动调整大小以适应文本。

        使用 AutoSize 使编辑控件自动调整其大小，以便工作区适应文本的高度。当 AutoSize 为 false 时，编辑控件具有固定高度。当 AutoSize 为 true 时，只要发生可能影响控件高度的更改（例如字体或边框样式的更改），控件的大小就会重新调整。

        注意：AutoSize 仅调整编辑控件的高度。即使将 AutoSize 设置为 true，编辑控件中的文本如果超出控件的宽度，也可能会被截断。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """BorderStyle：确定编辑控件在工作区周围是否有单线边框。

        使用 BorderStyle 可以影响编辑控件的工作区突出的清晰度。 BorderStyle 的值可以是 bsSingle 或 bsNone。如果 BorderStyle 为 bsSingle，则编辑控件在工作区周围有单线边框。如果 BorderStyle 为 bsNone，则不会有边框。"""
    CharCase: EditCharCase
    """EditCharCase：确定编辑控件中文本的大小写。

        使用 CharCase 强制编辑控件的内容采用特定的大小写。
        当 CharCase 设置为 ecLowerCase 或 ecUpperCase 时，字符的大小写会在用户将字符键入编辑控件时进行转换。将 CharCase 属性更改为 ecLowerCase 或 ecUpperCase 会更改文本的实际内容，而不仅仅是外观。任何案例信息都会丢失，并且无法通过将 CharCase 更改为 ecNormal 来重新捕获。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于存储NumberBox控件内部的子控件列表。"""
    CurrencyFormat: NumberBoxCurrencyFormat
    """用于设置或获取NumberBox控件中显示货币值的格式。"""
    CurrencyString: str
    """用于设置或获取NumberBox控件显示货币值时使用的货币符号字符串。"""
    Decimal: int
    """用于设置或获取NumberBox控件中显示数字值的小数位数。"""
    DisplayFormat: str
    """用于设置或获取NumberBox控件中显示数字值的格式。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用备用控件，其 Font 属性将更改标题或文本的颜色（如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HideSelection: bool
    """bool：确定当焦点转移到另一个控件时是否保留所选文本的视觉指示。

        将 HideSelection 设置为 false 可以提供文本选定部分的视觉反馈，即使编辑控件没有焦点也是如此。将 HideSelection 设置为 true 可以仅在编辑控件具有焦点时显示所选内容。 HideSelection 不会影响选择的实际值，只会影响视觉指示。始终将 HideSelection 设置为 false 可能会使具有许多编辑控件的表单看起来过于繁忙。"""
    ImeMode: ImeMode
    """ImeMode：确定输入法编辑器 (IME) 的行为。

        设置 ImeMode 以配置 IME 处理用户击键的方式。 IME 是亚洲语言字符的前端输入处理器。 IME 挂钩所有键盘输入，在转换窗口中将其转换为亚洲字符，并将转换后的字符或字符串发送到应用程序。
        ImeMode 允许控件影响 IME 执行的转换类型，以便它适合控件期望的输入。例如，仅接受数字输入的控件可能会指定 imClose 的 ImeMode，因为数字输入不需要转换。

        注意：ImeMode 的值仅在控件获得焦点时才生效。要在控件已具有输入焦点时更改 ImeMode 的值，请调用 SetIme 方法。"""
    ImeName: str
    """str：指定用于将键盘输入转换为亚洲语言字符的输入法编辑器 (IME)。

        设置 ImeName 以指定用于转换击键的 IME。IME 是亚洲语言字符的前端输入处理器。IME 挂接所有键盘输入，在转换窗口中将其转换为亚洲字符，然后将转换后的字符或字符串发送到应用程序。
        ImeName 必须指定已通过 Windows 控制面板安装的 IME 之一。属性检查器提供系统上当前安装的所有 IME 的下拉列表。在运行时，应用程序可以从全局 Screen 变量中获取当前安装的 IME 列表。
        如果 ImeName 指定了不可用的 IME，则将改用应用程序启动时处于活动状态的 IME。不会生成任何异常。

        注意：ImeName 的值仅在控件获得焦点时生效。要在控件获得输入焦点后更改 ImeName 的值，请调用 SetIme 方法。"""
    LargeStep: float
    """用于设置或获取NumberBox控件的大步值。"""
    MaxLength: int
    """int：指定用户可以输入到编辑控件中的最大字符数。

        使用 MaxLength 限制可以输入到编辑控件中的字符数。值 0 表示没有应用程序定义的长度限制。
        如果编辑控件中的文本将被复制到固定长度的缓冲区中，则可以使用 MaxLength 来限制该文本的长度。

        注意：设置 MaxLength 不会截断现有文本，它只是阻止用户在达到 MaxLength 字符限制后添加更多文本。
        注意：即使 MaxLength 为 0，操作系统也可能对可输入编辑控件的字符数施加限制。
        注意：如果应用程序使用主题，则 MaxLength 的单位是字符（而不是字节）。"""
    MaxValue: float
    """用于设置或获取NumberBox控件允许的最大值。"""
    MinValue: float
    """用于设置或获取NumberBox控件允许的最小值。"""
    Mode: NumberBoxMode
    """用于设置或获取NumberBox控件的模式。"""
    NegativeValueColor: int
    """用于设置或获取NumberBox控件中显示负数值时的颜色。"""
    OEMConvert: bool
    """bool：确定在编辑控件中键入的字符是否从 ANSI 转换为 OEM，然后再转换回 ANSI。

        要确保在编辑控件中键入的任何字符都可以明确地转换为 OEM 字符集，请将 OEMConvert 设置为 true。这会导致所有字符在键入时从 ANSI 转换为 OEM，然后再转换回 ANSI。当文本是否可以明确映射到 OEM 字符串并不重要时，将 OEMConvert 设置为 false 以避免此转换的开销。
        当应用程序不使用 Unicode 文件名时，OEMConvert 对于用于输入文件名的编辑控件最有用。"""
    OnChange: Callable[[Object],None]
    """当NumberBox控件的值发生变化时触发的事件。"""
    OnChangeValue: Callable[[Object],None]
    """当用户改变NumberBox控件的值时（例如通过键盘输入、鼠标操作等），OnChangeValue事件会被触发。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnEvaluateExpression: Callable[[Object],None]
    """当需要对表达式进行评估时触发。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当用户将鼠标指针移动到NumberBox控件上时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnValidateChar: Any
    """当用户在NumberBox控件中输入字符时触发。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """bool：确定用户是否可以更改编辑控件的文本。

        要将编辑控件限制为仅显示，请将 ReadOnly 属性设置为 true。将 ReadOnly 设置为 false 以允许编辑编辑控件的内容。
        将 ReadOnly 设置为 true 可确保文本不被更改，同时仍允许用户选择文本。然后应用程序可以操作所选文本，或将其复制到剪贴板。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SmallStep: float
    """用于设置或获取NumberBox控件的小步值。"""
    SpinButtonOptions: NumberBoxSpinButtonOptions
    """用于设置数字框（NumberBox）控件的微调按钮（Spin Button）的选项集合。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    TextHint: str
    """str：当 Text 属性为空时显示的提示或消息。

        使用 TextHint 提示用户在文本字段中需要输入什么类型的内容。必须启用运行时主题。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    UseMouseWheel: bool
    """用于指定是否允许使用鼠标滚轮来改变NumberBox控件中的数值。"""
    UseNaNValue: bool
    """用于指定是否允许NumberBox控件显示和处理"NaN"（Not a Number）值。"NaN"是一种特殊的数值。"""
    UseUpDownKeys: bool
    """用于指定是否允许使用上下箭头键来增加或减少NumberBox控件中的数字值。"""
    Value: float
    """用于获取或设置NumberBox控件当前显示的浮动值。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Wrap: bool
    """用于指定当达到最大值或最小值时是否循环（wrap around）到另一端继续增减。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Object:
    """TObject 是所有对象和组件的最终祖先。

    TObject 通过引入以下方法来封装对象常见的基本行为：

    通过分配、初始化和释放所需的内存来创建、维护和销毁对象的实例。
    在创建或销毁对象实例时做出响应。
    返回有关对象的类类型和实例信息以及有关其已发布属性的运行时类型信息 (RTTI)。
    支持消息处理。
    支持对象实现的接口。
    当声明不需要持久化（不需要保存和重新加载）并且不需要分配给其他对象的简单对象时，使用 TObject 作为直接基类。
    对象的大部分功能都是通过 TObject 引入的方法建立的。其中许多方法由 IDE 内部使用，不适合用户直接调用。其他的在具有更复杂行为的后代对象中被覆盖。
    尽管 TObject 是组件框架的基础对象，但并非所有对象都是组件。所有组件类均源自 TComponent。

    注意：TObject 永远不会直接实例化。尽管它不使用阻止实例化的编程语言功能，但 TObject 是一个抽象类。"""
    __hash__: ClassVar[None] = ...
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def AfterConstruction(self, *args, **kwargs) -> Any:
        """最后一个构造函数执行后响应。

        AfterConstruction 在对象的最后一个构造函数执行后自动调用。不要在您的应用程序中显式调用它。
        TObject 中实现的 AfterConstruction 方法不执行任何操作。当创建一个在创建对象后执行操作的类时，重写此方法。例如，TCustomForm 重写 AfterConstruction 以生成 OnCreate 事件。"""
    def BeforeDestruction(self, *args, **kwargs) -> Any:
        """在第一个析构函数执行之前响应。

        BeforeDestruction 在对象的第一个析构函数执行之前自动调用。不要在您的应用程序中显式调用它。
        TObject 中实现的 BeforeDestruction 方法不执行任何操作。当创建一个在对象被销毁之前执行操作的类时，重写此方法。例如，TCustomForm 重写 BeforeDestruction 以生成 OnDestroy 事件。

        注意：当对象在完全构造之前被销毁时，BeforeDestruction 不会被调用。也就是说，如果对象的构造函数引发异常，则会调用析构函数来处理该对象，但不会调用 BeforeDestruction。"""
    @classmethod
    def ClassInfo(cls, *args, **kwargs) -> Any:
        """返回指向对象类型的运行时类型信息 (RTTI) 表的指针。

        ClassInfo 提供对给定对象类型的 RTTI 表的访问。
        有些类不提供运行时类型信息。对于这些类，ClassInfo 返回空。所有从 TPersistent 派生的类都提供运行时类型信息。"""
    @classmethod
    def ClassName(cls, *args, **kwargs) -> Any:
        """返回一个字符串，指示对象实例的类型（而不是作为参数传递的变量的类型）。

        使用 ClassName 从对象实例或类引用中获取类名。这对于区分分配给具有祖先类类型的变量的对象实例很有用。"""
    @classmethod
    def ClassNameIs(cls, Name: str) -> bool:
        """TObject.ClassNameIs(Name: str) -> bool

        确定对象是否属于特定类型。
        ClassNameIs 确定对象实例或类引用是否具有与指定字符串匹配的类名。这对于跨模块或共享库查询对象很有用。"""
    @classmethod
    def ClassParent(cls, *args, **kwargs) -> Any:
        """返回类的直接祖先的类型。

        ClassParent 返回对象实例或类引用的父类的名称。对于 TObject，ClassParent 返回空。
        避免在应用程序代码中使用 ClassParent。"""
    def ClassType(self, *args, **kwargs) -> Any:
        """返回对象类的类引用。

        注意：ClassType 动态确定对象的类型并返回其类引用或元类。
        避免在应用程序代码中使用 ClassType。"""
    def CleanupInstance(self, *args, **kwargs) -> Any:
        """对类中的长字符串、变体和接口变量执行终结。

        不要直接调用 CleanupInstance。当对象实例被销毁时，CleanupInstance 会自动调用。
        CleanupInstance 释放所有长字符串和变体。它将长字符串设置为空，并将变体设置为未分配。"""
    def Create(self, *args, **kwargs) -> Any:
        """构造一个对象并在首次使用该对象之前初始化其数据。

        Create 构造一个对象。对象的用途、大小和行为差异很大。 TObject 定义的 Create 构造函数分配内存但不初始化数据。
        后代对象通常定义一个构造函数来创建特定类型的对象并初始化其数据。

        注意：如果异常从构造函数中逃逸，则会调用对象的析构函数来清理失败的实例。"""
    def DefaultHandler(self, Message) -> None:
        """TObject.DefaultHandler(Message) -> 无

        提供处理消息记录的方法的接口。
        当 Dispatch 找不到特定消息的方法时，将调用 DefaultHandler。 DefaultHandler 为对象没有特定处理程序的所有消息提供消息处理。处理消息的后代类根据它们处理的消息类型重写 DefaultHandler。

        注意：在消息处理方法中，仅当祖先没有为正在处理的特定消息指定消息方法时，调用继承才会导致调用祖先的 DefaultHandler 方法。否则，调用继承会导致调用该类型消息的特定处理程序。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """处置对象实例。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证对象引用是否不为空，然后才会调用 Destroy。。
        TObject 定义的 Destroy 方法释放内存。子类对象通常定义为该特定类型的对象定制的析构函数。
        在子类中声明 Destroy 方法时，始终将 override 指令添加到声明中，并调用继承的 Destroy 作为重写方法中的最后一个语句。由于 Destroy 是虚拟方法，因此重写它可确保发生正确的继承行为。

        注意：如果构造函数中发生异常，则会调用析构函数来销毁未完全初始化的部分构造的对象实例。因此，析构函数应该在尝试释放分配的资源（例如句柄）之前检查它们是否实际分配，因为它们的值可能为零。
        应实现 Destroy，以便它对在对象的构造函数内创建的所有子对象（即由构造函数分配的）调用 Free。与 Destroy 不同，Free 在销毁零对象时提供了保护。"""
    def Dispatch(self, Message) -> None:
        """TObject.Dispatch(消息) -> 无

        根据 Message 参数的内容调用对象的消息处理方法。
        调用 Dispatch 自动将消息传递给适当的消息处理程序。
        调度确定消息是否在为该对象声明的消息处理程序列表中。如果该对象不处理该消息，Dispatch 将检查祖先类的消息处理程序列表，并继续检查祖先，直到找到特定处理程序或用完祖先，在这种情况下，它会调用 DefaultHandler。
        Dispatch 对 Message 中的数据所做的唯一假设是前两个字节包含消息 ID，即确定 Dispatch 调用哪个消息处理程序的整数。尽管任何类型的数据都可以传递给 Dispatch，但大多数 TObject 后代都期望消息记录，例如 TMessage 或特定的数据结构类型。"""
    def DisposeOf(self, *args, **kwargs) -> Any:
        """DisposeOf 强制执行对象中的析构函数代码。

        当Mobile 编译器支持自动引用计数时，它是以前版本的产物。在当前版本的中，DisposeOf 用作调用 TObject.Free 的包装器。"""
    def Equals(self, Obj: Object) -> bool:
        """TObject.Equals(Obj: Object) -> bool

        检查当前实例和 Obj 参数是否相等。
        该函数有一个 TObject 类型的 Obj 参数。
        默认情况下，Equals方法显示当前对象和Obj对象对应的地址是否相同。该方法返回一个布尔值，表示两个地址之间的相等性。

        注意：应该在用户派生类中重写 Equals，以便为使用者对象提供相等确定功能。
        例如，在 FMX.Types.TBounds 类中，如果当前对象和 Obj 对象的 Rect 属性相等，则 Equals 也会返回 True。在 FMX.StdActns.TBaseValueRange 类中，如果当前对象和 Obj 对象的所有属性都相等，则 Equals 也会返回 True。"""
    def FieldAddress(self, Name: str) -> Pointer:
        """TObject.FieldAddress(名称: str) -> 指针

        返回已发布对象字段的地址。
        FieldAddress 由组件流系统内部使用来访问对象的指定已发布字段。 FieldAddress 返回指向该字段的指针（如果存在）。如果对象没有使用该名称的已发布字段，则 FieldAddress 返回空。
        程序应使用属性而不是 FieldAddress 来访问和操作字段。\r
        返回已发布对象字段的地址。
        FieldAddress 由组件流系统内部使用来访问对象的指定已发布字段。 FieldAddress 返回指向该字段的指针（如果存在）。如果对象没有使用该名称的已发布字段，则 FieldAddress 返回空。
        程序应该使用属性而不是 FieldAddress 来访问和操作字段。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def FreeInstance(self, *args, **kwargs) -> Any:
        """释放先前调用 NewInstance 方法分配的内存。

        所有析构函数都会自动调用 FreeInstance 来释放通过重写 NewInstance 分配的内存。
        不要直接调用 FreeInstance。如果重写 NewInstance 以更改对象实例数据的分配方式，则应重写 FreeInstance。
        与 NewInstance 一样，FreeInstance 使用从 InstanceSize 返回的值来释放对象的内存。"""
    def GetHashCode(self, *args, **kwargs) -> Any:
        """返回包含哈希码的整数。

        默认情况下，对对象调用 GetHashCode 将返回一个表示存储该对象的虚拟地址的整数。

        笔记：
        GetHashCode 应该在用户派生类中重写，以便为使用者对象提供整数哈希码表示形式。
        哈希码的符号取决于特定对象实例的地址。对于驻留在较高内存位置的对象实例，可能会出现负哈希码。"""
    def GetInterface(self, IID: GUID, Obj) -> bool:
        """TObject.GetInterface(IID: GUID, Obj) -> bool

        检索指定的接口。
        GetInterface 检索由 GUID 或类型名称指定的接口。 GetInterface 的基本实现使用 IID 参数中指定的 GUID。如果类支持指定的接口，则在 Obj 参数中返回该接口，并且 GetInterface 的返回值为 True。否则，Obj 包含空，并且 GetInterface 返回 False。

        GetInterface 等效于 as 运算符和动态强制转换 (C++)，但如果接口不受支持，GetInterface 不会引发异常。"""
    @classmethod
    def GetInterfaceEntry(cls, IID: GUID) -> PInterfaceEntry:
        """TObject.GetInterfaceEntry(IID: GUID) -> PInterfaceEntry

        返回在类中实现的特定接口的条目。
        GetInterfaceEntry 返回 IID 参数指定的接口的类条目。

        注意：COM 对象可以使用 GetInterfaceEntry 自动调度调用双 IDispatch 接口。"""
    @classmethod
    def GetInterfaceTable(cls, *args, **kwargs) -> Any:
        """返回一个指向包含给定类实现的所有接口的结构的指针。

        GetInterfaceTable 返回该类的接口条目。该列表仅包含该类实现的接口，而不包含其祖先的接口。要查找祖先列表，请迭代调用 ClassParent，然后对其返回的值调用 GetInterfaceTable。要查找特定接口的条目，请改用 GetInterfaceEntry 方法。"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    @classmethod
    def InitInstance(cls, Instance: Pointer) -> Object:
        """TObject.InitInstance(实例：指针) -> 对象

        将新分配的对象实例初始化为全零，并初始化该实例的虚拟方法表指针。
        您不应该直接调用 InitInstance。当创建一个对象时，InitInstance 由 NewInstance 调用。当重写 NewInstance 时，请确保调用 InitInstance 作为最后一条语句。
        InitInstance 不是虚拟的，因此您无法覆盖它。相反，在构造函数中初始化对象的任何数据。"""
    @classmethod
    def InstanceSize(cls, *args, **kwargs) -> Any:
        """返回对象类型的每个实例的大小（以字节为单位）。

        InstanceSize 指示类的实例数据需要多少字节的内存。 InstanceSize 从分配和释放内存的方法中调用。 InstanceSize 不是虚拟方法，因此无法重写。仅当实现 NewInstance 的自定义版本时才应调用 InstanceSize。"""
    @classmethod
    def MethodAddress(cls, Name: str) -> Pointer:
        """TObject.MethodAddress(名称: str) -> 指针

        按名称返回类方法的地址。

        注意：您只能将 MethodAddress 用于已发布的方法。
        在某些情况下，无需提前对方法名称进行硬编码即可调用对象方法。调用 MethodAddress 通过将方法名称指定为字符串来动态检索此类方法的地址。
        调用该方法的一种简单方法是定义过程或函数数据类型"""
    @classmethod
    def MethodName(cls, Address: Pointer) -> str:
        """TObject.MethodName（地址：指针）-> str

        按地址返回类方法的名称。
        在某些情况下，无需提前对方法名称进行硬编码即可调用对象方法。调用 MethodAddress 通过将方法名称指定为字符串来动态检索此类方法的地址。
        MethodName 与此过程相反 - 通过提供 Address 方法，方法的名称以字符串形式返回。"""
    @classmethod
    def NewInstance(cls, *args, **kwargs) -> Any:
        """为对象类型的实例分配内存并返回指向该新实例的指针。

        所有构造函数都会自动调用 NewInstance。NewInstance 会调用 InstanceSize 来确定从堆中分配多少包含特定实例的内存。不要直接调用 NewInstance。
        仅在有特殊内存分配要求时才重写 NewInstance。例如，在分配大量需要同时位于内存中的相同对象时，可以为整个组分配单个内存块，然后重写 NewInstance 以将该较大内存块的一部分用于每个实例。
        如果重写 NewInstance 来分配内存，则可能需要重写 FreeInstance 来释放内存。

        注意：默认情况下，NewInstance 会调用 InitInstance。"""
    @classmethod
    def QualifiedClassName(cls, *args, **kwargs) -> Any:
        """返回类的限定名称。

        QualifiedClassName 返回与类名连接的类的单元范围。"""
    def SafeCallException(self, ExceptObject: Object, ExceptAddr: Pointer) -> int:
        """TObject.SafeCallException(ExceptObject: 对象, exceptAddr: 指针) -> int

        处理使用 safecall 调用约定声明的方法中的异常。
        SafeCallException 处理使用 safecall 调用约定的方法中的异常。一些实现接口的类会重写此方法来处理可能的错误。
        正如在 TObject 中实现的那样，SafeCallException 只是返回 E_UNEXPECTED。这是对不支持接口的类的适当响应。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToString(self, *args, **kwargs) -> Any:
        """返回包含类名的字符串。

        默认情况下，ToString 返回一个字符串，其中包含正在调用的实例的类名。
        例如，在 TButton 实例上调用 ToString 将返回包含“TButton”的字符串。

        注意：ToString 旨在在用户派生类中重写，以便为使用者对象提供字符串表示形式。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    @classmethod
    def UnitName(cls, *args, **kwargs) -> Any:
        """返回定义该类的单元的名称。

        UnitName 可用于获取定义特定类的单元。例如，在 TButton 上调用 UnitName 将返回 Vcl.StdCtrls 字符串。"""
    @classmethod
    def UnitScope(cls, *args, **kwargs) -> Any:
        """返回类的单元范围。

        类的单元范围当前与类的单元名称等效。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。

        __dir__ 方法返回一个包含字符串的列表，这些字符串表示对象的属性名。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class OpenDialog(Component):
    """TOpenDialog 显示文件选择对话框。

    TOpenDialog 显示用于选择和打开文件的模式 Windows 对话框。该对话框不会在运行时出现，直到通过调用 Execute 方法激活该对话框。当用户单击“打开”时，对话框将关闭，所选文件将存储在“文件”属性中。"""
    __hash__: ClassVar[None] = ...
    DefaultExt: str
    """str：指定默认文件扩展名。

        DefaultExt 指定自动附加到所选文件名的文件扩展名，除非所选文件名已包含已注册的扩展名。如果用户选择的文件名带有未注册的扩展名，则 DefaultExt 将附加到未注册的扩展名。
        不支持长度超过三个字符的扩展名。请勿包含分隔文件名和扩展名的句点 (.)。"""
    FileEditStyle: FileEditStyle
    """FileEditStyle：确定文件选择对话框的样式。 （过时的。）

        维护 FileEditStyle 是为了与旧版本的 VCL 兼容。它没有任何作用。"""
    FileName: Any
    """用于获取或设置用户选择的文件的完整路径和文件名。"""
    Files: Strings
    """字符串：所选文件名的列表。

        Files 是一个字符串列表，其中包含每个选定的文件名及其完整目录路径。 （要让用户选择多个文件名，请在选项中设置 ofAllowMultiSelect 标志。）使用字符串列表的属性和方法来遍历此文件列表并读取各个项目。
        下面的示例将 Files 中的文件列表分配给 TListBox 组件的 Items 属性。

        self.ListBox1.Items.Assign(self.OpenDialog1.Files)"""
    Filter: str
    """str：确定对话框中可用的文件掩码（过滤器）。

        文件选择对话框的编辑框下包含文件类型的下拉列表。当用户从列表中选择文件类型时，对话框中仅显示所选类型的文件。
        要在设计时配置文件掩码，请单击对象检查器中“过滤器”属性右侧的省略号 (...)。这将打开过滤器编辑器。在“过滤器”编辑器左列的“过滤器名称”下，键入运行时可用的每种文件类型的简短描述。在右列的“过滤器”下，键入与每个描述相对应的文件掩码。例如，描述“文本文件”可能出现在掩码“*.txt”的左侧，描述“Pascal 源文件”可能出现在掩码“*.pas”的左侧。由于描述在运行时出现在下拉列表中，因此在描述中显式显示掩码通常会很有帮助（例如，“文本文件 (*.txt)”）。
        要在程序代码中创建文件掩码，请为 Filter 属性分配一个值，该值由说明和由竖线（管道）字符分隔的掩码组成。垂直条周围不要包含空格。例如，

        self.OpenDialog1.Filter = \'文本文件(*.txt)|*.TXT\'
        多个过滤器应用竖线分隔。例如，
        self.OpenDialog1.Filter = \'文本文件(*.txt)|*.TXT|Pascal 文件(*.pas)|*.PAS\'
        要在单个过滤器中包含多个掩码，请用分号分隔各个掩码。这在对象检查器和程序代码中都有效。例如，
        self.OpenDialog1.Filter = \'Pascal 文件|*.PAS;*.DPK;*.DPR\'

        如果没有为“过滤器”指定任何值，则该对话框将显示所有文件类型。"""
    FilterIndex: int
    """int：确定对话框打开时默认选择哪个过滤器。

        FilterIndex 确定对话框打开时默认选择“过滤器”中的哪种文件类型。将 FilterIndex 设置为 1 以选择列表中的第一个文件类型作为默认文件类型，或将 FilterIndex 设置为 2 以选择第二个文件类型作为默认文件类型，依此类推。如果 FilterIndex 的值超出或范围，则 Filter 中列出的第一个文件类型为默认值。"""
    HistoryList: Strings
    """字符串：维护先前选择的文件的列表。 （过时的。）

        HistoryList 的维护是为了与旧版本的 TOpenDialog 兼容。它没有被使用。"""
    InitialDir: str
    """str：确定对话框打开时的当前目录。

        InitialDir 确定文件选择对话框打开时显示的默认目录。例如，要将对话框指向 WINDOWS\\SYSTEM 目录，请将 InitialDir 的值设置为 C:\\WINDOWS\\SYSTEM。
        如果没有为 InitialDir 分配任何值，或者指定的目录不存在，则初始目录由全局 ForceCurrentDirectory 变量控制。如果 ForceCurrentDirectory 为真，则对话框打开时会显示当前工作目录。否则，对话框会打开时显示当前工作目录或我的文档目录，具体取决于 Windows 版本。"""
    OnCanClose: Callable[[Object,bool],None]
    """当用户尝试关闭对话框时触发。"""
    OnFolderChange: Callable[[Object],None]
    """当用户在打开对话框中切换文件夹时触发。"""
    OnIncludeItem: Callable[[OFNotifyEx,bool],None]
    """当在对话框中显示文件或文件夹时触发。"""
    OnSelectionChange: Callable[[Object],None]
    """当用户在打开对话框中选择文件或文件夹时触发。"""
    OnTypeChange: Callable[[Object],None]
    """当用户在打开对话框中选择不同的文件类型时触发。"""
    Options: OpenOptions
    """OpenOptions：确定文件选择对话框的外观和行为。

        使用选项属性可以自定义对话框的外观和功能。"""
    OptionsEx: OpenOptionsEx
    """OpenOptionsEx：使用附加标志扩充 Options 属性，这些标志决定文件选择对话框的外观和行为。

        使用 OptionsEx 属性可以进一步自定义文件打开对话框，而不仅限于 Options 属性所涵盖的选项。"""
    Title: str
    """str：指定对话框标题栏中的文本。

        使用标题指定文件选择对话框标题栏中显示的文本。如果没有为“标题”指定任何值，则对话框的标题为“打开”。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TOpenDialog.Create(AOwner: 组件) -> 无

        创建并初始化 TOpenDialog 实例。
        Create 生成一个 TOpenDialog 实例，但新对话框在运行时不会出现在窗体上，直到调用 Execute 方法。
        AOwner 是负责释放 TOpenDialog 实例的组件。它成为所有者财产的价值。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TOpenDialog 并释放其内存。

        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会在调用 Destroy 之前验证 TOpenDialog 引用是否为空。"""
    def Execute(self) -> Any:
        """TOpenDialog.执行()

        显示对话框"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Page(CustomControl):
    """指定 TNotebook 控件中的页面。

    TPage 类实现 TNotebook 控件中的页面。"""
    __hash__: ClassVar[None] = ...
    Caption: str
    """str：指定用于向用户标识控件的文本字符串。

        使用 Caption 指定标记控件的文本字符串。
        要为标记组件的 Caption 中的字符加下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        注意：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。所使用的属性取决于控件的类型。通常，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件（如 TButton），无法更改 Caption 的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型（如 TSpeedButton 或 TBitBtn），而不是 TButton。无论是 TSpeedButton 还是 TBitBtn，您都可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，可以在运行时或设计时在 Caption 属性内声明一个 HTML 标记。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于存储PageControl中所有子控件（包括Page页）的引用。"""
    Focused: Any
    """用于指示当前页面是否具有焦点。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    OnAlignInsertBefore: Callable[[WinControl,Control,Control],bool]
    """当Page控件被对齐到其他控件时，会触发OnAlignInsertBefore事件。"""
    OnAlignPosition: Callable[[WinControl,Control,int,int,int,int,Rect,AlignInfo],None]
    """当Page控件在其父容器中对齐位置时触发。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    ParentWindow: Any
    """用于与Windows API函数进行交互，实现一些高级的控件操作。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。
        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TPage.Create(AOwner: Component) -> 无

        创建 TCustomControl 的实例。
        Vcl.ExtCtrls.TPage.Create继承自Vcl.Controls.TCustomControl.Create。该行以下的所有内容均引用Vcl.Controls.TCustomControl.Create。
        创建 TCustomControl 的实例。
        调用 Create 构造并初始化 TCustomControl 的实例。但是，您永远不应该尝试实例化 TCustomControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。在设计时放置在窗体上的控件是自动创建的。
        调用继承的构造函数后，Create 会初始化该控件及其 Canvas 属性的 TCanvas 对象。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果组件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class PageControl(WinControl):
    """TPageControl 是一组用于制作多页对话框的页面。

    使用 TPageControl 创建多页对话框或选项卡式笔记本。 TPageControl 显示作为 TTabSheet 对象的多个重叠页面。用户通过单击出现在控件顶部的页面选项卡来选择页面。要在设计时向 TPageControl 对象添加新页面，请右键单击 TPageControl 对象并选择“新建页面”。
    您可以为 TPageControl 的页面定义快捷键。要定义快捷键，请使用 TTabSheet 控件的 Caption 属性。
    要创建仅使用单个主体部分（页面）的选项卡式控件，请改用 TTabControl。

    注意：使用其中一个页面控件时，如果要限制用户切换到选项卡，则不能将 TTabSheet.Enabled 设置为 false 来实现该限制。相反，请使用 OnChanging 事件来阻止用户选择选项卡。"""
    __hash__: ClassVar[None] = ...
    ActivePage: Any
    """指定页面控件当前显示的页面。"""
    ActivePageIndex: Any
    """指定页面控件当前显示的页面。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Canvas: Any
    """允许访问选项卡控件画布。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DockSite: bool
    """bool：指定控件是否可以作为拖放操作的目标。

        将 DockSite 设置为 true 以允许其他控件停靠到此窗口控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    HotTrack: bool
    """bool：决定鼠标所在选项卡上的标签是否自动突出显示。

        将 HotTrack 设置为 true 可以向用户提供有关单击鼠标按钮时将选择哪个选项卡的视觉反馈。当选项卡控件包含多行选项卡时，HotTrack 特别有用。"""
    Images: CustomImageList
    """CustomImageList：指定选项卡中绘制的图像。

        图像指定在选项卡中绘制的图像。对于禁用的选项卡，使用图像的灰色版本。
        在 TCustomTabControl 的实现中，图像列表属性中的图像顺序直接对应于控件中的关联选项卡。在后代类 TPageControl 中，此行为被对单个 TTabSheet 对象的支持所取代，每个对象都有一个 ImageIndex 属性。在任何情况下，应用程序程序员都可以通过定义 OnGetImageIndex 事件处理程序来定义自定义图像显示。"""
    MultiLine: bool
    """bool：确定选项卡是否可以出现在多行上。

        使用 MultiLine 确定选项卡的显示方式。如果 MultiLine 为 true，则当选项卡数量超过选项卡控件顶部的数量时，选项卡将显示在多行上。行数由选项卡控件中有多少个选项卡决定。如果 MultiLine 为 false，则选项卡仅显示在一行上，用户必须滚动显示的滚动箭头才能查看所有选项卡。"""
    OnChange: Callable[[Object],None]
    """当用户在PageControl中切换选中的页时，会触发OnChange事件。"""
    OnChanging: Callable[[Object,bool],None]
    """当用户尝试切换到PageControl中的另一个页面时，会触发OnChanging事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """鼠标悬停在PageControl上时触发的事件。"""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """当有控件被拖动到PageControl上方时，会触发OnDockOver事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnDrawTab: Callable[[CustomTabControl,int,Rect,bool],None]
    """用于自定义绘制PageControl控件中标签页（Tab）的外观。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnGetImageIndex: Callable[[Object,int,int],None]
    """当需要获取页签的图像索引时触发。"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """当需要获取有关站点（site）信息时触发。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当用户将鼠标指针移动到PageControl上时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnResize: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """当PageControl控件的一个子控件被取消停靠（undocked）时触发。"""
    OwnerDraw: bool
    """bool：指定选项卡控件是否处理其自己的绘制。

        将 OwnerDraw 设置为 true 以覆盖任何默认绘制行为。"""
    PageCount: Any
    """指示 TPageControl 对象中的页数。"""
    Pages: Any
    """列出 TPageControl 中的所有页面。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父控件的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        将表单中所有控件的 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东地区。
        当控件的 BiDiMode 属性值发生变化时，ParentBiDiMode 会自动变为 false。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

       ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    RaggedRight: bool
    """bool：指定选项卡行是否拉伸以填充控件的宽度。

        使用 RaggedRight 获取或设置选项卡行是否拉伸以填充控件的宽度。"""
    RowCount: Any
    """用于获取PageControl中的标签页行数。"""
    ScrollOpposite: bool
    """bool：确定多行选项卡控件中选项卡行的滚动方式。

        设置 ScrollOpposite 以确定当用户选择另一行中的选项卡时，多行选项卡控件中前几行选项卡的移动位置。当 ScrollOpposite 为 true 时，如果 TabPosition 为 tpTop，则前几行选项卡将移至选项卡控件的底部；如果 TabPosition 为 tpBottom，则前几行选项卡将移至顶部。当 ScrollOpposite 为 false 时，之前的选项卡行将移动到所有其他选项卡行的后面。
        例如，在顶部有三行选项卡的选项卡控件中，如果用户选择第二行中的选项卡，ScrollOpposite 将确定第一行移动的位置。如果 ScrollOpposite 为 true，则第二行现在出现在选项卡控件顶部的前（底）行，后面是其后面（上方）的第三行。第一行移动到选项卡控件的底部。如果 ScrollOpposite 为 false，则第一行移动到后面（顶部），以便选项卡控件在前面显示第二行（位于选项卡区域的底部），然后是第三行（现在位于中间），然后是由第一行。

        注意：将 ScrollOpposite 设置为 true 会自动将 MultiLine 属性设置为 true。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Style: TabStyle
    """TabStyle：指定选项卡控件的样式。

        使用样式来确定选项卡的外观。它们可以显示为笔记本选项卡或按钮。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabHeight: int
    """int：指定选项卡控件中选项卡的高度（以像素为单位）。

        设置 TabHeight 以控制显示在选项卡控件的客户区域上方的选项卡的高度。 TabHeight 属性是各个选项卡的垂直尺寸（以像素为单位）。如果 TabHeight 设置为 0，选项卡会自动调整自身大小以适合其文本。"""
    TabIndex: int
    """int：标识选项卡控件上选定的选项卡。

        读取 TabIndex 以确定用户选择了哪个选项卡。TabIndex 是 Tabs 属性维护的标签列表中选项卡的索引。第一个（最左边）选项卡的 TabIndex 为 0，下一个为 1，依此类推。如果未选择任何选项卡，则 TabIndex 的值为 -1。
        设置 TabIndex 以编程方式更改选项卡控件中选定的选项卡。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabPosition: TabPosition
    """TabPosition：确定选项卡是显示在顶部还是底部。

        将 TabPosition 设置为 tpTop 以在选项卡控件的顶部显示选项卡。将 TabPosition 设置为 tpBottom 以在底部显示选项卡。如果 ScrollOpposite 属性为 True，则选项卡可以出现在顶部和底部，其中包含当前选项卡的行以及 TabPosition 指示的一侧的所有后续行。
        由于Windows通用控件的限制，如果TabPosition为tpLeft或tpRight，则Font必须为True Type字体。否则，选项卡文本可能绘制不正确。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    TabWidth: int
    """int：指定选项卡控件中选项卡的水平尺寸（以像素为单位）。

        TabWidth 指定所有选项卡的固定宽度。如果 TabWidth 为 0，则每个选项卡都会自动变宽，足以显示其标题。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TPageControl.Create(AOwner: Component) -> 无

        创建 PageControl 的实例。
        调用 Create 在运行时实例化页面控件。在设计时添加到表单的页面控件是自动创建的。
        AOwner 是页面控件应出现的形式。它成为所有者财产的价值。
        在运行时创建页面控件时，必须以编程方式添加页面。要在运行时将页面添加到页面控件，请为该页面创建 TTabSheet 对象并设置其 PageControl 属性。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TPageControl 的实例。

        不要直接在应用程序中调用 Destroy。相反，请先调用Free。 Free 验证 TPageControl 引用不为空，然后才调用 Destroy。 Destroy 释放保存控件页面的 TList 对象，然后调用继承的析构函数。"""
    def FindNextPage(self) -> Any:
        """TPageControl.FindNextPage()

        返回页面控件中指定页面之前或之后的下一页。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TPageControl.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        为页面控件中的每个页面调用指定的过程。
        调用 GetChildren 为页面控件中的每个页面执行回调。 Proc 参数是回调。 TPageControl 会忽略 Root 参数。
        GetChildren 主要用于加载和保存组件的流系统。"""
    def GetHitTestInfoAt(self) -> Any:
        """TPageControl.GetHitTestInfoAt()

        返回有关某个点相对于选项卡控件的客户区的位置的信息。"""
    def IndexOfTabAt(self) -> Any:
        """TPageControl.IndexOfTabAt()

        指示指定点处选项卡的索引。"""
    def ScrollTabs(self) -> Any:
        """TPageControl.ScrollTabs()

        当选项卡控件不是多行时，滚动可见的选项卡。"""
    def SelectNextPage(self) -> Any:
        """TPageControl.SelectNextPage()

        将 ActivePage 更改为当前活动页面之前或之后的第一个可见页面。"""
    def TabRect(self) -> Any:
        """TPageControl.TabRect()

        返回指定选项卡的边界矩形。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class PaintBox(Control):
    """TPaintBox 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    Canvas: Canvas
    """用于在PaintBox上进行绘图操作。TCanvas是一个用于绘制图形和文本的画布对象，可以在控件上绘制各种图形、文本和图像。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当用户将鼠标指针在PaintBox控件上移动时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnPaint: Callable[[Object],None]
    """当PaintBox控件需要重绘时触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    Parent: Any
    """用于获取或设置PaintBox控件的父容器控件。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentFont: bool
    """用于指定PaintBox控件是否继承其父级控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TPaintBox.Create(AOwner: Component) -> 无

        创建 TControl 的实例。
        调用 Create 构造并初始化 TControl 的实例。但是，您永远不应该尝试实例化 TControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。
        Create 调用父构造函数并初始化控件。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        用于隐藏PaintBox控件，即使其不可见。"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Panel(CustomControl):
    """TPanel 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """用于设置Panel控件内部子控件的对齐方式。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        使用 BiDiMode 可使控件在应用程序运行在从右到左而不是从左到右阅读的区域设置中时自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """边框样式："""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用 Color 读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父级的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        除非您将 TLabel.Transparent 设置为 False，否则 TLabel 的 Color 始终是背景颜色。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """用于存储Panel控件内部包含的子控件（例如按钮、标签等）。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DockManager: IDockManager
    """IDockManager：指定控件的停靠管理器界面。

        使用 DockManager 指定控件的停靠管理器。对接管理器处理对接区域（控件对接的位置）的布局以及与对接区域相关的任何绘制。
        如果将 DockSite 和 UseDockManager 设置为 true，但不为 DockManager 赋值，则窗口控件将使用全局 DefaultDockTreeClass 变量生成默认停靠管理器。"""
    DockSite: bool
    """bool：指定控件是否可以作为拖放操作的目标。

        将 DockSite 设置为 true，以允许其他控件停靠到此窗口控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    FullRepaint: bool
    """用于指定当Panel控件重绘时是否进行完全重绘。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Locked: bool
    """用于指示Panel控件是否被锁定。"""
    OnAlignInsertBefore: Callable[[WinControl,Control,Control],bool]
    """当Panel控件被对齐到另一个控件之前时触发。"""
    OnAlignPosition: Callable[[WinControl,Control,int,int,int,int,Rect,AlignInfo],None]
    """当Panel控件被对齐到其父控件时触发。"""
    OnCanResize: Callable[[Object,int,int,bool],None]
    """当用户尝试调整Panel控件的大小时触发。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnConstrainedResize: Callable[[Object,int,int,int,int],None]
    """可调用[[对象，int，int，int，int]，无]："""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """当用户双击Panel控件时触发。"""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """当一个控件被拖放到Panel控件上并成功停放时触发。"""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """当一个控件被拖动到Panel控件上方时触发。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """当Panel控件作为一个站点（site）时，用于获取有关站点信息的事件。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当用户在Panel控件上移动鼠标时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """当用户在Panel控件上释放鼠标按钮时触发。"""
    OnResize: Callable[[Object],None]
    """当Panel控件的大小发生改变时触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """当Panel控件从其父控件中解除停靠（undock）时触发。"""
    Padding: Padding
    """填充：指定控件的填充。

        使用 Padding 指定控件的填充。该值是 TPadding 类的实例。"""
    ParentBackground: bool
    """bool：确定控件是否使用其父级的主题背景。

        如果 ParentBackground 为 True，则控件使用父级的主题背景来绘制自己的背景。
        如果 ParentBackground 为 False，则控件使用其自己的属性（例如 Color）来绘制其背景。
        除非启用 XP 主题，否则 ParentBackground 无效。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指定是否继承父级控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于与Windows API函数进行交互，实现一些高级的控件操作。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowCaption: bool
    """用于控制 Panel 控件是否显示标题栏。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    UseDockManager: bool
    """bool：指定在拖放操作中是否使用停靠管理器。

        使用 UseDockManager 获取或设置是否在拖放操作中使用停靠管理器。
        对接管理器处理对接控件的定位以及这些控件周围对接区域的任何绘制。如果不使用停靠管理器，则停靠控件将根据距它们释放位置最近的边缘与窗口控件对齐。当您不使用停靠管理器时，用户没有区域可以抓住来自动取消停靠的控件。"""
    VerticalAlignment: VerticalAlignment
    """垂直对齐："""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以接收焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class PascalInterface:
    """Pascal 记录的包装"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        一次调用即可设置多个属性"""
    def __delattr__(self, name) -> Any:
        """实现 delattr(self, name)。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class PascalRecord:
    """Pascal 记录的包装器"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def __delattr__(self, name) -> Any:
        """用于定义在删除对象的属性时的行为。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Persistent(Object):
    """TPersistent 是所有具有赋值和流功能的对象的祖先。

    TPersistent 封装了所有对象共有的行为，这些对象可以分配给其他对象，并且可以在表单文件（.xfm 或 .dfm 文件）中读取和写入其属性。为此，TPeristic 引入了可以重写的方法：

    定义将未发布的数据加载和存储到流中的过程。
    提供为属性赋值的方法。
    提供将一个对象的内容分配给另一个对象的方法。
    不要创建 TPersistent 的实例。当声明不是组件但需要保存到流或将其属性分配给其他对象的对象时，请使用 TPersistent 作为基类。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """用于获取该对象的类名。"""
    __bound__: Any
    """如果包装器仍然绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Assign(self, persistent) -> Any:
        """TPersistent.Assign（持久）

        将另一个 TPersistent 对象的值分配给该对象"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TPersistent 实例并释放其内存。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证对象引用是否不为空，然后才会调用 Destroy。"""
    def GetNamePath(self) -> Any:
        """TPersistent.GetNamePath()

        返回对象在对象检查器中显示的名称。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Picture(Persistent):
    """TPicture 包含位图、图标、图元文件图形或用户定义的图形。

    TPicture是一个TGraphic容器，用于保存图形，其类型在Graphic属性中指定。如果图形可以属于任何 TGraphic 类，则使用它来代替 TGraphic。 LoadFromFile 和 SaveToFile 是多态的。例如，如果 TPicture 持有一个 Icon，则 LoadFromFile 是有效的位图文件，其中 TIcon 类只能读取 .ICO 文件。
    如果 TPicture 包含位图图形，则 Bitmap 属性指定该图形。如果 TPicture 包含图标图形，则 Icon 属性指定该图形。如果 TPicture 包含图元文件图形，则图元文件属性指定该图形。
    TPicture 的属性指示图片对象包含的图形类型及其大小。 TPicture 的方法用于加载、保存和操作图形。
    要将图片加载或保存到剪贴板，请使用 TClipboard 对象的分配方法。
    要在画布上绘制图片，请调用 TCanvas 对象的 Draw 或 StretchDraw 方法，并将 TPicture 的 Graphic 属性作为参数传递。"""
    __hash__: ClassVar[None] = ...
    Bitmap: Any
    """用于表示和操作位图图像。"""
    Graphic: Any
    """用于表示和处理图形对象。"""
    Height: Any
    """用于获取或设置Picture组件中当前图像的高度。"""
    Icon: Any
    """用于获取或设置Picture组件中的图标（icon）。"""
    Metafile: Any
    """用于获取或设置Picture组件中存储的图像对象为Metafile类型。"""
    OnChange: Callable[[Object],None]
    """当Picture组件的图像发生改变时触发。"""
    OnFindGraphicClass: Callable[[Object,FindGraphicClassContext,GraphicClass],None]
    """当需要确定图形类（graphic class）时触发。"""
    OnProgress: Callable[[Object,ProgressStage,int,bool,Rect,str],None]
    """用于在加载或保存图像时报告进度信息。"""
    PictureAdapter: IChangeNotifier
    """IChangeNotifier：表示图片的 OLE 接口。

        PictureAdapter 仅供内部使用。"""
    WICImage: WICImage
    """用于表示Windows Imaging Component (WIC) 图像。"""
    Width: Any
    """宽度"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Assign(self, Source: Persistent) -> None:
        """通过将一个对象的内容复制到另一个对象来将一个对象复制到另一个对象。
        当 Source 是对 Graphic 属性有效的对象类型时，Assign 使该图形成为 Graphic 属性的值。
        Assign 执行的操作取决于 TPicture Graphic 属性和 Source 的实际类型。例如，如果 Graphic 属性和 Source 都是位图 (TBitmap)，则 Source 中包含的位图将复制到 Graphic 属性中。类似的转换是有效的，例如，对于 TIcon 或 TMetafile。
        如果 Source 参数不是 Graphic 属性的有效对象，Assign 将调用继承的方法，以便可以从与其兼容的任何对象复制图片。"""
    def Create(self, *args, **kwargs) -> Any:
        """创建一个 TPicture 对象。

        调用 Create 在运行时创建 TPicture 的实例。 Create 为图片对象分配内存并初始化其内部格式。创建 TPicture 对象后，使用 LoadFromClipboardFormat 或 LoadFromFile 方法将图形图像分配给图片，以便应用程序可以使用它。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁图片对象的实例。

        不要直接在应用程序中调用 Destroy。而是调用Free。 Free 在调用 Destroy 之前验证 TPicture 引用不为零。
        Destroy 在调用继承的 Destroy 之前释放其包含的图形图像。"""
    def LoadFromClipboardFormat(self, AFormat: int, AData: int, APalette: int) -> None:
        """TPicture.LoadFromClipboardFormat(AFormat: int, AData: int, APalette: int) -> None

        从给定剪贴板格式提供的句柄读取图片。
        使用 LoadFromClipboardFormat 从剪贴板读取图形。如果不支持该格式，则会引发 EInvalidGraphic 异常。"""
    def LoadFromFile(self) -> Any:
        """用于从指定的文件加载图像数据到Picture组件中。"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TPicture.LoadFromStream(Stream: Stream) -> 无

        从流中读取图片。
        使用 LoadFromStream 从 TStream 对象读取图片。创建的 TGraphic 类由流中包含的数据类型决定。
        流中的数据应事先通过调用另一个 TPicture 或 TGraphic 后代的 SaveToStream 方法写入。"""
    @classmethod
    def RegisterClipboardFormat(cls, AFormat: int, AGraphicClass: GraphicClass) -> None:
        """TPicture.RegisterClipboardFormat(AFormat: int, AGraphicClass: GraphicClass) -> 无

        注册一个新的 TGraphic 类以在 LoadFromClipboardFormat 方法中使用。
        使用 RegisterClipboardFormat 向 TPicture 注册新的图形格式，以便它可以与 LoadFromClipboardFormat 方法一起使用。"""
    @classmethod
    def RegisterFileFormat(cls, AExtension: str, ADescription: str, AGraphicClass: GraphicClass) -> None:
        """TPicture.RegisterFileFormat(AExtension: str, ADescription: str, AGraphicClass: GraphicClass) -> None

        注册一个新的 TGraphic 类以在 LoadFromFile 中使用。
        使用 RegisterFileFormat 将图形文件格式注册到 TPicture，以便它可以与“打开”或“保存”对话框一起使用。
        AExtension 参数指定与图形类关联的三字符系统文件扩展名（例如，“bmp”与 TBitmap 关联）。 ADescription 参数指定出现在对话框下拉列表中的图形的描述（例如，“Bitmaps”是 TBitmap 的描述）。 AGraphicClass 参数注册新的图形类以与文件格式关联。"""
    @classmethod
    def RegisterFileFormatRes(cls, AExtension: str, ADescriptionResID: int, AGraphicClass: GraphicClass) -> None:
        """TPicture.RegisterFileFormatRes(AExtension: str, ADescriptionResID: int, AGraphicClass: GraphicClass) -> 无

        注册一个新的 TGraphic 类以在 LoadFromFile 方法中使用。
        通过指定字符串资源来使用 RegisterFileFormatRes。
        AExtension 参数指定与图形类关联的三字符系统文件扩展名（例如，“bmp”与 TBitmap 关联）。
        ADescriptionResID 参数指定图形描述的资源 ID，该描述随后出现在对话框的下拉列表中（例如，“Bitmaps”是 TBitmap 的描述）。
        AGraphicClass 参数注册新的图形类以与文件格式关联。"""
    def SaveToClipboardFormat(self, AFormat: int, AData: int, APalette: int) -> None:
        """TPicture.SaveToClipboardFormat(AFormat: int, AData: int, APalette: int) -> None

        分配全局句柄并以其本机剪贴板格式写入图片（位图为 CF_BITMAP，图元文件为 CF_METAFILE，等等）。
        使用 SaveToClipboardFormat 将图片复制为剪贴板格式。然后可以使用剪贴板的 SetAsHandle 方法将结果值复制到 Windows 剪贴板。
        图片的调色板在 APalette 参数中返回，格式在 AFormat 参数中返回，数据句柄在 AData 参数中返回。在保存图片之前，应用程序必须使用 RegisterClipboardFormat 方法注册格式。'''
    def SaveToFile(self) -> Any:
        """TPicture.SaveToFile()

        用于将Picture组件中的图像保存到指定的文件中。"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TPicture.SaveToStream(Stream: Stream) -> 无

        将图片保存到流中。
        SaveToStream用来将图片保存到Stream参数指定的TStream对象中。
        保存的图片可以通过调用其 LoadFromStream 方法加载到另一个 TPicture 或适当的 TGraphic 后代中。"""
    @classmethod
    def SupportsClipboardFormat(cls, AFormat: int) -> bool:
        """TPicture.SupportsClipboardFormat(AFormat: int) -> bool

        指示 LoadFromClipboardFormat 方法是否支持给定的剪贴板格式。
        如果 LoadFromClipboardFormat 方法支持指定为 AFormat 值的剪贴板格式，则 SupportsClipboardFormat 返回 true。如果不支持该格式，该方法将返回 false。"""
    @classmethod
    def UnregisterGraphicClass(cls, AClass: GraphicClass) -> None:
        """TPicture.UnregisterGraphicClass(AClass: GraphicClass) -> 无

        从文件格式和剪贴板格式的内部列表中删除对指定 TGraphic 类及其所有派生类的所有引用。
        调用 UnregisterGraphicClass 使图形类对所有图片对象不可用。 UnregisterGraphicClass 反转由 RegisterFileFormat、RegisterFileFormatRes 或 RegisterClipboardFormat 方法完成的注册。
        注册图形类时，全局 GraphicFilter、GraphicExtension 和 GraphicFileMask 函数可以返回图形类的对话框过滤器字符串、默认文件扩展名或文件过滤器。当这些值不可用时调用 UnregisterGraphicClass。
        例如，实现自定义图形类的组件编写者根据所使用的语言取消注册这些类。类在实现它们的单元的终结块中取消注册，而在 C++ 中，使用 #pragma exit 指令 (C++) 取消注册类。
        自定义类的文件格式和剪贴板格式在初始化块中注册或使用#pragmastartup（C++）注册。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Point:
    """TPoint 类型的包装器"""
    __hash__: ClassVar[None] = ...
    X: Any
    """提供对点的 X 坐标的访问"""
    Y: Any
    """提供对点的 Y 坐标的访问"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class PopupMenu(Menu):
    """TPopupMenu 封装了弹出菜单的属性、方法和事件。

    使用 TPopupMenu 定义当用户用鼠标右键单击控件时出现的弹出菜单。要使弹出菜单可用，请将 TPopupMenu 对象分配给控件的 PopupMenu 属性。

    提示：要创建用户可以在运行时配置的弹出菜单，请使用带有操作管理器的 TStandardMenuPopup 组件。
    注意：如果弹出菜单的 ParentBiDiMode 为 true，则弹出菜单的 BiDiMode 将设置为激活它的控件的 BiDiMode。如果找不到控件，则 BiDiMode 将设置为 Application 对象的 BiDiMode 的值。弹出菜单的 BiDiMode 会影响其所有菜单项。"""
    __hash__: ClassVar[None] = ...
    Alignment: PopupAlignment
    """PopupAlignment：确定当用户单击鼠标右键时弹出菜单出现的位置。

        设置对齐方式来控制弹出菜单的位置。对齐控制菜单是显示在鼠标左侧、鼠标右侧还是鼠标居中。
        默认情况下，菜单的左上角位于鼠标下方 (paLeft)。"""
    AutoHotkeys: MenuAutoFlag
    """MenuAutoFlag：确定菜单项的快捷键是否可以自动重置。

        设置 AutoHotkeys 以指示菜单是否应自动确保其项目的快捷键在必要时重置，以便每个菜单项都有一个快捷键，并且没有两个项目具有相同的快捷键。这确保了在运行时动态添加的菜单项可以具有不会引入冲突的快捷键。 TMenu 在调整快捷键时尝试保留所有现有的快捷键映射，但可能被迫更改一些以确保每个项目都有唯一的快捷键。
        在显示菜单之前，如果 AutoHotkeys 为 maAutomatic，菜单会检查并调整快捷键映射。当 AutoHotkeys 为 maManual 时，菜单不会更改顶级菜单项，但可能会调整子菜单的快捷键，具体取决于作为子菜单父级的菜单项的 AutoHotkeys 属性。
        当 AutoHotkeys 为 maManual 时，应用程序仍然可以通过调用 Items 属性的 RethinkHotkeys 方法来调整菜单项。 AutoHotkeys 仅控制此调整是否自动发生。

        注意：菜单的 AutoHotkeys 属性链接到实现其 Items 属性的 TMenuItems 对象的 AutoHotkeys 属性。设置一个会设置另一个。"""
    AutoLineReduction: MenuAutoFlag
    """MenuAutoFlag：确定是否自动从菜单中删除多余的分隔栏。

        设置 AutoLineReduction 以指示菜单是否应自动确保菜单不以分隔栏开始或结束，并且两个分隔栏不会彼此相邻出现。这确保了在运行时动态构建的菜单不会在不需要的位置具有分隔栏。
        在显示菜单之前，当 AutoLineReduction 为 maAutomatic 时，它会删除多余的分隔栏。当 AutoLineReduction 为 maManual 时，菜单不会从顶级菜单项中删除分隔符，但可能会从子菜单中删除多余的分隔符，具体取决于作为子菜单父级的菜单项的 AutoLineReduction 属性。
        当 AutoLineReduction 为 maManual 时，应用程序仍然可以通过调用 Items 属性的 RethinkLines 方法来删​​除多余的分隔符。 AutoLineReduction 仅确定此调整是否自动发生。

        注意：菜单的 AutoLineReduction 属性链接到实现其 Items 属性的 TMenuItems 对象的 AutoLineReduction 属性。设置一个会设置另一个。"""
    AutoPopup: bool
    """bool：决定当用户点击鼠标右键时是否自动出现弹出菜单。

        将 AutoPopup 设置为 true 以使当用户在将弹出菜单指定为其 PopupMenu 属性的控件上单击鼠标右键时自动显示弹出菜单。专为 32 位 Windows 设计的键盘上的应用程序键在按下时也会显示此菜单。
        如果应以编程方式控制弹出菜单的外观，请将 AutoPopup 设置为 false。要在 AutoPopup 为 false 时显示弹出菜单，请使用 Popup 方法。"""
    BiDiMode: BiDiMode
    """BiDiMode：确定中东区域设置中的菜单布局。

        设置 BiDiMode 来控制菜单项的布局。 BiDiMode 控制菜单项是从左到右还是从右到左读取。"""
    ComponentCount: Any
    """用于在运行时动态管理PopupMenu组件关联的子组件。"""
    Components: Any
    """用于存储PopupMenu菜单项的子组件。"""
    HelpContext: int
    """int：指定整个弹出菜单的上下文 ID。

        使用 HelpContext 将帮助屏幕与整个弹出菜单相关联。帮助系统中的每个屏幕都应该有一个唯一的上下文 ID。在应用程序中选择组件后，按 F1 将显示与 HelpContext 值关联的帮助屏幕。
        要将帮助屏幕与弹出菜单中的各个项目关联起来，请使用关联的 TMenuItem 对象的 HelpContext 属性。"""
    Images: CustomImageList
    """CustomImageList：列出可以显示在各个菜单项旁边的图像。

        使用图像来保存可以显示在菜单中的菜单项旁边的一组图像。各个菜单项设置其 ImageIndex 属性来指示列表中的哪个图像出现在菜单项标题的左侧。
        列表中的图像应为 16x16。

        提示：如果应用程序使用操作列表，则此属性应该是操作列表的 Images 属性的值。这样，执行相同操作的菜单项和按钮可以显示相同的图像。"""
    MenuAnimation: MenuAnimation
    """MenuAnimation：指定菜单首次显示时的显示方式。

        使用 MenuAnimation 指定弹出菜单在屏幕上的显示方式。菜单可以简单地作为一个整体出现，也可以像从任何边缘拉出的窗帘一样滑入视图。

        注意：MenuAnimation 仅在 Windows 98、NT 5.0 或更高版本上运行时才有效。"""
    OnChange: Callable[[Object,MenuItem,bool],None]
    """当PopupMenu组件的属性发生变化时触发。"""
    OnClose: Callable[[Object],None]
    """当弹出菜单关闭时触发。"""
    OnPopup: Callable[[Object],None]
    """当弹出菜单显示时触发。"""
    Owner: Any
    """表示该 PopupMenu 组件所属的父级组件。"""
    OwnerDraw: bool
    """bool：指定菜单项是否由应用程序绘制。

        将 OwnerDraw 设置为 true 以指示应用程序将在 OnDrawItem 事件处理程序中绘制菜单项。当 OwnerDraw 为 true 时，菜单项在需要在屏幕上呈现时会收到 OnMeasureItem 和 OnDrawItem 事件。
        将 OwnerDraw 设置为 false 以接受默认绘图。当 OwnerDraw 为 false 时，菜单项将在左侧显示标题和可选图像（如果设置了 Images 和 ImageIndex 属性）。
        自绘菜单对于显示选择菜单项时出现的值很有用。例如，在允许用户选择颜色的菜单中，所有者绘制菜单可以显示以指定颜色绘制的矩形，而不是颜色名称。"""
    ParentBiDiMode: bool
    """用于指定PopupMenu组件是否继承其父控件的双向布局模式（BiDiMode）。

        默认情况下，ParentBiDiMode 为 true，表示菜单项的布局遵循关联窗体或控件的 BiDiMode 设置。将 ParentBiDiMode 更改为 false 以覆盖默认 BiDiMode 设置并独立控制菜单的布局。"""
    PopupComponent: Component
    """组件：指示最后响应鼠标右键单击而显示弹出菜单的组件。

        读取 PopupComponent 以确定当前正在使用弹出菜单的控件。在多个控件共享同一弹出菜单的应用程序中，使用 PopupComponent 来确定其中哪个控件显示菜单。
        在以编程方式调用 Popup 方法以显示弹出菜单之前，将 PopupComponent 设置为将控件与菜单关联。"""
    PopupPoint: Point
    """点：表示弹出菜单出现的位置。

        此公共属性在内部使用来定位弹出菜单。它的值由 Popup 方法设置。"""
    TrackButton: TrackButton
    """TrackButton：指定与工具栏按钮关联时哪个鼠标按钮激活弹出菜单。

        使用 TrackButton 指定当鼠标按钮与工具栏按钮关联时激活弹出菜单。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def CloseMenu(self, *args, **kwargs) -> Any:
        """关闭屏幕上的弹出菜单。

        调用 CloseMenu 关闭弹出菜单。"""
    def Create(self, AOwner: Component) -> None:
        """TPopupMenu.Create(AOwner: 组件) -> 无

        创建 TPopupMenu 的实例。
        调用Create创建运行时创建弹出菜单。在设计时放置在表单或数据模块中的弹出菜单是自动创建的。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TPopupMenu 实例。

        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会验证 TPopupMenu 引用不为空，然后才调用 Destroy。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def Popup(self, X: int, Y: int) -> None:
        """TPopupMenu.Popup(X: int, Y: int) -> 无

        在屏幕上显示弹出菜单。
        调用Popup调出弹出菜单。菜单出现在由 X 和 Y 值（以像素为单位）指示的屏幕坐标处。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class PrototypeBindSource(CustomPrototypeBindSource):
    """是用于创建示例数据的绑定源。

    如果您想创建自己的自定义原型绑定源，那么您应该从 TCustomPrototypeBindSource 派生您的类。在设计使用 LiveBindings 框架的应用程序时，您可以使用工具选项板中随时可用的 TPrototypeBindSource 组件来生成绑定的示例数据。"""
    __hash__: ClassVar[None] = ...
    AutoActivate: bool
    """bool：指定是否自动激活绑定源。将 AutoActive 设置为 True 以自动激活。"""
    AutoEdit: bool
    """用于指定在数据源处于编辑模式时是否自动保存修改。"""
    AutoPost: bool
    """用于指定在数据源的数据发生变化后是否自动提交（post）这些变化。"""
    ComponentCount: Any
    """用于获取PrototypeBindSource组件关联的其他组件的数量。"""
    Components: Any
    """用于存储PrototypeBindSource组件关联的其他组件。"""
    FieldDefs: GeneratorFieldDefs
    """用于定义数据源的字段结构。"""
    OnCreateAdapter: Callable[[Object,BindSourceAdapter],None]
    """当需要为数据源创建适配器（adapter）时触发。"""
    Owner: Any
    """用于指定PrototypeBindSource组件的所有者，即该组件所属的父级组件或窗体。"""
    RecordCount: int
    """int： 目前没有任何其他信息。"""
    ScopeMappings: ScopeMappings
    """用于定义数据源的结构和字段映射。

        ScopeMappings 属性指定一个拥有的集合，其元素是范围映射。 ScopeMappings 用于添加可由引用此源组件的表达式引用的名称/值对。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """TComponent.BindMethodsToEvents（前缀）

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父级。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class RadioButton(WinControl):
    """TRadioButton 是系统单选按钮的包装。

    使用 TRadioButton 将单选按钮添加到表单。单选按钮向用户呈现一组互斥的选项，即一次只能选择一组单选按钮中的一个。当用户选择一个单选按钮时，先前选择的单选按钮将变为取消选择。单选按钮经常分组在单选组框（TGroupBox）中。首先将组框添加到窗体中，然后从组件选项板中获取单选按钮并将它们放入组框中。或者，您可以添加一个 TRadioGroup，这是一个已包含单选按钮的组，这样您就不必从工具选项板中获取按钮。
    默认情况下，直接包含在同一窗口控件容器（例如 TRadioGroup 或 TPanel）中的所有单选按钮都会被分组。例如，表单上的两个单选按钮仅当它们包含在单独的容器（例如两个不同的组框）中时才能同时选中。
    Caption 属性可用于定义控件的快捷键。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: LeftRight
    """LeftRight：确定标题相对于单选按钮的位置。

        设置对齐方式以确定单选按钮的标题应显示在单选按钮的左侧 (taLeftJustify) 还是单选按钮的右侧 (taRightJustify)。

        注意：请勿将 Alignment 属性与单选按钮文本区域中的标题对齐方式混淆。标题始终左对齐。对齐仅控制文本区域显示在按钮的哪一侧。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Checked: bool
    """布尔：是否选中"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """用于与Windows API函数进行交互，实现一些高级的控件操作。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当用户将鼠标指针移动到RadioButton控件上时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """可调用[[对象，鼠标按钮，ShiftState，int，int]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指定是否RadioButton控件应该继承其父控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于指定RadioButton控件的父窗口句柄（handle）。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 分配一个值，以便在用户选择控件并单击鼠标右键时显示​​弹出菜单。如果 TPopupMenu 的 AutoPopup 属性为 True，则弹出菜单会自动显示。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WordWrap: bool
    """用于指定当RadioButton控件的文本内容过长时是否自动换行显示。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TRadioButton.Create(AOwner: Component) -> 无

        创建 TRadioButton 的实例。
        调用 Create 在运行时实例化单选按钮。在设计时添加到表单的单选按钮是自动创建的。
        AOwner 是一个组件，通常是一个表单，它成为 Owner 属性的值。所有者负责释放单选按钮对象。"""
    def GetControlsAlignment(self, *args, **kwargs) -> Any:
        """返回控件中任何文本的对齐方式。

        使用 GetControlsAlignment 确定没有 Alignment 属性的控件中文本的方向。
        GetControlsAlignment 重写继承的方法，如果 UseRightToLeftAlignment 返回 false，则返回 taRightJustify。如果 UseRightToLeftAlignment 返回 true，则 GetControlsAlignment 返回与 Alignment 属性相反的值。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class RadioGroup(CustomControl):
    """TRadioGroup 表示一组一起工作的单选按钮。

    TRadioGroup 对象是一个特殊的组框，仅包含单选按钮。直接放置在同一控制组件中的单选按钮被称为“分组”。当用户选中某个单选按钮时，其组中的所有其他单选按钮将变为未选中状态。因此，只有将表单上的两个单选按钮放置在单独的容器（例如组框）中时，才能同时选中它们。
    要将单选按钮添加到 TRadioGroup，请在对象检查器中编辑 Items 属性。 Items 中的每个字符串都会在组框中显示一个单选按钮，并将该字符串作为其标题。 ItemIndex 属性的值确定当前选择的是哪个单选按钮。
    通过设置 Columns 属性，在单列或多列中显示单选按钮。

    注意：将单选组的 BiDiMode 设置为 bdRightToLeft 会自动翻转其单选按钮。 FlipChildren 方法没有任何效果。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Columns: int
    """用于设置或获取RadioGroup控件中单选按钮的列数。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """用于获取RadioGroup控件中包含的子控件的数量。"""
    Controls: Any
    """用于访问RadioGroup控件中的所有子控件。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DefaultHeaderFont: bool
    """用于指示是否使用默认的字体样式来显示RadioGroup控件中的标题文本。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用备用控件，其 Font 属性将更改标题或文本的颜色（如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """用来在Windows操作系统中定位和操作控件。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HeaderFont: Font
    """用于设置或获取 RadioGroup 控件中标题文本的字体属性。"""
    ItemIndex: int
    """用于获取或设置当前选定单选按钮的索引。"""
    Items: Strings
    """用于设置和获取 RadioGroup 控件中每个单选按钮的文本内容。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBackground: bool
    """bool：确定控件是否使用其父级的主题背景。

        如果 ParentBackground 为 True，则控件使用父级的主题背景绘制自己的背景。
        如果 ParentBackground 为 False，则控件使用自己的属性（例如 Color）绘制背景。
        除非启用 XP 主题，否则 ParentBackground 无效。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """用于指定是否继承父控件的 3D 边框效果。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指定是否继承父控件的字体属性。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于指定 RadioGroup 控件的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    RadioTabStop: bool
    """用于指定是否启用单选按钮的 Tab 键切换功能。"""
    ShowFrame: bool
    """用于指定是否显示 RadioGroup 控件的边框。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子窗体，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 子控件，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    WordWrap: bool
    """用于指定是否启用单选按钮文本的自动换行功能。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Rect:
    """TRect 类型的包装器"""
    __hash__: ClassVar[None] = ...
    Bottom: Any
    """提供对矩形底部坐标的访问"""
    BottomRight: Any
    """提供对矩形的 BottomRight 坐标的访问"""
    Left: Any
    """提供对矩形左坐标的访问"""
    Right: Any
    """提供对矩形右坐标的访问"""
    Top: Any
    """提供对矩形顶部坐标的访问"""
    TopLeft: Any
    """提供对矩形左上角坐标的访问"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ResourceStream(CustomMemoryStream):
    """TResourceStream 是一个内存流，提供对应用程序中已编译资源的访问。

    使用 TResourceStream 读取应用程序的资源。 TResourceStream 的实例将单个资源的值保存在内存缓冲区中，应用程序可以访问该资源。
    全局ReadComponentRes函数使用TResourceStream来访问应用程序使用的编译资源。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """用于获取 ResourceStream 对象的类名。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, Instance: int, ResName: str, ResType: PWideChar) -> None:
        """TResourceStream.Create（实例：int，ResName：str，ResType：PWideChar）->无

        创建与特定资源名称和类型关联的 TResourceStream 实例。
        调用Create实例化TResourceStream，传入标识指定实例中资源的参数。 TResourceStream找到资源数据并将其加载到TResourceStream的内存缓冲区中。
        Instance 参数是与包含资源的可执行文件或共享库关联的实例句柄。
        在第一个构造函数语法中，ResName 是与随应用程序一起编译的 .rc 文件中的资源关联的字符串。如果资源与整数 ID 而不是字符串关联，请在井号后使用整数的字符串表示形式。因此，例如，整数标识符为 128 的资源由 ResName #128 来标识。

        注意：通过 ID 指定资源比通过名称指定资源需要更少的内存。
        ResType 参数是标识资源类型的字符串。应用程序可以定义自己的资源类型并通过 .rc 文件中的名称来标识它们。此外，还有许多预定义的资源类型（反映 Windows 资源类型）。要标识属于预定义资源类型之一的资源，请将 ResType 设置为下表中的适当值：

        RT_ACCELERATOR   快捷键和对应操作的数据结构。
        RT_BITMAP   位图资源
        RT_DIALOG   对话框
        RT_FONT   字体资源
        RT_FONTDIR   字体目录资源
        RT_MENU   菜单资源
        RT_RCDATA   应用程序定义的资源（原始数据）
        RT_STRING  字符串表条目
        RT_MESSAGETABLE   消息表条目
        RT_CURSOR   与硬件相关的光标资源
        RT_GROUP_CURSOR   与硬件无关的光标资源
        RT_ICON   依赖于硬件的图标资源
        RT_GROUP_ICON   独立于硬件的图标资源
        RT_VERSION   版本资源ResType。"""
    def CreateFromID(self, Instance: int, ResID: int, ResType: PWideChar) -> None:
        """用于创建一个 ResourceStream 对象并从资源文件中加载指定资源的数据流。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TResourceStream 的实例。

        不要在应用程序中直接调用 Destroy 来销毁 TResourceStream 实例。而是调用Free。 Free 验证 TResourceStream 引用不为空，然后才调用 Destroy。
        Destroy 在调用继承的析构函数之前释放存储资源的内存缓冲区。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def Write(self, Buffer, Count: int) -> int:
        """TResourceStream.Write(Buffer, Count: int) -> int

        重写继承的方法以在尝试将资源写回应用程序时引发异常。
        应用程序不应使用 TResourceStream 写入正在运行的应用程序的资源。当应用程序尝试写入应用程序的资源时，Write 会重写继承的方法以引发 EStreamError 异常。
        由于 TResourceStream 的所有其他数据写入方法（WriteBuffer、WriteComponent）都调用 Write 来进行实际写入，因此调用 TResourceStream 的任何数据写入方法都会引发异常。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。

        __dir__ 方法返回一个包含字符串的列表，这些字符串表示对象的属性名。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class SaveDialog(OpenDialog):
    """TSaveDialog 显示用于保存文件的“另存为”对话框。

    TSaveDialog 显示一个模式 Windows 对话框，用于选择文件名和保存文件。该对话框不会在运行时出现，直到通过调用 Execute 方法激活该对话框。当用户单击“保存”时，对话框将关闭，所选文件名将存储在 FileName 属性中。"""
    __hash__: ClassVar[None] = ...
    FileName: Any
    """用于获取或设置用户选择的文件名。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Execute(self) -> Any:
        """TOpenDialog.执行()

        显示对话框"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ScrollBar(WinControl):
    """TScrollBar 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """用于获取 ScrollBar 控件的子控件数量。"""
    Controls: Any
    """用于访问 ScrollBar 控件的子控件列表。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖停靠操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Kind: ScrollBarKind
    """用于指定滚动条的类型。"""
    LargeChange: int
    """用于设置或获取滚动条的大改变量。"""
    Max: int
    """用于设置或获取滚动条的最大值。"""
    Min: int
    """用于设置或获取滚动条的最小值。"""
    OnChange: Callable[[Object],None]
    """当用户操作滚动条导致数值发生改变时触发该事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnScroll: Callable[[Object,ScrollCode,int],None]
    """在滚动条的值发生变化时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    PageSize: int
    """用于设置或获取滚动条的页面大小。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应具有三维外观。

        ParentCtl3D 是为了向后兼容而提供的。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    Position: int
    """整数："""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SmallChange: int
    """用于设置或获取当用户按下滚动条上的箭头按钮时，滚动条位置发生的小变化量。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TScrollBar.Create(AOwner: Component) -> 无

        创建 TWinControl 的实例。
        调用 Create 来构造并初始化一个新控件，并将新构造的控件插入到其所有者中，如 AOwner 参数所指定的那样。 Create 通过调用所有者的 InsertComponent 方法将控件插入所有者中。
        大多数控件都会重写 Create 以初始化其独特的属性。重写 Create 方法的对象必须始终首先调用继承的 Create 方法，然后继续进行特定于组件的初始化。重写 Create 方法时指定重写指令。
        如果组件的 Create 方法分配资源或内存，请重写 Destroy 方法以释放这些资源。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def SetParams(self, APosition: int, AMin: int, AMax: int) -> None:
        """TScrollBar.SetParams(APosition: int, AMin: int, AMax: int) -> None"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Shape(Control):
    """TShape 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    Brush: Brush
    """刷子："""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    Parent: Any
    """返回/设置控制父级"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    Pen: Pen
    """用于定义 Shape 控件绘制图形时使用的画笔属性。"""
    Shape: ShapeType
    """用于指定 Shape 控件要绘制的形状类型。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TShape.Create(AOwner: 组件) -> 无

        创建 TControl 的实例。
        调用 Create 构造并初始化 TControl 的实例。但是，您永远不应该尝试实例化 TControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。
        Create 调用父构造函数并初始化控件。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TControl 的实例。

        不要直接在应用程序中调用 Destroy。而是调用Free。 Free 验证控件不为空，然后才调用 Destroy。
        应用程序只应在调用构造函数时显式释放控件，而不为控件分配所有者。
        当控制被破坏时，它：

        释放 TFont 对象的 Font 属性。
        调用其继承的析构函数。
        重写 Destroy 以释放在 Create 方法中分配的所有内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并调用继承的 Destroy 作为重新声明方法中的最后一个语句。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果异常从构造函数中逃逸，则调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前检查所有数据字段是否为零。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def StyleChanged(self, Sender: Object) -> None:
        """TShape.StyleChanged(发件人：对象) -> 无"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Size:
    """TSize 类型的包装器"""
    __hash__: ClassVar[None] = ...
    cx: Any
    """提供对尺寸宽度的访问"""
    cy: Any
    """提供对尺寸高度的访问"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class SpeedButton(Control):
    """TSpeedButton 的包装"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    AllowAllUp: bool
    """用于指定是否允许所有 SpeedButton 控件都处于弹起状态。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Caption: str
    """str：指定用于向用户标识控件的文本字符串。

        使用 Caption 指定标记控件的文本字符串。
        要为标记组件的 Caption 中的字符加下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        注意：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。所使用的属性取决于控件的类型。通常，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件（如 TButton），无法更改 Caption 的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型（如 TSpeedButton 或 TBitBtn），而不是 TButton。无论是 TSpeedButton 还是 TBitBtn，您都可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，可以在运行时或设计时在 Caption 属性内声明一个 HTML 标记。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DisabledImageIndex: int
    """作用是指定当 SpeedButton 处于禁用状态（Enabled 属性为 False）时显示的图像的索引。"""
    DisabledImageName: str
    """用于指定当按钮处于禁用（即不可点击）状态时显示的图像名称。"""
    Down: bool
    """用于指示 SpeedButton 控件是否处于按下状态。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Flat: bool
    """用于指定 SpeedButton 控件是否显示为扁平风格。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Glyph: Bitmap
    """用于设置 SpeedButton 控件显示的图像。"""
    GroupIndex: int
    """用于设置或获取SpeedButton控件的分组索引。"""
    HotImageIndex: int
    """指定了一个额外的图像索引，该图像在用户将鼠标悬停在SpeedButton上时会显示。"""
    HotImageName: str
    """用于指定当鼠标悬停在按钮上时显示的图像的名称。"""
    ImageIndex: int
    """用于指定 SpeedButton 控件在关联的 ImageList 控件中显示的图像的索引。"""
    ImageName: str
    """用于指定要在按钮上显示的图像的名称。"""
    Images: CustomImageList
    """自定义图像列表"""
    Layout: ButtonLayout
    """用于指定 SpeedButton 控件中文本和图标的相对位置。"""
    Margin: int
    """用于设置 SpeedButton 控件的边距大小。"""
    NumGlyphs: int
    """用于设置 SpeedButton 控件的图像列表中包含的图像数量"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """用于处理鼠标在窗体或控件上移动的事件。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    Parent: Any
    """用于获取或设置 SpeedButton 控件的父容器控件。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父控件的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        将表单中所有控件的 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东地区。
        当控件的 BiDiMode 属性值发生变化时，ParentBiDiMode 会自动变为 false。"""
    ParentFont: bool
    """用于指定是否将父控件的字体属性应用到 SpeedButton 控件上。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 分配一个值，以便在用户选择控件并单击鼠标右键时显示​​弹出菜单。如果 TPopupMenu 的 AutoPopup 属性为 True，则弹出菜单会自动显示。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    PressedImageIndex: int
    """用于指定 SpeedButton 控件在图像列表中选择的图像索引，当按钮被按下时显示的图像。"""
    PressedImageName: str
    """用于指定 SpeedButton 控件在按下状态时显示的图像的名称。"""
    SelectedImageIndex: int
    """用于指定 SpeedButton 控件在图像列表中选择的图像索引。"""
    SelectedImageName: str
    """用于指定当按钮被选中或按下时显示的图像的名称。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Spacing: int
    """用于设置 SpeedButton 控件中文本和图标之间的间距。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    Transparent: bool
    """用于指定 SpeedButton 控件是否显示为透明。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子窗体，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 子控件，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        用于在某些情况下临时隐藏 SpeedButton 控件，以便在界面布局上腾出空间或改变界面外观。"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重新绘制控件。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件置于所有其他窗口控件之后，或将非窗口控件置于所有其他非窗口控件之后。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class SpinButton(WinControl):
    """TSpinButton 允许用户使用箭头按钮浏览一系列值。

    TSpinButton 是一个带有两个 TTimerSpeedButton 的控件，每个按钮都显示一个箭头。 TSpinButton 允许使用箭头按钮导航一系列值，以自定义控件保存的值。通常，它用于增加或减少焦点控件的值。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """用于获取 SpinButton 控件所包含的子控件数量。"""
    Controls: Any
    """用于访问 SpinButton 控件所包含的子控件列表。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DownGlyph: Bitmap
    """位图：显示在“向下”按钮上的位图。

        DownGlyph 表示出现在“向下”按钮上的位图。
        您可以在单个位图中提供最多四个图像（每个状态一个），具体取决于 DownNumGlyphs 属性的值。所有图像必须具有相同的大小并且彼此相邻并排成一行。
        按钮的四种状态说明如下表：
        向上  该图像在按钮弹起时出现。当按钮具有焦点时也会使用此图像（例如，如果用户使用 Tab 键切换到该按钮）；在这种情况下，将在按钮周围绘制一个焦点矩形。如果位图中不存在其他图像，位按钮也会将此图像用于所有其他状态。
        非激活  该图像通常显示为灰色，表示无法选择该按钮。
        点击  单击按钮时会出现此图像。当用户释放鼠标按钮时，向上图像会重新出现。
        向下  当按钮保持按下状态时，会出现此图像。"""
    DownNumGlyphs: int
    """int：指定出现在向下按钮上的字形数量。

        DownNumGlyphs 指定“向下”按钮上显示的字形数量。如果位图中有多个图像，则必须使用 NumGlyphs 属性指定位图中的图像数量。默认值为 1。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    FocusControl: WinControl
    """WinControl：指定与 TSpinButton 关联的窗口控件。

        使用 FocusControl 将焦点设置到控件。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告控件的屏幕对象句柄是否存在。"""
    OnDownClick: Callable[[Object],None]
    """当用户单击 SpinButton 控件的“减少”按钮时触发该事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnUpClick: Callable[[Object],None]
    """当用户单击 SpinButton 控件的“增加”按钮时触发该事件。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于指定 SpinButton 控件的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    UpGlyph: Bitmap
    """位图：出现在“向上”按钮上的位图。

        UpGlyph 指定出现在“向上”按钮上的位图。
        您可以在单个位图中提供最多四个图像（每个状态一个），具体取决于 UpNumGlyphs 属性的值。所有图像必须具有相同的大小并且彼此相邻并排成一行。
        按钮的四种状态说明如下表：
        Up   该图像在按钮弹起时出现。当按钮具有焦点时也会使用此图像（例如，如果用户使用 Tab 键切换到该按钮）；在这种情况下，将在按钮周围绘制一个焦点矩形。如果位图中不存在其他图像，位按钮也会将此图像用于所有其他状态。
        Disabled   该图像通常显示为灰色，表示无法选择该按钮。
        Clicked   单击按钮时会出现此图像。当用户释放鼠标按钮时，向上图像会重新出现。
        Down   当按钮保持按下状态时，会出现此图像。"""
    UpNumGlyphs: int
    """int：向上按钮上出现的字形数量。

        UpNumGlyphs 指定“向上”按钮上显示的字形数量。如果位图中有多个图像，则必须使用 NumGlyphs 属性指定位图中的图像数量。默认值为 1。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TSpinButton.Create(AOwner: Component) -> 无

        创建并初始化 TSpinButton 实例。
        Create 方法创建并初始化一个 TSpinButton 实例。"""
    def SetBounds(self, ALeft: int, ATop: int, AWidth: int, AHeight: int) -> None:
        """TSpinButton.SetBounds(ALeft: int, ATop: int, AWidth: int, AHeight: int) -> 无

        在单个操作中设置控件的 Left、Top、Width 和 Height 属性。
        SetBounds 在单个操作中设置控件的 Left、Top、Width 和 Height 属性。将 Left、Top、Width 和 Height 属性的值分别指定为 ALeft、ATop、AWidth 和 AHeight 参数的值。通过分别设置 Left、Top、Width 和 Height 属性可以实现相同的效果。
        SetBounds调用SetBounds继承的方法。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class SpinEdit(CustomEdit):
    """TSpinEdit 将 TEdit 框与 TSpinButton 结合在一起。

    TSpinEdit 组件是附加了 TSpinButton 的 TEdit。
    编辑框的值是数字。通过按 TSpinButton 的向上和向下按钮，可以增加或减少 Value。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSelect: bool
    """bool：决定当控件获得焦点时是否自动选择编辑控件中的所有文本。

        设置自动选择以在编辑控件获得焦点时选择所有文本。自动选择仅适用于单行编辑控件。
        当用户更有可能替换编辑控件中的文本而不是追加到其中时，请使用自动选择。"""
    AutoSize: bool
    """bool：确定编辑控件的高度是否自动调整大小以适应文本。

        使用 AutoSize 使编辑控件自动调整其大小，以便工作区适应文本的高度。当 AutoSize 为 false 时，编辑控件具有固定高度。当 AutoSize 为 true 时，只要发生可能影响控件高度的更改（例如字体或边框样式的更改），控件的大小就会重新调整。

        注意：AutoSize 仅调整编辑控件的高度。即使将 AutoSize 设置为 true，编辑控件中的文本如果超出控件的宽度，也可能会被截断。"""
    Button: SpinButton
    """SpinButton：指定 TSpinEdit 的 TSpinButton。

        Button 是一个只读属性，指定 TSpinEdit 的旋转按钮。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    EditorEnabled: bool
    """bool：指定Value是否可以编辑。

        EditorEnabled 指定值是否可以编辑。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Increment: int
    """int：指定增量值。

        Increment 指定用于增加或减少 Value 属性的增量，方法是在 TSpinEdit 获得焦点时单击 TSpinEdit 按钮之一或使用向上和向下键。"""
    MaxLength: int
    """int：指定用户可以输入到编辑控件中的最大字符数。

        使用 MaxLength 限制可以输入到编辑控件中的字符数。值 0 表示没有应用程序定义的长度限制。
        如果编辑控件中的文本将被复制到固定长度的缓冲区中，则可以使用 MaxLength 来限制该文本的长度。

        注意：设置 MaxLength 不会截断现有文本，它只是阻止用户在达到 MaxLength 字符限制后添加更多文本。
        注意：即使 MaxLength 为 0，操作系统也可能对可输入编辑控件的字符数施加限制。
        注意：如果应用程序使用主题，则 MaxLength 的单位是字符（而不是字节）。"""
    MaxValue: int
    """int：指定最大值。

        MaxValue 指定 TSpinEdit 可以采用的最大值。"""
    MinValue: int
    """int：指定最小值。

        MinValue 指定 TSpinEdit 可以采用的最小值。"""
    OnChange: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """bool：确定用户是否可以更改编辑控件的文本。

        要将编辑控件限制为仅显示，请将 ReadOnly 属性设置为 true。将 ReadOnly 设置为 false 以允许编辑编辑控件的内容。
        将 ReadOnly 设置为 true 可确保文本不被更改，同时仍允许用户选择文本。然后应用程序可以操作所选文本，或将其复制到剪贴板。"""
    SelStart: Any
    """返回/设置光标的位置。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Value: int
    """int：指定 TSpinEdit 中列出的值。

        Value 指定 TSpinEdit 中列出的值。可以通过单击 TSpinEdit 按钮之一或在 TSpinEdit 聚焦时使用向上和向下键来更改该值。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TSpinEdit.Create(AOwner: Component) -> None

        创建并初始化 TSpinEdit 实例。
        Create 方法创建并初始化 TSpinEdit 实例。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TSpinEdit 实例。

        Destroy 方法销毁 TSpinEdit 实例。 Destroy 调用 Destroy 继承的方法。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TSpinEdit.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        对于 SpinEdit 控件，由于它是一个简单的控件，通常不包含其他子控件，因此调用 GetChildren 函数可能不会返回任何子控件。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Splitter(Control):
    """TSplitter 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    AutoSnap: bool
    """用于指定当用户拖动 Splitter 控件时是否自动对齐到相邻控件的边界。"""
    Beveled: bool
    """用于指定是否为 Splitter 控件显示斜角效果。"""
    Canvas: Canvas
    """用于在 Splitter 控件上进行绘图操作。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    Cursor: int
    """int：指定当鼠标指针进入控件覆盖的区域时用于表示鼠标指针的图像。

        更改 Cursor 的值以在鼠标指针进入控件时向用户提供反馈。 Cursor 的值是由全局变量 Screen 维护的光标列表中光标的索引。除了 TScreen 提供的内置光标之外，应用程序还可以将自定义光标添加到列表中。"""
    MinSize: int
    """用于设置或获取 Splitter 控件的最小尺寸。"""
    OnCanResize: Callable[[Object,int,bool],None]
    """用于确定是否允许用户调整 Splitter 的大小。"""
    OnMoved: Callable[[Object],None]
    """作用是在用户拖动 Splitter 控件并释放鼠标时触发相应的操作或处理。"""
    OnPaint: Callable[[Object],None]
    """当 Splitter 控件需要进行绘制时触发该事件。"""
    Parent: Any
    """用于获取或设置 Splitter 控件的父级容器。"""
    ParentColor: bool
    """用于指定是否继承父控件的颜色属性。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ResizeStyle: ResizeStyle
    """调整大小样式："""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。

        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TSplitter.Create(AOwner: 组件) -> 无

        创建 TControl 的实例。
        调用 Create 构造并初始化 TControl 的实例。但是，您永远不应该尝试实例化 TControl。此类仅用作其他控件类的派生基类，并且您应该只调用 Create 来实例化这些派生类之一。
        Create 调用父构造函数并初始化控件。
        当重写 Create 时，始终首先调用继承的 Create 方法，然后继续进行控件的初始化。请记住在重写 Create 方法时指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还需重写析构函数以释放这些资源。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TControl 的一个实例。

        不要在应用程序中直接调用 Destroy。而是调用 Free。Free 会验证控件是否为空，然后才调用 Destroy。
        应用程序应仅在调用构造函数时显式释放控件，而无需为控件分配所有者。
        销毁控件时，它会：

        释放其 Font 属性中的 TFont 对象。
        调用其继承的析构函数。
        重写 Destroy 以释放 Create 方法中分配的任何内存或资源。在后代控件类型中声明 Destroy 方法时，始终将 override 指令添加到声明中，并将继承的 Destroy 作为重新声明的方法中的最后一个语句调用。
        创建控件时，会自动提供围绕构造函数调用的异常处理。如果构造函数中出现异常，则会调用析构函数。这意味着析构函数代码必须准备好清理部分构造的实例。在处理其内容之前，请检查所有数据字段是否为零。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        使 Splitter 控件在界面上不可见，即隐藏 Splitter。"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件置于所有其他窗口控件之后，或将非窗口控件置于所有其他非窗口控件之后。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(Left, Top, Width, Height)

        一次性设置 Left、Top、Width 和 Height 属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class StaticText(WinControl):
    """TStaticText 是一个在窗体上显示文本的窗口控件。

    TStaticText 组件的功能与 TLabel 类似，只是它继承自 TWinControl，因此具有窗口句柄。当组件的快捷键必须属于窗口控件（例如在 ActiveX 属性页上）时，请使用 TStaticText 而不是 TLabel。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: Alignment
    """用于设置StaticText控件中文本的对齐方式。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜角的切割。

        使用 BevelInner 指定内斜角是否具有凸起、降低或平坦的外观。
        内斜角立即出现在外斜角内部。如果没有外斜角（BevelOuter 为 bvNone），则内斜角会立即出现在边框内部。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜面样式。

        使用 BevelKind 修改斜面的外观。BevelKind 影响斜面的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜面切口相结合，可以创建各种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜面的切割。

        使用 BevelOuter 指定外斜面是凸起、降低还是平坦的外观。
        外斜面立即出现在边框内和内斜面的外部。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: StaticBorderStyle
    """静态边框样式："""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放停靠操作。

        使用 DragMode 控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可在运行时禁用拖放或拖放停靠功能。通过将 DragMode 设置为 dmAutomatic，可启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    FocusControl: WinControl
    """用于指定StaticText控件的焦点控件，即当用户按下Tab键时，焦点会自动跳转到FocusControl属性所指定的WinControl控件上。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
     """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """作用是在鼠标在 StaticText 控件上移动时触发相应的操作或处理。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """作用是响应用户在StaticText控件上释放鼠标按钮的操作。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """作用是在用户开始将 StaticText 控件停靠到另一个控件上时触发相应的操作或处理。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBiDiMode: bool
    """用于控制StaticText控件是否继承其父控件的颜色、字体和双向模式设置。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指定StaticText控件是否继承其父控件的颜色。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指定StaticText控件是否继承其父控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于指定StaticText控件的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowAccelChar: bool
    """用于控制StaticText控件中是否显示快捷键字符。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Transparent: bool
    """布尔：是否透明"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class StatusBar(CustomStatusBar):
    """TStatusBar 代表状态栏。

    TStatusBar 组件是一行面板，通常在窗体底部对齐，用于显示应用程序运行时的信息。每个面板都由 Panels 属性中列出的 TStatusPanel 对象表示。 SimplePanel 属性可用于在运行时在单面板显示和多面板显示之间切换状态栏。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中响应用户命令。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以调出操作列表编辑器。使用其上下文菜单在编辑器中添加操作。使用操作列表编辑器添加操作后，它们将显示在对象检查器中 Action 属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoHint: bool
    """bool：指定状态栏的文本是否自动设置为当前提示。

        使用 AutoHint 指定状态栏的文本是否自动设置为当前提示。当 AutoHint 为 True 时，状态栏通过在第一个面板中显示提示文本的长版本来自动响应提示操作。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        使用 BiDiMode 可使控件在应用程序运行在从右到左而不是从左到右阅读的区域设置中时自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放停靠操作。

        使用 DragMode 控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可在运行时禁用拖放或拖放停靠功能。通过将 DragMode 设置为 dmAutomatic，可启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。某些禁用的控件会变暗（例如：按钮、复选框、标签），而其他控件（容器控件）只会失去其功能而不会改变其外观。如果将 Enabled 设置为 False，则控件会忽略鼠标、键盘和计时器事件。

        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnCreatePanelClass: Callable[[CustomStatusBar,StatusPanelClass],None]
    """作用是在需要为状态栏创建新的面板类时触发"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
     """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnDrawPanel: Callable[[StatusBar,StatusPanel,Rect],None]
    """作用是在需要绘制状态栏面板时触发相应的操作或处理。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnHint: Callable[[Object],None]
    """作用是在鼠标悬停在StatusBar控件上时触发相应的操作或处理。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """作用是在鼠标在StatusBar控件上移动时触发相应的操作或处理。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnResize: Callable[[Object],None]
    """作用是在StatusBar控件的大小发生变化时触发相应的操作或处理。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    Panels: StatusPanels
    """StatusPanels：列出状态栏中的面板（TStatusPanel 对象）。

        Panels 属性保存一个 TStatusPanels，即 TStatusPanel 对象的集合。在设计时，您可以使用面板编辑器添加、删除或修改面板。要打开面板编辑器，请在对象检查器中选择面板属性，然后双击右侧的值列或单击省略号 (...) 按钮。
        在设计时，您可以使用面板编辑器添加、删除或修改面板：

        要从对象检查器打开面板编辑器，请选择面板属性，然后双击右侧的值列或单击省略号 (...) 按钮。
        要从表单设计器打开面板编辑器，请右键单击 TStatusBar 并从上下文菜单中选择面板编辑器。"""
    ParentBiDiMode: bool
    """用于指示TabSheet控件是否继承其父控件的双向布局模式（BiDiMode）设置。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指示ToggleSwitch控件是否继承其父控件的颜色设置。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指示TabSheet控件是否继承其父控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool：ShowHint 指定当鼠标指针移到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示会出现在控件正下方的框中。
        要为特定控件启用帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True，并且其父级的 ShowHint 属性必须为 True。
        例如，想象一个组框内的复选框。如果组框的 ShowHint 属性为 True，复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍会显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SimplePanel: bool
    """bool：确定状态栏是显示单个面板还是多个面板。

        如果 SimplePanel 设置为 True，则状态栏包含一个以 SimpleText 形式显示文本的面板。如果 SimplePanel 设置为 False，状态栏会为其 Panels 属性中的每个项目显示一个单独的面板。

        注意：当 SimplePanel 为 False 时，无法使用 SimpleText 属性在状态栏中显示文本。相反，您必须在面板对象之一上设置 Text 属性。"""
    SimpleText: str
    """str：包含当 SimplePanel 为 True 时要在状态面板中显示的文本字符串。

        注意：Microsoft Windows XP 和早期版本将字符串的大小限制为 127 个字符。在 Microsoft Windows Vista、Windows 7 或更高版本的 Windows 操作系统下，SimpleText 没有此类限制。"""
    SizeGrip: bool
    """bool：确定状态栏在运行时是否可调整大小。

        如果 SizeGrip 设置为 True，则状态栏右下角有一个三角形夹点。用户可以通过用鼠标拖动夹点来调整状态栏的大小。
        除非 Parent 属性引用 BorderStyle 为 bsSizeable 或 bsSizeToolWin 的 TCustomForm 后代的子级，否则不会绘制尺寸夹点。

        注意：如果“对齐”设置为 alBottom、alRight 或 alClient，则调整大小夹点将不起作用。如果状态栏中最后一个面板的 Alignment 属性设置为 taRightJustify，则调整大小夹点将截断面板的文本。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    UseSystemFont: bool
    """bool：指定状态栏是否使用系统字体。

        UseSystemFont 指定状态栏是否使用系统字体。要更改字体，请使用 Font 属性。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Stream(Object):
    """TStream 是流对象的基类类型，可以读取或写入各种存储介质，例如磁盘文件、动态内存等。

    使用专门的流对象读取、写入或复制存储在特定介质中的信息。 TStream 的每个后代都实现了在特定存储介质（例如磁盘文件、动态内存等）之间传输信息的方法。除了从流中读取、写入和复制字节的方法之外，流对象还允许应用程序查找流中的任意位置。 TStream 的属性提供有关流的信息，例如流的大小和流中的当前位置。
    TStream 还引入了与组件和文件管理器结合使用的方法，用于以简单和继承的形式加载和保存组件。这些方法由启动组件流的全局例程自动调用。也可以直接调用它们来启动流处理。但请注意，组件流始终涉及两个附加对象：

    作为参数传递给流方法的组件对象。
    由流自动创建并与流关联的文件管理器对象。
    后代流对象，例如用于组件流的内存和文件流，由全局函数 ReadComponentRes 和 WriteComponentRes 自动创建。对于流式传输其他类型的信息，请根据特定的数据和存储需求选择子类。这些包括：

    TFileStream——用于处理文件。
    TStringStream——用于操作内存中的字符串。
    TMemoryStream——用于处理内存缓冲区。
    TWinSocketStream——用于通过套接字连接读取和写入。
    TOleStream——用于使用 COM 接口进行读写。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """用于获取Stream对象的类名。"""
    Position: int
    """int：表示当前读取和写入流中的偏移量。

        使用 Position 获取流的当前位置。这是从流数据开头算起的字节数。"""
    Size: int
    """int：表示流的大小（以字节为单位）。

        使用 Size 查找流的大小。大小在从流读取和写入的例程内部使用。设置 TStream 的 Size 属性不会执行任何操作。但是，TStream 的后代可以重写此属性，以允许应用程序更改使用流访问的资源的大小。
        Size 属性通常指示流的大小（以字节为单位）。但 TStream 的后代可以使用 -1 来指示未知的大小。当大小未知时，使用 TStream.Read 的返回值来确定流的结尾。

        使用 DataSnap 和 DBX 的流大小示例
        当您以块的形式读取 DataSnap 流时，用于读取流的实际 TStream 后代是 TDBXStreamReaderStream。 TDBXStreamReaderStream 重写 TStream 的方法，例如方法 System.Classes.TStream.GetSize，它是属性 Size 的读取器。
        DBX 连接支持按块读取流。默认块大小为 32K。流可以从客户端传递到服务器，也可以从服务器传递到客户端。当接收方正在读取流时（无论接收方是客户端还是服务器），流都会以块的形式从发送方传递到接收方。
        当流大到需要多个块读取时，接收方流的 Size 属性将为 -1，这表明流的大小未知。当接收方读取流时，DataSnap 根据需要向发送方发出下一个块的请求。要读取流，客户端调用 Read() 方法，直到返回值小于请求的值。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CopyFrom(self, Source: Stream, Count: int, BufferSize: int) -> int:
        """TStream.CopyFrom(源：Stream，计数：int，BufferSize：int) -> int

        将指定数量的字节从一个流复制到另一个流。
        使用 CopyFrom 将数据从一个流复制到另一个流。使用 CopyFrom 无需在复制数据时创建、读取、写入和释放缓冲区。
        CopyFrom 将 Source 指定的流中的 Count 字节复制到流中。然后它将当前位置移动 Count 个字节并返回复制的字节数。
        如果Count为0，CopyFrom在读取之前将Source位置设置为0，然后将Source的全部内容复制到流中。如果 Count 大于或小于 0，则 CopyFrom 从 Source 中的当前位置读取。
        由于 CopyFrom 方法使用 ReadBuffer 和 WriteBuffer 进行有效复制，因此如果 Count 大于 SourceStream 大小，ReadBuffer 会抛出异常，表明发生了流读取错误。"""
    def FixupResourceHeader(self, FixupInfo: int) -> None:
        """TStream.FixupResourceHeader(FixupInfo: int) -> 无

        修补已写入流的资源的资源标头。
        不调用FixupResourceHeader？它在内部使用。 WriteDescentRes 方法在将组件写入流后调用 FixupResourceHeader。然后该方法使用当前位置来确定刚刚写入的资源的大小并相应地调整资源头。
        FixupInfo 参数是 WriteResourceHeader 在写入资源标头时（在 WriteDescentRes 流出组件之前）返回的值。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def Read(self, Buffer, Count: int) -> int:
        """TStream.Read(Buffer, Count: int) -> int

        负责从流中读取最多 Count 个字节的数据到 Buffer 中的方法。
        后代流类可以定义自己的 Read 方法，将数据从其特定存储介质（例如内存或磁盘文件）读取到 Buffer 缓冲区中。
        Read 用于从流中读取的字节数不一定固定的情况。
        Read 尝试从当前位置开始从流中读取最多 Count 个字节，然后将流中的当前位置前进实际传输的字节数。 Read返回实际读取的字节数，可能小于Count。
        Offset 指定 Buffer 中从零开始的位置，从该位置将第一个字节写入 Buffer。
        流的所有其他数据读取方法（ReadBuffer、ReadData）都调用 Read 来进行实际读取。"""
    def Read64(self, Buffer: tuple, Offset: int, Count: int) -> int:
        """TStream.Read64（缓冲区：元组，偏移量：int，计数：int）-> int

        用于从数据流中读取64位整数数据。。"""
    def ReadBuffer(self, Buffer, Count: int) -> None:
        """TStream.ReadBuffer(Buffer, Count: int) -> None

        将 Count 个字节从流读入缓冲区。
        在要读取的字节数已知且固定的情况下（例如在结构中读取时），使用 ReadBuffer 将 Count 个字节从流读取到 Buffer 缓冲区中。 ReadBuffer 在内部用于从流加载和从流复制。
        Read 尝试从当前位置开始从流中准确读取 Count 个字节，然后将流中的当前位置前进实际传输的字节数。
        Offset 指定 Buffer 中从零开始的位置，从该位置将第一个字节写入 Buffer。
        ReadBuffer 调用 Read 来进行实际读取。如果无法从流中读取 Count 个字节，则会引发 EReadError 异常。"""
    def ReadBufferData(self, Buffer: bool) -> None:
        """TStream.ReadBufferData(Buffer: bool) -> None

        负责将固定 Count 或 SizeOf(Buffer) 数量的字节从流读取到 Buffer 中的方法。
        使用 ReadBufferData 将固定 Count 或 SizeOf(Buffer) 数量的字节从流中准确读取到类型化 Buffer 中。如果 ReadBufferData 无法准确读取指定的字节数，则 ReadBufferData 将引发 EReadError 异常。
        ReadBufferData 使用以下算法工作：

        当 ReadBufferData 没有 Count 参数时，ReadBufferData 尝试读取 SizeOf(Buffer) 字节数，然后将流中的当前位置前进所传输的字节数。如果传输的字节数等于SizeOf(Buffer)，则 ReadBufferData 引发 EReadError 异常。
        当ReadBufferData有Count参数时，ReadBufferData调用ReadData来读取Count字节。如果报告的传输字节数不等于 Count，则 ReadBufferData 会引发 EReadError 异常。
        ReadBufferData 调用 ReadData 来执行实际读取。"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadComponent(self, Instance: Component) -> Component:
        """TStream.ReadComponent(实例: 组件) -> 组件

        启动组件及其属性的流式传输。
        ReadComponent 由全局例程 ReadComponentRes、ReadComponentRes 方法间接调用，或者可以直接调用它来启动组件流。
        ReadComponent 从流中读取数据值并将它们分配给 Instance 的属性。然后，它构造一个读取器对象并调用读取器的 ReadRootComponent 方法来读取 Instance 的属性值，并构造在流中定义的子对象作为 Instance 的子对象。 ReadComponent 返回组件。
        如果 Instance 为空，ReadComponent 将根据流中的类型信息构造一个组件，并返回新构造的组件。"""
    def ReadComponentRes(self, Instance: Component) -> Component:
        """TStream.ReadComponentRes(实例：组件) -> 组件

        从资源文件格式的流中读取组件及其属性。
        ReadComponentRes 由全局例程 ReadComponentResFile 自动调用。如果流的当前位置指向使用 WriteComponentRes 方法写入的组件，也可以直接调用它。
        ReadComponentResFile 创建一个文件流对象，然后调用其 ReadComponentRes 方法。
        ReadComponentRes 首先调用 ReadResHeader 方法从流中读取资源标头。如果流当前位置不包含资源标头，ReadResHeader 将引发 EInvalidImage 异常。然后，ReadComponentRes 调用 ReadComponent 来读取必须在 Instance 上设置的属性。"""
    def ReadData(self, Buffer: Pointer, Count: int) -> int:
        """TStream.ReadData(Buffer: Pointer, Count: int) -> int

        负责从流中读取最多 Count 个但不超过 SizeOf(Buffer) 个字节到 Buffer 的方法。
        ReadData 用于从流中读取的字节数不一定固定的情况。
        ReadData 使用以下算法工作：

        当 ReadData 没有 Count 参数时，ReadData 会尝试读取 SizeOf(Buffer) 个字节，然后将流中的当前位置前进传输的字节数。ReadData 返回读取的字节数。
        当 ReadData 有 Count 参数时，则：
        如果 Count > SizeOf(Buffer)，则 ReadData 会尝试读取 SizeOf(Buffer) 个字节。ReadData 将流中的当前位置前进 Count 个字节。ReadData 返回 Count。
        如果 Count <= SizeOf(Buffer)，则 ReadData 会尝试从流中读取最多 Count 个字节。ReadData 将流中的当前位置前进传输的字节数。 ReadData 返回读取的字节数。
        ReadData 方法调用 Read 进行实际读取。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadResHeader(self, *args, **kwargs) -> Any:
        """从流中读取资源文件头。

        不要直接调用 ReadResHeader。在从资源文件读取组件之前，它由 ReadComponentRes 自动调用。
        读取资源文件标头后，ReadResHeader 将流的当前位置移动到标头之外。如果流不包含有效的资源文件标头，ReadResHeader 将引发 EInvalidImage 异常。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def Seek(self, Offset: int, Origin: int) -> int:
        """TStream.Seek(偏移量：int，原点：int) -> int
        
        将流中的资源移动到指定位置。

        调用Seek方法可以将流在特定存储介质中的当前位置（例如内存或磁盘文件）移动到指定位置。
        Origin 参数用于解释 Offset 参数。Origin 应为以下值之一：
        | 值  | 含义  |
        | --- | ----- |
        | soBeginning | Offset 是从资源的开始处开始计算的。Seek 将位置移动到 Offset 处。Offset 必须大于等于 0。 |
        | soCurrent | Offset 是从资源的当前位置开始计算的。Seek 将位置移动到 Position + Offset 处。 |
        | soEnd | Offset 是从资源的结束处开始计算的。Offset 必须小于等于 0 以表示文件结束前的字节数。 |
        Seek 方法返回 Position 属性的新值。
        Seek 方法由 Position 和 Size 属性调用。
        注意：在 TStream 中实现的两个版本（32 位或 64 位语法）会相互调用。子流类必须至少重写其中一个版本，并且重写的实现不能调用继承的默认实现。"""
    def Seek32(self, Offset: int, Origin: SeekOrigin) -> int:
        """TStream.Seek32(偏移量：int，原点：SeekOrigin) -> int

        Seek32函数的作用是将流的当前位置设置为指定的偏移量。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def Write(self, Buffer, Count: int) -> int:
        """TStream.Write(Buffer, Count: int) -> int

        负责将 Count 个字节从 Buffer 写入流的方法。
        Write 尝试将 Count 个字节从 Buffer 写入流中的当前位置，并返回写入的字节数。
        写入流后，Write 将当前位置前进所写入的字节数。
        偏移量指定缓冲区中要写入的第一个字节的从零开始的位置。
        流的所有其他数据写入方法（WriteBuffer、WriteData）均调用 Write 来进行实际写入。
        每个后代流对象都定义一个 Write 方法，用于将数据写入其特定存储介质（例如内存或磁盘文件）。"""
    def Write64(self, Buffer: tuple, Offset: int, Count: int) -> int:
        """TStream.Write64（缓冲区：元组，偏移量：int，计数：int）-> int

         目前没有任何其他信息。"""
    def WriteBuffer(self, Buffer, Count: int) -> None:
        """TStream.WriteBuffer(Buffer, Count: int) -> None

        将 Count 个字节从 Buffer 写入流中。
        WriteBuffer 尝试将 Count 个字节从 Buffer 写入流中的当前位置，然后 WriteBuffer 将当前位置前进 Count 个字节。如果流无法写入所有请求的字节，则会引发 EWriteError 异常。
        偏移量指定缓冲区中要写入的第一个字节的从零开始的位置。
        使用 WriteBuffer 将数据保存到流中。 WriteBuffer 用于已知且需要写入的字节数的情况，例如写入结构时。使用 WriteBuffer 进行标准文件 I/O 流。
        WriteBuffer 在内部用于写入流。它由其他对象（例如字符串和列表）使用，用于写入存储在缓冲区中的字符串。。
        WriteBuffer 调用 Write 来处理实际的写入操作。"""
    def WriteBufferData(self, Buffer: int, Count: int) -> None:
        """TStream.WriteBufferData(Buffer: int, Count: int) -> None

        将 Buffer 中最多 4 个四字节或 Count 个字节写入流中。
        WriteBufferData 使用以下算法工作：

        如果 Count <= 4，则 WriteBufferData 尝试从当前位置开始将最多 Count 个字节写入流，并将流中的当前位置前进所传输的字节数。
        如果 Count > 4，则 WriteBufferData 尝试从当前位置开始向流写入最多 4 个四个字节，然后前进流中的当前位置，直到从 WriteBufferData 开始之前的初始位置计算字节数执行。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteComponent(self, Instance: Component) -> None:
        """TStream.WriteComponent（实例：组件）->无

        启动将组件及其属性写入流。
        WriteComponent 在组件流系统内部使用，但也可以在将组件写入内存流或数据库 blob 时直接调用。
        WriteComponent 构造一个 writer 对象并调用其 WriteRootComponent 方法将 Instance 指定的组件及其拥有的对象写入流。"""
    def WriteComponentRes(self, ResName: str, Instance: Component) -> None:
        """TStream.WriteComponentRes(ResName: str, Instance: Component) -> None

        将组件及其属性从资源文件格式写入流。
        WriteComponentRes 在流系统内部使用，但也可以在向磁盘上的其他应用程序发送数据时直接调用。 WriteComponentRes 用于需要数据的流组件，例如以资源文件格式存储的位图或图标。
        WriteComponentRes 调用 WriteDescendentRes，传入空作为 Ancestor。因此，WriteDescendentRes 为组件启动流处理的剩余部分，在这种情况下，该组件不是后代。
        要读取使用 WriteComponentRes 编写的组件，请调用 ReadComponentRes 方法。"""
    def WriteData(self, Buffer: tuple, Count: int) -> int:
        """TStream.WriteData(Buffer: tuple, Count: int) -> int

        负责将最多 Count 个字节从 Buffer 写入流的方法。
        WriteData 用于写入流的字节数不一定固定的情况。
        WriteData 使用以下算法工作：

        当 WriteData 没有 Count 参数时，WriteData 会尝试写入 SizeOf(Buffer) 个字节。WriteData 会将流中的当前位置向前移动传输的字节数。WriteData 返回写入的字节数。
        当 WriteData 具有 Count 参数时，则：
        如果 Count > SizeOf(Buffer)，则 WriteData 会尝试写入 SizeOf(Buffer) 个字节。WriteData 会将流中的当前位置向前移动 Count 个字节。
        如果 Count <= SizeOf(Buffer)，则 WriteData 会尝试将最多 Count 个字节写入流，然后将流中的当前位置向前移动传输的字节数。WriteData 返回写入的字节数，该值可能小于 Count。
        WriteData 方法调用 Write 进行实际写入。"""
    def WriteDescendent(self, Instance: Component, Ancestor: Component) -> None:
        """TStream.WriteDescendent(Instance: Component, Ancestor: Component) -> None

        以继承形式流式传输组件及其属性。
        不要直接调用 WriteDescendent。WriteDescendent 由 WriteComponent 自动调用。
        WriteDescendent 构造一个写入器对象，然后调用写入器对象的 WriteDescendent 方法将传入 Instance 的组件写入流式传输。Instance 是从 Ancestor 继承的形式，或者是空。但是，WriteDescendent 永远不会用于写入自有组件，只会用于启动根组件上的流式传输。"""
    def WriteDescendentRes(self, ResName: str, Instance: Component, Ancestor: Component) -> None:
        """TStream.WriteDescendentRes(ResName: str, Instance: Component, Ancestor: Component) -> None

        以继承的形式流式传输组件及其属性。
        不要直接调用 WriteDescendentRes。WriteDescendentRes 会自动调用 WriteComponentRes。
        WriteDescendentRes 使用传入 ResName 的资源名称作为资源名称，将资源文件头写入流中。然后，它调用 WriteDescendent 将 Instance 作为 Ancestor 的后代写入流中。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteResourceHeader(self, ResName: str, FixupInfo: int) -> None:
        """TStream.WriteResourceHeader(ResName: str, FixupInfo: int) -> None

        将资源文件头写入流。
        不调用WriteResourceHeader；它在内部使用。 WriteDescentRes 方法在将组件写入流之前调用 WriteResourceHeader。此方法使用作为资源名称的 ResName 传递的值来写入资源文件标头。它返回 FixupInfo 中的一个位置，在知道资源大小后必须使用该位置来调整标头。 WriteDescentRes 调用 FixupResourceHeader，并在流出组件后返回作为 FixupInfo 的值。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。

        __dir__ 方法返回一个包含字符串的列表，这些字符串表示对象的属性名。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class StringGrid(DrawGrid):
    """TStringGrid 代表一个网格控件，旨在简化字符串和关联对象的处理。

    将 TStringGrid 对象添加到表单中以表格格式呈现文本数据。 TStringGrid 提供了许多属性来控制网格的外观，以及利用网格的表格组织来响应用户操作的事件和方法。
    TStringGrid 引入了将对象与网格中的每个字符串关联起来的能力。这些对象可以封装由呈现给用户的字符串表示的任何信息或行为。
    对于 TStringGrid，DrawingStyle 属性控制当前设置是否对 FixColor、GradientStartColor 和 GradientEndColor 产生任何影响：

    除非您还将 DrawingStyle 设置为 gdsClassic，否则设置固定颜色不会产生任何效果。
    除非将 DrawingStyle 的值设置为 gdsGradient，否则设置 GradientStartColor 和 GradientEndColor 不会产生任何效果。
    注意：如果要在网格中显示的字符串表示数据集中记录的字段值，请改用 TDBGrid。
    注意：要显示字符串和关联的对象或控件，请改用 TDrawGrid。 。"""
    __hash__: ClassVar[None] = ...
    Canvas: Any
    """用于获取StringGrid控件的绘图画布，以便在StringGrid上进行自定义绘图操作，实现更加灵活和个性化的界面效果。"""
    Cells: str
    """用于获取或设置StringGrid控件中特定单元格的文本内容。"""
    Col: Any
    """指定包含所选单元格的列的索引。"""
    ColWidths: Any
    """指定网格的列宽"""
    Cols: Strings
    """用于获取和操作StringGrid控件中每一列的数据。"""
    EditorMode: Any
    """确定当前单元格是否可以编辑。"""
    GridHeight: Any
    """指定网格的高度（以像素为单位）。"""
    GridWidth: Any
    """指定网格的宽度（以像素为单位）。"""
    LeftCol: Any
    """指定网格中第一个可见的可滚动列的索引。"""
    Objects: Object
    """将StringGrid中每个单元格与一个对象关联起来。"""
    Row: Any
    """指定包含所选单元格的行的索引。"""
    RowHeights: Any
    """指定网格的行高"""
    Rows: Strings
    """用来获取和操作StringGrid控件中每一行的数据。"""
    Selection: Any
    """指示当前选择的边界。"""
    TopRow: Any
    """指定网格中第一个可见的可滚动行的索引。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, AOwner: Component) -> None:
        """TStringGrid.Create(AOwner: Component) -> 无

        创建 TStringGrid 的实例。
        调用 Create 在运行时创建 TStringGrid 的实例。对于设计时放置在表单上的字符串网格，会自动调用 Create。
        AOwner 是另一个组件，通常是一个表单，它成为网格的所有者。所有者负责释放网格。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TStringGrid 的实例。

        不要直接在应用程序中调用 Destroy。而是调用 Free。 Free 验证字符串 grid 不为空，然后才调用 Destroy。
        Destroy 释放用于管理字符串数组及其关联对象的辅助对象。"""
    def GetCell(self, col, row) -> Any:
        """TStringGrid.GetCell（列，行）

        返回单元格的内容"""
    def SetCell(self, col, row, value) -> Any:
        """TStringGrid.SetCell(列、行、值)

        设置单元格的内容"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class StringStream(BytesStream):
    """TStringStream 提供对存储为长字符串的信息的类似文件的访问。

    使用 TStringStream 将数据存储为通过 I/O 功能增强的长字符串。 TStringStream 作为中间对象非常有用，它可以保存文本以及从另一个存储介质读取文本或将其写入到另一个存储介质。 TStringStream 提供了一种处理从不易访问的介质获取的文本的机制。"""
    __hash__: ClassVar[None] = ...
    ClassName: Any
    """返回 TObject.ClassName"""
    DataString: str
    """str：提供对存储 TStringStream 对象表示的文本的字符串的直接访问。

        使用 DataString 来访问流的文本。文本表示通过字符串流传输的信息。 Size 是字符串中的字节数，Position 是 DataString 中的当前位置。

        注意：DataString 是只读属性。 DataString 可用于更改字符串的内容，但应用程序无法更改DataString 本身。"""
    Encoding: Encoding
    """Encoding：表示TStringStream实例内部用于存储数据的编码。

        Encoding 表示用于从给定字符串获取相应字节数组，或从包含的字节数组获取相应字符串的编码。 （字符串流包含字节数组。）
        流字符串的编码在构造函数中设置（您可以指定要使用的编码）。"""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Create(self, *args, **kwargs) -> Any:
        """创建 TStringStream 的实例。

        调用Create实例化一个TStringStream对象。 Create 将 DataString 属性初始化为 AString 参数。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TMemoryStream 的实例。

        System.Classes.TStringStream.Destroy 继承自System.Classes.TMemoryStream.Destroy。该行以下的所有内容均引用System.Classes.TMemoryStream.Destroy。
        销毁 TMemoryStream 的实例。
        不要直接在应用程序中调用 Destroy。而是调用 Free。 Free 验证 TMemoryStream 引用不为空，然后才调用 Destroy。
        当不再需要存储或写入数据时销毁 TMemoryStream 对象。 Destroy 在调用继承的析构函数之前调用 Clear 来释放内存缓冲区。"""
    def Free(self) -> Any:
        """TObject.Free()

        释放包装的对象"""
    def InheritsFrom(self, ClassName) -> Any:
        """TObject.InheritsFrom(类名)

        如果对象是 ClassName 或继承自 ClassName，则返回 True"""
    def ReadBytes(self) -> Any:
        """以字节形式读取内容。"""
    def ReadFloat(self) -> Any:
        """将内容读取为浮动。"""
    def ReadInt(self) -> Any:
        """将内容读取为整数。"""
    def ReadString(self) -> Any:
        """将内容读取为字符串。"""
    def SetProps(self, prop1 = ..., prop2 = ...) -> Any:
        """TObject.SetProps(prop1=val1, prop2=val2...)

        在一次调用中设置多个属性"""
    def ToList(self) -> Any:
        """TStrings.ToList()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 列表对象返回。"""
    def ToTuple(self) -> Any:
        """TStrings.ToTuple()

        如果该对象是容器（TStrings、TComponent...），则它将序列的内容作为 Python 元组对象返回。"""
    def WriteBytes(self) -> Any:
        """将内容写入字节。"""
    def WriteFloat(self) -> Any:
        """将内容写入浮动。"""
    def WriteInt(self) -> Any:
        """将内容写为整数。"""
    def WriteString(self) -> Any:
        """将内容写入字符串。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __dir__(self) -> Any:
        """返回此实例的所有方法、字段和属性的列表。

        __dir__ 方法返回一个包含字符串的列表，这些字符串表示对象的属性名。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Strings(Persistent):
    """TStrings 是表示字符串列表的对象的基类。

    从 TStrings 派生一个类来存储和操作字符串列表。 TStrings 包含抽象方法，或者用 C++ 术语来说，包含纯虚拟方法，不应直接实例化。
    TString 的后代可以表示多个单独的字符串，例如出现在列表框中的单独的行。某些对象使用 TString 的后代来表示一长段文本，以便可以按较小的块对其进行操作。
    TStrings 引入了许多属性和方法：

    添加或删除列表中指定位置的字符串。
    重新排列列表中的字符串。
    访问特定位置的字符串。
    从文件或流中读取字符串或将字符串写入文件或流。
    将一个对象与列表中的每个字符串相关联。
    以名称-值对的形式存储和检索字符串。
    有关名称/值对的说明，请参阅 NameValueSeparator 属性。"""
    __hash__: ClassVar[None] = ...
    Capacity: Any
    """指示 TStrings 对象可以容纳的字符串数量。"""
    CommaText: str
    """str：以单个逗号分隔的字符串形式列出 TStrings 对象中的字符串。

        使用 CommaText 在单个逗号分隔字符串中获取或设置 TStrings 对象中的所有字符串。单逗号分隔字符串格式也称为系统数据格式 (SDF)。
        检索 CommaText 时，列表中包含空格、逗号或双引号的任何字符串都将包含在双引号中，并且字符串中的任何双引号都将重复。例如，如果列表包含以下字符串：

        Stri,ng1
        Stri"ng2
        String 3
        String4

        逗号文本将返回：

        "Stri,ng1","Stri""ng2","String 3",String4

        分配 CommaText 时，该值将被解析为 SDF 格式的文本。对于 SDF 格式，字符串以逗号或空格分隔，并且可以选择用双引号引起来。重复作为字符串一部分的双引号，以将它们与字符串周围的引号区分开。不包含在双引号内的空格和逗号是分隔符。彼此相邻的两个逗号表示空字符串，但另一个分隔符旁边出现的空格将被忽略。例如，假设 CommaText 设置为：

        "Stri,ng 1","Stri""ng 2",String 3,String4

        该列表将包含：
        Stri,ng 1
        Stri"ng 2
        String3
        String4

        注意：CommaText 与 DelimitedText 属性相同，分隔符为 \',\' 和引号字符为 \'"\'。
        在源字符串中包含尾随逗号会导致字符串列表中包含空白项。例如，如果 CommaText 设置为

        "String1,String2,String3, "

        字符串列表将包含：

        String1
        String2
        String3
        <空白>"""
    Count: int
    """int：引入一个抽象属性来表示列表中字符串的数量。

        TString 的后代实现了 Count 属性来指示列表中字符串的数量。
        当迭代列表中的所有字符串时，或者尝试查找字符串相对于列表中最后一个字符串的位置时，请使用 Count 属性。"""
    DefaultEncoding: Encoding
    """编码：当前对象的默认编码。

        当在对 LoadFromStream 或 SaveToStream 的调用中指定了 nil 编码时，将使用 DefaultEncoding。
        默认情况下，DefaultEncoding 设置为 Default。如果 LoadFromStream 或 SaveToStream 需要其他默认编码，用户可以更改 DefaultEncoding。"""
    DelimitedText: str
    """str：将 TStrings 对象中的所有字符串表示为单个分隔字符串。

        使用 DelimitedText 获取或设置单个字符串中 TStrings 对象中的所有字符串，并以 Delimiter 属性指定的字符分隔。
        检索 DelimitedText 时，列表中包含空格或 Delimiter 和 QuoteChar 属性中指定的分隔符和引号字符的任何字符串都将被引号字符 (QuoteChar) 包围（前后）。此外，单个字符串中包含的任何 QuoteChar 字符都将重复。
        检索 DelimitedText 时，结果值以两种方式分隔各个字符串：每个字符串都由 QuoteChar 属性指定的引号字符包围（之前和之后）。此外，各个字符串由 Delimiter 属性指定的字符分隔。
        分配 DelimitedText 时，必须使用 Delimiter 标记分隔各个字符串，并且可以选择将其括在 QuoteChar 字符中。
        分配 DelimitedText 时，该值将被解析为 SDF 格式的文本。对于 SDF 格式，字符串由分隔符或空格分隔，并且可以选择用 QuoteChar 字符括起来。重复属于字符串一部分的 QuoteChar 标记，以将它们与字符串周围的 QuoteChar 字符区分开来。 QuoteChar 标记中未包含的空格和分隔符字符是分隔符。两个相邻的分隔符字符将指示空字符串，但另一个分隔符字符旁边出现的空格将被忽略。
        如果 StrictDelimiter 设置为 False，则无论 Delimiter 的值如何，空格字符也被解释为分隔符。当引号之间出现空格字符时，情况并非如此。

        注意：当 Delimiter 为 \',\' 且 QuoteChar 为 \'"\' 时，CommaText 与 DelimitedText 属性相同。在源字符串中包含尾随 Delimiter 会导致字符串列表中包含空白项。"""
    Delimiter: Any
    """unicodechr(str)：指定 DelimitedText 属性使用的分隔符。

        使用 Delimiter 获取或设置 DelimitedText 属性使用的分隔符。DelimitedText 将 TStrings 对象中的所有字符串表示为单个字符串，各个字符串由 Delimiter 值的字符分隔。
        默认分隔符用逗号 (,) 表示。"""
    Encoding: Encoding
    """编码：从流或文件读取期间确定的字符编码。

        Encoding 是一个只读属性，包含调用 LoadFromStream 或 LoadFromFile 方法时检测到的字符编码的值。如果文件或流不包含 BOM（无法检测到编码值），则 Encoding 将设置为 DefaultEncoding 属性中指定的值。
        SaveToStream 和 SaveToFile 方法中使用了编码。"""
    KeyNames: str
    """字符串："""
    LineBreak: str
    """str：定义换行符。

        LineBreak 属性在 TStrings 内部使用来设置字符串终止符。设置或读取 LineBreak 属性以确定多字符串输出操作中的字符串终止符。
        例如，GetText 方法返回一个包含所有 TStrings 字符串的长字符串，每个字符串均以 LineBreak 值终止。

        注意：在 Windows 上，默认的 LineBreak 值是回车和换行的组合 (#13#10)，而在 Android、Linux、macOS 和 iOS 上，它只是换行 (#10)。"""
    NameValueSeparator: Any
    """unicodechr(str)：表示用于将名称与值分隔开的字符。

        包含 NameValueSeparator 字符的字符串被视为名称-值对。NameValueSeparator 默认为等号 (=)。TStrings 定义了各种用于访问名称和值以及搜索特定名称的方法。
        作为名称-值对的字符串由名称部分、分隔符和值部分组成。分隔符周围的任何空格都是名称或值的一部分。此约定对应于许多初始化文件中使用的格式。例如：

        DisplayGrid=1
        SnapToGrid=1
        GridSizeX=8
        GridSizeY=8"""
    Names: str
    """用于获取字符串列表中每个字符串中的名称部分。"""
    Objects: Any
    """表示一组与 Strings 属性中的每个字符串相关联的对象。"""
    Options: StringsOptions
    """StringsOptions：控制 TString 的一组布尔属性。

        使用选项指定字符串列表的以下布尔属性的值：

        选项                   属性

        soStrictDelimiter      StrictDelimiter
        soWriteBOM             WriteBOM
        soTrailingLineBreak    TrailingLineBreak
        soUseLocale            UseLocale"""
    QuoteChar: Any
    """unicodechr(str)：指定 DelimitedText 属性使用的引号字符。

        使用 QuoteChar 获取或设置用于将各个字符串括在 DelimitedText 属性中的引号字符。
        当 QuoteChar 设置为空字符时，DelimitedText 执行以下操作：

        阅读时，不返回引用的列表项。
        分配时，不检查引用字符的分配值。
        也就是说，您可以将 QuoteChar 设置为空字符以禁用 DelimitedText 中的引用。要将 QuoteChar 设置为空字符，请执行以下操作：

        C++：
        MyStringList->QuoteChar = '\\0';"""
    StrictDelimiter: bool
    """bool：确定如何使用 Delimiter 属性。

        如果 StrictDelimiter 为 True，则 DelimitedText 中的各个字符串仅由 Delimiter 分隔或在 QuoteChar 之间引用。如果 StrictDelimiter 为 False，则空格和不可打印字符也用作分隔符。

        提示：如果您不希望提取带引号的字符串，就好像它们被分隔符包围一样，您可以将 QuoteChar 设置为空字符（C++ 中的 '\\0'）。"""
    Strings: str
    """字符串："""
    StringsAdapter: IStringsAdapter
    """IStringsAdapter：为 TStrings 对象实现 IStringsAdapter 接口。

        StringsAdapter 在 OLE 应用程序中使用时指定附加的 TStringsAdapter。

        注意：要创建 StringsAdapter，您可以使用 GetOleStrings 和 SetOleStrings，而不是创建 TStringsAdapter 的实例。 StringsAdapter 在 OLE 应用程序内部使用。"""
    Text: Any
    """将 TStrings 对象中的字符串列为单个字符串，各个字符串由回车符和换行符分隔。"""
    TrailingLineBreak: bool
    """bool：确定是否在 Text 属性的最后一行后添加换行符。

        使用 TrailingLineBreak 为 Text 添加结束换行符。将 TrailingLineBreak 设置为 True 可在 Text 的最后一行后添加换行符。将 TrailingLineBreak 设置为 False 可在没有换行符的情况下结束 Text。默认值为 True。"""
    Updating: bool
    """bool：指示字符串列表是否正在更新。"""
    UseLocale: bool
    """bool：确定字符串列表必须用于字符串比较的实现。

        将 UseLocale 设置为 True 以使用 AnsiCompareStr 和 AnsiCompareText 来比较字符串。
        将 UseLocale 设置为 False 以使用 CompareStr 和 CompareText。默认为 True。"""
    ValueFromIndex: str
    """字符串："""
    Values: str
    """字符串："""
    WriteBOM: bool
    """bool：将导致 SaveToStream 和 SaveToFile 写入 BOM。

        将 WriteBOM 设置为 True 可使 SaveToStream 将 BOM（字节顺序标记）写入流，并使 SaveToFile 将 BOM 写入文件。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Add(self, s) -> Any:
        """TStrings.Add(s)

        将字符串添加到 TStrings 对象并返回索引位置"""
    def AddObject(self, s, delphiobject) -> Any:
        """TStrings.AddObject(s, delphiobject)

        将字符串和关联的对象添加到字符串并返回索引位置"""
    def AddPair(self, Name: str, Value: str) -> Strings:
        """TStrings.AddPair(名称: str, 值: str) -> 字符串

        使用流式编码将名称-值对添加到字符串列表中。
        AddPair 使用当前的 NameValueSeparator 添加名称-值对。您还可以使用 AddPair 添加名称-值对和相应的 AObject。
        TStrings 返回对字符串列表的引用，允许使用流式编码填充列表。"""
    def AddStrings(self, Strings: Strings) -> None:
        """TStrings.AddStrings(Strings: Strings) -> None

        将指定的字符串（和对象）添加到当前的 TStrings 对象。
        AddStrings 使用 TStrings 类型的 Strings 参数，将 Strings 对象中的字符串和关联对象追加到当前 TStrings 对象中字符串列表的末尾。
        AddStrings 的 Strings 参数表示字符串数组，将 Strings 数组中的字符串附加到当前 TStrings 对象中字符串列表的末尾。
        AddStrings 有两个参数，将 Strings 数组中的字符串追加到当前 TStrings 对象中字符串列表的末尾，并将 Objects 中对对象的引用与其字符串相关联（在 Strings 和 Objects 数组中具有相同的数字）。
        如果 Strings 中的字符串数量不等于 Objects 中的对象数量，则会引发异常。"""
    def Append(self, S: str) -> None:
        """TStrings.Append(S: str) -> 无

        将字符串添加到列表中。
        Append 与 Add 方法相同，只是它不返回值。当添加字符串后不需要知道字符串的索引，或者返回的索引没有意义的 TString 的单个字符时，请使用 Append。
        例如，备忘录对象使用的 TStrings 后代使用索引来确定在何处插入字符串，但插入的字符串不一定最终作为列表中的单个字符串。插入的文本的一部分可能会成为前一个字符串的一部分，并且一部分可能会被分解成后续的字符串。在这种情况下，Add 返回的索引没有意义。
        使用 Append 而不是 Add 作为需要 TGetStrProc 的函数的参数。"""
    def Assign(self, Source: Persistent) -> None:
        """从 Source 对象设置 Strings 数组中的字符串、可能关联的对象以及当前 TStrings 对象的一些其他属性。
        使用Assign 从Source 对象设置TStrings 对象的属性。如果 Source 是 TStrings 类型，Assign 会复制以下属性：

        字符串
        对象
        默认编码
        编码
        下划线
        分隔符
        引用字符
        名称值分隔符
        选项
        如果Source不是TStrings类型，继承的Assign将在其AssignTo方法中设置来自任何支持TStrings的对象的字符串数组的值。"""
    def BeginUpdate(self) -> Any:
        """TStrings.BeginUpdate()

        使 TStrings 对象能够跟踪字符串列表何时发生更改。"""
    def Clear(self) -> Any:
        """TStrings.Clear()

        清除 TStrings 中的所有字符串（以及相关对象）"""
    def Create(self, *args, **kwargs) -> Any:
        """创建 TStrings 对象的实例。

        不要直接调用 TStrings 的 Create 方法。 TStrings 是一个抽象类，其构造函数只能作为派生类构造函数的继承方法进行调用。"""
    def Delete(self, i) -> Any:
        """TStrings.Delete(i)

        删除索引 i 处的字符串（以及关联的对象"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TStrings 实例并释放其内存。

        不要直接调用 Destroy。而是调用 Free。在调用 Destroy 之前，Free 检查对象引用是否不为 nil。"""
    def EndUpdate(self) -> Any:
        """TStrings.EndUpdate()

        使 TStrings 对象能够跟踪字符串列表何时完成更改。"""
    def Equals(self, Strings: Strings) -> bool:
        """TStrings.Equals(Strings: Strings) -> bool

        将字符串列表与另一个 TStrings 对象中的列表进行比较，如果两个列表匹配则返回 true。
        调用 Equals 来比较两个 TStrings 对象中的列表。 Equals 仅比较字符串，而不比较对关联对象的任何引用。如果两个 TStrings 对象的列表具有相同数量的字符串并且每个列表中的字符串匹配，则 Equals 返回 true。如果列表长度不同、包含不同字符串或者两个列表中字符串的顺序不同，则 Equals 返回 false。

        注意：Equals 方法使用重写的 Get 方法来执行比较，因此它不提供上下文不敏感的选项。"""
    def Exchange(self, Index1: int, Index2: int) -> None:
        """TStrings.Exchange(Index1: int, Index2: int) -> None

        交换列表中两个字符串的位置。
        调用 Exchange 重新排列列表中的字符串。这些字符串由 Index1 和 Index2 参数中的索引值指定。索引从零开始，因此列表中的第一个字符串的索引值为 0，第二个字符串的索引值为 1，依此类推。
        如果任一字符串具有关联对象，Exchange 也会更改该对象的位置。"""
    def Get(self, Index: int) -> str:
        """TStrings.Get(索引：int) -> str

        返回给定索引的字符串。
        Get 是 Strings 属性的受保护读取实现。
        在 TStrings 中，Get 是抽象的，或者用 C++ 术语来说，是纯虚拟的，这意味着它没有实现。后代类必须重写此方法以返回具有指定索引的字符串。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TStrings 枚举器。

        GetEnumerator 返回 TStringsEnumerator 引用，该引用枚举 TStrings 对象中的字符串。
        要处理所有这些字符串，请在 While MoveNext do 循环中调用 TStringsEnumerator GetCurrent 方法。"""
    def GetObject(self, Index: int) -> Object:
        """TStrings.GetObject(索引: int) -> 对象

        返回与指定索引处的字符串关联的对象。
        GetObject 是 Objects 属性的受保护读取实现。
        Index 是与对象关联的字符串的索引。
        在 TStrings 中，GetObject 始终返回空。这为不支持将对象与列表中的字符串关联的后代提供了默认实现。支持此功能的后代重写 GetObject 以返回指定的对象。"""
    def GetText(self, *args, **kwargs) -> Any:
        """分配文本缓冲区并用 Text 属性的值填充它。

        调用 GetText 获取动态分配的字符缓冲区，其中包含列表中的所有字符串。在 OS X 操作系统上，各个字符串由回车符 (#13) 分隔；在 Windows 操作系统上，各个字符串由回车符和换行符 (#13#10) 分隔。调用者负责使用 StrDispose 过程释放返回值。"""
    def IndexOf(self, s) -> Any:
        """TStrings.IndexOf(s)

        返回字符串 s 的索引，如果未找到则返回 -1"""
    def IndexOfName(self, Name: str) -> int:
        """TStrings.IndexOfName(名称: str) -> int

        在TStrings对象中查找具有指定名称的字符串，并返回该字符串在列表中的索引位置。
        调用 IndexOfName 来定位名称-值对的第一次出现，其中名称部分等于 Name 参数或仅大小写不同。 IndexOfName 返回字符串从 0 开始的索引。如果列表中没有字符串具有指定的名称，则 IndexOfName 返回 -1。

        注意：如果存在多个名称部分与 Name 参数匹配的名称-值对，则 IndexOfName 返回第一个此类字符串的位置。"""
    def IndexOfObject(self, AObject: Object) -> int:
        """TStrings.IndexOfObject(AObject: Object) -> int

        返回列表中与给定对象关联的第一个字符串的索引。
        调用 IndexOfObject 来定位与对象 AObject 关联的列表中的第一个字符串。将要定位的对象指定为 AObject 参数的值。 IndexOfObject 返回字符串和对象的从 0 开始的索引。如果该对象不与任何字符串关联，则 IndexOfObject 返回 -1。"""
    def Insert(self, Index: int, S: str) -> None:
        """TStrings.Insert(Index: int, S: str) -> None

        引入纯虚（C++）方法在指定位置插入字符串。
        TStrings 的后代实现了 Insert 方法，将字符串 S 添加到列表中 Index 指定的位置。如果 Index 为 0，则将字符串插入到列表的开头。如果 Index 为 1，则将该字符串放在列表的第二个位置，依此类推。
        所有将字符串添加到列表的方法都使用 Insert 方法来添加字符串。
        如果字符串有关联对象，请改用 InsertObject 方法。"""
    def InsertObject(self, Index: int, S: str, AObject: Object) -> None:
        """TStrings.InsertObject(Index: int, S: str, AObject: Object) -> None

        将字符串插入列表中的指定位置，并将其与对象关联。
        调用InsertObject将字符串S插入列表中Index标识的位置，并将其与对象AObject关联起来。如果 Index 为 0，则将字符串插入到列表的开头。如果 Index 为 1，则将该字符串放在列表的第二个位置，依此类推。"""
    def LoadFromFile(self, filename) -> Any:
        """TStrings.LoadFromFile(文件名)

        用指定文件中的文本行填充列表。"""
    def LoadFromStream(self, Stream: Stream) -> None:
        """TStrings.LoadFromStream(Stream: Stream) -> 无

        用从流中读取的文本行填充列表。
        LoadFromStream 从 Stream 指定的流中填充 TStrings 对象的字符串列表。从流中读取的文本被解析为在 Windows 操作系统上由回车符和换行符 (#13#10) 字符分隔的字符串，在 macOS 操作系统上由回车符 (#13) 字符分隔。因此，LoadFromStream 读取 Text 属性的值。
        如果未给出 Encoding 参数，则使用适当的编码加载字符串。编码的值是通过调用 TEncoding 类的 GetBufferEncoding 例程获得的。然后，LoadFromStream 将编码值保存在 Encoding 属性中，以便在保存流时使用。
        如果流是文件流，则 LoadFromStream 执行与 LoadFromFile 相同的操作，不同之处在于 LoadFromFile 创建和销毁文件流。"""
    def Move(self, CurIndex: int, NewIndex: int) -> None:
        """TStrings.Move(CurIndex: int, NewIndex: int) -> None

        更改字符串在列表中的位置。
        使用 Move 将字符串移动到 CurIndex 位置，使其占据 NewIndex 位置。这些位置被指定为从 0 开始的索引。例如，以下代码行将第一个位置的字符串移动到最后一个位置：

        对于 C++：
        MyStringsObject->移动(0, MyStringsObject->Count - 1);

        如果该字符串具有关联对象，则该对象在其新位置仍与该字符串关联。"""
    def Put(self, Index: int, S: str) -> None:
        """TStrings.Put(Index: int, S: str) -> None

        更改具有指定索引的字符串的值。
        Put 是 Strings 属性的受保护写入实现。
        Put 将 Index 指定索引的字符串的值更改为 S。Put 不会更改指定位置的对象。也就是说，与先前字符串关联的任何对象都将与新字符串关联。"""
    def PutObject(self, Index: int, AObject: Object) -> None:
        """TStrings.PutObject(Index: int, AObject: Object) -> None

        更改与指定索引处的字符串关联的对象。
        PutObject 是 Objects 属性的受保护写入实现。
        正如在 TStrings 中实现的那样，PutObject 不执行任何操作。这为不支持将对象与列表中的字符串关联的派生类提供了默认实现。支持此功能的派生类重写 PutObject 以更改指定的对象。"""
    def SaveToFile(self, filename) -> Any:
        """TStrings.SaveToFile(文件名)

        将列表中的字符串保存到指定文件中。"""
    def SaveToStream(self, Stream: Stream) -> None:
        """TStrings.SaveToStream(Stream: Stream) -> None

        将 Text 属性的值写入 Stream 流。
        SaveToStream 从当前 TStrings 对象获取所有字符串，并将它们组合成包含由 LineBreak 序列分隔的这些字符串的单个字符串。然后 SaveToStream 使用指定的 Encoding 对该字符串进行编码。然后 SaveToStream 将编码后的字符串写入指定的 Stream 流。
        如果 WriteBOM 为 True，则 SaveToStream 首先获取指定 Encoding 或 DefaultEncoding（如果 Encoding = nil）的前导码，并在主字符串之前将前导码字节写入流。
        如果未提供 Encoding 参数，则使用 E​​ncoding 属性中指定的编码保存字符串。

        注意：在 Windows 上，默认的 LineBreak 值是回车符和换行符的组合（#13#10），而在 macOS 上，它只是换行符（#10）。
        注意：如果 TrailingLineBreak 为 True，则 SaveToStream 会在最后一个字符串后写入结束换行符 LineBreak。
        如果流是文件流，则 SaveToStream 执行的操作与 SaveToFile 相同，只是 SaveToFile 会创建和销毁文件流。"""
    def SetStrings(self, Source: Strings) -> None:
        """TStrings.SetStrings(来源：字符串) -> 无

        将另一个 TStrings 对象中的字符串设置到字符串列表。
        使用 SetStrings 从另一个 TStrings 对象（Source）分配 TStrings 对象的值。

        注意：SetStrings 与Assign 类似，但Assign 还复制多个附加属性。"""
    def SetText(self, Text: PWideChar) -> None:
        """TStrings.SetText(文本: PWideChar) -> 无

        设置文本属性。
        调用 SetText 将列表替换为 Text 参数指定的字符串。 SetText 一次将一个字符串添加到列表中，使用 Text 中的回车符或换行符作为分隔符，指示何时添加新字符串。"""
    def ToObjectArray(self, *args, **kwargs) -> Any:
        """返回与字符串关联的 TObject 数组。


        使用ToObjectArray 获取与Strings 关联的TObject 数组。

        注意：TStrings是一个抽象类，该方法没有任何作用。后代类可以将对象与字符串关联起来。
        注意：TStrings 对象不拥有 Objects 数组中的对象。即使 TStrings 对象被销毁，添加到 Objects 数组中的对象仍然存在。它们必须由应用程序显式销毁。"""
    def ToStringArray(self, *args, **kwargs) -> Any:
        """用于将其他数据类型转换为字符串数组。。


        使用 ToStringArray 获取列表中每个字符串的字符串数组。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class StyleInfo:
    """TStyleInfo 类型的包装器"""
    __hash__: ClassVar[None] = ...
    Author: Any
    """提供对样式信息作者的访问"""
    AuthorEMail: Any
    """提供对样式信息的作者电子邮件的访问"""
    AuthorUrl: Any
    """提供对样式信息的作者 URL 的访问"""
    Name: Any
    """提供对样式信息名称的访问"""
    Version: Any
    """提供对样式信息版本的访问"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class StyleManager(Object):
    """处理与样式相关的操作。

    使用 TStyleManager 可以：

    注册和取消注册样式类。
    设置活动样式。
    从文件或资源加载样式。
    检索样式及其描述符。
    替换并检索样式引擎。"""
    __hash__: ClassVar[None] = ...
    ActiveStyle: Any
    """用于获取当前激活的样式（Style）。"""
    DesignerStyle: CustomStyleServices
    """用于获取自定义样式服务。"""
    Style: CustomStyleServices
    """用于获取自定义样式服务的函数。"""
    StyleDescriptor: StyleManager.TStyleClassDescriptor
    """用于获取与指定样式类相关的描述符。"""
    StyleNames: Any
    """用于获取当前应用程序中可用的所有样式（Styles）的名称。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    @classmethod
    def CheckSysClassName(cls, AClassName: str) -> bool:
        """TStyleManager.CheckSysClassName(AClassName: str) -> bool

        用于检查指定的类名是否为系统类名。"""
    @classmethod
    def GetStyle(cls, Name: str) -> CustomStyleServices:
        """TStyleManager.GetStyle(名称: str) -> CustomStyleServices

        用于获取当前控件的样式（Style）。"""
    @classmethod
    def HandleMessage(cls, Control: WinControl, Message: Message, DefWndProc: Callable[[Message],None]) -> bool:
        """TStyleManager.HandleMessage(Control: WinControl, Message: Message, DefWndProc: Callable[[Message], None]) -> bool

        处理来自控件的消息。

        HandleMessage 将从控件收到的消息发送到样式引擎。
        Control 传递消息的组件。
        Message 传递给引擎的消息。
        DefWndProc 为消息调用的默认窗口过程。"""
    @classmethod
    def Initialize(cls, *args, **kwargs) -> Any:
        """初始化有关样式和样式引擎的数据。

        注意：此功能仅供内部使用。不要直接调用它。"""
    @classmethod
    def IsCustomStyleAvailable(cls, AControl: Control) -> bool:
        """TStyleManager.IsCustomStyleAvailable(AControl: Control) -> bool

        用于检查指定的自定义样式是否可用。"""
    @classmethod
    def IsSystemStyleDefault(cls, AControl: Control) -> bool:
        """TStyleManager.IsSystemStyleDefault(AControl: Control) -> bool

        用于检查系统样式是否为默认样式。"""
    def IsValidStyle(self) -> Any:
        """TStyleManager.IsValidStyle()

        检查 Vcl 样式文件是否有效"""
    @classmethod
    def LoadDesigningStyle(cls, FileName: str) -> StyleManager.TStyleServicesHandle:
        """TStyleManager.LoadDesigningStyle(FileName: str) -> StyleManager.TStyleServicesHandle

        用于加载设计时样式（Designing Style）。"""
    @classmethod
    def LoadDesigningStyles(cls, FileNames: tuple) -> None:
        """TStyleManager.LoadDesigningStyles(FileNames: tuple) -> 无

        目前没有任何其他信息。"""
    def LoadFromFile(self) -> Any:
        """TStyleManager.LoadFromFile()

        从文件加载 VCL 样式"""
    @classmethod
    def LoadFromResource(cls, Instance: int, ResourceName: str) -> StyleManager.TStyleServicesHandle:
        """TStyleManager.LoadFromResource(Instance: int, ResourceName: str) -> StyleManager.TStyleServicesHandle

        从指定资源加载样式。
        请注意，LoadFromResource 不会自动切换到加载的样式。为此，请调用 SetStyle 方法。

        Instance 已加载资源的实例句柄。
        ResourceName 与资源关联的字符串。
        ResType 标识资源类型的字符串。"""
    @classmethod
    def Notification(cls, Operation: CustomStyleEngine.TStyleEngineNotification, Data: Pointer) -> None:
        """TStyleManager.Notification（操作：CustomStyleEngine.TStyleEngineNotification，数据：指针）->无

        通知样式引擎发生的事件。

        Operation 执行的操作。
        Data 执行操作的数据。"""
    @classmethod
    def RegisterStyle(cls, Style: CustomStyleServices) -> None:
        """TStyleManager.RegisterStyle(Style: CustomStyleServices) -> None

        注册 Style 参数指定的样式实例。"""
    @classmethod
    def RegisterStyleClass(cls, Extension: str, Description: str, ResourceType: str, StyleClass: CustomStyleServicesClass) -> None:
        """TStyleManager.RegisterStyleClass(Extension: str, Description: str, ResourceType: str, StyleClass: CustomStyleServicesClass) -> None

        使用扩展名、说明和资源类型注册样式类。

        Extension 指定样式文件使用的扩展名的字符串。
        Description 指定样式说明的字符串。
        ResourceType 与资源类型关联的字符串。
        StyleClass 指定要注册的样式类。"""
    @classmethod
    def RemoveDesigningStyle(cls, Name: str) -> None:
        """TStyleManager.RemoveDesigningStyle(名称: str) -> 无

        用于移除指定的设计时样式（Designing Style）或者清除控件的设计时样式。"""
    @classmethod
    def ResetDesigningStyles(cls, *args, **kwargs) -> Any:
        """ 用于重置控件的设计时样式（Designing Style）。"""
    @classmethod
    def SetDesigningStyle(cls, Name: str) -> None:
        """TStyleManager.SetDesigningStyle(名称: str) -> 无

        用于设置设计时样式（Designing Style）到一个控件。"""
    @classmethod
    def SetStyle(cls, Name: str) -> None:
        """TStyleManager.SetStyle(名称: str) -> 无

        按名称、实例或句柄设置活动样式。

        Name 要设置为活动样式的样式的名称。
        Style 要设置为活动样式的样式实例。
        Handle 要设置为活动样式的样式句柄，由 LoadFromFile 或 LoadFromResource 方法返回。"""
    @classmethod
    def TryLoadFromResource(cls, Instance: int, ResourceName: str, ResourceType: PWideChar, Handle: StyleManager.TStyleServicesHandle) -> bool:
        """TStyleManager.TryLoadFromResource(实例：int，资源名称：str，资源类型：PWideChar，句柄：StyleManager.TStyleServicesHandle) -> bool

        从资源加载样式而不引发异常。
        如果样式加载成功，TryLoadFromResource 返回 True，否则返回 False。

        Instance 已加载资源的实例句柄。
        ResourceName 与资源关联的字符串。
        ResType 标识资源类型的字符串。
        Handle 已加载样式的句柄。"""
    @classmethod
    def TrySetDesigningStyle(cls, Name: str, ShowErrorDialog: bool) -> bool:
        """TStyleManager.TrySetDesigningStyle(Name: str, ShowErrorDialog: bool) -> bool

        用于尝试设置设计时样式（Designing Style）到一个控件。"""
    @classmethod
    def TrySetStyle(cls, Name: str, ShowErrorDialog: bool) -> bool:
        """TStyleManager.TrySetStyle(Name: str, ShowErrorDialog: bool) -> bool

        将名称指定的样式设置为活动样式，而不引发异常。
        如果样式成功设置为活动样式，则 TrySetStyle 返回 True，否则返回 False。

        Name 一个字符串，指定要设置为活动的样式的名称。
        ShowErrorDialog 指定如果无法将样式设置为活动样式，是否显示错误对话框。"""
    @classmethod
    def UnInitialize(cls, *args, **kwargs) -> Any:
        """取消初始化有关样式和样式引擎的数据。


        注意：此功能仅供内部使用。不要直接调用它。"""
    @classmethod
    def UnRegisterStyle(cls, Style: CustomStyleServices) -> None:
        """TStyleManager.UnRegisterStyle（样式：CustomStyleServices）->无

        用于取消注册先前注册的窗体样式。"""
    @classmethod
    def UnRegisterStyleClass(cls, StyleClass: CustomStyleServicesClass) -> None:
        """TStyleManager.UnRegisterStyleClass(StyleClass: CustomStyleServicesClass) -> 无

        注销由 StyleClass 参数指定的样式类。"""
    @classmethod
    def UnRegisterStyleEngine(cls, AEngineClass: CustomStyleEngineClass) -> None:
        """TStyleManager.UnRegisterStyleEngine(AEngineClass: CustomStyleEngineClass) -> 无

        注销由 AEngineClass 参数指定的样式引擎。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class TabControl(CustomTabControl):
    """TTabControl 是一个具有笔记本分隔线外观的选项卡集。

    使用 TTabControl 将具有多个选项卡设置的控件添加到表单。与页面控件不同，TTabControl 不是由包含不同控件的多个页面组成。相反，TTabControl 是单个对象。当当前选项卡更改时，选项卡控件必须直接更新其内容以反映 OnChange 事件处理程序中的更改。
    禁用 TTabControl 对象会禁用所有选项卡，因为它是一个控件。要禁用各个选项卡，请使用 TPageControl 并禁用代表页面的各个 TTabSheet 控件。

    注意：使用其中一个页面控件时，如果要限制用户切换到选项卡，则不能将 TTabSheet.Enabled 设置为 false 来实现该限制。相反，请使用 OnChanging 事件来阻止用户选择选项卡。
    Tabs 属性可用于定义 TTabControl 的选项卡项的快捷键。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """用于访问TabControl控件中包含的子控件。"""
    DisplayRect: Rect
    """矩形：指定选项卡控件客户区的边界矩形。

        使用 DisplayRect 获取表示选项卡页内容的选项卡控件部分的坐标（以像素为单位）。当选择不同的选项卡时，选项卡控件的这一部分的外观不会改变。
        使用 DisplayRect 而不是 ClientRect 属性来确定选项卡控件中可以包含其他对象的部分。"""
    DockSite: bool
    """bool：指定控件是否可以作为拖放操作的目标。

        将 DockSite 设置为 true 以允许其他控件停靠到此窗口控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接呈现到窗口还是先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件会直接将自身绘制到窗口。 当 DoubleBuffered 为 true 时，窗口控件会将自身绘制到内存中的位图，然后使用该位图绘制窗口。 双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（如 TRichEdit）无法将自身绘制到位图中。 对于此类控件，必须将 DoubleBuffered 设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的底层 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HotTrack: bool
    """bool：决定鼠标所在选项卡上的标签是否自动突出显示。

        将 HotTrack 设置为 true 可以向用户提供有关单击鼠标按钮时将选择哪个选项卡的视觉反馈。当选项卡控件包含多行选项卡时，HotTrack 特别有用。"""
    Images: CustomImageList
    """用于关联TabControl控件中标签页的图像列表。

        图像指定在选项卡中绘制的图像。对于禁用的选项卡，使用图像的灰色版本。
        在 TCustomTabControl 的实现中，图像列表属性中的图像顺序直接对应于控件中的关联选项卡。在后代类 TPageControl 中，此行为被对单个 TTabSheet 对象的支持所取代，每个对象都有一个 ImageIndex 属性。在任何情况下，应用程序程序员都可以通过定义 OnGetImageIndex 事件处理程序来定义自定义图像显示。"""
    MultiLine: bool
    """bool：确定选项卡是否可以出现在多行上。

        使用 MultiLine 确定选项卡的显示方式。如果 MultiLine 为 true，则当选项卡数量超过选项卡控件顶部的数量时，选项卡将显示在多行上。行数由选项卡控件中有多少个选项卡决定。如果 MultiLine 为 false，则选项卡仅显示在一行上，用户必须滚动显示的滚动箭头才能查看所有选项卡。"""
    MultiSelect: bool
    """bool：指定是否可以选择多个选项卡。

        使用 MultiSelect 获取或设置是否可以选择多个选项卡。
        仅当 Style 为 tsFlatButtons 或 tsButtons 时，MultiSelect 才为 true。"""
    OnChange: Callable[[Object],None]
    """在用户更改当前选定的标签页时触发。"""
    OnChanging: Callable[[Object,bool],None]
    """在用户切换标签页之前触发。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """在另一个控件成功停靠（dock）到TabControl上方时触发。"""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """在另一个控件试图停靠到TabControl上方时触发。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnDrawTab: Callable[[CustomTabControl,int,Rect,bool],None]
    """在绘制标签页（Tab）时触发。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnGetImageIndex: Callable[[Object,int,int],None]
    """在需要为TabControl中的特定标签页获取图像索引时触发。"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """在需要获取有关站点信息时触发。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """用于处理鼠标在窗体或控件上移动的事件。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnResize: Callable[[Object],None]
    """可调用[[对象]，无]："""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """在TabControl从其父控件中取消停靠时触发。"""
    OwnerDraw: bool
    """bool：指定选项卡控件是否处理自己的绘制。

        将 OwnerDraw 设置为 true 以覆盖任何默认绘制行为。"""
    ParentBiDiMode: bool
    """用于指示TabSheet控件是否继承其父控件的双向布局模式（BiDiMode）设置。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指示TabSheet控件是否继承其父控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于获取或设置TabSheet控件的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    RaggedRight: bool
    """bool：指定选项卡行是否拉伸以填充控件的宽度。

        使用 RaggedRight 获取或设置选项卡行是否拉伸以填充控件的宽度。"""
    ScrollOpposite: bool
    """bool：确定多行选项卡控件中选项卡行的滚动方式。

        设置 ScrollOpposite 以确定当用户选择另一行中的选项卡时，多行选项卡控件中前几行选项卡的移动位置。当 ScrollOpposite 为 true 时，如果 TabPosition 为 tpTop，则前几行选项卡将移至选项卡控件的底部；如果 TabPosition 为 tpBottom，则前几行选项卡将移至顶部。当 ScrollOpposite 为 false 时，之前的选项卡行将移动到所有其他选项卡行的后面。
        例如，在顶部有三行选项卡的选项卡控件中，如果用户选择第二行中的选项卡，ScrollOpposite 将确定第一行移动的位置。如果 ScrollOpposite 为 true，则第二行现在出现在选项卡控件顶部的前（底）行，后面是其后面（上方）的第三行。第一行移动到选项卡控件的底部。如果 ScrollOpposite 为 false，则第一行移动到后面（顶部），以便选项卡控件在前面显示第二行（位于选项卡区域的底部），然后是第三行（现在位于中间），然后是由第一行。

        注意：将 ScrollOpposite 设置为 true 会自动将 MultiLine 属性设置为 true。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    Style: TabStyle
    """TabStyle：指定选项卡控件的样式。

        使用样式来确定选项卡的外观。它们可以显示为笔记本选项卡或按钮。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabHeight: int
    """int：指定选项卡控件中选项卡的高度（以像素为单位）。

        设置 TabHeight 以控制显示在选项卡控件的客户区域上方的选项卡的高度。 TabHeight 属性是各个选项卡的垂直尺寸（以像素为单位）。如果 TabHeight 设置为 0，选项卡会自动调整自身大小以适合其文本。"""
    TabIndex: int
    """int：标识选项卡控件上选定的选项卡。

        读取 TabIndex 以确定用户选择了哪个选项卡。 TabIndex 是 Tabs 属性维护的标签列表中选项卡的索引。第一个（最左边）选项卡的 TabIndex 为 0，下一个选项卡的 TabIndex 为 1，依此类推。如果未选择任何选项卡，则 TabIndex 的值为 -1。
        设置 TabIndex 以编程方式更改选项卡控件中选定的选项卡。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabPosition: TabPosition
    """TabPosition：确定选项卡是显示在顶部还是底部。

        将 TabPosition 设置为 tpTop 以在选项卡控件的顶部显示选项卡。将 TabPosition 设置为 tpBottom 以在底部显示选项卡。如果 ScrollOpposite 属性为 True，则选项卡可以出现在顶部和底部，其中包含当前选项卡的行以及 TabPosition 指示的一侧的所有后续行。
        由于Windows通用控件的限制，如果TabPosition为tpLeft或tpRight，则Font必须为True Type字体。否则，选项卡文本可能绘制不正确。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    TabWidth: int
    """int：指定选项卡控件中选项卡的水平尺寸（以像素为单位）。

        TabWidth 指定所有选项卡的固定宽度。如果 TabWidth 为 0，则每个选项卡都会自动变宽，足以显示其标题。"""
    Tabs: Strings
    """字符串：包含标记选项卡控件的选项卡的文本字符串列表。

        Tabs 包含一个 TStrings，它是在选项卡控件中标记选项卡的字符串列表。要将新选项卡添加到选项卡控件或编辑选项卡本身，请添加新字符串或编辑 Tabs 属性中当前的字符串。 （要打开字符串列表编辑器，请双击对象检查器中的“选项卡”属性。）要重新排列选项卡，请重新排列字符串列表。
        选项卡还可以使用 System.Classes.TStrings.Objects 属性包含与标签关联的对象。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否显示在屏幕上。

        使用 Visible 属性控制运行时控件的可见性。如果 Visible 为 True，则控件显示。如果 Visible 为 False，则控件不可见。
        调用 Show 方法将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子代，Show 和 ShowModal 方法将 Visible 设置为 True，并将表单置于所有打开窗口的前面。
        对于 TTabSheet 子代，Visible 不控制运行时控件的可见性。有关更多信息，请参阅 TabVisible 属性的描述。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class TabSheet(WinControl):
    """TTabSheet 是 TPageControl 对象中的单个页面。

    使用 TTabSheet 表示选项卡式页面控件中的单个页面。选项卡通常称为页面。 TPageControl 在其 Pages 属性中维护其选项卡表的索引数组。用户可以单击选项卡来激活选项卡表。
    您可以使用 TTabSheet 控件的 Caption 属性来定义 TPageControl 页面的快捷键。"""
    __hash__: ClassVar[None] = ...
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。控件绘制的图形或文本将被剪裁到边框内的区域。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回所包含控件的数量"""
    Controls: Any
    """用于存储TabSheet控件中包含的子控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 子控件。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用备用控件，其 Font 属性将更改标题或文本的颜色（如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """提供对控件的底层 Windows 屏幕对象的访问。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    Highlighted: bool
    """bool：指示选项卡是否突出显示。

        使用突出显示使选项卡在视觉上脱颖而出。当“Highlighted”为 true 时，将使用突出显示颜色绘制选项卡表，以便在视觉上从其他选项卡表中脱颖而出。

        注意：突出显示不链接到主机页面控件的活动页面。页面控件只能有一个活动页面，但可以有多个突出显示的页面。"""
    ImageIndex: int
    """用于设置与TabSheet相关联的图像在图像列表中的索引。

        使用 ImageIndex 获取或设置要在选项卡中绘制的图像的索引。此索引标识来自包含选项卡表的页面控件的 Images 属性的图像。指定 -1 以防止绘制图像。"""
    ImageName: str
    """用于指定TabSheet标签页的图像名称或标识符。"""
    Left: int
    """int：指定组件左边缘相对于其父组件的水平坐标。

        使用 Left 属性可以确定控件左侧的开始位置或重新定位控件的左侧。
        如果该控件包含在另一个控件中，则 Left 和 Top 属性是相对于父控件的。如果控件直接包含在窗体中，则属性值与窗体相关。对于表单，Left 属性的值是相对于屏幕（以像素为单位）的。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnHide: Callable[[Object],None]
    """在TabSheet隐藏时触发。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """在鼠标移动到TabSheet控件上时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnResize: Callable[[Object],None]
    """在TabSheet控件的大小调整时触发的事件。"""
    OnShow: Callable[[Object],None]
    """当TabSheet控件显示时触发。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    PageControl: Any
    """表示包含选项卡的页面控制对象。"""
    PageIndex: int
    """int：表示该选项卡在页面控件维护的选项卡列表中的索引。

        使用 PageIndex 确定选项卡表在其页面控件中的位置。页面控件中的每个选项卡在插入页面控件时都会自动分配一个 PageIndex。第一个选项卡的值为 0，第二个选项卡的值为 1，依此类推。如果删除或移动选项卡，则重新分配 PageIndex 值。
        要访问给定索引值的特定选项卡，请使用 TPageControl 对象的索引 Pages 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指示TabSheet控件是否继承其父控件的字体设置。。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """用于获取或设置TabSheet控件的父窗口句柄。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabIndex: Any
    """指示标签页在 TPageControl 对象中可见选项卡集合中的位置。"""
    TabVisible: bool
    """bool：指定 TTabSheet 对象的选项卡是否出现在其 TPageControl 中。

        使用 TabVisible 暂时从页面控件中删除选项卡表。当 TabVisible 为 false 时，选项卡不会出现在页面控件中，并且其 TabIndex 属性为 -1。将 TabVisible 设置为 true 允许用户再次看到选项卡表的选项卡。"""
    Top: int
    """int：指定控件左上角的 Y 坐标，相对于其父级或包含控件（以像素为单位）。

        使用 Top 定位控件的顶部或将控件重新定位到不同的 Y 坐标。Top 属性与 Left 属性一样，是控件相对于其容器的位置。因此，如果控件包含在 TPanel 中，则 Left 和 Top 属性相对于面板。如果控件直接包含在窗体中，则它相对于窗体。对于窗体，Top 属性的值相对于屏幕（以像素为单位）。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。

        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TTabSheet.Create(AOwner: 组件) -> 无

        创建并初始化 TTabSheet 的实例。
        调用 Create 在运行时实例化选项卡表。在设计时添加到页面控件的选项卡表是自动创建的。
        Create 调用继承的 Create 方法，然后设置选项卡表组件的初始值。
        在运行时创建选项卡时，请使用 PageControl 属性将它们插入到页面控制对象中。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TTabSheet 的实例。

        不要在运行时直接调用 Destroy。而是调用 Free。 Free 验证选项卡不为空，然后才调用 Destroy。 Destroy 从页面控件中删除选项卡表，然后调用继承的 Destroy 方法。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class Timer(Component):
    """TTimer 封装了 Windows API 计时器函数。

    TTimer 用于简化对 Windows API 计时器函数 SetTimer 和 KillTimer 的调用，以及简化对 WM_TIMER 消息的处理。对应用程序中的每个计时器使用一个计时器组件。
    计时器的执行通过其 OnTimer 事件进行。TTimer 具有 Interval 属性，该属性确定计时器的 OnTimer 事件发生的频率。间隔对应于 Windows API SetTimer 函数的参数。

    警告：系统范围内计时器总数的限制取决于系统。"""
    __hash__: ClassVar[None] = ...
    ComponentCount: Any
    """用于获取容器组件中子组件的数量。"""
    Components: Any
    """返回拥有组件的迭代器"""
    Enabled: bool
    """bool：控制定时器是否定期生成OnTimer事件。

        使用 Enabled 启用或禁用计时器。如果Enabled为true，则定时器正常响应。如果 Enabled 为 false，则计时器不会生成 OnTimer 事件。默认为 true。"""
    Interval: int
    """int：确定计时器组件启动另一个 OnTimer 事件之前经过的时间量（以毫秒为单位）。

        间隔决定 OnTimer 事件发生的频率。每次经过指定的时间间隔后，OnTimer 事件就会发生。
        使用 Interval 指定任何基数值作为 OnTimer 事件之间的间隔。默认值为 1000（一秒）。

        注意：0 值有效，但计时器不会为 0 值调用 OnTimer 事件。"""
    OnTimer: Callable[[Object],None]
    """当Timer组件计时器到达设定的时间间隔时触发。"""
    Owner: Any
    """用于获取或设置拥有（拥有者）Timer组件的组件或控件。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BindMethodsToEvents(self, prefix) -> Any:
        """用于将特定方法绑定到Timer对象的事件处理程序上。

        如果使用以下模式命名方法，则将方法连接到组件事件：Prefix_ComponentName_EventName。
        示例： def handle_button1_OnClick(Sender): pass
        该函数返回一个元组列表。每个元组包含组件的名称、事件的名称以及分配给事件的方法对象。
        请注意，前缀参数是可选的，默认为“handle_”。"""
    def Create(self, AOwner: Component) -> None:
        """TTimer.Create(AOwner: 组件) -> 无

        实例化一个计时器对象。
        调用 Create 在运行时实例化计时器。在设计时添加到表单或数据模块的计时器是自动创建的。
        AOwner 指定负责释放计时器的组件，通常是表单或数据模块。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """用于释放Timer对象所占用的内存空间和资源。

        不要直接在应用程序中调用 Destroy。相反，应用程序应该调用 Free。 Free 在调用 Destroy 之前验证计时器不为零。
        Destroy 在释放计时器所需的资源之前，通过将 Enabled 设置为 False 来停用计时器。"""
    def GetParentComponent(self) -> Any:
        """TComponent.GetParentComponent()

        返回组件的父组件。"""
    def HasParent(self) -> Any:
        """TComponent.HasParent()

        指示组件是否有父组件来处理其归档。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ToggleSwitch(CustomToggleSwitch):
    """允许用户在“打开”状态和“关闭”状态之间切换的可单击控件。"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Alignment: LeftRight
    """LeftRight：指定切换开关标题是显示在右侧还是左侧。

        默认为 taRightJustify。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指示控件是否根据 SwitchHeight、SwitchWidth 和 StateCaptions 属性调整其边界。

        默认值为 True。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    DisabledColor: int
    """int：禁用时切换开关的颜色。

        默认值为 clBtnShadow。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    FrameColor: int
    """int：拨动开关框的颜色。

        默认为 clWindowText。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    HelpContext: int
    """int：HelpContext 属性包含标识控件的帮助主题的数字上下文 ID。

        对于 .chm 帮助文件，您必须将帮助主题的符号上下文 ID 映射到项目 (.hhp) 文件的 [MAP] 部分中的数字主题 ID 值。
        要为控件启用基于上下文 ID 的上下文相关帮助，请将 Vcl.Controls.TControl.HelpType 设置为 htContext 并将 HelpContext 设置为数字主题 ID。
        主题 ID 0（默认）表示没有为控件提供帮助主题。
        要使用帮助，请在应用程序的使用子句中插入 Vcl.HtmlHelpViewer 或其他提供外部帮助查看器使用界面的单元。对于 C++，您需要包含 HTMLHelpViewer.hpp 头文件。"""
    Hint: str
    """str：提示包含当用户将鼠标移动到控件上时出现的文本字符串。

        使用提示属性可提供一串帮助文本作为帮助提示或特定位置（例如状态栏）上的帮助文本。
        帮助提示是一个包含控件帮助文本的框，当用户将鼠标指针移到控件上并短暂暂停时，该框会出现该控件。
        设置帮助提示

        指定应显示帮助提示的每个控件的提示属性。
        将每个相应控件的 ShowHint 属性设置为 True，或者将所有控件的 ParentShowHint 属性设置为 True，并将窗体的 ShowHint 属性设置为 True。
        在运行时，将应用程序的 ShowHint 属性的值设置为 True。
        要在状态栏或其他位置显示提示，请使用应用程序的 OnHint 事件处理程序。当鼠标指针移到控件上时，应用程序的 OnHint 事件发生。
        通过指定由 | 分隔的值，指定用于帮助提示框和 OnHint 事件处理程序的提示。 （管道）字符。
        例如，

        self.Edit1.Hint = "姓名|在编辑框中输入姓名|1"

        这里：

        名称部分是简短提示，显示在“帮助提示”框的顶部。
        在编辑框中输入全名是长提示，出现在短提示下方。可以使用 GetLongHint 函数提取它以在 OnHint 事件处理程序中使用。
        1 是控件的 Images 属性中的图像列表中的可选图像索引，指定要出现在提示中的图像的索引。
        如果提示仅包含一个值，则整个字符串将用作帮助提示并由 GetLongHint 和 GetShortHint 函数返回。如果控件未指定 Hint 值，但其父控件指定了，则该控件将使用父控件的值（只要该控件的 ShowHint 属性为 True）。

        注意：如果应用程序的 ShowHint 属性为 False，则不会出现帮助提示，但仍会调用 OnHint 事件处理程序。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """Callable[[Object, ShiftState, int, int], None]:"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    Parent: Any
    """用于获取或设置ToggleSwitch控件的父容器控件。"""
    ParentBiDiMode: bool
    """用于指示ToggleSwitch控件是否继承其父控件的双向模式设置。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """用于指示ToggleSwitch控件是否继承其父控件的颜色设置。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """用于指示ToggleSwitch控件是否继承其父控件的3D边框效果设置。。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指示ToggleSwitch控件是否继承其父控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """bool：指示切换开关是否处于只读模式。

        如果为 True，则用户无法更改切换开关的状态。您仍然可以通过编程方式更改状态。
        默认值为 False。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    ShowStateCaption: bool
    """bool：是否显示开关的标题。

        默认为 True。"""
    State: ToggleSwitchState
    """ToggleSwitchState：切换开关的当前状态。

        可能的值为：

        tssOff：默认。拨动开关处于关闭状态。
        tssOn：拨动开关处于打开状态。"""
    StateCaptions: ToggleSwitchStateCaptions
    """用于设置ToggleSwitch控件上切换开关按钮的不同状态的标题。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    SwitchHeight: int
    """用于设置不包括标题的ToggleSwitch控件的高度。"""
    SwitchWidth: int
    """用于设置不包括标题的ToggleSwitch控件的宽度。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    ThumbColor: int
    """用于设置ToggleSwitch控件的滑块的颜色。

        默认值为 clWindowText。"""
    ThumbWidth: int
    """int：拨动开关框架内拇指的宽度。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 后代，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 后代，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。

        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将该控件置于其父控件中所有其他控件的前面。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户区坐标转换为全局屏幕坐标。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏包裹的控件"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重绘控制。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(Left, Top, Width, Height)

        一次性设置 Left、Top、Width 和 Height 属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ToolBar(WinControl):
    """TToolBar 管理工具按钮和其他控件，将它们排列成行并自动调整它们的大小和位置。

    TToolBar 是工具按钮（TToolButton）的容器。它提供了一种安排和管理视觉控件的简单方法。
    工具栏上的所有工具按钮都保持统一的宽度和高度。
    其他控件可以位于工具栏上。这些控件（由不可见的工具按钮固定）保持统一的高度。
    当控件无法水平放置在工具栏上时，它们可以自动换行并开始一个新行。
    Flat 属性允许背景通过工具栏显示，并为工具按钮提供弹出边框。
    空格和分隔线（实际上是专门配置的工具按钮）可以在视觉上和功能上对工具栏上的控件进行分组。
    通常，工具按钮对应于应用程序菜单中的项目，并使用户能够更直接地访问应用程序的命令。"""
    __hash__: ClassVar[None] = ...
    Actions: Any
    """用于关联工具栏上的工具按钮（ToolButton）与动作（Action）。"""
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    AllowTextButtons: bool
    """bool：确定是否可以将仅包含文本的工具按钮放置在工具栏上。

        当设置为 true 时，tbsTextButton 样式可用于 TToolButton 控件，允许您在工具栏上创建仅包含文本的工具按钮。当设置为 false 时，tbsTextButton 样式对于 TToolButton 控件不可用。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    ButtonCount: Any
    """指示工具栏中按钮的数量。"""
    ButtonHeight: int
    """int：指定工具栏中控件的高度。

        ButtonHeight 表示工具栏中控件的高度（以像素为单位）。"""
    ButtonWidth: int
    """int：指定工具栏中工具按钮（TToolButton）的宽度。

        ButtonWidth 表示工具栏上 TToolButton 组件的宽度（以像素为单位）。它对 Style 属性设置为 tbsSeparator 或 tbsDivider 的工具按钮没有影响。"""
    Buttons: ToolButton
    """用于存储工具栏上的工具按钮（ToolButton）。"""
    Canvas: Canvas
    """用于在工具栏上进行绘图操作。

        使用 Canvas 在 OnCustomDraw 或 OnCustomDrawButton 事件处理程序中在工具栏表面上绘图或绘画。 TCanvas 对象提供了绘图和绘画所需的属性和方法。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    Customizable: bool
    """bool：指定用户是否可以在运行时自定义工具栏。

        将可自定义设置为 true 以允许用户在运行时添加、删除和移动工具栏按钮。用户可以通过两种方式更改可自定义的工具栏：
        通过按住 Shift 键，用户可以将按钮拖到工具栏上的新位置，或者将其完全拖离工具栏以删除该按钮。
        通过双击工具栏，用户可以显示工具栏自定义对话框。工具栏自定义对话框在两个列表框中显示所有可能的按钮，一个列表框中包含不在工具栏上的按钮，另一个包含当前在工具栏上的按钮。用户可以使用此对话框添加或删除按钮并更改其顺序。

        注意：当“可自定义”为 true 时，当用户进行更改时，许多事件会通知工具栏组件。"""
    CustomizeKeyName: str
    """str：指定在用户使用工具栏自定义对话框更改之前工具栏保存其当前按钮配置的注册表项。

        使用CustomizeKeyName 指定当用户首次显示工具栏自定义对话框时工具栏保存其按钮配置的位置。这是 HKEY_CURRENT_USER 的子项。
        当用户双击工具栏以显示工具栏自定义对话框时，工具栏会接收 OnCustomizing 事件，然后使用由 CustomizeValueName 属性指定的名称自动将其当前配置保存到此键。如果用户指示对话框恢复此配置，工具栏将从该注册表项中获取保存的配置。"""
    CustomizeValueName: str
    """str：指定在用户使用工具栏自定义对话框更改之前工具栏保存其当前按钮配置的注册表值。

        使用CustomizeValueName 指定当用户首次显示工具栏自定义对话框时工具栏用于保存其按钮配置的名称。这是由CustomizeKeyName 属性指定的注册表项下的值。
        当用户双击工具栏以显示工具栏自定义对话框时，工具栏会收到 OnCustomizing 事件，然后使用该值自动将其当前配置保存到注册表中。如果用户指示对话框恢复此配置，工具栏将获取此保存的配置。"""
    DisabledImages: CustomImageList
    """CustomImageList：列出可以显示在禁用的工具按钮上的图像。

        DisabledImages 包含禁用工具按钮时可以显示在工具按钮上的图像列表。每个工具按钮的 ImageIndex 属性决定其上显示的特定图像。如果未指定“DisabledImages”，则禁用的工具按钮将显示其常规图像的灰色版本（由“Images”属性指定）。"""
    DockSite: bool
    """用于指示工具栏是否是一个停靠站点（dock site）。

        将 DockSite 设置为 true 以允许其他控件停靠到此窗口控件。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DrawingStyle: TBDrawingStyle
    """用于设置工具栏的绘制风格。。

        此属性存储 dsNormal 或 dsGradient 样式选择。"""
    EdgeBorders: EdgeBorders
    """用于设置工具栏边框的样式。"""
    EdgeInner: EdgeStyle
    """用于设置工具栏内边缘的样式。"""
    EdgeOuter: EdgeStyle
    """用于设置工具栏外边缘的样式。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Flat: bool
    """bool：使工具栏透明并消除工具按钮边框。

        如果 Flat 设置为 true，则工具栏及其工具按钮是透明的；背景颜色和图形通过它们显示出来。此外，当 Flat 为 true 时，工具栏上的工具按钮 (TToolButton) 具有弹出边框，仅当鼠标经过该按钮时才会出现。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    GradientDirection: GradientDirection
    """GradientDirection：指定渐变的方向是水平还是垂直。

        该属性存储渐变方向的值。"""
    GradientDrawingOptions: TBGradientDrawingOptions
    """用于设置工具栏按钮的渐变绘制选项。

        该属性包含 gdoHotTrack 或 gdoGradient 选项，具体取决于选择的选项。"""
    GradientEndColor: int
    """int：用作渐变结束颜色的颜色。

        该属性存储绘图结束时用于绘制渐变的颜色。 （结束颜色与开始颜色混合）。"""
    GradientStartColor: int
    """int：用作渐变起始颜色的颜色。

        该属性存储表示渐变开始绘制时的绘制颜色的值。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    HideClippedButtons: bool
    """用于指示是否隐藏被裁剪（clipped）的按钮。。

        如果 HideClippedButtons 设置为 true，则任何被相邻区域部分遮挡的按钮都会被隐藏。"""
    HotImages: CustomImageList
    """用于设置工具栏按钮在鼠标悬停时显示的热图像列表。

        HotImages 包含一个图像列表，当鼠标在运行时经过工具按钮时，这些图像可以出现在工具按钮上。每个工具按钮的 ImageIndex 属性确定当鼠标指向它时显示的特定图像。如果未分配 HotImages，工具按钮在指向时将保留其常规图像（由 Images 属性指定）。使用 TImageList 控件来保存将显示的热图像的图像。通常，应用程序将有两个 TImageList 控件，一个用于 Images 属性，另一个用于 HotImages 属性。
        要使用 HotImages，请将 Flat 属性设置为 True。"""
    HotTrackColor: int
    """用于设置工具栏中鼠标悬停在按钮上时的高亮颜色。

        当工具栏的 DrawingStyle 属性设置为 dsGradient 时，这是用作热跟踪颜色的颜色。热跟踪颜色是当鼠标移到按钮上时按钮变成的颜色。"""
    Images: CustomImageList
    """CustomImageList：列出可以出现在工具按钮上的图像。

        图像包含可以出现在工具栏的工具按钮上的图像列表。每个工具按钮的 ImageIndex 属性决定其上显示的特定图像。如果未分配图像，则工具按钮上不会显示图像。
        列表中的图像应为 16x16。"""
    Indent: int
    """int：指定工具栏左侧的边距。

        缩进指定将工具栏左边缘与其内的控件分开的边距（以像素为单位）。"""
    List: bool
    """bool：在工具按钮中将标题对齐在右侧，图像在左侧对齐。

        当 List 为 false 时，工具按钮 (TToolButton) 出现在工具栏中，其图像（如果有）居中，其标题（如果可见）位于下方。将 List 设置为 true 会将标题对齐到右侧，将图像对齐到左侧。"""
    Menu: MainMenu
    """MainMenu：使工具栏自身填充与菜单中的项目相对应的按钮。

        使用菜单属性填充工具栏以匹配菜单组件。设置菜单会导致工具栏删除所有当前按钮，并将其替换为与指定菜单组件中的项目匹配的工具按钮。
        在使用 Menu 填充工具栏的应用程序中，请勿通过添加、删除或编辑工具栏按钮来更改 Buttons 属性。

        注意：工具栏不会动态跟踪 Menu 指定的菜单的任何更改。也就是说，它设置工具按钮以反映应用程序设置此属性时菜单中的项目集，并忽略任何后续更改。"""
    OnAdvancedCustomDraw: Callable[[ToolBar,Rect,CustomDrawStage,bool],None]
    """用于高级自定义绘制整个工具栏的外观。"""
    OnAdvancedCustomDrawButton: Callable[[ToolBar,ToolButton,CustomDrawState,CustomDrawStage,TBCustomDrawFlags,bool],None]
    """用于高级自定义绘制工具栏按钮的外观。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnCustomDraw: Callable[[ToolBar,Rect,bool],None]
    """用于自定义绘制整个工具栏的外观。"""
    OnCustomDrawButton: Callable[[ToolBar,ToolButton,CustomDrawState,bool],None]
    """用于自定义绘制工具栏按钮的外观。"""
    OnCustomizeAdded: Callable[[ToolBar,ToolButton],None]
    """当用户在自定义工具栏中添加新元素后触发。"""
    OnCustomizeCanDelete: Callable[[ToolBar,int,bool],None]
    """Callable[[ToolBar, int, bool], None]:"""
    OnCustomizeCanInsert: Callable[[ToolBar,int,bool],None]
    """用于确定是否允许在指定位置插入新的工具按钮。"""
    OnCustomizeDelete: Callable[[ToolBar,ToolButton],None]
    """当用户在自定义工具栏时删除按钮时触发。"""
    OnCustomizeNewButton: Callable[[ToolBar,int,ToolButton],None]
    """当用户在自定义工具栏时添加新按钮时触发。"""
    OnCustomizeReset: Callable[[Object],None]
    """当用户重置工具栏的自定义设置时触发。"""
    OnCustomized: Callable[[Object],None]
    """当用户完成对工具栏的自定义操作后触发。"""
    OnCustomizing: Callable[[Object],None]
    """当用户开始自定义工具栏时触发。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDockDrop: Callable[[Object,DragDockObject,int,int],None]
    """当另一个控件成功停靠（dock）到工具栏上方时触发。"""
    OnDockOver: Callable[[Object,DragDockObject,int,int,DragState,bool],None]
    """当另一个控件试图停靠（dock）到工具栏上方时触发。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnGetSiteInfo: Callable[[Object,Control,Rect,Point,bool],None]
    """可调用[[对象、控件、矩形、点、布尔]、无]："""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当鼠标在工具栏上移动时触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnResize: Callable[[Object],None]
    """当工具栏的大小发生改变时触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """当工具栏开始被停靠（dock）到其父控件或其他停靠区域时触发。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnUnDock: Callable[[Object,Control,WinControl,bool],None]
    """当工具栏从其父控件中拖出（undocked）时触发。"""
    ParentColor: bool
    """用于指示工具栏是否继承其父控件的背景颜色设置。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """用于指示工具栏是否继承其父控件的字体设置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    RowCount: int
    """int：表示工具栏中的行数。

        读取 RowCount 返回工具按钮排列的行数。"""
    ShowCaptions: bool
    """bool：确定工具按钮上是否显示文本标题。

        如果 ShowCaptions 设置为 true，则工具按钮会显示在工具栏中，并显示其标题。将 ShowCaptions 设置为 true 可能会增加工具按钮的大小。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Transparent: bool
    """bool：指定工具栏是否透明。

        使用Transparent获取或设置工具栏是否透明。请注意，透明属性仅适用于工具栏本身，而不适用于其按钮。

        提示：为避免绘制问题，请在工具栏可见之前设置“透明”属性。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子窗体，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 子控件，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    Wrapable: bool
    """bool：为工具栏中的组件启用自动换行。

        如果 Wrapable 为 true，则当组件在工具栏中无法水平放置时，它们会自动换行并形成新行。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TToolBar.Create(AOwner: Component) -> None

        创建并初始化 TToolBar 实例。
        调用 Create 在运行时创建工具栏。在设计时添加到表单的工具栏会自动创建。
        AOwner 是负责释放工具栏实例的组件（通常是表单）。它成为 Owner 属性的值。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TToolBar 实例并释放其内存。

        不要直接在应用程序中调用 Destroy。而是调用 Free。 Free 验证 TToolBar 引用不为空，然后才调用 Destroy。"""
    def FlipChildren(self, AllLevels: bool) -> None:
        """TToolBar.FlipChildren(AllLevels: bool) -> 无

        防止工具栏按钮在父控件翻转时反转位置。
        FlipChildren 重写继承的方法以防止工具栏子项的翻转。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """TToolBar.GetChildren(Proc: Callable[[Component], None], Root: Component) -> None

        允许流系统按照子控件在工具栏中出现的顺序加载和保存它们。
        GetChildren 是在 TComponent 中引入的，用于加载和保存 VCL 组件的流系统。它为工具栏中的所有按钮以及以工具栏为父级且以 Root 指定为所有者的组件的任何其他控件执行 Proc 指定的回调。
        Proc 是流系统用于在表单上加载或保存持久对象的回调。
        根是当前正在加载或保存的顶级组件（例如表单或数据模块）。"""
    def GetEnumerator(self, *args, **kwargs) -> Any:
        """返回 TComponent 枚举器。

        Vcl.ComCtrls.TToolBar.GetEnumerator 继承自System.Classes.TComponent.GetEnumerator。此行下面的所有内容均引用 System.Classes.TComponent.GetEnumerator。
        返回 TComponent 枚举器。
        GetEnumerator 返回一个 TComponentEnumerator 引用，该引用枚举指定包含组件中包含的组件。
        要处理所有这些子组件，请在 While MoveNext do 循环中调用 TComponentEnumerator GetCurrent 方法。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        用于将焦点设置到工具按钮所在的窗口控件上。"""
    def TrackMenu(self, Button: ToolButton) -> bool:
        """当工具栏按钮的快捷键被按下时，会调用该方法。

        TrackMenu 方法会在工具栏按钮的快捷键被按下时自动响应并调用。它负责初始化下拉菜单按钮的菜单，并将点击事件转发给底层的 Windows 控件。
        Button 是指被按下快捷键的工具栏按钮。
        如果您想在工具栏按钮的快捷键被按下时执行额外的操作，可以在派生类中重写 TrackMenu 方法。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ToolButton(Control):
    """TToolButton 的包装"""
    __hash__: ClassVar[None] = ...
    Action: BasicAction
    """BasicAction：指定与控件关联的操作。

        Action 是与控件关联的操作对象。操作允许应用程序集中对用户命令的响应。当控件与操作关联时，操作将确定控件的相应属性和事件（例如控件是否启用或它如何响应 OnClick 事件）。
        要在设计时创建操作，请将操作列表组件放置在表单或数据模块上。双击操作列表以打开操作列表编辑器。使用编辑器的上下文菜单在编辑器中添加操作。使用“动作列表”编辑器添加动作后，它们将出现在“对象检查器”的“动作”属性的下拉列表中。"""
    AllowAllUp: bool
    """用于指示工具按钮是否允许所有按钮都处于弹起状态。"""
    AutoSize: bool
    """bool：指定控件是否自动调整自身大小以适应其内容。

        使用 AutoSize 指定控件是否自动调整自身大小。当 AutoSize 为 True 时，控件会在其内容更改时自动调整大小。
        默认情况下，AutoSize 为 False。"""
    Caption: str
    """str：指定一个文本字符串，用于向用户标识该控件。

        使用 Caption 指定标记控件的文本字符串。
        要在标记组件的标题中的某个字符下划线，请在该字符前添加一个与号 (&)。这种类型的字符称为加速器字符。然后，用户可以通过在键入带下划线的字符时按 ALT 来选择组件。要在标题中显示与号字符，请使用两个与号 (&&)。

        笔记：
        显示文本的控件使用 Caption 属性或 Text 属性来指定文本值。使用的属性取决于控件的类型。一般来说，Caption 用于显示为窗口标题或标签的文本，而 Text 用于显示为控件内容的文本。
        对于某些控件，例如 TButton，无法更改标题的颜色。如果要更改按钮标题的颜色，应使用替代按钮类型，例如 TSpeedButton 或 TBitBtn，而不是 TButton。使用 TSpeedButton 或 TBitBtn，您可以使用 Font 属性更改 Caption 属性的颜色。
        对于 TLinkLabel，HTML 标记在运行时或设计时在 Caption 属性内声明。"""
    Down: bool
    """用于指示工具按钮是否处于按下状态。"""
    DragCursor: int
    """int：指定拖动控件时用于表示鼠标指针的图像。

        使用 DragCursor 属性可更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    DropdownMenu: PopupMenu
    """用于指定与工具按钮关联的下拉菜单。"""
    EnableDropdown: bool
    """用于指示工具按钮是否启用下拉菜单功能。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Grouped: bool
    """用于指示工具按钮是否属于一个按钮组。"""
    Height: int
    """int：指定控件的垂直尺寸（以像素为单位）。

        使用 Height 属性读取或更改控件的高度。"""
    ImageIndex: int
    """用于指定工具按钮在图像列表中的索引位置。"""
    ImageName: str
    """用于指定工具按钮的图像名称或标识符。"""
    Indeterminate: bool
    """用于指示工具按钮是否处于不确定状态。"""
    Index: int
    """用于获取或设置工具按钮在其父控件（如工具栏）中的位置索引。"""
    Marked: bool
    """用于指示工具按钮是否被标记为已选中或已激活状态。"""
    MenuItem: MenuItem
    """用于在菜单中添加和管理菜单项。"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """当鼠标在控件上移动时，该事件处理程序将被触发。"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    Parent: Any
    """返回/设置控制父级"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ShowHint: bool
    """bool：ShowHint 指定当鼠标指针移到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示会出现在控件正下方的框中。
        要为特定控件启用帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True，并且其父级的 ShowHint 属性必须为 True。
        例如，想象一个组框内的复选框。如果组框的 ShowHint 属性为 True，复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍会显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    Style: ToolButtonStyle
    """获取或设置工具按钮的样式。"""
    Visible: bool
    """bool：指定组件是否显示在屏幕上。

        使用 Visible 属性控制运行时控件的可见性。如果 Visible 为 True，则控件显示。如果 Visible 为 False，则控件不可见。
        调用 Show 方法将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子窗体，Show 和 ShowModal 方法将 Visible 设置为 True，并将表单置于所有打开窗口的前面。
        对于 TTabSheet 子控件，Visible 不控制运行时控件的可见性。有关更多信息，请参阅 TabVisible 属性的描述。"""
    Width: int
    """int：指定控件或窗体的水平尺寸（以像素为单位）。

        使用 Width 属性读取或更改控件的宽度。

        注意：对于选项卡表控件，在运行时更改此属性没有任何效果。"""
    Wrap: bool
    """布尔："""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def BringToFront(self) -> Any:
        """TControl.BringToFront()

        将控件置于其父控件中所有其他控件的前面。"""
    def CheckMenuDropdown(self, *args, **kwargs) -> Any: ...
        """用于检查菜单项是否可以下拉显示子菜单。"""
    def Click(self, *args, **kwargs) -> Any:
        """响应用户点击。

        当用户左键单击该控件时，将自动调用 Click。组件或应用程序代码可以调用 Click 来模拟用户鼠标单击。这通常在菜单操作和热键处理程序中完成。
        正如在 TControl 中实现的那样，Click 查询 OnClick 事件处理程序是否存在，并且与控件的 Action 的 OnExecute 处理程序不同。如果这是 true，则调用 OnClick 事件处理程序。如果该值为 false，并且 Action OnExecute 事件处理程序存在，则调用 Action 的 Execute 方法。覆盖 单击可提供附加行为。"""
    def ClientToScreen(self) -> Any:
        """TControl.ClientToScreen()

        将给定点从客户端区域坐标转换为全局屏幕坐标。"""
    def Create(self, AOwner: Component) -> None:
        """TToolButton.Create(AOwner: Component) -> None

        创建 TControl 的一个实例。
        调用 Create 构造并初始化 TControl 的一个实例。但是，您永远不应尝试实例化 TControl。此类仅用作其他控件类的基类，您只应调用 Create 来实例化其中一个子类。
        Create 调用父构造函数并初始化控件。
        覆盖 Create 时，始终先调用继承的 Create 方法，然后继续控件的初始化。覆盖 Create 方法时，请记住指定 override 指令。

        注意：如果控件的构造函数分配资源或内存，还应覆盖析构函数以释放这些资源。"""
    def Hide(self) -> Any:
        """TControl.Hide()

        隐藏已包装的控件。"""
    def Invalidate(self) -> Any:
        """TControl.Invalidate()

        完全重新绘制控件。"""
    def Repaint(self) -> Any:
        """TControl.Repaint()

        强制控件在屏幕上重新绘制其图像。"""
    def ScreenToClient(self) -> Any:
        """TControl.ScreenToClient()

        将屏幕上指定点的屏幕坐标转换为客户端坐标。"""
    def SendToBack(self) -> Any:
        """TControl.SendToBack()

        将窗口控件放在所有其他窗口控件后面，或将非窗口控件放在所有其他非窗口控件后面。"""
    def SetBounds(self, Left, Top, Width, Height) -> Any:
        """TControl.SetBounds(左、上、宽度、高度)

        一次设置“Left”、“Top”、“Width”和“Height”属性。"""
    def Show(self) -> Any:
        """TControl.Show()

        显示包装的控件"""
    def Update(self) -> Any:
        """TControl.Update()

        立即处理任何待处理的绘制消息。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class TrackBar(WinControl):
    """TTrackBar 是轨迹栏控件的包装。

    使用 TTrackBar 在窗体上放置跟踪栏。轨迹栏使用滑块和可选的刻度线表示沿连续体的位置。轨迹栏还可以显示在选择的开始和结束位置处用三角形刻度标记的选定范围。
    在程序执行过程中，可以通过用鼠标拖动滑块或在栏上单击鼠标来将滑块移动到所需位置。要使用键盘移动滑块，请按箭头键或 Page Up 和 Page Down 键。"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用对齐可将控件与窗体或面板的顶部、底部、左侧或右侧对齐，即使包含控件的窗体、面板或组件的大小发生变化，控件仍会保留在那里。调整父级的大小时，对齐的控件也会调整大小，以便继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具面板，请将面板的对齐值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具面板保持在窗体的左侧，并始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件将保留在窗体或面板上的位置。

        提示：如果将 Align 设置为 alClient，则控件将填充整个客户端区域，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父级内的任何数量的子组件都可以具有相同的对齐值，在这种情况下，它们会沿着父级的边缘堆叠。子控件按 z 顺序堆叠。要调整控件堆叠的顺序，请将控件拖到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一条边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """锚点：指定控件如何锚定到其父级。

        使用锚点可确保控件保持其相对于其父级边缘的当前位置，即使调整父级的大小也是如此。当调整其父级的大小时，控件将保持其相对于其锚定边缘的位置。
        如果某个控件锚定到其父级的相对边缘，则当调整其父级的大小时，该控件会拉伸。例如，如果某个控件的 Anchors 属性设置为 [akLeft, akRight]，则该控件会在其父级的宽度更改时拉伸。
        仅当调整父级大小时才会强制执行锚定。因此，例如，如果在设计时将控件锚定到窗体的相对边缘，并且在最大化状态下创建窗体，则该控件不会拉伸，因为在创建控件后不会调整窗体的大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与锚点不同，对齐允许控件根据其他对齐的同级控件的大小变化以及父控件大小的变化进行调整。"""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用约束指定控件的最小和最大宽度和高度。当约束包含最大值或最小值时，无法调整控件大小以违反这些约束。

        注意：约束适用于表格的高度。但是，窗体的高度取决于 Windows 使标题栏有多大。例如，Windows XP 使用比其他窗口系统大得多的标题栏。要解决此问题，请在设计表单时记下 ClientHeight 并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：请勿设置与 Align 或 Anchors 属性的值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3-D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。某些禁用的控件会变暗（例如：按钮、复选框、标签），而其他控件（容器控件）只会失去其功能而不会改变其外观。如果将 Enabled 设置为 False，则控件会忽略鼠标、键盘和计时器事件。

        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 后代。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Frequency: int
    """int：指定轨迹栏上刻度线之间的增量。

        使用“频率”来指定刻度线的间距，并使用“位置”属性使用的逻辑单位。例如，频率为 5，每隔五个可能的增量设置一个刻度线。要提供有关跟踪栏使用的单位的视觉反馈，请将频率设置为 LineSize 或 PageSize。

        注意：如果 TickStyle 属性的值未设置为 tsAuto，则Frequency 的值将被忽略。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    LineSize: int
    """int：表示当用户按下方向键时Position的值改变的量。

        使用 LineSize 指定沿滑块表示单个单位的距离。当前位置由滑块标记。向右和向下箭头键将 Position 的值增加 LineSize，向左和向上箭头键将 Position 的值减少 LineSize。
        使用 PageSize 属性可设置使用 Page Up 和 Page Down 键移动的刻度数。"""
    Max: int
    """int：指定 TTrackBar 的最大位置。

        使用 Max 设置可以使用轨迹栏表示的值的上限。滑块指示当前位置，范围介于“最小值”和“最大值”之间。"""
    Min: int
    """int：指定 TTrackBar 的最小位置。

        使用 Min 设置可以使用轨迹栏表示的值的下限。滑块指示当前位置，范围介于“最小值”和“最大值”之间。"""
    OnChange: Callable[[Object],None]
    """它在用户改变TrackBar的值时触发。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    OnTracking: Callable[[Object],None]
    """在用户拖动滑块时触发。"""
    Orientation: TrackBarOrientation
    """TrackBarOrientation：指定轨迹栏是水平还是垂直。

        将方向设置为所需的轨迹栏方向。方向有以下可能的值：
        tbHorizontal 轨道的长边与模板的顶部平行。最小位置位于左侧，最大位置位于右侧。
        tbVertical 轨道的长边与模板的侧面平行。最小位置位于顶部，最大位置位于底部。"""
    PageSize: int
    """int：指定按下 PageUp 或 PageDown 键或单击栏时位置更改的量。

        将 PageSize 设置为与单个视图对应的沿轨迹栏的距离。滑块标记当前位置。 Page Up 键将 Position 的值增加 PageSize，Page Down 键将 Position 的值减少 PageSize。
        使用 LineSize 属性设置使用箭头键移动的刻度数。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应该具有三维外观。

        提供 ParentCtl3D 是为了向后兼容。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    Position: int
    """int：包含 TTrackBar 滑块的当前位置。

        读取位置以确定轨迹栏表示的当前值。位置是介于 Min 和 Max（含）之间的值。设置位置以编程方式将轨迹栏的滑块移动到新值。"""
    PositionToolTip: PositionToolTip
    """PositionToolTip：确定显示轨迹栏位置的（可选）工具提示的位置。

        您可以将此属性设置为以下值之一。
        ptNone 没有显示工具提示。
        ptTop 工具提示出现在轨迹栏的顶部。
        ptBottom 工具提示出现在轨迹栏的底部。
        ptLeft 工具提示出现在轨迹栏的左侧。
        ptRight 工具提示出现在轨迹栏的右侧。

        注意：对垂直轨迹栏使用 ptLeft 和 ptRight。使用 ptTop 和 ptBottom 作为水平轨迹栏。"""
    SelEnd: int
    """int：指定选择范围的终点位置。

        设置 SelEnd 以确定从 SelStart 开始的选择的长度。跟踪栏通过在 SelStart 和 SelEnd 属性指定的位置放置特殊刻度标记并突出显示栏的选定部分来指示栏上的选择范围。
        SelEnd 必须大于或等于 Position。如果将 SelEnd 设置为小于 Position 的值，则 Position 更改为 SelEnd。SelEnd 必须大于或等于 SelStart。如果 SelEnd 与 SelStart 相同，则没有选择，Position 的值与 SelStart 和 SelEnd 相同。"""
    SelStart: int
    """int：指定选择范围的起点位置。

        设置 SelStart 以确定运行到 SelEnd 的选择的开始。轨迹栏通过在 SelStart 和 SelEnd 属性指定的位置放置特殊刻度线并突出显示栏的选定部分来指示栏上的选择范围。
        SelStart 必须小于或等于 Position。如果 SelStart 设置为大于 Position 的值，则 Position 会更改为 SelStart。 SelStart 必须小于或等于 SelEnd。如果SelStart 与SelEnd 相同，则没有选择，并且Position 的值与SelStart 和SelEnd 相同。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    ShowSelRange: bool
    """bool：指定轨迹栏是否显示选择范围。

        如果设置为 True，则显示轨迹栏上的选择范围。如果设置为 False，则不显示选择范围。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SliderVisible: bool
    """bool：指定轨迹栏的滑块是否可见。

        使用 SliderVisible 获取或设置轨迹栏的滑块是否可见。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，您可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，指定当前样式的哪些元素要应用于此控件。默认情况下，该样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    ThumbLength: int
    """int：指定轨迹栏滑块的长度。

        使用 ThumbLength 获取或设置轨迹栏滑块的长度。"""
    TickMarks: TickMark
    """TickMark：指定刻度线的位置。

        设置 TickMarks 以指定应在何处绘制刻度线。 TickMarks 具有以下可能的值：
        tmBottomRight 右下角
        刻度线位于轨迹栏的底部或右侧，具体取决于方向的值。
        tmTopLeft 左上
        刻度线位于轨迹栏的顶部或左侧，具体取决于方向的值。
        tmBoth 两者
        刻度线位于轨迹栏的两侧。

        如果 TickStyle 属性为 tsNone，则忽略 TickMarks 的值。"""
    TickStyle: TickStyle
    """TickStyle：指定刻度线在轨迹栏上的放置方式。

        设置 TickStyle 以指定轨迹栏是否应显示刻度线，如果是，则如何设置这些刻度线。 TickStyle 有以下可能的值：
        tsAuto 刻度线会自动以等于“频率”属性值的增量显示。
        tsManual 刻度线显示在最小值和最大值处。可以使用 SetTick 方法设置其他刻度线。
        tsNone 不显示刻度线。"""
    Touch: TouchManager
    """TouchManager：指定与控件关联的触摸管理器组件。

        使用 Touch 属性访问与控件关联的手势选项。 Touch 指定了一个 TTouchManager 类型的类。
        触摸用于：

        关联一个 TGestureManager。
        （TGestureManager 管理控件可以使用的所有手势。）
        选择与控件关联的标准、交互式或自定义手势。
        （您还可以将每个手势连接到一个操作；请参阅将操作分配给手势。）
        指定一组用于交互式或平板电脑手势的选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子窗体，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 子控件，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def Create(self, AOwner: Component) -> None:
        """TTrackBar.Create(AOwner: 组件) -> 无

        创建并初始化 TTrackBar 的实例。
        调用Create在运行时实例化一个TTrackBar对象。在设计时放置在表单上的轨迹栏是自动创建的。
        Create 分配内存并初始化以下属性：
        ControlStyle 设置为 [csCaptureMouse、csClickEvents、csSetCaption]。
        频率设置为 1。
        高度设置为 45，宽度设置为 150。
        LineSize 设置为 1，PageSize 设置为 2。
        最大值设置为 10，最小值设置为 0。
        方向设置为 trHorizo​​ntal。
        TickMarks 设置为 tbBottomRight，TickStyle 设置为 tsAuto。
        TabStop 设置为 true。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def SetTick(self, Value: int) -> None:
        """TTrackBar.SetTick(值: int) -> 无

        将刻度线添加到轨迹栏的指定位置。
        使用 SetTick 在条上与 Value 参数对应的位置放置刻度线。仅当 TickStyle 设置为 tsManual 时，才会显示以此方式指定的刻度线。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class TreeNodes(Persistent):
    """用于存储和管理TTreeView控件中的节点数据及层次结构。"""
    def Create(self, AOwner: Component) -> None:
        """用于创建一个TTreeNodes对象实例，初始化树节点集合。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """用于销毁TTreeNodes对象实例，释放其占用的资源。"""
    def AddChildFirst(self, *args, **kwargs) -> Any:
        """用于在指定节点的子节点列表的最前面添加一个新的子节点。"""
    def AddChild(self, *args, **kwargs) -> Any:
        """用于在指定节点下添加一个新的子节点。"""
    def AddChildObjectFirst(self, *args, **kwargs) -> Any:
        """用于在指定节点的子节点列表最前面添加一个新的子节点，并关联一个对象。"""
    def AddChildObject(self, *args, **kwargs) -> Any:
        """用于在指定节点的子节点列表最后面添加一个新的子节点，并关联一个对象。"""
    def AddObjectFirst(self, *args, **kwargs) -> Any:
        """用于在树节点集合的最前面添加一个新的节点，并关联一个对象。"""
    def AddObject(self, *args, **kwargs) -> Any:
        """用于在树节点集合的最后面添加一个新的节点，并关联一个对象。"""
    def AddNode(self, *args, **kwargs) -> Any:
        """用于在指定位置添加一个新的树节点，可指定父节点和插入位置。"""
    def AddFirst(self, *args, **kwargs) -> Any:
        """用于在树节点集合的最前面添加一个新的节点。"""
    def Add(self, *args, **kwargs) -> Any:
        """用于在树节点集合的最后面添加一个新的节点。"""
    def AlphaSort(self, *args, **kwargs) -> bool:
        """用于对树节点集合中的节点进行排序。"""
    def Assign(self, *args, **kwargs) -> Any:
        """用于将一个树节点集合的内容复制到另一个树节点集合中。"""
    def BeginUpdate(self, *args, **kwargs) -> Any:
        """用于开始更新树节点集合，防止在更新过程中控件重绘，以提高性能。"""
    def Clear(self, *args, **kwargs) -> Any:
        """用于清除树节点集合中的所有节点。"""
    def Delete(self, *args, **kwargs) -> Any:
        """用于删除树节点集合中指定索引的节点。"""
    def EndUpdate(self, *args, **kwargs) -> Any:
        """用于结束更新树节点集合，允许控件重新绘制，以显示最新的节点状态。"""
    def GetFirstNode -> Any:
        """用于获取树节点集合中的第一个节点。"""
    def GetEnumerator -> Any:
        """用于获取一个枚举器，以便遍历树节点集合中的所有节点。"""
    def GetNode(self, *args, **kwargs) -> Any:
        """用于根据索引获取树节点集合中的特定节点。"""
    def Insert(self, *args, **kwargs) -> Any:
        """用于在树节点集合的指定索引位置插入一个新的节点。"""
    def InsertObject(self, *args, **kwargs) -> Any:
        """用于在指定索引位置插入一个新的节点，并关联一个对象。"""
    def InsertNode(self, *args, **kwargs) -> Any:
        """用于在指定位置插入一个新的树节点，可指定父节点和插入位置。"""
    def CustomSort(self, *args, **kwargs) -> bool:
        """用于对树节点集合中的节点进行自定义排序。"""
    def CustomSort(self, *args, **kwargs) -> bool:
        """用于根据用户定义的比较函数对树节点进行排序。"""
    Count: int
    """用于获取树节点集合中的节点总数。"""
    Handle: Any
    """用于获取与树节点集合关联的树形控件的窗口句柄。"""
    Item: Any
    """用于根据索引访问树节点集合中的特定节点。"""
    Owner: Any
    """用于获取拥有该树节点集合的TTreeView控件实例。"""

class TreeNode(Persistent):
    """TTreeNode 的包装器"""
    __hash__: ClassVar[None] = ...
    AbsoluteIndex: int
    """用来确定树节点对象中一个节点的绝对位置。"""
    CheckState: NodeCheckState
    """用于表示节点的选中状态。"""
    Checked: bool
    """用于表示该节点是否被选中（或者说“被检查”）。"""
    ClassName: Any
    """返回 TObject.ClassName"""
    Count: int
    """使用Count来确定拥有树节点对象的树视图中树节点的数量。在迭代Item属性数组中的项时，Count提供了一个上界。"""
    Cut: bool
    """在剪切和粘贴操作中选择树节点时，使用“剪切”命令来更改该节点的外观。"""
    Data: Pointer
    """使用 Data 属性将数据与树节点关联起来。Data 允许应用程序快速访问与节点对应的实体的信息。"""
    Deleting: bool
    """如果节点对象正在被删除，则delete返回true。使用delete来防止事件处理程序中的无限递归。"""
    DropHighlighted: bool
    """用于指示一个节点是否正在作为拖放操作的目标。"""
    DropTarget: bool
    """确定树形视图中的某个节点是否被绘制为拖拽操作的目标。"""
    Enabled: bool
    """用于控制节点的启用或禁用状态。"""
    Expanded: bool
    """用于确定节点是否处于展开状态。"""
    ExpandedImageIndex: int
    """用于设置或获取当节点展开时显示的图像的索引。"""
    Focused: bool
    """用来指示哪个节点当前被聚焦。"""
    Handle: int
    """使用Handle获取拥有树节点对象的树视图的句柄。"""
    HasChildren: bool
    """用于指示该节点是否有子节点。"""
    ImageIndex: int
    """指定了与树节点关联的图像的索引。"""
    Index: int
    """表示节点在其父节点的子节点列表中的位置索引。"""
    IsVisible: bool
    """如果节点位于级别0或其所有父节点都展开，则该节点可见。IsVisible指示节点是否为当前树视图图像的一部分。它不指示当树形视图图像大于树形视图控件的大小时是否将节点滚动到视图中。"""
    Item: TreeNode
    """使用Item根据子节点的Index属性访问子节点。第一个子节点的索引为0，第二个子节点的索引为1，依此类推。"""
    ItemId: HREEITEM
    """在调用Windows API或调用拥有该项的ttreenode的GetNode方法时，使用此属性来引用节点。"""
    Level: int
    """表示该节点在树形结构中的层级。"""
    OverlayIndex: int
    """用于指定要在节点上显示的图像叠加的索引。"""
    Owner: TreeNodes
    """使用Owner属性访问树视图控件，该控件显示由TTreeNodes对象维护的节点。"""
    Parent: TreeNode
    """用于指示节点在树中的父节点。"""
    Selected: bool
    """用来确定哪个节点是当前被选中的。"""
    SelectedIndex: int
    """获取选中节点的索引"""
    StateIndex: int
    """用于表示节点的自定义状态或图标。"""
    Text: str
    """用于设置或检索节点的文本标签。"""
    TreeView: CustomTreeView
    """自定义树视图："""
    __bound__: Any
    """如果包装器仍绑定到实例，则返回 True。"""
    __owned__: Any
    """如果包装器拥有实例，则返回 True。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def AlphaSort(self, ARecurse: bool) -> bool:
        """TTreeNode.AlphaSort 用于对当前节点的子节点进行字母顺序排序。"""
    def Assign(self, persistent) -> Any:
        """TPersistent.Assign用于从一个对象复制其属性值到另一个对象。

        将另一个 TPersistent 对象的值分配给该对象。"""
    def Collapse(self, Recurse: bool) -> None:
        """TTreeNode.Collapse（递归：bool）->无.

        用于折叠指定的树节点，隐藏其下的所有子节点。"""
    def Create(self, AOwner: TreeNodes) -> None:
        """创建新树节点的方法。

        在首次使用对象之前构造一个对象并初始化其数据。
        Create 构造一个对象。对象的用途、大小和行为有很大不同。 TObject 定义的 Create 构造函数分配内存但不初始化数据。
        后代对象通常定义一个构造函数，用于创建特定类型的对象并初始化其数据。

        注意：如果构造函数中出现异常，则调用对象的析构函数来清理失败的实例。"""
    def CustomSort(self, SortProc: Callable[[int,int,int],int], Data: int, ARecurse: bool) -> bool:
        """对 TTreeView 控件中的节点进行自定义排序"""
    def Delete(self, *args, **kwargs) -> Any: ...
        """删除一个 TTreeNode（TreeNode 的实例）。"""
    def DeleteChildren(self, *args, **kwargs) -> Any: ...
        """删除指定节点下的所有子节点。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TPersistent 实例并释放其内存。

        不要直接调用 Destroy。而是调用 Free。在调用 Destroy 之前，Free 检查对象引用是否不为 nil。"""
    def DisplayRect(self, TextOnly: bool) -> Rect:
        """用来获取一个控件（可能是 TCustomEdit 或类似的文本输入控件）的显示矩形，这个矩形可能根据是否只包含文本（TextOnly 参数）而有所不同。"""
    def EditText(self, *args, **kwargs) -> Any: ...
        """用于接收用户的文本输入。"""
    def EndEdit(self, Cancel: bool) -> None:
        """用于指示是否应取消编辑。"""
    def Expand(self, Recurse: bool) -> None:
        """树节点展开"""
    def GetHandle(self, *args, **kwargs) -> Any: ...
        """获取句柄。"""
    def GetLastChild(self, *args, **kwargs) -> Any: ...
        """获取给定节点（TreeNode）的最后一个子节点。"""
    def GetNamePath(self) -> Any:
        """TPersistent.GetNamePath()

        返回该对象在“对象察看器”中所显示的名称。"""
    def GetNext(self, *args, **kwargs) -> Any: ...
        """获取给定节点（TreeNode）的后一个节点。"""
    def GetNextChild(self, Value: TreeNode) -> TreeNode:
        """用于获取特定节点（TreeNode）的下一个子节点的方法。"""
    def GetNextVisible(self, *args, **kwargs) -> Any: ...
        """返回能看得到的下一个项"""
    def GetPrev(self, *args, **kwargs) -> Any: ...
        """获取给定节点（TreeNode）的前一个节点。"""
    def GetPrevChild(self, Value: TreeNode) -> TreeNode:
        """获取给定节点（TreeNode）的前一个子节点。"""
    def GetPrevVisible(self, *args, **kwargs) -> Any: ...
        """返回能看得到的上一个项"""
    def HasAsParent(self, Value: TreeNode) -> bool:
        """用于检查一个给定的 TreeNode（树节点）是否是另一个 TreeNode（通常是 self）的父节点或更高层级的节点。"""
    def IndexOf(self, Value: TreeNode) -> int:
        """用于获取一个特定的 TreeNode 在 TTreeNodes 对象中的索引。"""
    def IsFirstNode(self, *args, **kwargs) -> Any: ...
        """用来判断一个节点是否是第一个节点。"""
    def MakeVisible(self, *args, **kwargs) -> Any: ...
        """用于确保某个元素是可见的。"""
    def MoveTo(self, Destination: TreeNode, Mode: NodeAttachMode) -> None:
        """将一个节点移动到另一个位置。"""
    def getFirstChild(self, *args, **kwargs) -> Any: ...
        """"用于获取同级节点的第一个节点。"""
    def getNextSibling(self, *args, **kwargs) -> Any: ...
        """"用于获取同级节点的后一个节点。"""
    def getPrevSibling(self, *args, **kwargs) -> Any: ...
        """"用于获取同级节点的前一个节点。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class TreeView(CustomTreeView):
    """TTreeView 的包装"""
    __hash__: ClassVar[None] = ...
    Align: Align
    """对齐：确定控件在其容器（父控件）内的对齐方式。

        使用“对齐”将控件与窗体或面板的顶部、底部、左侧或右侧对齐，并且即使包含该控件的窗体、面板或组件的大小发生变化，也使其保持在原处。当调整父级的大小时，对齐的控件也会调整大小，以便它继续跨越父级的顶部、底部、左侧或右侧边缘。
        例如，要将带有各种控件的面板组件用作工具选项板，请将面板的 Align 值更改为 alLeft。面板的 Align 属性的 alLeft 值可确保工具选项板保持在窗体的左侧，并且始终等于窗体的客户端高度。
        Align 的默认值为 alNone，这意味着控件保持其在窗体或面板上的位置。

        提示：如果“对齐”设置为 alClient，则控件会填充整个客户区，因此无法通过单击来选择父窗体。在这种情况下，通过选择窗体上的控件并按 ESC 键或使用对象检查器来选择父级。
        单个父组件中的任意数量的子组件可以具有相同的对齐值，在这种情况下，它们沿着父组件的边缘堆叠。子控件按 z 顺序堆叠。要调整控件的堆叠顺序，请将控件拖动到所需的位置。

        注意：要使控件与其父级的边缘保持指定的关系，但不一定位于父级的一个边缘，请改用 Anchors 属性。"""
    Anchors: Anchors
    """Anchors：指定控件如何锚定到其父级。

        使用 Anchors 可确保控件保持其相对于其父级边缘的当前位置，即使父级的大小已调整。当其父级的大小已调整时，控件将保持其相对于其锚定到的边缘的位置。
        如果控件锚定到其父级的相对边缘，则控件会在其父级的大小调整时拉伸。例如，如果控件的 Anchors 属性设置为 [akLeft, akRight]，则控件会在其父级的宽度更改时拉伸。
        仅在调整父级大小时强制使用 Anchors。因此，例如，如果控件在设计时锚定到窗体的相对边缘，并且窗体是在最大化状态下创建的，则控件不会拉伸，因为窗体在创建控件后不会调整大小。

        注意：如果控件应与其父级的三个边缘保持接触（紧贴父级的一侧并拉伸该侧的长度），请改用 Align 属性。与 Anchors 不同，Alignment 允许控件根据其他对齐的同级控件的大小变化以及父级控件的大小变化进行调整。"""
    AutoExpand: bool
    """用来控制文本框、列表框或其他可视化元素是否应该根据内容自动调整其大小。"""
    BevelEdges: BevelEdges
    """BevelEdges：指定控件的哪些边缘是斜角的。

        使用 BevelEdges 获取或设置控件的哪些边缘是斜角的。 BevelInner、BevelOuter 和 BevelKind 属性确定指定边的外观。"""
    BevelInner: BevelCut
    """BevelCut：指定内斜面的切口。

        使用 BevelInner 指定内斜面是凸起、降低还是平坦的外观。
        内斜面会立即出现在外斜面内。如果没有外斜面（BevelOuter 为 bvNone），内斜面会立即出现在边框内。"""
    BevelKind: BevelKind
    """BevelKind：指定控件的斜角样式。

        使用 BevelKind 修改斜角的外观。 BevelKind 影响斜角的突出程度。
        BevelKind 与 BevelWidth 以及 BevelInner 或 BevelOuter 指定的斜角切割相结合，可以创建多种效果。尝试各种组合以获得您想要的外观。"""
    BevelOuter: BevelCut
    """BevelCut：指定外斜角的切割。

        使用 BevelOuter 指定外斜角是否具有凸起、降低或平坦的外观。
        外部斜角立即出现在边框内部和内部斜角外部。"""
    BevelWidth: int
    """int：指定内斜角和外斜角的宽度。

        使用 BevelWidth 指定内斜角和外斜角的宽度（以像素为单位）。"""
    BiDiMode: BiDiMode
    """BiDiMode：指定控件的双向模式。

        当应用程序在从右到左而不是从左到右读取的区域设置中运行时，使用 BiDiMode 使控件能够自动调整其外观和行为。双向模式控制文本的阅读顺序、垂直滚动条的位置以及是否更改对齐方式。
        对于已知包含数字、日期、时间或货币值的控件，对齐方式不会更改。例如，对于数据感知控件，以下字段类型的对齐方式不会更改：ftSmallint、ftInteger、ftWord、ftFloat、ftCurrency、ftBCD、ftDate、ftTime、ftDateTime、ftAutoInc。"""
    BorderStyle: BorderStyle
    """边框样式："""
    BorderWidth: int
    """int：指定控件边框的宽度。

        使用 BorderWidth 获取或设置控件边框的宽度。由控件绘制的图形或文本被剪切到边框内的区域。"""
    ChangeDelay: int
    """用于存储某种延迟的数值"""
    CheckBoxes: bool
    """用于表示该组件的单元格是否应显示为复选框。"""
    CheckStyles: CheckStyles
    """检查样式："""
    Color: int
    """int：指定控件的背景颜色。

        使用颜色读取或更改控件的背景颜色。
        如果控件的 Vcl.Controls.TControl.ParentColor 属性为 True，则更改控件父控件的 Color 属性会自动更改控件的 Color 属性。当 Color 属性的值更改时，控件的 ParentColor 属性会自动设置为 False。
        TLabel 的颜色始终是背景颜色，除非将 TLabel.Transparent 设置为 False。"""
    Constraints: SizeConstraints
    """SizeConstraints：指定控件的大小约束。

        使用 Constraints 指定控件的最小和最大宽度和高度。当 Constraints 包含最大值或最小值时，控件不能调整大小以违反这些约束。

        注意：约束适用于窗体的高度。但是，窗体的高度取决于 Windows 的标题栏大小。例如，Windows XP 使用的标题栏比其他窗口系统大得多。要解决此问题，请在设计窗体时注意 ClientHeight，并在 FormCreate 事件中设置约束。在以下示例中，ClientHeight 由 x 表示：Constraints.MinHeight?:= x + Height - ClientHeight。
        警告：不要设置与 Align 或 Anchors 属性值冲突的约束。当这些属性发生冲突时，控件对调整大小尝试的响应没有明确定义。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    Ctl3D: bool
    """bool：确定控件具有三维 (3D) 还是二维外观。

        提供 Ctl3D 是为了向后兼容。 32 位版本的 Windows 或 NT4.0 及更高版本不使用它，但 Windows XP Home 除外，偶尔会使用它。
        在早期平台上，Ctl3D 控制控件是否具有平面或斜角外观。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    DragCursor: int
    """int：指定当控件被拖动时用于表示鼠标指针的图像。

        使用 DragCursor 属性可以更改拖动控件时显示的光标图像。

        注意：要使自定义光标可用于 DragCursor 属性，请参阅 Cursor 属性。"""
    DragKind: DragKind
    """DragKind：指定控件是正常拖动还是用于停靠。

        使用 DragKind 获取或设置控件是否参与拖放操作或拖放操作。"""
    DragMode: DragMode
    """DragMode：指定控件如何启动拖放或拖放操作。

        使用 DragMode 来控制用户何时可以拖动控件。通过将 DragMode 属性值设置为 dmManual，可以在运行时禁用拖放或拖放功能。通过将 DragMode 设置为 dmAutomatic 启用自动拖动。有关 dmManual 和 dmAutomatic 的更多信息，请参阅 TDragMode。"""
    Enabled: bool
    """bool：控制控件是否响应鼠标、键盘和计时器事件。

        使用 Enabled 更改控件对用户的可用性。要禁用控件，请将 Enabled 设置为 False。一些禁用的控件显示为灰色（例如：按钮、复选框、标签），而其他控件（容器控件）只是失去其功能而不改变其外观。如果 Enabled 设置为 False，则控件将忽略鼠标、键盘和计时器事件。
        要重新启用控件，请将 Enabled 设置为 True。

        注意：此属性适用于所有 TControl 派生类。"""
    Focused: Any
    """确定控件是否具有输入焦点。"""
    Font: Font
    """字体：指定控件上或控件中写入的文本的属性。

        要更改为新字体，请指定新的 TFont 对象。要修改字体，请更改 TFont 对象的字符集、颜色、高度、名称、间距、大小或样式的值。

        注意：某些控件（例如 TButton）不支持更改标题的字体颜色。在大多数情况下，您可以使用另一个控件，其 Font 属性将更改标题或文本的颜色（例如 TBitBtn 或 TSpeedButton）。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    HandleAllocated: Any
    """报告该控件是否存在屏幕对象句柄。"""
    HideSelection: bool
    """这个属性决定了当控件失去焦点时，其内部的文本选择（即高亮部分）是否应该被隐藏。"""
    HotTrack: bool
    """它决定了当鼠标悬停在控件上时，控件是否应该显示一个“热点”或突出显示。"""
    Images: CustomImageList
    """自定义图像列表"""
    Indent: int
    """缩进"""
    Items: TreeNodes
    """控件中所有的树节点。"""
    MultiSelect: bool
    """用于指示某个组件是否支持多选功能。"""
    MultiSelectStyle: MultiSelectStyle
    """用于定义多选模式的行为和外观。"""
    OnAddition: Callable[[Object,TreeNode],None]
    """在节点被增加时触发。"""
    OnAdvancedCustomDraw: Callable[[CustomTreeView,Rect,CustomDrawStage,bool],None]
    """用于提供高级自定义绘制功能。"""
    OnAdvancedCustomDrawItem: Callable[[CustomTreeView,TreeNode,CustomDrawState,CustomDrawStage,bool,bool],None]
    """用于自定义绘制控件（如 TCustomTreeView）的项目。"""
    OnCancelEdit: Callable[[Object,TreeNode],None]
    """当编辑被取消（而不是被接受）时触发。"""
    OnChange: Callable[[Object,TreeNode],None]
    """用于响应某种控件或组件的值或状态改变。"""
    OnChanging: Callable[[Object,TreeNode,bool],None]
    """改变某些值或状态时触发。"""
    OnCheckStateChanged: Callable[[CustomTreeView,TreeNode,NodeCheckState],None]
    """当树节点（TreeNode）的复选框状态（NodeCheckState）发生变化时，会触发此事件。"""
    OnCheckStateChanging: Callable[[CustomTreeView,TreeNode,NodeCheckState,NodeCheckState,bool],None]
    """在树节点的复选框状态即将改变时触发"""
    OnClick: Callable[[Object],None]
    """用于响应控件（如按钮、菜单项等）的点击事件。"""
    OnCollapsed: Callable[[Object,TreeNode],None]
    """当用户折叠（收起）一个树节点时触发"""
    OnCollapsing: Callable[[Object,TreeNode,bool],None]
    """在某个节点即将被折叠（即其子节点不再显示）时触发。"""
    OnCompare: Callable[[Object,TreeNode,TreeNode,int,int],None]
    """用于自定义排序操作，特别是在与树形结构（如 TTreeView 或 TVirtualTreeView 等）交互时。"""
    OnContextPopup: Callable[[Object,Point,bool],None]
    """用于响应鼠标右键点击组件时弹出的上下文菜单（也称为右键菜单或弹出菜单）。"""
    OnCreateNodeClass: Callable[[CustomTreeView,TreeNodeClass],None]
    """用于自定义TTreeView组件中节点的类。"""
    OnCustomDraw: Callable[[CustomTreeView,Rect,bool],None]
    """用于自定义控件的绘制过程，以便为控件提供自定义的外观或行为。"""
    OnCustomDrawItem: Callable[[CustomTreeView,TreeNode,CustomDrawState,bool],None]
    """自定义树节点的绘制方式。"""
    OnDblClick: Callable[[Object],None]
    """用于响应鼠标双击事件。"""
    OnDeletion: Callable[[Object,TreeNode],None]
    """当某个节点（由 TreeNode 表示）被删除时触发。"""
    OnDragDrop: Callable[[Object,Object,int,int],None]
    """用于处理拖放操作中的放置（drop）事件。"""
    OnDragOver: Callable[[Object,Object,int,int,DragState,bool],None]
    """用于响应拖放操作中的"拖过"事件。"""
    OnEdited: Callable[[Object,TreeNode,str],None]
    """当用户直接编辑并修改了组件的某些内容（例如TListView组件中的项的标签）后，该事件会被触发。"""
    OnEditing: Callable[[Object,TreeNode,bool],None]
    """Callable[[Object, TreeNode, bool], None]:"""
    OnEndDock: Callable[[Object,Object,int,int],None]
    """在组件（例如 TDockPanel 或 TDockSite）完成停靠操作后触发的事件。"""
    OnEndDrag: Callable[[Object,Object,int,int],None]
    """在拖放操作结束时触发，即当用户释放鼠标按钮时。"""
    OnEnter: Callable[[Object],None]
    """用于响应某个控件（比如 TEdit、TMemo 等）获得焦点时触发的事件。"""
    OnExit: Callable[[Object],None]
    """当切换到其它组件使该组件失去焦点时触发的事件"""
    OnExpanded: Callable[[Object,TreeNode],None]
    """在用户展开一个树节点（TreeNode）时被触发。"""
    OnExpanding: Callable[[Object,TreeNode,bool],None]
    """在树形结构的节点被展开时触发。"""
    OnGesture: Callable[[Object,GestureEventInfo,bool],None]
    """用于处理与手势相关的交互，例如滑动、缩放、旋转等。"""
    OnGetImageIndex: Callable[[Object,TreeNode],None]
    """通常在树形视图组件需要显示一个节点时触发，并允许开发者基于节点的数据或状态返回一个图像索引，该索引随后用于从图像列表中选择并显示图像。"""
    OnGetSelectedIndex: Callable[[Object,TreeNode],None]
    """用于获取某个控件或组件的当前选中索引时触发。"""
    OnHint: Callable[[Object,TreeNode,str],None]
    """用于在鼠标悬停在树节点上时显示提示信息。"""
    OnKeyDown: Callable[[Object,int,ShiftState],None]
    """用于响应键盘按键的按下事件。"""
    OnKeyPress: Any
    """用于响应用户在具有键盘焦点的控件上按下并释放某个键时触发的事件。"""
    OnKeyUp: Callable[[Object,int,ShiftState],None]
    """当用户在窗体或控件上释放键盘按键时触发的。"""
    OnMouseActivate: Callable[[Object,MouseButton,ShiftState,int,int,int,MouseActivate],None]
    """用于响应当一个控件的鼠标活动状态改变时，例如当鼠标指针进入或离开控件，或者当用户在控件上点击鼠标时。"""
    OnMouseDown: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """用于响应鼠标按下事件。"""
    OnMouseEnter: Callable[[Object],None]
    """用于处理当鼠标指针进入控件的边界时触发的事件。"""
    OnMouseLeave: Callable[[Object],None]
    """响应鼠标指针离开该控件区域时触发的事件。"""
    OnMouseMove: Callable[[Object,ShiftState,int,int],None]
    """用于处理鼠标在窗体或控件上移动的事件"""
    OnMouseUp: Callable[[Object,MouseButton,ShiftState,int,int],None]
    """在鼠标按钮在窗体或控件上释放时被触发。"""
    OnStartDock: Callable[[Object,DragDockObject],None]
    """通常在开始停靠操作时被触发，允许开发者自定义停靠过程的开始行为。"""
    OnStartDrag: Callable[[Object,DragObject],None]
    """用于响应用户开始的拖动操作。此事件在用户尝试开始拖动组件时触发，例如在鼠标点击并移动一个可拖动的组件时。"""
    ParentBiDiMode: bool
    """bool：指定控件是否使用其父控件的 BiDiMode。

        使用 ParentBiDiMode 获取或设置控件是否使用其父级的 BiDiMode。当 ParentBiDiMode 为 true 时，控件的 BiDiMode 属性始终等于其父控件的 BiDiMode 属性。如果 ParentBiDiMode 为 false，则控件使用其自己的 BiDiMode 属性。
        对于表单中的所有控件，将 ParentBiDiMode 设置为 true，以确保整个用户界面以统一的方式调整为中东语言环境。
        当控件的 BiDiMode 属性值更改时，ParentBiDiMode 自动变为 false。"""
    ParentColor: bool
    """bool：指定控件在何处查找其颜色信息。

        要让控件使用与其父控件相同的颜色，请将 ParentColor 设置为 True。如果 ParentColor 为 False，则控件使用其自己的 Color 属性。
        将所有控件的 ParentColor 设置为 True，以确保窗体上的所有控件具有统一的外观。例如，如果窗体中所有控件的 ParentColor 均为 True，则将窗体的背景颜色更改为灰色会导致窗体上的所有控件也具有灰色背景。
        当控件的 Color 属性值更改时，ParentColor 自动变为 False。"""
    ParentCtl3D: bool
    """bool：确定组件的外观，以确定它是否应具有三维外观。

        ParentCtl3D 是为了向后兼容而提供的。它对 32 位版本的 Windows 或 NT 4.0 及更高版本没有影响。
        ParentCtl3D 确定控件是否使用其父级的 Ctl3D 属性。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentFont: bool
    """指定控件查找其字体信息的位置。

        若要使控件使用与其父控件相同的字体，请将 ParentFont 设置为 true。如果 ParentFont 为 false，则控件将使用自身的 Font 属性。
        许多控件默认将 ParentFont 设置为 true，以确保表单或其他容器中的所有控件呈现统一外观。当控件的 Font 属性值发生变化时，ParentFont 将自动变为 false。
        对于一个表单而言，若 ParentFont 为 true，则该表单将使用默认字体。目前，默认字体是 8 点 Tahoma 字体。"""
    ParentShowHint: bool
    """用于指示控件是否继承其父控件的显示提示属性。

        使用ParentShowHint可以确保表单上的所有控件要么统一显示其帮助提示，要么统一不显示。
        如果ParentShowHint为True，那么控件将使用其父级控件的ShowHint属性值来决定是否显示帮助提示。如果ParentShowHint为False，那么控件将使用其自身的ShowHint属性值来决定。
        如果想在表单上只为选定的控件提供帮助提示，可以将那些需要显示帮助提示的控件的ShowHint属性设置为True，此时ParentShowHint会自动变为False。

        注意：要启用或禁用整个应用程序的所有帮助提示，请使用应用程序对象的ShowHint属性。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PopupMenu: PopupMenu
    """PopupMenu：指定与控件关联的弹出菜单。

        为 PopupMenu 指定一个值，以便在用户选择该控件并单击鼠标右键时显示​​弹出菜单。如果TPopupMenu的AutoPopup属性为True，弹出菜单会自动出现。如果菜单的 AutoPopup 属性为 False，则通过从控件的 OnContextPopup 事件处理程序调用其 Popup 方法来显示菜单。"""
    ReadOnly: bool
    """用于指示某个数据项或对象是否是只读的。"""
    RightClickSelect: bool
    """用来控制是否允许用户通过右键点击来选择或激活某个对象或项。"""
    RowSelect: bool
    """用于控制某种行选择的功能。"""
    ShowButtons: bool
    """用于控制是否显示与某些组件相关联的按钮。"""
    ShowHint: bool
    """bool: ShowHint 指定当鼠标指针移动到控件上时是否显示帮助提示。

        ShowHint 确定是否为控件显示帮助提示。帮助提示是 TControl.Hint 属性的值。当鼠标指针移到控件上时，帮助提示将出现在控件正下方的框中。
        要启用特定控件的帮助提示，必须满足两个条件：

        应用程序的 ShowHint 属性必须为 True。
        控件自己的 ShowHint 属性必须为 True，或者控件的 ParentShowHint 属性必须为 True 并且其父级的 ShowHint 属性必须为 True。
        例如，假设组框中有一个复选框。如果组框的 ShowHint 属性为 True，并且复选框的 ParentShowHint 属性为 True，但复选框的 ShowHint 属性为 False，则复选框仍显示其帮助提示。
        更改 ShowHint 值会自动将 ParentShowHint 属性设置为 False。"""
    ShowLines: bool
    """用于控制某些可视化组件（如 TStringGrid、TDrawGrid 或自定义的绘图控件等）是否显示网格线。"""
    ShowRoot: bool
    """用于控制是否显示某个结构的根节点或元素。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    SortType: SortType
    """排序类型："""
    StateImages: CustomImageList
    """指定一个自定义的图像列表（TCustomImageList）来显示与每个项目状态相关联的图像。"""
    StyleElements: StyleElements
    """StyleElements：指定控件使用的样式元素。

        使用 StyleElements 自定义控件的样式。如果启用了自定义样式，则可以启用或禁用控件中的样式元素。
        StyleElements 是一组值，用于指定当前样式的哪些元素将应用于此控件。默认情况下，样式的所有元素均已启用。"""
    StyleName: str
    """用于定义或获取与某个控件或组件相关的样式名称。这个属性在 VCL（Visual Component Library）中的某些控件中特别有用，特别是当你想自定义控件的外观时。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    ToolTips: bool
    """bool：用于控制是否启用工具提示功能。"""
    Touch: TouchManager
    """TouchManager： 指定与控制相关联的触摸管理器组件。

        使用 Touch 属性来访问与控制相关的手势选项。 Touch 指定了一个类型为 TTouchManager 的类。
        Touch 用于：

        关联一个 TGestureManager。 (TGestureManager 管理所有可由控件使用的手势。)
        选择要与控件相关联的标准、交互式或自定义手势。 (您还可以将每个手势连接到一个动作；参见将动作分配给手势。)
        为交互式或平板电脑手势指定一组选项。"""
    Visible: bool
    """bool：指定组件是否出现在屏幕上。

        使用 Visible 属性可以控制运行时控件的可见性。如果 Visible 为 True，则显示该控件。如果 Visible 为 False，则控件不可见。
        调用 Show 方法会将控件的 Visible 属性设置为 True。调用 Hide 方法将其设置为 False。
        对于 TCustomForm 子体，Show 和 ShowModal 方法将 Visible 设置为 True，并将窗体置于所有打开的窗口的前面。
        对于 TTabSheet 子控件，Visible 不控制运行时控件的可见性。有关详细信息，请参阅 TabVisible 属性的说明。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以接收焦点。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        将输入焦点赋予控件。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class VarParameter:
    """允许从 Python 修改变量参数的容器对象"""
    __hash__: ClassVar[None] = ...
    Value: Any
    """提供对与 Var 参数关联的值的访问"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class WinControl(Control):
    """TWinControl 是所有为 Microsoft Windows 屏幕对象提供封装的控件的基类。

    TWinControl 为所有作为 Microsoft Windows 屏幕对象（即“窗口”）封装的控件提供了通用的功能。那些封装底层窗口的控件具有以下特点：

    控件可以整合底层窗口的功能。例如，如果底层的屏幕对象是一个文本编辑器，那么这个控件就可以整合编辑器管理和显示文本缓冲区的能力。
    控件可以接收用户的输入焦点。获得焦点的控件可以处理键盘输入事件。一些控件在获得焦点时会改变它们的外观。例如，按钮控件通常会通过在标题周围绘制一个矩形来表示获得了焦点。
    控件可以作为其他控件的容器，这些被包含的控件被称为子控件。这种关系通过子控件的Parent属性来表示。容器控件为它们的子控件提供重要的服务，包括为那些没有实现自己画布的控件提供显示服务。容器控件的例子包括窗体、面板和工具栏。
    基于TWinControl的控件可以显示Microsoft Windows提供的标准屏幕对象，或者由VCL程序员开发的自定义屏幕对象。
    TWinControl的派生类包括支持大多数用户界面对象的抽象基类。最重要的派生类是TCustomControl，它提供了实现画布和处理绘制消息的代码。其他重要的抽象派生类包括TScrollingWinControl、TButtonControl、TCustomComboBox、TCustomEdit和TCustomListBox。在定义新的控件类时，请考虑这些派生类，而不是直接从TWinControl派生。
    每个TWinControl对象都有一个Handle属性，它提供了底层Microsoft Windows屏幕对象的窗口句柄。使用Handle属性可以绕过VCL API，直接访问底层的窗口。"""
    __hash__: ClassVar[None] = ...
    AlignDisabled: bool
    """bool：表示禁用子控件重新对齐。

        如果通过调用DisableAlign 暂时禁用了子控件重新对齐，AlignDisabled 将返回true。"""
    Brush: Brush
    """画笔：确定用于绘制控件背景的颜色和图案。

        Brush 属性访问 TBrush 对象，该对象确定控件背景的图案和颜色。 Brush 是只读属性，但应用程序可以通过设置其属性或使用其分配方法来操作 TBrush 对象。"""
    ControlCount: Any
    """返回包含的控件的数量"""
    Controls: Any
    """返回包含控件的迭代器"""
    DockClientCount: int
    """int：指定停靠在窗口控件上的控件数量。

        使用DockClientCount属性来获取停靠在窗口控件上的控件数量。当遍历DockClients属性时，这个值可以用作上限。

        注意：DockClients属性可能包含不可见的控件。要获取可见的已停靠客户端的数量，请使用VisibleDockClientCount属性代替。"""
    DockClients: Control
    """DockClients 属性通常是一个 TControl 类型的列表，它包含当前停靠到该容器的所有控件。"""
    DockManager: IDockManager
    """IDockManager：指定控件的停靠管理器接口。

        使用DockManager来指定控件的停靠管理器。停靠管理器负责处理停靠区域（控件停靠的位置）的布局以及与停靠区域相关的任何绘制操作。
        如果将DockSite和UseDockManager设置为true，但未为DockManager分配值，则窗口化控件将使用全局的DefaultDockTreeClass变量生成默认的停靠管理器。"""
    DockSite: bool
    """bool：指定该控件是否可以作为拖放停靠操作的目标。

        将DockSite设置为true，以允许其他控件停靠到这个窗口化控件上。"""
    DoubleBuffered: bool
    """bool：确定控件的图像是直接渲染到窗口还是首先绘制到内存中的位图。

        当 DoubleBuffered 为 false 时，窗口控件将自身直接绘制到窗口。当 DoubleBuffered 为 true 时，窗口控件将自身绘制到内存中的位图，然后使用该位图绘制窗口。双缓冲可减少控件重绘时的闪烁量，但会占用更多内存。
        当窗口控件是停靠站点并且具有关联的停靠管理器时，它必须是双缓冲的。

        注意：某些控件（例如 TRichEdit）无法将自身绘制到位图中。对于此类控件，DoubleBuffered 必须设置为 false。"""
    Handle: Any
    """为控件提供访问底层Windows屏幕对象的功能。"""
    IsDrawingLocked: bool
    """bool：当此控件的重绘被锁定时，IsDrawingLocked 属性返回 True。当对该控件的 LockDrawing 调用次数少于 UnlockDrawing 调用次数时，它为 True。"""
    MouseInClient: bool
    """bool：指示鼠标指针当前是否位于控件的工作区。

        使用 MouseInClient 检查鼠标指针当前是否位于控件的工作区。 MouseInClient 还在内部用于触发 OnMouseEnter 和 OnMouseLeave 事件。"""
    Padding: Padding
    """填充：指定控件的填充。

        使用 Padding 指定控件的填充。该值是 TPadding 类的实例。"""
    ParentDoubleBuffered: bool
    """ParentDoubleBuffered 这个属性决定了此组件的DoubleBuffered属性是否遵循其父组件的DoubleBuffered属性的值。

        ParentDoubleBuffered是一个布尔值，当它为真（True）时，表示此组件的DoubleBuffered属性被其父组件的DoubleBuffered属性的值所覆盖。"""
    ParentWindow: Any
    """引用父级的底层控制。"""
    PixelsPerInch: int
    """用来获取或设置当前设备或上下文的分辨率。"""
    RedrawDisabled: bool
    """bool：当此控件的重绘被锁定时，RedrawDisabled 属性返回 True。它与 IsDrawingLocked 类似，但使用 Win32 API 来确定何时禁用 Win32 窗口重绘。

        例如，当使用 LockDrawing 锁定父控件重绘时，IsDrawingLocked 对于父控件返回 True，对于子控件返回 False。 RedrawDisabled 对父控件和子控件都返回 True。"""
    Showing: Any
    """指示控件是否显示在屏幕上。"""
    TabOrder: int
    """int：指示控件在其父级 Tab 键顺序中的位置。

        TabOrder 是当用户按 Tab 键时访问子窗口的顺序。 TabOrder 值为 0 的控件是窗体首次出现时获得焦点的控件。
        最初，选项卡顺序总是按照控件被添加到窗体中的顺序。添加到窗体的第一个控件的 TabOrder 值为 0，第二个为 1，第三个为 2，依此类推。通过更改 TabOrder 属性来更改此设置。
        每个控件在其父控件中都有一个唯一的 Tab 键顺序值。如果将一个控件的 TabOrder 属性值更改为与第二个控件的值相同，则所有其他控件的 TabOrder 值都会更改。例如，假设某个控件在 Tab 键顺序中位于第六位。如果将控件的 TabOrder 属性值更改为 3（使控件按 Tab 键顺序排列为第四位），则原本按 Tab 键顺序排列为第四位的控件现在将变为第五位，而原来为第五位的控件将变为第六位。
        为 TabOrder 指定一个大于父控件中包含的控件数的值会将控件移动到 Tab 键顺序的末尾。该控件不采用 TabOrder 的分配值，而是指定一个数字，以确保该控件是 Tab 键顺序中的最后一个。

        注意：只有当 TabStop 属性为 True 且控件有父级时，TabOrder 才有意义。 （除非该窗体是另一个窗体的子窗体，否则不会使用该窗体的 TabOrder 属性。）TabOrder 为 -1 的控件没有父窗体，因此无法通过按 Tab 键来访问。要从 Tab 键顺序中删除父级控件，请将其 TabStop 属性设置为 False。"""
    TabStop: bool
    """布尔值（Bool）: 确定用户是否可以通过按Tab键访问控件。

        使用TabStop属性来允许或禁止用户使用Tab键访问控件。
        如果TabStop属性为True，则控件在Tab键的访问顺序中。如果TabStop属性为False，则控件不在Tab键的访问顺序中，用户无法通过按TAB键来移动到该控件。

        注意：除非表单为其指定了父表单，否则对于表单而言，TabStop属性没有意义。"""
    UseDockManager: bool
    """bool：指定在拖放操作中是否使用停靠管理器。

        使用 UseDockManager 来获取或设置在拖放和停靠操作中是否使用了停靠管理器。停靠管理器负责处理停靠控件的定位以及这些控件周围的停靠区域的任何绘制。
        如果不使用停靠管理器，停靠的控件将根据它们被释放时最接近的边缘与窗口化控件对齐。当不使用停靠管理器时，用户没有可以抓取的区域来自动取消停靠控件。"""
    VisibleDockClientCount: int
    """int：指定停靠在窗口控件上的可见控件的数量。

        使用 VisibleDockClientCount 确定 DockClients 列表中 Visible 属性值为 true 的控件的数量。该值小于或等于 DockClientCount 的值。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化对象本身。

        用于初始化新创建的对象的状态。请参阅 help(type(self)) 以获取准确的签名。"""
    def Broadcast(self, Message) -> None:
        """TWinControl.Broadcast(消息) -> 无

        向每个子控件发送一条消息。
        当您想要向窗口控件中包含的每个子控件发送相同的消息时，请使用广播。指定要传递的消息作为 Message 参数的值。"""
    def CanFocus(self) -> Any:
        """TWinControl.CanFocus()

        指示控件是否可以获得焦点。"""
    def ContainsControl(self, Control: Control) -> bool:
        """TWinControl.ContainsControl(Control: Control) -> bool

        指示指定的控件是否存在于控件内。
        使用 ContainsControl 来确定是否在此控件内存在特定的控件。如果 Control 参数的指定值是此控件的子控件，则 ContainsControl 返回 true。Control 参数不必是直接的子控件（在 Controls 属性中），而可能包含在控件的子控件中，或控件的子控件的子控件中，等等，可以深入到多个级别。
        如果方法返回 false，则表示指定的控件不在控件内。"""
    def ControlAtPos(self, Pos: Point, AllowDisabled: bool, AllowWinControls: bool, AllLevels: bool) -> Control:
        """用于确定在给定坐标位置上的子控件的方法。

        返回位于控件内指定位置的子控件。
        使用 ControlAtPos 确定哪个子控件位于控制内的指定位置。ControlAtPos 返回控件的直接子控件；即，Controls 属性的一项，该项将控件作为 Parent 属性。
        将客户端坐标中的位置指定为 Pos 参数的值。 Pos 可以位于子控件边界内的任何位置，而不仅仅是左上角。
        使用 AllowDisabled 参数确定是否在搜索控件时包括禁用控件。
        使用 AllowWinControls 参数确定在查找子控件时是否考虑 TWinControl 的子控件。
        如果在指定位置没有符合 AllowDisabled 和 AllowWinControls 参数的控件，则 ControlAtPos 返回空。"""
    def Create(self, AOwner: Component) -> None:
        """用于创建新的 TWinControl 对象或其派生类的实例的方法。

        创建 TWinControl 的实例。
        调用Create方法可以创建并初始化一个新的控件，并将新创建的控件插入到指定的父控件中，该父控件由AOwner参数指定。Create方法通过调用父控件的InsertComponent方法将控件插入到父控件中。
        大多数控件都重写了Create方法，以初始化其独特的属性。重写Create方法的对象必须始终先调用继承的Create方法，然后再进行特定于组件的初始化。在重写Create方法时，请指定重写指示。
        如果组件的Create方法分配了资源或内存，则需要重写Destroy方法以释放这些资源。"""
    def CreateParented(self, ParentWindow: int) -> None:
        """用于创建一个窗口控件并将其与一个已经存在的父窗口关联的方法。

        用于创建一个具有指定父窗口的控件或窗口。这里，ParentWindow是一个整数参数，代表父窗口的句柄或标识符。"""
    @classmethod
    def CreateParentedControl(cls, ParentWindow: int) -> WinControl:
        """用于在指定的父窗口或控件中创建一个新的控件，并使其与该父窗口或控件相关联。

        创建并初始化一个控件作为指定非 VCL 窗口的子窗口。
        调用 CreateParentedControl 将新控件嵌入到非 VCL 父控件中。
        CreateParentedControl 为与控件相同的类或由 vmt 参数指定的类（C++）的新实例分配内存，将其 ParentWindow 属性设置为 ParentWindow，并调用构造函数，传入空为 Owner 参数。 CreateParentedControl 返回新创建的控件。
        CreateParentedControl 与 CreateParented 具有相同的用途，但它是一个简单的类函数而不是构造函数。与 CreateParented 不同，CreateParentedControl 可以从 C++ 代码中调用。"""
    def DefaultHandler(self, Message) -> None:
        """用于处理那些没有被其他特定消息处理器处理的 Windows 消息。

        重写 DefaultHandler 以更改控件的默认消息处理。 Message参数可以转换为TMessage类型，以获取消息的WParam、LParam和Result。如果消息的结果不为零，则消息已被处理。将 Result 字段设置为非零值，以防止继承的方法进一步处理消息。

        注意：在消息处理方法中调用继承会导致调用基类的 DefaultHandler 方法，除非基类为消息指定了显式处理程序。
        TWinControl 重写 TControl DefaultHandler 方法来处理其所有派生类型的消息。 DefaultHandler 使用 CallWindowProc API 函数将任何未处理的消息传递给控件的窗口过程。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """销毁 TWinControl 的实例。

        不要直接在应用程序中调用 Destroy。而应该调用 Free。Free 会先验证 TWinControl 引用是否不为空，然后才会调用 Destroy。"""
    def DisableAlign(self, *args, **kwargs) -> Any:
        """禁用子控件的重新对齐。

        调用DisableAlign暂时阻止子控件重新对齐。例如，在执行控件的多个操作（例如从表单文件读取或缩放）时，如果在所有操作完成之前不重新对齐子控件，则性能会提高。 EnableAlign 方法恢复正常的子重新对齐。
        每次对DisableAlign 的调用之后都必须跟随着对EnableAlign 的匹配调用。如果在调用DisableAlign 后可能引发异常，请使用异常块以确保始终调用EnableAlign。
        DisableAlign/EnableAlign 调用序列可以嵌套。内部计数器记录嵌套的级别。只要计数器为正，重新对齐就会被禁用，并且 AlignDisabled 属性返回 true。一旦计数器返回到零，就启用重新对齐并且 AlignDisabled 返回 false。"""
    def DockDrop(self, Source: DragDockObject, X: int, Y: int) -> None:
        """一个控件被拖放到一个停靠区域时触发。

        生成 OnDockDrop 事件。
        当控件停靠到窗口控件时，会自动调用 DockDrop。它指示正在放下的控件为停靠操作做好准备，然后生成 OnDockDrop 事件。
        尽管您可以重写 DockDrop 来执行除生成的 OnDockDrop 事件之外的操作，但通常后代类会重写 DoAddDockClient 方法。这是因为 DoAddDockClient 是由客户端在执行完自己的准备工作之后、OnDockDrop 事件之前调用的。
        仅当 DockSite 为 True 时才调用 DockDrop。"""
    def EnableAlign(self, *args, **kwargs) -> Any:
        """减少由DisableAlign 方法增加的引用计数，最终重新对齐子控件。

        调用 EnableAlign 以允许控件中的子控件在通过调用 DisableAlign 阻止子控件重新对齐后再次重新对齐。
        每次调用DisableAlign 方法时，它都会增加引用计数。每次调用 EnableAlign 时，都会减少相同的引用计数。当引用计数达到零时，EnableAlign 调用 Realign 方法来执行任何挂起的重新对齐。
        请务必将每个对DisableAlign 的调用与对EnableAlign 的调用配对。如果在调用DisableAlign 后可能引发异常，请使用异常块来确保执行对EnableAlign 的相应调用。"""
    def FindChildControl(self, ControlName: str) -> Control:
        """用于在控件的子控件中查找具有指定名称的控件。

        返回给定名称的子控件。
        调用FindChildControl来定位指定的子控件。 FindChildControl 搜索控件的子控件并返回具有指定名称的控件。如果没有子控件与指定名称匹配，FindChildControl 将返回空。

        注意：FindChildControl 仅查找控件的直接子级。它找不到作为控件子级之一的子级的控件。"""
    def FlipChildren(self, AllLevels: bool) -> None:
        """TWinControl.FlipChildren(AllLevels: bool) -> 无

        反转子控件的位置。
        调用 FlipChildren 来翻转控件的子级；也就是说，将控件左侧的子项移动到右侧，反之亦然。 FlipChildren 反转所有子控件的位置并调整其 Align 属性（如有必要）以强制执行新位置。
        AllLevels 指定是否应在控件的子级上递归调用 FlipChildren。
        当应用程序在中东语言环境中运行时，FlipChildren 可用于反转应用程序的布局，其中用户从右到左而不是从左到右阅读：调用 UseRightToLeftAlignment 来确定 BiDiMode 属性是否指示基于系统语言环境的反转对齐。

        注意：FlipChildren 与 IDE 中控件的上下文菜单上的“Flip Children”命令执行相同的操作。"""
    def Focused(self, *args, **kwargs) -> Any:
        """确定控件是否具有输入焦点。

        使用 Focused 方法查看该控件是否是活动控件。当 Focused 返回 true 时，控件具有输入焦点。如果 Focused 返回 false，则用户无法与控件交互。"""
    def GetChildren(self, Proc: Callable[[Component],None], Root: Component) -> None:
        """用于获取 TWinControl 控件的所有子控件。

        为控件的每个子级调用指定的方法。
        GetChildren 由加载和保存组件的流系统调用。应用程序很少需要调用此例程。
        GetChildren 对 Controls 属性列出的每个子控件执行由 Proc 参数指定的回调，该属性将 Root 参数列为其 Owner。
        重写 GetChildren 以限制或增加与控件一起保存的子控件。重写 GetChildren 时，为每个应保存的子控件调用作为 Proc 参数传递的过程。 Root 参数指示拥有该控件的组件（通常是窗体）。"""
    def GetTabControlList(self, List: List) -> None:
        """TWinControl.GetTabControlList(List: List) -> 无

        构建拥有的控件的列表。
        调用 GetTabControlList 构造子控件列表。
        GetTabControlList 循环访问控件的内部 Tab 键顺序列表，将每个子控件添加到 List。结果是 TabOrder 中所有拥有的控件的列表。"""
    def GetTabOrderList(self, List: List) -> None:
        """TWinControl.GetTabOrderList(List: List) -> 无

        按 T​​ab 键顺序构建控件列表。
        调用 GetTabOrderList 以按 Tab 键顺序构造子控件列表。
        GetTabOrderList 循环访问控件的内部 Tab 键顺序列表，将每个子控件添加到 List，包括这些控件中包含的任何控件。结果是所有控件及其拥有的控件的列表，按 Tab 键顺序排列。
        FindNextControl 方法调用 GetTabOrderList 来构建 FindNextControl 用于定位 Tab 键顺序中的下一个控件的控件的完整列表。"""
    def HandleAllocated(self, *args, **kwargs) -> Any:
        """报告该控件是否存在屏幕对象句柄。

        查询 HandleAllocation 以查明控件的基础屏幕对象是否已生成。
        如果屏幕对象存在，HandleAllocation 返回 true。如果屏幕对象不存在，HandleAlulated 返回 false。测试控件的 Handle 属性会直接导致创建窗口（如果该窗口尚不存在）。调用 HandleAllocation 方法来确定窗口是否存在，而不会产生创建窗口的副作用。"""
    def HandleNeeded(self, *args, **kwargs) -> Any:
        """如果控件尚不存在，则为该控件创建一个屏幕对象。

        调用 HandleNeeded 为控件创建屏幕对象。
        如果屏幕对象不存在，HandleNeeded 会在为此控件创建屏幕对象之前调用该控件的父级的 CreateHandle 方法。"""
    def InsertControl(self, AControl: Control) -> None:
        """TWinControl.InsertControl(AControl: Control) -> 无

        将控件插入 Controls 数组属性中。
        应用程序不需要直接调用 InsertControl。在设计时添加或删除子控件时，会自动插入和删除。在运行时，使用子控件的 Parent 属性将其插入 Controls 数组中。如果子控件已经是另一个控件的子控件，则设置 Parent 属性可确保将该子控件从原始父控件的控件中删除。
        InsertControl 使插入的控件成为子控件，使包含控件成为父控件。 AControl 参数是插入到 Controls 数组中的子控件。"""
    def Invalidate(self, *args, **kwargs) -> Any:
        """安排控件重绘。

        Invalidate 通知控件其整个表面需要重新绘制。调用Invalidate可以防止一系列部分重画引起的闪烁。在实际重新绘制控件之前多次调用 Invalidate 不会造成性能损失。
        在更新控件之前，不会发生实际的重绘。要强制立即重新绘制，请改为调用 Repaint。"""
    def LockDrawing(self, *args, **kwargs) -> Any:
        """调用 LockDrawing 方法以防止重绘该控件中的更改。要恢复重绘，请调用 UnlockDrawing 方法。如果在 LockDrawing 调用后重新创建窗口句柄，则控件将保持锁定状态，直到相应的 UnlockDrawing 调用为止。

        LockDrawing / UnlockDrawing 调用可以嵌套。"""
    def PaintTo(self, DC: int, X: int, Y: int) -> None:
        """TWinControl.PaintTo(DC: int, X: int, Y: int) -> None

        将窗口控件绘制到设备上下文。
        调用 PaintTo 在设备上下文上绘制控件。将设备上下文指定为 DC 参数的值，并指定要绘制窗口控件左上角的设备上下文上的 X 和 Y 坐标。PaintTo 首先擦除设备上下文的背景，然后绘制控件。
        PaintTo 可用于将控件的图像绘制到位图 DC 中。

        警告：使用 PaintTo 在画布上绘图时，必须先锁定画布（并在调用 PaintTo 后解锁）。如果不锁定画布，则控件绘制时发生的 Windows 调用可能会导致画布丢失其句柄。"""
    def PreProcessMessage(self, Msg: tagMSG) -> bool:
        """TWinControl.PreProcessMessage(Msg: tagMSG) -> bool

        无论 Msg 的值如何，都返回 False。
        作为 TWinControl 类的成员，PreProcessMessage 始终返回 False，无论 Msg 的值是什么。

        注意：在子类中重写 PreProcessMessage 时，我们建议实现如下：如果 Msg 是预处理消息，则返回 True，否则返回 False。"""
    def Realign(self, *args, **kwargs) -> Any:
        """强制控件重新排列子项。

        当引用计数达到零时，EnableAlign 方法调用 Realign。它根据子控件的对齐属性调整其大小和位置。
        如果所有子控件的 Align 属性都设置为 alNone，则重新对齐不起作用。"""
    def RemoveControl(self, AControl: Control) -> None:
        """TWinControl.RemoveControl(AControl: Control) -> 无

        从 Controls 数组中删除指定的控件。
        RemoveControl 从 Controls 属性中删除子控件。调用RemoveControl后，该控件不再是AControl参数指定的子控件的父控件。
        应用程序不应直接调用RemoveControl。在设计时添加或删除子控件时，会自动插入和删除。在运行时，使用子控件的 Parent 属性将其从 Controls 数组中删除。"""
    def Repaint(self, *args, **kwargs) -> Any:
        """重新绘制整个控件。

        调用 Repaint 来重新绘制控件。
        正如在 TWinControl 中实现的那样，Repaint 调用 Invalidate 方法，然后调用 Update 方法来重新绘制控件。"""
    def ScaleBy(self, M: int, D: int) -> None:
        """TWinControl.ScaleBy(M: int, D: int) -> 无

        重新缩放控件及其子控件。
        ScaleBy 调整控件的大小而不移动其左上角。这与更改 Height 和 Width 属性类似，但控件还尝试重新缩放和重新排列任何子控件以保持其相对大小和位置。
        M 和 D 参数定义用于缩放控制的乘数和除数。例如，要使控件达到其原始大小的 75%，请将 M 的值指定为 75，将 D 的值指定为 100。任何具有相同比例的值对都具有相同的效果。因此，M = 3 和 D = 4 也使控件变为其先前大小的 75%。
        要重新缩放控件的子控件而不重新缩放控件本身，请使用 ScaleControls。"""
    def ScaleForPPI(self, NewPPI: int) -> None:
        """TWinControl.ScaleForPPI(NewPPI: int) -> 无

        函数用来根据新的像素密度（PPI，Pixels Per Inch）来缩放图像或界面元素。参数self通常指代对象实例自身，而NewPPI则是一个整数参数，表示新的像素密度值。"""
    def ScrollBy(self, DeltaX: int, DeltaY: int) -> None:
        """TWinControl.ScrollBy(DeltaX: int, DeltaY: int) -> 无

        滚动控制内容。
        调用 ScrollBy 滚动控件内的内容。虽然 ScrollBy 可用于任何 TWinControl对象，但将其用于 TScrollingWinControl 的子对象是最有意义的。
        应用程序很少需要调用 ScrollBy 方法，除非它们实现自己的滚动接口而不是依赖滚动条。
        DeltaX 参数是沿 X 轴的像素变化。正 DeltaX 值会将内容向右滚动；负值会将内容向左滚动。 DeltaY 参数是沿 Y 轴的像素变化。正 DeltaY 值会向下滚动内容；负值向上滚动内容。"""
    def SetBounds(self, ALeft: int, ATop: int, AWidth: int, AHeight: int) -> None:
        """TWinControl.SetBounds(ALeft: int, ATop: int, AWidth: int, AHeight: int) -> 无

        一次性设置窗口控件的边界属性。
        使用 SetBounds 一次性更改控件的所有边界属性。通过分别设置 Left、Top、Width 和 Height 属性可以实现相同的效果。通过一次设置所有四个属性，SetBounds 确保控件不会在更改之间重新绘制
        将 Left、Top、Width 和 Height 属性的值分别指定为 ALeft、ATop、AWidth 和 AHeight 参数的值。"""
    def SetDesignVisible(self, Value: bool) -> None:
        """TWinControl.SetDesignVisible(值: bool) -> 无

        使控件在设计时可见。
        Vcl.Controls.TWinControl.SetDesignVisible 继承自Vcl.Controls.TControl.SetDesignVisible。该行以下的所有内容均引用Vcl.Controls.TControl.SetDesignVisible。
        SetDesignVisible 在窗体设计期间由内部使用。"""
    def SetFocus(self) -> Any:
        """TWinControl.SetFocus()

        用于将键盘的输入焦点设置到特定的控件上。"""
    def UnlockDrawing(self, *args, **kwargs) -> Any:
        """调用 UnlockDrawing 方法以允许重绘该控件中的更改。

        LockDrawing / UnlockDrawing 调用可以嵌套。"""
    def Update(self, *args, **kwargs) -> Any:
        """强制更新控件。

        更新会重新绘制过时的控制表面的任何部分。通常，更新会自动发生，但在可能会干扰自动更新的冗长处理之前可能需要进行 Update 调用。不必要地调用 Update 会增加开销并导致屏幕闪烁。
        更新仅重新绘制已确定为过时的控件区域。要强制立即重新绘制整个控件，请调用 Repaint 方法。要通知控件它已过期（不强制立即重新绘制），请调用 Invalidate 方法。"""
    def UpdateControlState(self, *args, **kwargs) -> Any:
        """响应状态变化。

        当发生任何可能影响控件内部状态的显示更改时，会自动调用 UpdateControlState。
        正如在 TWinControl 中实现的那样，UpdateControlState 会爬升父控件链，以验证链中每个控件的 Showing 是否等于 true。如果是这种情况，UpdateControlState 将确保该控件及其所有子控件的 Showing 属性是准确的。子控件类可以扩展此行为。"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class ToolWindow(WinControl):
    """ToolWindow类用于创建可交互的工具窗口，继承自Delphi中的TWinControl类。

    它是所有能够接收输入焦点的控件的基类，包括窗体、按钮、文本框等。
    ToolWindow提供了用于设计自定义界面的基础功能。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ToolWindow类的实例并初始化其状态。该方法会设置工具窗口的基本属性和结构，为后续的使用做准备。"""
    EdgeBorders: Any
    """EdgeBorders属性用于控制窗体的边框显示情况。

        具体来说，它定义了窗体四周的哪些边框（左、上、右、下）是可见的。
        该属性是一个集合类型，允许开发人员指定显示窗体的边框组合，以便定制窗体的外观。
        选项包括：
        ebLeft：显示左边框。
        ebTop：显示上边框。
        ebRight：显示右边框。
        ebBottom：显示下边框。"""
    EdgeInner: Any
    """EdgeInner属性用于控制窗体内部边框的显示。
    这个属性通常与EdgeBorders一起使用，以更好地控制窗体的视觉效果。EdgeInner的设置可以影响控件与窗体内部的布局和美观程度。"""
    EdgeOuter: Any
    """EdgeOuter属性用于控制窗体外部边框的显示。这个属性允许开发人员设置窗体的外部边框样式，以增强用户界面的整体效果。EdgeOuter的配置可以与EdgeBorders一起使用，以提供更灵活的外观定制选项。"""

class CustomActionBar(ToolWindow):
    """CustomActionBar类继承自ToolWindow，用于创建自定义操作栏。

    CustomActionBar提供了丰富的属性和方法，用于定制操作栏的外观和行为。它允许开发人员创建灵活且功能强大的用户界面组件。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomActionBar类的实例并初始化其状态。该方法会设置操作栏的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomActionBar类的实例。该方法会释放实例占用的资源和内存，确保操作栏被正确地销毁。"""
    def CreateControl(self, *args, **kwargs) -> Any:
        """CreateControl函数用于创建操作栏的控件。该方法可以用于动态生成操作栏中的控件，满足自定义界面的需求。"""
    def DesignWndProc(self, *args, **kwargs) -> Any:
        """DesignWndProc函数用于处理设计时窗口消息。该方法在设计模式下拦截并处理特定的窗口消息，以支持设计时的操作和交互。"""
    def DoDropCategory(self, *args, **kwargs) -> Any:
        """DoDropCategory函数用于处理类别拖放操作。该方法在类别被拖放到操作栏上时执行相应的处理逻辑。"""
    def FindAccelItem(self, *args, **kwargs) -> Any:
        """FindAccelItem函数用于查找加速键对应的项。该方法根据提供的参数查找并返回匹配的操作栏项。"""
    def DragDrop(self, *args, **kwargs) -> Any:
        """DragDrop函数用于处理拖放操作。该方法在拖放操作发生时执行相应的处理逻辑，以实现拖放功能。"""
    def FindFirst(self) -> Any:
        """FindFirst函数用于查找第一个项。该方法返回操作栏中的第一个项。"""
    def FindFirstVisibleItem(self) -> Any:
        """FindFirstVisibleItem函数用于查找第一个可见项。该方法返回操作栏中第一个可见的项。"""
    def FindLastVisibleItem(self) -> Any:
        """FindLastVisibleItem函数用于查找最后一个可见项。该方法返回操作栏中最后一个可见的项。"""
    def RecreateControls(self, *args, **kwargs) -> Any:
        """RecreateControls函数用于重新创建控件。该方法重新生成操作栏中的所有控件，以适应新的布局或配置。"""
    def SetBounds(self, *args, **kwargs) -> Any:
        """SetBounds函数用于设置控件的边界。该方法根据提供的参数调整操作栏控件的大小和位置。"""
    def IsCustomStyleActive(self) -> Any:
        """IsCustomStyleActive函数用于检查自定义样式是否激活。该方法返回一个布尔值，指示当前是否启用了自定义样式。"""
    def Style(self) -> Any:
        """Style函数用于获取或设置操作栏的样式。该方法返回当前应用的样式对象。"""
    def StyleServices(self) -> Any:
        """StyleServices函数用于获取样式服务。该方法返回样式服务对象，用于处理自定义样式的应用和管理。"""
    ActionManager: Any
    """ActionManager用于管理操作栏中的所有动作。使用ActionManager属性可以访问和管理操作栏中的动作。该属性允许开发人员动态添加、删除或修改操作栏中的动作。"""
    ActionClient: Any
    """ActionClient表示操作栏的客户端。使用ActionClient属性可以获取和设置操作栏的客户端。该属性用于管理和维护操作栏与其客户端之间的关系。"""
    AllowHiding: bool
    """AllowHiding指定是否允许隐藏操作栏。使用AllowHiding属性可以控制操作栏是否可以被隐藏。如果设置为True，则用户可以隐藏操作栏；如果设置为False，则操作栏始终可见。"""
    AutoSizing: bool
    """AutoSizing指定是否自动调整操作栏的大小。使用AutoSizing属性可以控制操作栏是否根据其内容自动调整大小。如果设置为True，则操作栏会自动调整大小以适应其内容；如果设置为False，则操作栏大小保持不变。"""
    Caption: Any
    """Caption表示操作栏的标题。使用Caption属性可以获取和设置操作栏的标题文本。该属性用于显示在操作栏上的标题信息。"""
    Canvas: Any
    """Canvas用于绘制操作栏的画布对象。使用Canvas属性可以访问操作栏的绘图画布。该属性允许开发人员在操作栏上自定义绘图和渲染操作。"""
    Color: Any
    """Color表示操作栏的背景颜色。使用Color属性可以获取和设置操作栏的背景颜色。该属性用于改变操作栏的外观和风格。"""
    ColorMap: Any
    """ColorMap表示操作栏的颜色映射。使用ColorMap属性可以访问和设置操作栏的颜色映射对象。该属性用于定义操作栏中各个元素的颜色。"""
    ContextBar: bool
    """ContextBar指定操作栏是否作为上下文栏使用。使用ContextBar属性可以控制操作栏是否作为上下文栏显示。如果设置为True，则操作栏作为上下文栏使用；如果设置为False，则作为普通操作栏使用。"""
    Designable: bool
    """Designable指定操作栏是否可设计。使用Designable属性可以控制操作栏是否在设计时可编辑。如果设置为True，则操作栏在设计时可编辑；如果设置为False，则操作栏在设计时不可编辑。"""
    Font: Any
    """Font表示操作栏的字体。使用Font属性可以获取和设置操作栏的字体对象。该属性用于定义操作栏中显示文本的字体样式。"""
    DesignMode: bool
    """DesignMode指定操作栏是否处于设计模式。使用DesignMode属性可以控制操作栏是否处于设计模式。如果设置为True，则操作栏处于设计模式；如果设置为False，则操作栏处于运行模式。"""
    HorzMargin: int
    """HorzMargin表示操作栏的水平边距。使用HorzMargin属性可以获取和设置操作栏的水平边距。该属性用于调整操作栏内容与边框之间的水平间距。"""
    HorzSeparator: bool
    """HorzSeparator指定操作栏是否显示水平分隔符。使用HorzSeparator属性可以控制操作栏是否显示水平分隔符。如果设置为True，则操作栏显示水平分隔符；如果设置为False，则不显示水平分隔符。"""
    Orientation: Any
    """Orientation表示操作栏的方向。使用Orientation属性可以获取和设置操作栏的方向。该属性用于定义操作栏是水平显示还是垂直显示。"""
    PersistentHotKeys: bool
    """PersistentHotKeys指定操作栏是否保持热键。使用PersistentHotKeys属性可以控制操作栏是否保持热键。如果设置为True，则操作栏保持热键；如果设置为False，则热键在某些情况下可能被释放。"""
    ActionControls: Any
    """ActionControls表示操作栏的动作控件集合。使用ActionControls属性可以访问操作栏中的所有动作控件。该属性用于管理和维护操作栏中的动作控件列表。"""
    Spacing: int
    """Spacing表示操作栏控件之间的间距。使用Spacing属性可以获取和设置操作栏中控件之间的间距。该属性用于调整操作栏中各个控件之间的空隙。"""
    Transparent: bool
    """Transparent指定操作栏是否透明。使用Transparent属性可以控制操作栏的透明度。如果设置为True，则操作栏背景透明；如果设置为False，则操作栏背景不透明。"""
    VertMargin: int
    """VertMargin表示操作栏的垂直边距。使用VertMargin属性可以获取和设置操作栏的垂直边距。该属性用于调整操作栏内容与边框之间的垂直间距。"""
    VertSeparator: bool
    """VertSeparator指定操作栏是否显示垂直分隔符。使用VertSeparator属性可以控制操作栏是否显示垂直分隔符。如果设置为True，则操作栏显示垂直分隔符；如果设置为False，则不显示垂直分隔符。"""
    OnControlCreated: Any
    """OnControlCreated表示控件创建完成时的事件处理程序。使用OnControlCreated属性可以设置操作栏控件创建完成时触发的事件处理程序。该属性允许开发人员在控件创建完成后执行自定义操作。"""
    OnGetControlClass: Any
    """OnGetControlClass表示获取控件类时的事件处理程序。使用OnGetControlClass属性可以设置操作栏获取控件类时触发的事件处理程序。该属性允许开发人员自定义操作栏控件的类类型。"""
    OnPaint: Any
    """OnPaint表示操作栏绘制时的事件处理程序。使用OnPaint属性可以设置操作栏绘制时触发的"""

class CustomActionDockBar(CustomActionBar):
    """CustomActionDockBar类继承自CustomActionBar，用于创建支持停靠功能的操作栏。

    CustomActionDockBar扩展了CustomActionBar的功能，提供了额外的方法和属性，以支持操作栏的停靠和布局管理。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomActionDockBar类的实例并初始化其状态。该方法会设置操作栏的基本属性和结构，为后续的使用做准备。"""
    def CalcDockedWidth(self) -> Any:
        """CalcDockedWidth函数用于计算操作栏在停靠状态下的宽度。该方法返回一个值，表示操作栏在停靠状态下的宽度。"""
    def Dock(self, *args, **kwargs) -> Any:
        """Dock函数用于将操作栏停靠到指定位置。该方法根据提供的参数，将操作栏停靠到指定的父容器中。"""

class CustomActionToolBar(CustomActionDockBar):
    """CustomActionToolBar类继承自CustomActionDockBar，用于创建自定义的操作工具栏。

    CustomActionToolBar提供了额外的方法和属性，以支持工具栏的创建、销毁、布局和拖放操作。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomActionToolBar类的实例并初始化其状态。该方法会设置工具栏的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomActionToolBar类的实例。该方法会释放实例占用的资源和内存，确保工具栏被正确地销毁。"""
    def CalcDockedWidth(self) -> Any:
        """CalcDockedWidth函数用于计算工具栏在停靠状态下的宽度。该方法返回一个值，表示工具栏在停靠状态下的宽度。"""
    def CreateControl(self, *args, **kwargs) -> Any:
        """CreateControl函数用于创建工具栏的控件。该方法可以用于动态生成工具栏中的控件，满足自定义界面的需求。"""
    def DoDropCategory(self, *args, **kwargs) -> Any:
        """DoDropCategory函数用于处理类别拖放操作。该方法在类别被拖放到工具栏上时执行相应的处理逻辑。"""
    def DragDrop(self, *args, **kwargs) -> Any:
        """DragDrop函数用于处理拖放操作。该方法在拖放操作发生时执行相应的处理逻辑，以实现拖放功能。"""
    def SetBounds(self, *args, **kwargs) -> Any:
        """SetBounds函数用于设置工具栏控件的边界。该方法根据提供的参数调整工具栏控件的大小和位置。"""
    HiddenCount: int
    """HiddenCount属性用于获取或设置工具栏中隐藏控件的数量。该属性表示当前工具栏中被隐藏的控件数量。"""

class ActionToolBar(CustomActionToolBar):
    """ActionToolBar类继承自CustomActionToolBar，用于创建可定制的操作工具栏。

    ActionToolBar提供了各种属性和事件，以支持工具栏的绘制、布局、交互和拖放操作。"""
    Canvas: Any
    """Canvas属性用于绘制工具栏的画布对象。通过Canvas属性，可以自定义工具栏的外观和图形元素。"""
    ActionManager: Any
    """ActionManager属性用于管理工具栏中的所有动作。该属性允许开发人员动态添加、删除或修改工具栏中的动作。"""
    Align: Any
    """Align属性用于确定工具栏在其容器内的对齐方式。例如，可以将工具栏对齐到容器的顶部、底部、左侧或右侧。"""
    AllowHiding: Any
    """AllowHiding属性用于控制工具栏是否允许隐藏。如果设置为True，用户可以隐藏工具栏；如果设置为False，工具栏始终可见。"""
    Anchors: Any
    """Anchors属性用于指定工具栏如何锚定到其父容器。使用Anchors属性可以确保工具栏在父容器调整大小时保持其相对位置。"""
    BiDiMode: Any
    """BiDiMode属性用于指定工具栏的双向模式。
        该属性控制工具栏文本的阅读顺序、垂直滚动条的位置等。"""
    Caption: Any
    """Caption属性用于指定工具栏的标题。该属性用于显示在工具栏上的标题文本。"""
    Color: Any
    """Color属性用于设置工具栏的背景颜色。通过设置Color属性，可以改变工具栏的外观和风格。"""
    ColorMap: Any
    """ColorMap属性用于指定工具栏的颜色映射。该属性定义了工具栏中各个元素的颜色。"""
    Constraints: Any
    """Constraints属性用于指定工具栏的大小约束。通过设置最小和最大宽度和高度，确保工具栏在调整大小时不会超出这些约束。"""
    Cursor: Any
    """Cursor属性用于指定当鼠标指针位于工具栏上方时显示的光标。通过设置Cursor属性，可以改变工具栏上的鼠标指针样式。"""
    DragCursor: Any
    """DragCursor属性用于指定当工具栏被拖动时显示的鼠标指针。通过设置DragCursor属性，可以自定义拖动工具栏时显示的光标图像。"""
    DragKind: Any
    """DragKind属性用于指定工具栏是正常拖动还是用于停靠。通过设置DragKind属性，可以控制工具栏的拖动行为。"""
    DragMode: Any
    """DragMode属性用于指定工具栏如何启动拖放操作。通过设置DragMode属性，可以启用或禁用工具栏的拖放功能。"""
    EdgeBorders: Any
    """EdgeBorders属性用于控制工具栏的边框显示情况。

        具体来说，它定义了工具栏四周的哪些边框（左、上、右、下）是可见的。选项包括：
        ebLeft：显示左边框。
        ebTop：显示上边框。
        ebRight：显示右边框。
        ebBottom：显示下边框。"""
    EdgeInner: Any
    """EdgeInner属性用于控制工具栏内部边框的显示。该属性通常与EdgeBorders一起使用，以更好地控制工具栏的视觉效果。"""
    EdgeOuter: Any
    """EdgeOuter属性用于控制工具栏外部边框的显示。该属性允许开发人员设置工具栏的外部边框样式，以增强用户界面的整体效果。"""
    Enabled: Any
    """Enabled属性用于控制工具栏是否响应用户交互。如果设置为True，工具栏可以响应用户的输入；如果设置为False，工具栏将被禁用。"""
    Font: Any
    """Font属性用于指定工具栏中文本的字体。通过设置Font属性，可以改变工具栏上文本的样式和外观。"""
    HorzMargin: Any
    """HorzMargin属性用于指定工具栏的水平边距。通过设置HorzMargin属性，可以调整工具栏内容与边框之间的水平间距。"""
    HorzSeparator: Any
    """HorzSeparator属性用于控制工具栏是否显示水平分隔符。如果设置为True，工具栏将显示水平分隔符；如果设置为False，则不显示水平分隔符。"""
    Orientation: Any
    """Orientation属性用于指定工具栏的方向。通过设置Orientation属性，可以控制工具栏是水平显示还是垂直显示。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于指定工具栏是否继承其父容器的双向模式。如果设置为True，工具栏将使用其父容器的BiDiMode属性值。"""
    ParentBackground: Any
    """ParentBackground属性用于指定工具栏是否使用其父容器的背景。如果设置为True，工具栏将使用父容器的背景颜色或图像。"""
    ParentColor: Any
    """ParentColor属性用于指定工具栏是否继承其父容器的颜色设置。如果设置为True，工具栏将使用其父容器的颜色属性值。"""
    ParentFont: Any
    """ParentFont属性用于指定工具栏是否继承其父容器的字体设置。 如果设置为True，工具栏将使用其父容器的字体属性值。"""
    ParentShowHint: Any
    """ParentShowHint属性用于指定工具栏是否继承其父容器的提示设置。如果设置为True，工具栏将使用其父容器的ShowHint属性值。"""
    PersistentHotKeys: Any
    """PersistentHotKeys属性用于指定工具栏是否保持热键。如果设置为True，工具栏将在某些情况下保持热键。"""
    PopupMenu: Any
    """PopupMenu属性用于指定工具栏关联的弹出菜单。通过设置PopupMenu属性，可以为工具栏提供右键菜单功能。"""
    ShowHint: Any
    """ShowHint属性用于指定当鼠标悬停在工具栏上时是否显示提示信息。通过设置ShowHint属性，可以启用或禁用工具栏的提示信息显示。"""
    Spacing: Any
    """Spacing属性用于指定工具栏控件之间的间距。通过设置Spacing属性，可以调整工具栏中各个控件之间的空隙。"""
    StyleName: Any
    """StyleName属性用于指定工具栏的样式名称。通过设置StyleName属性，可以应用特定的样式来改变工具栏的外观。"""
    Touch: Any
    """Touch属性用于指定工具栏的触摸管理器。通过设置Touch属性，可以为工具栏启用触摸和手势功能。"""
    VertMargin: Any
    """VertMargin属性用于指定工具栏的垂直边距。通过设置VertMargin属性，可以调整工具栏内容与边框之间的垂直间距。"""
    Visible: Any
    """Visible属性用于指定工具栏是否显示在屏幕上。通过设置Visible属性，可以控制工具栏的可见性。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在工具栏控件对齐之前触发。通过设置该事件处理程序，可以在控件对齐之前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在工具栏控件对齐时触发。通过设置该事件处理程序，可以在控件对齐时执行自定义操作。"""
    OnControlCreated: Any
    """OnControlCreated事件在工具栏控件创建完成时触发。通过设置该事件处理程序，可以在控件创建完成后执行自定义操作。"""
    OnCanResize: Any
    """OnCanResize事件在工具栏控件调整大小之前触发。通过设置该事件处理程序，可以在控件调整大小之前执行自定义操作。"""
    OnClick: Any
    """OnClick事件在用户点击工具栏时触发。通过设置该事件处理程序，可以在用户点击工具栏时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在工具栏控件调整大小时触发。通过设置该事件处理程序，可以在控件调整大小时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在工具栏显示上下文菜单时触发。通过设置该事件处理程序，可以在工具栏显示上下文菜单时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在工具栏控件成功停靠到目标位置时触发。通过设置该事件处理程序，可以在控件成功停靠时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在工具栏控件正在停靠到目标位置时触发。通过设置该事件处理程序，可以在控件停靠过程中执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在用户双击工具栏时触发。通过设置该事件处理程序，可以在用户双击工具栏时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在工具栏控件被拖放到目标位置时触发。通过设置该事件处理程序，可以在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在工具栏控件被拖动到目标位置时触发。通过设置该事件处理程序，可以在控件被拖动到目标位置时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在工具栏控件结束停靠操作时触发。通过设置该事件处理程序，可以在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在工具栏控件结束拖动操作时触发。通过设置该事件处理程序，可以在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在工具栏控件获得输入焦点时触发。通过设置该事件处理程序，可以在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在工具栏控件失去输入焦点时触发。通过设置该事件处理程序，可以在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在工具栏控件识别手势时触发。通过设置该事件处理程序，可以在控件识别手势时执行自定义操作。"""
    OnGetControlClass: Any
    """OnGetControlClass事件在获取工具栏控件类时触发。通过设置该事件处理程序，可以在获取控件类时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在获取工具栏控件停靠信息时触发。通过设置该事件处理程序，可以在获取停靠信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在工具栏控件响应鼠标激活时触发。通过设置该事件处理程序，可以在控件响应鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在工具栏控件响应鼠标按下时触发。通过设置该事件处理程序，可以在控件响应鼠标按下时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在工具栏控件响应鼠标移动时触发。通过设置该事件处理程序，可以在控件响应鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在工具栏控件响应鼠标抬起时触发。通过设置该事件处理程序，可以在控件响应鼠标抬起时执行自定义操作。"""
    OnPaint: Any
    """OnPaint事件在工具栏控件绘制时触发。通过设置该事件处理程序，可以在控件绘制时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在工具栏控件调整大小时触发。通过设置该事件处理程序，可以在控件调整大小时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在工具栏控件开始停靠操作时触发。通过设置该事件处理程序，可以在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在工具栏控件开始拖动操作时触发。通过设置该事件处理程序，可以在控件开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在工具栏控件解除停靠时触发。通过设置该事件处理程序，可以在控件解除停靠时执行自定义操作。"""

class Animate(WinControl):
    """Animate类继承自WinControl，用于在界面中显示和控制动画。Animate类提供了播放、停止、重置和跳转动画帧的方法，以及动画属性的设置。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建Animate类的实例并初始化其状态。该方法会设置动画控件的基本属性和结构，为后续的使用做准备。"""
    FrameCount: int
    """FrameCount属性用于获取动画的帧数。通过FrameCount属性，可以知道动画包含的总帧数。"""
    FrameHeight: int
    """FrameHeight属性用于获取动画帧的高度。通过FrameHeight属性，可以知道每帧动画的高度，以像素为单位。"""
    FrameWidth: int
    """FrameWidth属性用于获取动画帧的宽度。通过FrameWidth属性，可以知道每帧动画的宽度，以像素为单位。"""
    Open: bool
    """Open属性用于指示动画文件是否已打开。通过Open属性，可以检查动画文件的打开状态。"""
    def Play(self, *args, **kwargs) -> Any:
        """Play函数用于播放动画。 该方法开始播放动画文件中的帧序列。"""
    def Reset(self, *args, **kwargs) -> Any:
        """Reset函数用于重置动画。该方法将动画重置到其初始状态。"""
    def Seek(self, *args, **kwargs) -> Any:
        """Seek函数用于跳转到指定的动画帧。该方法根据提供的帧索引，跳转到动画的特定帧。"""
    def Stop(self, *args, **kwargs) -> Any:
        """Stop函数用于停止动画播放。该方法停止当前正在播放的动画。"""
    ResHandle: Any
    """ResHandle属性用于获取动画资源的句柄。通过ResHandle属性，可以访问动画资源的句柄信息。"""
    ResId: int
    """ResId属性用于获取或设置动画资源的ID。通过ResId属性，可以指定或获取动画资源的标识符。"""
    ResName: str
    """ResName属性用于获取或设置动画资源的名称。通过ResName属性，可以指定或获取动画资源的名称。"""
    Align: Any
    """Align属性用于确定动画控件在其容器内的对齐方式。例如，可以将动画控件对齐到容器的顶部、底部、左侧或右侧。"""
    Active: bool
    """Active属性用于控制动画是否处于活动状态。如果设置为True，动画将自动播放；如果设置为False，动画将停止播放。"""
    Anchors: Any
    """Anchors属性用于指定动画控件如何锚定到其父容器。使用Anchors属性可以确保动画控件在父容器调整大小时保持其相对位置。"""
    AutoSize: Any
    """AutoSize属性用于指定动画控件是否自动调整大小以适应其内容。如果设置为True，控件将根据内容自动调整大小。"""
    BorderWidth: Any
    """BorderWidth属性用于指定动画控件的边框宽度。通过设置BorderWidth属性，可以调整控件的边框厚度。"""
    Center: bool
    """Center属性用于指定动画控件是否居中显示。如果设置为True，动画将居中显示；如果设置为False，动画将根据对齐方式显示。"""
    Color: Any
    """Color属性用于设置动画控件的背景颜色。通过设置Color属性，可以改变动画控件的背景颜色。"""
    CommonAVI: Any
    """CommonAVI属性用于指定动画控件显示的常用AVI文件。通过设置CommonAVI属性，可以选择预定义的AVI动画。"""
    Constraints: Any
    """Constraints属性用于指定动画控件的大小约束。通过设置最小和最大宽度和高度，确保动画控件在调整大小时不会超出这些约束。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于指定动画控件是否使用双缓冲。如果设置为True，可以减少动画的闪烁。"""
    FileName: str
    """FileName属性用于指定动画控件加载的动画文件名。通过设置FileName属性，可以指定要播放的动画文件。"""
    ParentColor: Any
    """ParentColor属性用于指定动画控件是否继承其父容器的颜色设置。如果设置为True，动画控件将使用其父容器的颜色属性值。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于指定动画控件是否继承其父容器的双缓冲设置。如果设置为True，动画控件将使用其父容器的双缓冲属性值。"""
    ParentShowHint: Any
    """ParentShowHint属性用于指定动画控件是否继承其父容器的提示设置。如果设置为True，动画控件将使用其父容器的ShowHint属性值。"""
    Repetitions: int
    """Repetitions属性用于指定动画控件的重复次数。通过设置Repetitions属性，可以控制动画播放的次数。"""
    ShowHint: Any
    """ShowHint属性用于指定当鼠标悬停在动画控件上时是否显示提示信息。通过设置ShowHint属性，可以启用或禁用动画控件的提示信息显示。"""
    StartFrame: Any
    """StartFrame属性用于指定动画控件开始播放的帧索引。通过设置StartFrame属性，可以指定动画从哪一帧开始播放。"""
    StopFrame: Any
    """StopFrame属性用于指定动画控件停止播放的帧索引。通过设置StopFrame属性，可以指定动画在哪一帧停止播放。"""
    Timers: bool
    """Timers属性用于控制动画控件是否使用计时器。如果设置为True，动画控件将使用计时器进行帧更新。"""
    Touch: Any
    """Touch属性用于指定动画控件的触摸管理器。通过设置Touch属性，可以为动画控件启用触摸和手势功能。"""
    Transparent: bool
    """Transparent属性用于指定动画控件是否透明。如果设置为True，动画控件的背景将透明显示。"""
    Visible: Any
    """Visible属性用于指定动画控件是否显示在屏幕上。通过设置Visible属性，可以控制动画控件的可见性。"""
    OnOpen: Any
    """OnOpen事件在动画文件打开时触发。通过设置该事件处理程序，可以在动画文件打开时执行自定义操作。"""
    OnClose: Any
    """OnClose事件在动画文件关闭时触发。通过设置该事件处理程序，可以在动画文件关闭时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在动画控件识别手势时触发。通过设置该事件处理程序，可以在控件识别手势时执行自定义操作。"""
    OnStart: Any
    """OnStart事件在动画开始播放时触发。通过设置该事件处理程序，可以在动画开始播放时执行自定义操作。"""
    OnStop: Any
    """OnStop事件在动画停止播放时触发。通过设置该事件处理程序，可以在动画停止播放时执行自定义操作。"""

class CustomHint(Component):
    """CustomHint类用于在应用程序中显示自定义提示，继承自Component类。"""
    def Create(self, AOwner: Component) -> None:
        """Create方法用于创建CustomHint类的实例并初始化其状态。该方法会设置提示的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy方法用于销毁CustomHint类的实例。该方法会释放实例占用的资源和内存，确保提示被正确地销毁。"""
    CurrentPPI: int
    """CurrentPPI属性用于获取或设置当前提示的每英寸像素数（PPI）。该属性可以根据设备的显示特性调整提示的清晰度和大小。"""
    def ShowHint(self, *args, **kwargs) -> Any:
        """ShowHint方法用于显示提示。该方法会根据提供的参数在指定位置显示提示。"""
    def HideHint(self, *args, **kwargs) -> Any:
        """HideHint方法用于隐藏提示。该方法会将当前显示的提示隐藏起来。"""
    def PaintHint(self, *args, **kwargs) -> Any:
        """PaintHint方法用于绘制提示。该方法会在提示显示时调用，用于自定义提示的绘制内容。"""
    def NCPaintHint(self, *args, **kwargs) -> Any:
        """NCPaintHint方法用于绘制提示的非客户端区域。 该方法通常用于绘制提示的边框和其他装饰元素。"""
    def SetHintSize(self, *args, **kwargs) -> Any:
        """SetHintSize方法用于设置提示的大小。该方法会根据提供的参数调整提示的宽度和高度。"""
    ShowingHint: bool
    """ShowingHint属性用于指示当前提示是否正在显示。如果设置为True，表示提示正在显示；如果设置为False，表示提示未显示。"""
    Title: str
    """Title属性用于设置提示的标题文本。该属性用于在提示中显示标题信息。"""
    Description: str
    """Description属性用于设置提示的描述文本。该属性用于在提示中显示详细的描述信息。"""
    ImageIndex: Any
    """ImageIndex属性用于设置提示中显示的图像索引。该属性用于指定在提示中显示的图像。"""
    Images: Any
    """Images属性用于设置提示中使用的图像列表。该属性用于存储和管理提示中使用的所有图像。"""
    Style: Any
    """Style属性用于设置提示的样式。该属性用于定义提示的外观和行为。"""
    Delay: Any
    """Delay属性用于设置提示显示的延迟时间。该属性用于指定在触发提示显示之前的等待时间。"""
    HideAfter: int
    """HideAfter属性用于设置提示自动隐藏的时间。该属性用于指定提示显示后自动隐藏的时间间隔，以毫秒为单位。"""

class BalloonHint(CustomHint):
    """BalloonHint类继承自CustomHint，用于在应用程序中显示气球样式的提示。"""
    def PaintHint(self, *args, **kwargs) -> Any:
        """PaintHint方法用于绘制气球提示。该方法会在气球提示显示时调用，用于自定义气球提示的绘制内容。"""
    def SetHintSize(self, *args, **kwargs) -> Any:
        """SetHintSize方法用于设置气球提示的大小。该方法会根据提供的参数调整气球提示的宽度和高度。"""

class EditButton(Persistent):
    """EditButton类用于创建带有按钮的编辑控件，继承自Persistent类。"""
    def Create(self, AOwner: Component) -> None:
        """Create方法用于创建EditButton类的实例并初始化其状态。该方法会设置编辑按钮的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy方法用于销毁EditButton类的实例。该方法会释放实例占用的资源和内存，确保编辑按钮被正确地销毁。"""
    CustomHint: Any
    """CustomHint属性用于设置编辑按钮的自定义提示。该属性允许开发人员指定在编辑按钮上显示的提示信息。"""
    DisabledImageIndex: Any
    """DisabledImageIndex属性用于设置编辑按钮在禁用状态下显示的图像索引。该属性用于指定编辑按钮在禁用状态下显示的图像。"""
    DisabledImageName: Any
    """DisabledImageName属性用于设置编辑按钮在禁用状态下显示的图像名称。该属性用于指定编辑按钮在禁用状态下显示的图像名称。"""
    DropDownMenu: Any
    """DropDownMenu属性用于设置编辑按钮的下拉菜单。该属性允许开发人员指定在编辑按钮上显示的下拉菜单。"""
    Enabled: bool
    """Enabled属性用于设置编辑按钮的启用状态。如果设置为True，表示编辑按钮启用；如果设置为False，表示编辑按钮禁用。"""
    Hint: str
    """Hint属性用于设置编辑按钮的提示文本。该属性用于在编辑按钮上显示提示信息。"""
    HotImageIndex: Any
    """HotImageIndex属性用于设置编辑按钮在热状态下显示的图像索引。 该属性用于指定编辑按钮在热状态下显示的图像。"""
    HotImageName: Any
    """HotImageName属性用于设置编辑按钮在热状态下显示的图像名称。该属性用于指定编辑按钮在热状态下显示的图像名称。"""
    ImageIndex: Any
    """ImageIndex属性用于设置编辑按钮的图像索引。该属性用于指定编辑按钮显示的图像。"""
    ImageName: Any
    """ImageName属性用于设置编辑按钮的图像名称。该属性用于指定编辑按钮显示的图像名称。"""
    PressedImageIndex: Any
    """PressedImageIndex属性用于设置编辑按钮在按下状态下显示的图像索引。该属性用于指定编辑按钮在按下状态下显示的图像。"""
    PressedImageName: Any
    """PressedImageName属性用于设置编辑按钮在按下状态下显示的图像名称。该属性用于指定编辑按钮在按下状态下显示的图像名称。"""
    Visible: bool
    """Visible属性用于设置编辑按钮的可见状态。如果设置为True，表示编辑按钮可见；如果设置为False，表示编辑按钮不可见。"""

class CustomButtonedEdit(CustomEdit):
    """CustomButtonedEdit类用于创建带有按钮的自定义编辑控件，继承自CustomEdit类。"""
    def Create(self, AOwner: Component) -> None:
        """Create方法用于创建CustomButtonedEdit类的实例并初始化其状态。该方法会设置自定义按钮编辑控件的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy方法用于销毁CustomButtonedEdit类的实例。该方法会释放实例占用的资源和内存，确保自定义按钮编辑控件被正确地销毁。"""
    def DefaultHandler(self, *args, **kwargs) -> Any:
        """DefaultHandler方法用于处理默认事件。该方法会根据提供的参数处理自定义按钮编辑控件的默认事件。"""
    Images: Any
    """Images属性用于设置自定义按钮编辑控件使用的图像列表。该属性用于存储和管理编辑控件中使用的所有图像。"""
    LeftButton: Any
    """LeftButton属性用于设置自定义按钮编辑控件的左侧按钮。该属性用于定义和管理编辑控件左侧按钮的行为和外观。"""
    RightButton: Any
    """RightButton属性用于设置自定义按钮编辑控件的右侧按钮。该属性用于定义和管理编辑控件右侧按钮的行为和外观。"""
    OnLeftButtonClick: Any
    """OnLeftButtonClick属性用于设置左侧按钮点击时的事件处理程序。该属性允许开发人员定义在左侧按钮点击时执行的自定义逻辑。"""
    OnRightButtonClick: Any
    """OnRightButtonClick属性用于设置右侧按钮点击时的事件处理程序。该属性允许开发人员定义在右侧按钮点击时执行的自定义逻辑。"""

class ButtonedEdit(CustomButtonedEdit):
    """ButtonedEdit类继承自CustomButtonedEdit，用于创建带有按钮的编辑控件，提供了更多的属性和事件处理功能。"""
    Align: Any
    """Align属性用于设置编辑控件的对齐方式。该属性允许开发人员指定控件在父容器中的对齐方式，例如顶部对齐、底部对齐等。"""
    Alignment: Any
    """Alignment属性用于设置编辑控件中文本的对齐方式。该属性允许开发人员指定文本在控件中的对齐方式，例如左对齐、右对齐或居中对齐。"""
    Anchors: Any
    """Anchors属性用于设置编辑控件的锚点。该属性允许开发人员指定控件在父容器中随容器大小变化的固定位置。"""
    AutoSelect: Any
    """AutoSelect属性用于设置编辑控件是否在获得焦点时自动选择所有文本。如果设置为True，则控件在获得焦点时自动选择所有文本；如果设置为False，则不自动选择文本。"""
    AutoSize: Any
    """AutoSize属性用于设置编辑控件是否根据内容自动调整大小。如果设置为True，则控件根据内容自动调整大小；如果设置为False，则控件大小保持不变。"""
    BevelEdges: Any
    """BevelEdges属性用于设置编辑控件的边缘样式。该属性允许开发人员指定控件的边缘样式，例如显示哪几条边。"""
    BevelInner: Any
    """BevelInner属性用于设置编辑控件的内侧边缘样式。该属性允许开发人员指定控件内侧边缘的样式，例如凸起、凹陷等。"""
    BevelKind: Any
    """BevelKind属性用于设置编辑控件的边缘种类。该属性允许开发人员指定控件边缘的种类，例如显示内侧、外侧或双边缘。"""
    BevelOuter: Any
    """BevelOuter属性用于设置编辑控件的外侧边缘样式。该属性允许开发人员指定控件外侧边缘的样式，例如凸起、凹陷等。"""
    BevelWidth: Any
    """BevelWidth属性用于设置编辑控件的边缘宽度。该属性允许开发人员指定控件边缘的宽度，以调整控件的外观。"""
    BiDiMode: Any
    """BiDiMode属性用于设置编辑控件的双向文本模式。该属性允许开发人员指定控件的文本显示方向，例如从左到右或从右到左。"""
    BorderStyle: Any
    """BorderStyle属性用于设置编辑控件的边框样式。该属性允许开发人员指定控件的边框样式，例如无边框、单线边框等。"""
    CharCase: Any
    """CharCase属性用于设置编辑控件中的字符大小写转换。该属性允许开发人员指定控件中的字符是否自动转换为大写或小写。"""
    Color: Any
    """Color属性用于设置编辑控件的背景颜色。该属性允许开发人员指定控件的背景颜色，以调整控件的外观。"""
    Constraints: Any
    """Constraints属性用于设置编辑控件的约束条件。该属性允许开发人员指定控件的最小和最大大小，以控制控件的大小变化范围。"""
    Ctl3D: Any
    """Ctl3D属性用于设置编辑控件是否启用3D边框。如果设置为True，则控件显示3D边框；如果设置为False，则控件显示平面边框。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置编辑控件是否使用双缓冲机制。如果设置为True，则控件使用双缓冲机制，以减少重绘时的闪烁现象。"""
    DragCursor: Any
    """DragCursor属性用于设置编辑控件在拖动操作时显示的光标。该属性允许开发人员指定控件在拖动操作时显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置编辑控件的拖动类型。该属性允许开发人员指定控件的拖动类型，例如拖动控件本身或拖动控件内容。"""
    DragMode: Any
    """DragMode属性用于设置编辑控件的拖动模式。该属性允许开发人员指定控件的拖动模式，例如手动拖动或自动拖动。"""
    Enabled: Any
    """Enabled属性用于设置编辑控件的启用状态。如果设置为True，则控件启用；如果设置为False，则控件禁用。"""
    Font: Any
    """Font属性用于设置编辑控件的字体。该属性允许开发人员指定控件显示文本的字体样式。"""
    HideSelection: Any
    """HideSelection属性用于设置编辑控件在失去焦点时是否隐藏文本选择。如果设置为True，则控件在失去焦点时隐藏文本选择；如果设置为False，则控件在失去焦点时保留文本选择。"""
    Images: Any
    """Images属性用于设置编辑控件使用的图像列表。该属性允许开发人员指定控件中使用的图像列表，以显示在控件的按钮上。"""
    ImeMode: Any
    """ImeMode属性用于设置编辑控件的输入法模式。该属性允许开发人员指定控件使用的输入法模式，以支持多语言输入。"""
    ImeName: Any
    """ImeName属性用于设置编辑控件的输入法名称。该属性允许开发人员指定控件使用的输入法名称，以支持多语言输入。"""
    LeftButton: Any
    """LeftButton属性用于设置编辑控件的左侧按钮。该属性允许开发人员定义和管理控件左侧按钮的行为和外观。"""
    MaxLength: Any
    """MaxLength属性用于设置编辑控件中允许输入的最大字符数。该属性允许开发人员限制控件中输入的字符数，以控制输入内容的长度。"""
    OEMConvert: Any
    """OEMConvert属性用于设置编辑控件是否进行OEM字符集转换。如果设置为True，则控件进行OEM字符集转换；如果设置为False，则控件不进行OEM字符集转换。"""
    NumbersOnly: Any
    """NumbersOnly属性用于设置编辑控件是否只允许输入数字。如果设置为True，则控件只允许输入数字；如果设置为False，则控件允许输入任何字符。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置编辑控件是否继承父容器的双向文本模式。如果设置为True，则控件继承父容器的双向文本模式；如果设置为False，则控件使用自己的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置编辑控件是否继承父容器的背景颜色。如果设置为True，则控件继承父容器的背景颜色；如果设置为False，则控件使用自己的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置编辑控件是否继承父容器的3D边框设置。如果设置为True，则控件继承父容器的3D边框设置；如果设置为False，则控件使用自己的3D边框设置。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置编辑控件是否继承父容器的双缓冲机制。如果设置为True，则控件继承父容器的双缓冲机制；如果设置为False，则控件使用自己的双缓冲机制。"""
    ParentFont: Any
    """ParentFont属性用于设置编辑控件是否继承父容器的字体设置。如果设置为True，则控件继承父容器的字体设置；如果设置为False，则控件使用自己的字体设置。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置编辑控件是否继承父容器的提示设置。如果设置为True，则控件继承父容器的提示设置；如果设置为False，则控件使用自己的提示设置。"""
    PasswordChar: Any
    """PasswordChar属性用于设置编辑控件中密码字符的显示。该属性允许开发人员指定控件中显示的密码字符，以隐藏实际输入的内容。"""
    PopupMenu: Any
    """PopupMenu属性用于设置编辑控件的弹出菜单。该属性允许开发人员指定控件中显示的弹出菜单，以提供更多的操作选项。"""
    ReadOnly: Any
    """ReadOnly属性用于设置编辑控件是否为只读模式。如果设置为True，则控件为只读模式，用户不能修改控件中的内容；如果设置为False，则控件允许用户修改内容。"""
    RightButton: Any
    """RightButton属性用于设置编辑控件的右侧按钮。该属性允许开发人员定义和管理控件右侧按钮的行为和外观。"""
    ShowHint: Any
    """ShowHint属性用于设置编辑控件是否显示提示信息。如果设置为True，则控件显示提示信息；如果设置为False，则控件不显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置编辑控件在Tab键顺序中的位置。该属性允许开发人员指定控件在Tab键切换顺序中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否可以通过Tab键获得焦点。如果设置为True，控件可以通过Tab键获得焦点；如果设置为False，控件不能通过Tab键获得焦点。"""
    Text: Any
    """Text属性用于设置或获取编辑控件中的文本内容。该属性允许开发人员获取或设置控件中显示的文本。"""
    TextHint: Any
    """TextHint属性用于设置编辑控件的提示文本。当控件为空时显示的提示文本。"""
    Touch: Any
    """Touch属性用于设置控件的触摸功能。该属性允许开发人员为控件启用或配置触摸相关功能。"""
    Visible: Any
    """Visible属性用于设置控件的可见性。如果设置为True，控件可见；如果设置为False，控件不可见。"""
    StyleElements: Any
    """StyleElements属性用于设置控件应用的样式元素。该属性允许开发人员指定控件使用的样式元素，例如字体、颜色、边框等。"""
    StyleName: Any
    """StyleName属性用于设置控件应用的样式名称。该属性允许开发人员指定控件使用的样式主题。"""
    OnChange: Any
    """OnChange事件在控件内容更改时触发。该事件允许开发人员在控件内容发生变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被点击时触发。该事件允许开发人员在控件被用户点击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在控件弹出上下文菜单时触发。该事件允许开发人员在控件的上下文菜单被激活时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件允许开发人员在控件被用户双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在拖放操作完成时触发。该事件允许开发人员在控件完成拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在拖动操作经过控件时触发。该事件允许开发人员在拖动操作经过控件时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件停靠结束时触发。该事件允许开发人员在控件停靠操作结束时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件拖动结束时触发。该事件允许开发人员在控件拖动操作结束时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件允许开发人员在控件失去焦点时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在控件检测到键盘按下时触发。该事件允许开发人员在用户按下键盘上的键时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在控件检测到键盘字符输入时触发。该事件允许开发人员在用户输入字符时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在控件检测到键盘按键释放时触发。该事件允许开发人员在用户释放键盘上的键时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到触摸手势时触发。该事件允许开发人员在控件检测到触摸手势时执行自定义操作。"""
    OnLeftButtonClick: Any
    """OnLeftButtonClick事件在控件左侧按钮被点击时触发。该事件允许开发人员在控件左侧按钮被点击时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件允许开发人员在鼠标激活控件时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件允许开发人员在用户按下鼠标按钮时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在鼠标指针进入控件区域时触发。该事件允许开发人员在鼠标指针进入控件区域时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在鼠标指针离开控件区域时触发。该事件允许开发人员在鼠标指针离开控件区域时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件允许开发人员在鼠标在控件区域内移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标按钮释放时触发。该事件允许开发人员在用户释放鼠标按钮时执行自定义操作。"""
    OnRightButtonClick: Any
    """OnRightButtonClick事件在控件右侧按钮被点击时触发。该事件允许开发人员在控件右侧按钮被点击时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件允许开发人员在控件开始停靠操作时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件允许开发人员在控件开始拖动操作时执行自定义操作。"""

class ButtonGroup(CustomControl):
    """ButtonGroup类继承自CustomControl，用于创建一组按钮控件，提供了丰富的属性和事件处理功能。"""
    def Create(self, AOwner: Component) -> None:
        """Create方法用于创建ButtonGroup类的实例并初始化其状态。该方法会设置按钮组的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy方法用于销毁ButtonGroup类的实例。该方法会释放实例占用的资源和内存，确保按钮组被正确地销毁。"""
    def Assign(self, *args, **kwargs) -> Any:
        """Assign方法用于将一个ButtonGroup实例的属性值复制到另一个实例。该方法通常用于创建按钮组的副本或模板。"""
    DragIndex: int
    """DragIndex属性表示当前被拖动的按钮索引。用于在拖动过程中跟踪被拖动的按钮。"""
    DragImageList: Any
    """DragImageList属性表示拖动操作期间使用的图像列表。该属性用于在拖动过程中显示拖动的图像。"""
    def DragDrop(self, *args, **kwargs) -> Any:
        """DragDrop方法用于处理拖放操作。该方法在拖放操作发生时执行相应的处理逻辑，以实现拖放功能。"""
    def GetButtonRect(self, *args, **kwargs) -> Any:
        """GetButtonRect方法用于获取指定按钮的矩形区域。该方法返回一个矩形对象，表示按钮在控件中的位置和大小。"""
    def GetDragImages(self) -> Any:
        """GetDragImages方法用于获取拖动操作使用的图像列表。该方法返回一个图像列表对象，用于显示拖动的图像。"""
    def IndexOfButtonAt(self, *args, **kwargs) -> int:
        """IndexOfButtonAt方法用于获取指定位置的按钮索引。该方法返回一个整数值，表示按钮在按钮组中的位置。"""
    def RemoveInsertionPoints(self, *args, **kwargs) -> Any:
        """RemoveInsertionPoints方法用于移除插入点。该方法在按钮组中移除所有插入点标记。"""
    def ScrollIntoView(self, *args, **kwargs) -> Any:
        """ScrollIntoView方法用于滚动视图以确保指定按钮可见。该方法调整按钮组的滚动位置，使指定按钮出现在可视区域内。"""
    def SetInsertionPoints(self, *args, **kwargs) -> Any:
        """SetInsertionPoints方法用于设置插入点。该方法在按钮组中添加插入点标记，用于指示拖放操作的目标位置。"""
    def TargetIndexAt(self, *args, **kwargs) -> int:
        """TargetIndexAt方法用于获取指定位置的目标索引。该方法返回一个整数值，表示拖放操作的目标位置。"""
    Canvas: Any
    """Canvas属性用于获取按钮组的画布对象。该属性允许开发人员在按钮组上自定义绘图和渲染操作。"""
    Align: Any
    """Align属性用于设置按钮组在父容器中的对齐方式。该属性允许开发人员定义按钮组在父容器中的布局行为。"""
    Anchors: Any
    """Anchors属性用于设置按钮组的锚点。该属性用于控制按钮组在父容器调整大小时的定位方式。"""
    BevelEdges: Any
    """BevelEdges属性用于设置按钮组的边框样式。该属性允许开发人员定义按钮组四周的边框显示情况。"""
    BevelInner: Any
    """BevelInner属性用于设置按钮组内部边框的样式。该属性用于定义按钮组的内边框效果。"""
    BevelOuter: Any
    """BevelOuter属性用于设置按钮组外部边框的样式。该属性用于定义按钮组的外边框效果。"""
    BevelKind: Any
    """BevelKind属性用于设置按钮组的边框类型。该属性允许开发人员选择不同的边框类型来改变按钮组的外观。"""
    BevelWidth: Any
    """BevelWidth属性用于设置按钮组边框的宽度。该属性用于定义按钮组的边框厚度。"""
    BorderWidth: Any
    """BorderWidth属性用于设置按钮组的边框宽度。该属性用于定义按钮组的边框线条的厚度。"""
    BorderStyle: Any
    """BorderStyle属性用于设置按钮组的边框样式。该属性用于定义按钮组的边框线条的风格。"""
    ButtonHeight: int
    """ButtonHeight属性用于设置按钮组中按钮的高度。该属性用于定义每个按钮的高度，以统一按钮的尺寸。"""
    ButtonWidth: int
    """ButtonWidth属性用于设置按钮组中按钮的宽度。该属性用于定义每个按钮的宽度，以统一按钮的尺寸。"""
    ButtonOptions: Any
    """ButtonOptions属性用于设置按钮组的选项。该属性允许开发人员自定义按钮组的行为和外观。"""
    DockSite: Any
    """DockSite属性用于设置按钮组是否作为停靠站点。该属性用于定义按钮组是否可以作为其他控件的停靠目标。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置按钮组是否启用双缓冲。该属性用于减少绘制过程中的闪烁现象。"""
    DragCursor: Any
    """DragCursor属性用于设置按钮组的拖动光标。该属性用于定义按钮组在拖动操作期间显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置按钮组的拖动类型。该属性用于定义按钮组的拖动操作的类型和行为。"""
    DragMode: Any
    """DragMode属性用于设置按钮组的拖动模式。该属性用于定义按钮组的拖动操作的触发方式。"""
    Enabled: Any
    """Enabled属性用于设置按钮组是否启用。该属性用于控制按钮组及其子控件是否可交互。"""
    Font: Any
    """Font属性用于设置按钮组的字体。该属性用于定义按钮组及其子控件中显示文本的字体样式。"""
    Height: Any
    """Height属性用于设置按钮组的高度。该属性用于定义按钮组在父容器中的高度。"""
    Images: Any
    """Images属性用于设置按钮组中使用的图像列表。该属性用于定义按钮组中的按钮使用的图像资源。"""
    Items: Any
    """Items属性用于设置按钮组中的按钮项。该属性用于定义按钮组包含的按钮集合。"""
    ItemIndex: int
    """ItemIndex属性用于设置或获取按钮组中选定按钮的索引。该属性用于控制和获取当前选中的按钮项。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置按钮组是否继承父容器的双缓冲设置。该属性用于定义按钮组是否使用父容器的双缓冲配置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置按钮组的弹出菜单。该属性用于定义按钮组在右键点击时显示的弹出菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置按钮组是否显示提示信息。该属性用于定义按钮组及其子控件是否显示提示文本。"""
    TabOrder: Any
    """TabOrder属性用于设置按钮组的标签顺序。该属性用于定义按钮组在表单中的标签导航顺序。"""
    TabStop: Any
    """TabStop属性用于设置按钮组是否作为标签停靠点。该属性用于定义按钮组是否在标签导航中作为一个停靠点。"""
    Touch: Any
    """Touch属性用于设置按钮组的触摸操作支持。该属性用于定义按钮组是否支持触摸操作。"""
    Width: Any
    """Width属性用于设置按钮组的宽度。该属性用于定义按钮组在父容器中的宽度。"""
    Visible: Any
    """Visible属性用于设置按钮组是否可见。该属性用于控制按钮组及其子控件是否显示在界面上。"""
    StyleElements: Any
    """StyleElements属性用于设置按钮组的样式元素。该属性用于定义按钮组使用的样式元素，如字体、颜色等。"""
    StyleName: Any
    """StyleName属性用于设置按钮组的样式名称。该属性用于定义按钮组使用的样式名称，以便应用特定的样式配置。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在对齐插入之前触发。该事件用于自定义按钮组在对齐操作前的行为。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在对齐位置时触发。该事件用于自定义按钮组在对齐操作中的位置行为。"""
    OnButtonClicked: Any
    """OnButtonClicked事件在按钮被点击时触发。该事件用于处理按钮点击的行为逻辑。"""
    OnClick: Any
    """OnClick事件在按钮组被点击时触发。该事件用于处理按钮组的点击行为。"""
    OnContextPopup: Any
    """OnContextPopup事件在上下文菜单弹出时触发。该事件用于处理按钮组的右键点击行为。"""
    OnDockDrop: Any
    """OnDockDrop事件在按钮组被拖放到停靠位置时触发。该事件用于处理按钮组的拖放行为。"""
    OnDockOver: Any
    """OnDockOver事件在按钮组被拖动到停靠位置上方时触发。该事件用于处理按钮组的拖动悬停行为。"""
    OnDragDrop: Any
    """OnDragDrop事件在拖动操作完成时触发。该事件用于处理拖放完成后的逻辑。"""
    OnDragOver: Any
    """OnDragOver事件在拖动操作悬停时触发。该事件用于处理拖动悬停时的逻辑。"""
    OnEndDock: Any
    """OnEndDock事件在停靠操作结束时触发。该事件用于处理按钮组的停靠操作完成后的逻辑。"""
    OnEndDrag: Any
    """OnEndDrag事件在拖动操作结束时触发。该事件用于处理拖动结束后的逻辑。"""
    OnEnter: Any
    """OnEnter事件在按钮组获得焦点时触发。该事件用于处理按钮组获得焦点后的逻辑。"""
    OnExit: Any
    """OnExit事件在按钮组失去焦点时触发。该事件用于处理按钮组失去焦点后的逻辑。"""
    OnHotButton: Any
    """OnHotButton事件在按钮变为热点按钮时触发。该事件用于处理按钮变为热点按钮时的逻辑。"""
    OnAfterDrawButton: Any
    """OnAfterDrawButton事件在按钮绘制完成后触发。该事件用于处理按钮绘制完成后的逻辑。"""
    OnBeforeDrawButton: Any
    """OnBeforeDrawButton事件在按钮绘制之前触发。该事件用于处理按钮绘制之前的逻辑。"""
    OnDrawButton: Any
    """OnDrawButton事件在按钮绘制时触发。该事件用于自定义按钮的绘制逻辑。"""
    OnDrawIcon: Any
    """OnDrawIcon事件在按钮图标绘制时触发。该事件用于自定义按钮图标的绘制逻辑。"""
    OnGesture: Any
    """OnGesture事件在触发手势操作时触发。该事件用于处理按钮组的手势操作逻辑。"""
    OnKeyDown: Any
    """OnKeyDown事件在键盘按键按下时触发。该事件用于处理按钮组的按键按下操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在键盘按键按下并释放时触发。该事件用于处理按钮组的按键输入操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在键盘按键释放时触发。该事件用于处理按钮组的按键释放操作。"""
    OnReorderButton: Any
    """OnReorderButton事件在按钮重新排序时触发。该事件用于处理按钮组的按钮重新排序逻辑。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在鼠标激活按钮组时触发。该事件用于处理按钮组的鼠标激活操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在鼠标按下按钮组时触发。该事件用于处理按钮组的鼠标按下操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在鼠标进入按钮组时触发。该事件用于处理按钮组的鼠标进入操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在鼠标离开按钮组时触发。该事件用于处理按钮组的鼠标离开操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在鼠标移动时触发。该事件用于处理按钮组的鼠标移动操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在鼠标释放按钮组时触发。该事件用于处理按钮组的鼠标释放操作。"""
    OnMouseWheel: Any
    """OnMouseWheel事件在鼠标滚轮滚动时触发。该事件用于处理按钮组的鼠标滚轮滚动操作。"""
    OnMouseWheelDown: Any
    """OnMouseWheelDown事件在鼠标滚轮向下滚动时触发。该事件用于处理按钮组的鼠标滚轮向下滚动操作。"""
    OnMouseWheelUp: Any
    """OnMouseWheelUp事件在鼠标滚轮向上滚动时触发。该事件用于处理按钮组的鼠标滚轮向上滚动操作。"""
    OnStartDock: Any
    """OnStartDock事件在开始停靠操作时触发。该事件用于处理按钮组的开始停靠操作逻辑。"""
    OnStartDrag: Any
    """OnStartDrag事件在开始拖动操作时触发。该事件用于处理按钮组的开始拖动操作逻辑。"""

class Calendar(CustomGrid):
    """Calendar类继承自CustomGrid，用于创建日历控件，提供了丰富的属性和方法来管理和显示日期信息。"""
    def Create(self, AOwner: Component) -> None:
        """Create方法用于创建Calendar类的实例并初始化其状态。该方法会设置日历控件的基本属性和结构，为后续的使用做准备。"""
    CalendarDate: Any
    """CalendarDate属性用于获取和设置当前日历显示的日期。该属性用于控制和显示日历控件的日期信息。"""
    CellText: Any
    """CellText属性用于获取和设置日历控件中单元格的文本。该属性用于自定义日历单元格的显示内容。"""
    def NextMonth(self, *args, **kwargs) -> Any:
        """NextMonth方法用于切换到下一个月的日历显示。 该方法更新日历控件的显示日期为下一个月。"""
    def NextYear(self, *args, **kwargs) -> Any:
        """NextYear方法用于切换到下一年的日历显示。该方法更新日历控件的显示日期为下一年。"""
    def PrevMonth(self, *args, **kwargs) -> Any:
        """PrevMonth方法用于切换到上一个月的日历显示。该方法更新日历控件的显示日期为上一个月。"""
    def PrevYear(self, *args, **kwargs) -> Any:
        """PrevYear方法用于切换到上一年的日历显示。该方法更新日历控件的显示日期为上一年。"""
    def UpdateCalendar(self, *args, **kwargs) -> Any:
        """UpdateCalendar方法用于更新日历控件的显示。该方法根据当前日期和设置重新绘制日历控件。"""
    Align: Any
    """Align属性用于设置日历控件在父容器中的对齐方式。该属性允许开发人员定义日历控件在父容器中的布局行为。"""
    Anchors: Any
    """Anchors属性用于设置日历控件的锚点。该属性用于控制日历控件在父容器调整大小时的定位方式。"""
    BorderStyle: Any
    """BorderStyle属性用于设置日历控件的边框样式。该属性用于定义日历控件的边框线条的风格。"""
    Color: Any
    """Color属性用于设置日历控件的背景颜色。该属性用于定义日历控件的外观和风格。"""
    Constraints: Any
    """Constraints属性用于设置日历控件的大小约束。该属性用于定义日历控件的最小和最大尺寸。"""
    Ctl3D: Any
    """Ctl3D属性用于设置日历控件是否启用3D边框。该属性用于定义日历控件的视觉效果。"""
    Day: Any
    """Day属性用于获取和设置日历控件显示的天。该属性用于控制日历控件当前显示的具体日期。"""
    DragCursor: Any
    """DragCursor属性用于设置日历控件的拖动光标。该属性用于定义日历控件在拖动操作期间显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置日历控件的拖动类型。该属性用于定义日历控件的拖动操作的类型和行为。"""
    DragMode: Any
    """DragMode属性用于设置日历控件的拖动模式。该属性用于定义日历控件的拖动操作的触发方式。"""
    Enabled: Any
    """Enabled属性用于设置日历控件是否启用。该属性用于控制日历控件及其子控件是否可交互。"""
    Font: Any
    """Font属性用于设置日历控件的字体。该属性用于定义日历控件中显示文本的字体样式。"""
    GridLineWidth: Any
    """GridLineWidth属性用于设置日历控件的网格线宽度。该属性用于定义日历控件网格线的厚度。"""
    Month: Any
    """Month属性用于获取和设置日历控件显示的月份。该属性用于控制日历控件当前显示的月份。"""
    ParentColor: Any
    """ParentColor属性用于设置日历控件是否继承父容器的背景颜色。该属性用于定义日历控件是否使用父容器的背景颜色配置。"""
    ParentFont: Any
    """ParentFont属性用于设置日历控件是否继承父容器的字体。该属性用于定义日历控件是否使用父容器的字体配置。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置日历控件是否继承父容器的提示信息。该属性用于定义日历控件是否显示父容器的提示文本。"""
    PopupMenu: Any
    """PopupMenu属性用于设置日历控件的弹出菜单。该属性用于定义日历控件在右键点击时显示的弹出菜单。"""
    ReadOnly: bool
    """ReadOnly属性用于设置日历控件是否为只读模式。该属性用于控制日历控件是否允许用户修改日期。"""
    ShowHint: Any
    """ShowHint属性用于设置日历控件是否显示提示信息。该属性用于定义日历控件及其子控件是否显示提示文本。"""
    StartOfWeek: Any
    """StartOfWeek属性用于设置日历控件显示的周起始日。该属性用于定义日历控件中一周的开始日期。"""
    TabOrder: Any
    """TabOrder属性用于设置日历控件的标签顺序。该属性用于定义日历控件在表单中的标签导航顺序。"""
    TabStop: Any
    """TabStop属性用于设置日历控件是否作为标签停靠点。该属性用于定义日历控件是否在标签导航中作为一个停靠点。"""
    UseCurrentDate: bool
    """UseCurrentDate属性用于设置日历控件是否使用当前日期。该属性用于控制日历控件是否显示当前系统日期。"""
    Visible: Any
    """Visible属性用于设置日历控件是否可见。该属性用于控制日历控件及其子控件是否显示在界面上。"""
    StyleElements: Any
    """StyleElements属性用于设置日历控件的样式元素。该属性用于定义日历控件使用的样式元素，如字体、颜色等。"""
    StyleName: Any
    """StyleName属性用于设置日历控件的样式名称。该属性用于定义日历控件使用的样式名称，以便应用特定的样式配置。"""
    Year: Any
    """Year属性用于获取和设置日历控件显示的年份。该属性用于控制日历控件当前显示的年份。"""
    OnClick: Any
    """OnClick事件在日历控件被点击时触发。该事件用于处理日历控件的点击行为。"""
    OnChange: Any
    """OnChange事件在日历控件的日期发生变化时触发。该事件用于处理日历控件的日期变化行为。"""
    OnDblClick: Any
    """OnDblClick事件在日历控件被双击时触发。该事件用于处理日历控件的双击行为。"""
    OnDragDrop: Any
    """OnDragDrop事件在拖动操作完成时触发。该事件用于处理拖放完成后的逻辑。"""
    OnDragOver: Any
    """OnDragOver事件在拖动操作悬停时触发。该事件用于处理拖动悬停时的逻辑。"""
    OnEndDock: Any
    """OnEndDock事件在停靠操作结束时触发。该事件用于处理日历控件的停靠操作完成后的逻辑。"""
    OnEndDrag: Any
    """OnEndDrag事件在拖动操作结束时触发。该事件用于处理拖动结束后的逻辑。"""
    OnEnter: Any
    """OnEnter事件在日历控件获得焦点时触发。该事件用于处理日历控件获得焦点后的逻辑。"""
    OnExit: Any
    """OnExit事件在日历控件失去焦点时触发。该事件用于处理日历控件失去焦点后的逻辑。"""
    OnKeyDown: Any
    """OnKeyDown事件在键盘按键按下时触发。该事件用于处理日历控件的按键按下操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在键盘按键按下并释放时触发。该事件用于处理日历控件的按键输入操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在键盘按键按下并释放时触发。该事件用于处理日历控件的按键输入操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在键盘按键释放时触发。该事件用于处理日历控件的按键释放操作。"""
    OnStartDock: Any
    """OnStartDock事件在开始停靠操作时触发。该事件用于处理日历控件的开始停靠操作逻辑。"""
    OnStartDrag: Any
    """OnStartDrag事件在开始拖动操作时触发。该事件用于处理日历控件的开始拖动操作逻辑。"""

class CustomCalendarPicker(CustomControl):
    """CustomCalendarPicker类继承自CustomControl，用于创建自定义日历选择器控件。"""
    def Create(self, AOwner: Component) -> None:
        """Create方法用于创建CustomCalendarPicker类的实例并初始化其状态。该方法会设置日历选择器控件的基本属性和结构，为后续的使用做准备。"""

class CalendarPicker(CustomCalendarPicker):
    """CalendarPicker类继承自CustomCalendarPicker，用于创建日期选择器控件。该类提供了丰富的属性和事件，用于自定义日期选择器的外观和行为。"""
    DateFormat: Any
    """DateFormat属性用于设置日期的显示格式。该属性定义了日期在控件中的显示格式，如"YYYY-MM-DD"。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性决定控件在其父容器中的对齐方式，可以是左对齐、右对齐、顶对齐、底对齐或客户区对齐。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性决定控件在其父容器中随着大小变化而调整的位置和尺寸，可以设置为顶、底、左、右等多个方向的组合。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的文本方向。该属性定义了控件中文本的显示方向，可以是从左到右或从右到左。"""
    BorderColor: Any
    """BorderColor属性用于设置控件的边框颜色。该属性定义了控件边框的颜色值。"""
    CalendarHeaderInfo: Any
    """CalendarHeaderInfo属性用于设置日历头部信息。该属性定义了日历控件头部显示的标题或其他信息。"""
    Color: Any
    """Color属性用于设置控件的背景颜色。该属性定义了控件的背景颜色值。"""
    Cursor: Any
    """Cursor属性用于设置控件的光标样式。该属性定义了鼠标指针悬停在控件上时显示的光标样式。"""
    Date: Any
    """Date属性用于设置或获取当前选择的日期。该属性定义了日期选择器控件当前选中的日期值。"""
    DisabledColor: Any
    """DisabledColor属性用于设置控件在禁用状态下的颜色。该属性定义了控件在禁用状态下的显示颜色。"""
    DisplayMode: Any
    """DisplayMode属性用于设置日历的显示模式。该属性定义了日历控件的显示模式，如月视图、年视图等。"""
    Enabled: Any
    """Enabled属性用于设置控件的启用状态。该属性定义了控件是否可以与用户交互，设置为False时控件处于禁用状态。"""
    FirstDayOfWeek: Any
    """FirstDayOfWeek属性用于设置日历的第一天是星期几。该属性定义了日历控件显示的每周第一天。"""
    FirstYear: Any
    """FirstYear属性用于设置日历控件显示的第一年。该属性定义了日历控件可以显示的最早年份。"""
    Font: Any
    """Font属性用于设置控件中文本的字体。该属性定义了控件中文本的字体样式，包括字体类型、大小、颜色等。"""
    HighlightColor: Any
    """HighlightColor属性用于设置日期高亮显示的颜色。该属性定义了在日期选择器控件中高亮显示日期的颜色。"""
    HighlightToday: Any
    """HighlightToday属性用于设置是否高亮显示今天的日期。该属性定义了日期选择器控件中是否高亮显示当前日期。"""
    IsEmpty: Any
    """IsEmpty属性用于判断日期选择器是否为空。该属性返回一个布尔值，表示日期选择器是否为空。"""
    LastYear: Any
    """LastYear属性用于设置日历控件显示的最后一年。该属性定义了日历控件可以显示的最晚年份。"""
    MaxYear: Any
    """MaxYear属性用于设置日期选择器控件的最大年份。该属性定义了用户可以选择的最大年份。"""
    MinYear: Any
    """MinYear属性用于设置日期选择器控件的最小年份。该属性定义了用户可以选择的最小年份。"""
    OnCalendarChangeView: Any
    """OnCalendarChangeView事件在日历视图改变时触发。该事件处理程序允许开发人员在日历控件视图改变时执行自定义操作。"""
    OnCalendarDrawDayItem: Any
    """OnCalendarDrawDayItem事件在绘制日期项时触发。该事件处理程序允许开发人员在日历控件绘制日期项时执行自定义绘图操作。"""
    OnCalendarDrawMonthItem: Any
    """OnCalendarDrawMonthItem事件在绘制月份项时触发。该事件处理程序允许开发人员在日历控件绘制月份项时执行自定义绘图操作。"""
    OnCalendarDrawYearItem: Any
    """OnCalendarDrawYearItem事件在绘制年份项时触发。该事件处理程序允许开发人员在日历控件绘制年份项时执行自定义绘图操作。"""
    OnChange: Any
    """OnChange事件在日期选择器的值改变时触发。该事件处理程序允许开发人员在用户更改日期选择器的值时执行自定义操作。"""
    OnCloseUp: Any
    """OnCloseUp事件在日期选择器关闭时触发。该事件处理程序允许开发人员在日期选择器关闭时执行自定义操作。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的文本方向。该属性定义了控件是否继承父控件的文本方向设置。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否继承父控件的字体设置。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示显示属性。该属性定义了控件是否继承父控件的提示显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的弹出菜单。该属性定义了当用户右键点击控件时显示的上下文菜单。"""
    SelectionColor: Any
    """SelectionColor属性用于设置日期选择器选中项的颜色。该属性定义了日期选择器控件中选中日期的显示颜色。"""
    ShowDayOfWeek: Any
    """ShowDayOfWeek属性用于设置是否显示星期几。该属性定义了日期选择器控件中是否显示每周的星期几。"""
    ShowFirstOfGroupLabel: Any
    """ShowFirstOfGroupLabel属性用于设置是否显示组标签的第一个日期。该属性定义了日期选择器控件中是否显示组标签的第一个日期。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示。该属性定义了当鼠标悬停在控件上时是否显示提示信息。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用的样式元素，如字体、颜色等。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称，用于应用不同的样式方案。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的Tab键顺序。该属性定义了控件在Tab键循环中的顺序。"""
    TabStop: Any
    """TabStop属性用于设置控件是否可以接收Tab键焦点。该属性定义了控件是否在用户按下Tab键时接收焦点。"""
    TextHint: Any
    """TextHint属性用于设置日期选择器的文本提示。该属性定义了在日期选择器控件中显示的提示文本。"""
    TodayColor: Any
    """TodayColor属性用于设置今天日期的高亮颜色。该属性定义了日期选择器控件中显示今天日期的高亮颜色。"""
    Visible: Any
    """Visible属性用于设置控件的可见性。该属性定义了控件是否在界面上可见。"""
    Width: Any
    """Width属性用于设置控件的宽度。该属性定义了控件在界面中的宽度值。"""

class CustomCalendarView(CustomControl):
    """CustomCalendarView类继承自CustomControl，用于创建自定义的日历视图控件。该类提供了丰富的属性和方法，用于管理和显示日历视图。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomCalendarView类的实例并初始化其状态。该方法会设置日历视图控件的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomCalendarView类的实例。该方法会释放实例占用的资源和内存，确保日历视图控件被正确地销毁。"""
    def AddToSelectedDates(self, *args, **kwargs) -> Any:
        """AddToSelectedDates函数用于将日期添加到选中的日期集合中。该方法接收一个或多个日期，并将它们添加到控件的选中日期列表中。"""
    def AnimationFinished(self, *args, **kwargs) -> Any:
        """AnimationFinished函数用于处理动画结束时的操作。该方法在日历视图的动画效果结束时触发，执行相应的处理逻辑。"""
    def NeedCurrentViewInfo(self) -> Any:
        """NeedCurrentViewInfo函数用于获取当前视图的信息。该方法返回当前日历视图的详细信息，用于显示或其他操作。"""
    def RemoveFromSelectedDates(self, *args, **kwargs) -> bool:
        """RemoveFromSelectedDates函数用于从选中的日期集合中移除指定日期。该方法接收一个日期，并将其从控件的选中日期列表中移除。返回值指示操作是否成功。"""
    def SetDisplayDate(self, *args, **kwargs) -> Any:
        """SetDisplayDate函数用于设置日历视图显示的日期。该方法接收一个日期，并将其设置为日历视图控件当前显示的日期。"""
    BorderSize: int
    """BorderSize属性用于设置控件的边框大小。该属性定义了控件边框的宽度值。"""
    BorderStyle: Any
    """BorderStyle属性用于设置控件的边框样式。该属性定义了控件边框的样式，如实线、虚线等。"""
    FirstDayOfWeek: Any
    """FirstDayOfWeek属性用于设置日历视图每周的第一天。该属性定义了日历视图控件显示的每周的起始天。"""
    NumberOfWeeksInView: Any
    """NumberOfWeeksInView属性用于设置日历视图中显示的周数。该属性定义了在日历视图控件中一次性显示的周数。"""
    SelectedDates: List
    """SelectedDates属性用于获取或设置选中的日期集合。该属性定义了一个日期列表，包含当前选中的所有日期。"""
    SelectionCount: int
    """SelectionCount属性用于获取选中的日期数量。该属性返回一个整数值，表示当前选中的日期数量。"""

class CalendarView(CustomCalendarView):
    """CalendarView类继承自CustomCalendarView，用于创建高级日历视图控件。该类提供了丰富的属性和事件，用于自定义日历视图的外观和行为。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性决定控件在其父容器中的对齐方式，可以是左对齐、右对齐、顶对齐、底对齐或客户区对齐。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性决定控件在其父容器中随着大小变化而调整的位置和尺寸，可以设置为顶、底、左、右等多个方向的组合。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的文本方向。该属性定义了控件中文本的显示方向，可以是从左到右或从右到左。"""
    BorderColor: Any
    """BorderColor属性用于设置控件的边框颜色。该属性定义了控件边框的颜色值。"""
    BorderStyle: Any
    """BorderStyle属性用于设置控件的边框样式。该属性定义了控件边框的样式，如实线、虚线等。"""
    Color: Any
    """Color属性用于设置控件的背景颜色。该属性定义了控件的背景颜色值。"""
    Cursor: Any
    """Cursor属性用于设置控件的光标样式。该属性定义了鼠标指针悬停在控件上时显示的光标样式。"""
    Date: Any
    """Date属性用于设置或获取当前选择的日期。该属性定义了日期选择器控件当前选中的日期值。"""
    DisabledColor: Any
    """DisabledColor属性用于设置控件在禁用状态下的颜色。该属性定义了控件在禁用状态下的显示颜色。"""
    DisplayMode: Any
    """DisplayMode属性用于设置日历的显示模式。该属性定义了日历控件的显示模式，如月视图、年视图等。"""
    Enabled: Any
    """Enabled属性用于设置控件的启用状态。该属性定义了控件是否可以与用户交互，设置为False时控件处于禁用状态。"""
    FirstDayOfWeek: Any
    """FirstDayOfWeek属性用于设置日历的第一天是星期几。该属性定义了日历控件显示的每周第一天。"""
    FirstYear: Any
    """FirstYear属性用于设置日历控件显示的第一年。该属性定义了日历控件可以显示的最早年份。"""
    FocusedColor: Any
    """FocusedColor属性用于设置控件获取焦点时的颜色。该属性定义了控件在获取焦点时的显示颜色。"""
    Font: Any
    """Font属性用于设置控件中文本的字体。该属性定义了控件中文本的字体样式，包括字体类型、大小、颜色等。"""
    HeaderInfo: Any
    """HeaderInfo属性用于设置日历头部信息。该属性定义了日历控件头部显示的标题或其他信息。"""
    Height: Any
    """Height属性用于设置控件的高度。该属性定义了控件在界面中的高度值。"""
    HighlightColor: Any
    """HighlightColor属性用于设置日期高亮显示的颜色。该属性定义了在日期选择器控件中高亮显示日期的颜色。"""
    HighlightToday: Any
    """HighlightToday属性用于设置是否高亮显示今天的日期。该属性定义了日期选择器控件中是否高亮显示当前日期。"""
    LastYear: Any
    """LastYear属性用于设置日历控件显示的最后一年。该属性定义了日历控件可以显示的最晚年份。"""
    MaxYear: Any
    """MaxYear属性用于设置日期选择器控件的最大年份。该属性定义了用户可以选择的最大年份。"""
    MinYear: Any
    """MinYear属性用于设置日期选择器控件的最小年份。该属性定义了用户可以选择的最小年份。"""
    NumberOfWeeksInView: Any
    """NumberOfWeeksInView属性用于设置日历视图中显示的周数。该属性定义了在日历视图控件中一次性显示的周数。"""
    OnChange: Any
    """OnChange事件在日期选择器的值改变时触发。该事件处理程序允许开发人员在用户更改日期选择器的值时执行自定义操作。"""
    OnChangeView: Any
    """OnChangeView事件在日历视图改变时触发。该事件处理程序允许开发人员在日历控件视图改变时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在用户点击控件时触发。该事件处理程序允许开发人员在用户点击控件时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在用户双击控件时触发。该事件处理程序允许开发人员在用户双击控件时执行自定义操作。"""
    OnDrawDayItem: Any
    """OnDrawDayItem事件在绘制日期项时触发。该事件处理程序允许开发人员在日历控件绘制日期项时执行自定义绘图操作。"""
    OnDrawMonthItem: Any
    """OnDrawMonthItem事件在绘制月份项时触发。该事件处理程序允许开发人员在日历控件绘制月份项时执行自定义绘图操作。"""
    OnDrawYearItem: Any
    """OnDrawYearItem事件在绘制年份项时触发。该事件处理程序允许开发人员在日历控件绘制年份项时执行自定义绘图操作。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的文本方向。该属性定义了控件是否继承父控件的文本方向设置。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否继承父控件的字体设置。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示显示属性。该属性定义了控件是否继承父控件的提示显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的弹出菜单。该属性定义了当用户右键点击控件时显示的上下文菜单。"""
    SelectionColor: Any
    """SelectionColor属性用于设置日期选择器选中项的颜色。该属性定义了日期选择器控件中选中日期的显示颜色。"""
    SelectionMode: Any
    """SelectionMode属性用于设置日期选择器的选择模式。该属性定义了日期选择器控件的选择模式，如单选、多选等。"""
    ShowDayOfWeek: Any
    """ShowDayOfWeek属性用于设置是否显示星期几。该属性定义了日期选择器控件中是否显示每周的星期几。"""
    ShowFirstOfGroupLabel: Any
    """ShowFirstOfGroupLabel属性用于设置是否显示组标签的第一个日期。该属性定义了日期选择器控件中是否显示组标签的第一个日期。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示。该属性定义了当鼠标悬停在控件上时是否显示提示信息。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用的样式元素，如字体、颜色等。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称，用于应用不同的样式方案。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的Tab键顺序。该属性定义了控件在Tab键循环中的顺序。"""
    TabStop: Any
    """TabStop属性用于设置控件是否可以接收Tab键焦点。该属性定义了控件是否在用户按下Tab键时接收焦点。"""
    TodayColor: Any
    """TodayColor属性用于设置今天日期的高亮颜色。该属性定义了日期选择器控件中显示今天日期的高亮颜色。"""
    Touch: Any
    """Touch属性用于设置控件的触摸操作配置。该属性定义了控件在触摸屏上的交互行为和响应。"""
    Visible: Any
    """Visible属性用于设置控件的可见性。该属性定义了控件是否在界面上可见。"""
    Width: Any
    """Width属性用于设置控件的宽度。该属性定义了控件在界面中的宽度值。"""

class CustomCardPanel(CustomPanel):
    """CustomCardPanel类继承自CustomPanel，用于创建自定义卡片面板控件。该类提供了丰富的属性和方法，用于管理和显示卡片面板。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomCardPanel类的实例并初始化其状态。该方法会设置卡片面板控件的基本属性和结构，为后续的使用做准备。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomCardPanel类的实例。该方法会释放实例占用的资源和内存，确保卡片面板控件被正确地销毁。"""
    def CreateNewCard(self) -> Any:
        """CreateNewCard函数用于创建一个新的卡片。该方法返回新创建的卡片对象。"""
    def DeleteCard(self, *args, **kwargs) -> Any:
        """DeleteCard函数用于删除指定的卡片。该方法接收一个卡片对象或索引，并将其从面板中移除。"""
    def FindNextCard(self, *args, **kwargs) -> int:
        """FindNextCard函数用于查找下一个卡片的索引。该方法返回下一个卡片的索引值。"""
    def GetChildren(self, *args, **kwargs) -> Any:
        """GetChildren函数用于获取卡片面板的所有子控件。该方法返回一个子控件列表。"""
    def NextCard(self, *args, **kwargs) -> Any:
        """NextCard函数用于切换到下一个卡片。该方法实现卡片面板中卡片的切换操作。"""
    def PreviousCard(self, *args, **kwargs) -> Any:
        """PreviousCard函数用于切换到上一个卡片。该方法实现卡片面板中卡片的切换操作。"""
    ActiveCardIndex: int
    """ActiveCardIndex属性用于获取或设置当前激活的卡片索引。该属性定义了当前在面板中显示的卡片索引值。"""
    ActiveCard: Any
    """ActiveCard属性用于获取当前激活的卡片对象。该属性返回当前在面板中显示的卡片对象。"""
    CardCount: int
    """CardCount属性用于获取卡片面板中的卡片数量。该属性返回卡片面板中总共包含的卡片数量。"""
    Cards: Any
    """Cards属性用于获取或设置卡片面板中的卡片集合。该属性定义了卡片面板中的所有卡片对象。"""
    Loop: bool
    """Loop属性用于设置卡片切换时是否循环。该属性定义了卡片面板在切换卡片时是否循环显示。"""
    OnCardChange: Any
    """OnCardChange事件在卡片切换时触发。该事件处理程序允许开发人员在卡片面板切换卡片时执行自定义操作。"""

class CardPanel(CustomCardPanel):
    """CardPanel类继承自CustomCardPanel，提供了更多属性用于详细配置卡片面板控件。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性定义了控件在其父控件中的对齐方式。"""
    Alignment: Any
    """Alignment属性用于设置控件内容的对齐方式。该属性定义了控件内部内容的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    ActiveCard: Any
    """ActiveCard属性用于获取当前激活的卡片对象。该属性返回当前在面板中显示的卡片对象。"""
    AutoSize: Any
    """AutoSize属性用于设置控件是否自动调整大小。该属性定义了控件内容改变时是否自动调整控件大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置控件边缘的斜角。该属性定义了控件哪些边缘具有斜角效果。"""
    BevelInner: Any
    """BevelInner属性用于设置控件内部的斜角。该属性定义了控件内部的斜角效果。"""
    BevelKind: Any
    """BevelKind属性用于设置斜角的类型。该属性定义了控件的斜角效果类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置控件外部的斜角。该属性定义了控件外部的斜角效果。"""
    BevelWidth: Any
    """BevelWidth属性用于设置斜角的宽度。该属性定义了控件斜角的宽度。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的双向文本模式。该属性定义了控件的文本显示方向，如从左到右或从右到左。"""
    BorderWidth: Any
    """BorderWidth属性用于设置控件的边框宽度。该属性定义了控件的边框线宽度。"""
    BorderStyle: Any
    """BorderStyle属性用于设置控件的边框样式。该属性定义了控件的边框线样式，如实线或虚线。"""
    Caption: Any
    """Caption属性用于设置控件的标题。该属性定义了控件显示的文本标题。"""
    Color: Any
    """Color属性用于设置控件的颜色。该属性定义了控件的背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置控件的约束条件。该属性定义了控件的最小和最大尺寸限制。"""
    Ctl3D: Any
    """Ctl3D属性用于设置控件的3D样式。该属性定义了控件是否显示为三维效果。"""
    UseDockManager: Any
    """UseDockManager属性用于设置是否使用停靠管理器。该属性定义了控件是否使用停靠管理器来管理子控件的停靠行为。"""
    DockSite: Any
    """DockSite属性用于设置控件是否作为停靠站点。该属性定义了控件是否允许其他控件停靠在其上。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了控件被拖动时显示的鼠标光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动类型。该属性定义了控件的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动模式。该属性定义了控件是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    FullRepaint: Any
    """FullRepaint属性用于设置控件是否完全重绘。该属性定义了控件内容变化时是否重绘整个控件。"""
    Font: Any
    """Font属性用于设置控件的字体。该属性定义了控件显示文本的字体样式。"""
    Locked: Any
    """Locked属性用于设置控件是否锁定。该属性定义了控件是否可以被用户移动或调整大小。"""
    Padding: Any
    """Padding属性用于设置控件的内边距。该属性定义了控件内容与控件边框之间的距离。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的双向文本模式。该属性定义了控件是否使用与父控件相同的文本显示方向。"""
    ParentBackground: Any
    """ParentBackground属性用于设置控件是否继承父控件的背景。该属性定义了控件是否显示父控件的背景图案或颜色。"""
    ParentColor: Any
    """ParentColor属性用于设置控件是否继承父控件的颜色。该属性定义了控件是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置控件是否继承父控件的3D样式。该属性定义了控件是否显示为与父控件相同的三维效果。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否使用与父控件相同的字体样式。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示信息。该属性定义了控件是否显示与父控件相同的提示信息。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    ShowCaption: Any
    """ShowCaption属性用于设置控件是否显示标题。该属性定义了控件是否显示其标题文本。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    VerticalAlignment: Any
    """VerticalAlignment属性用于设置控件的垂直对齐方式。该属性定义了控件在其父控件中的垂直对齐方式。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在控件对齐之前触发。该事件处理程序允许开发人员在控件对齐前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在控件对齐时触发。该事件处理程序允许开发人员在控件对齐时执行自定义操作。"""
    OnCanResize: Any
    """OnCanResize事件在控件调整大小之前触发。该事件处理程序允许开发人员在控件调整大小前执行自定义操作。"""
    OnCardChange: Any
    """OnCardChange事件在卡片切换时触发。该事件处理程序允许开发人员在卡片面板切换卡片时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在控件调整大小时触发。该事件处理程序允许开发人员在控件尺寸受约束时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在控件停靠放置时触发。该事件处理程序允许开发人员在控件停靠放置时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在控件停靠悬停时触发。该事件处理程序允许开发人员在控件停靠悬停时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件处理程序允许开发人员在控件被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在获取停靠站点信息时触发。该事件处理程序允许开发人员在控件获取停靠站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件处理程序允许开发人员在控件检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在控件检测到鼠标进入时触发。该事件处理程序允许开发人员在控件检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在控件检测到鼠标离开时触发。该事件处理程序允许开发人员在控件检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标抬起时触发。该事件处理程序允许开发人员在控件检测到鼠标抬起时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在控件调整大小时触发。该事件处理程序允许开发人员在控件调整大小时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在控件解除停靠时触发。该事件处理程序允许开发人员在控件解除停靠时执行自定义操作。"""

class CategoryButtons(CustomControl):
    """CategoryButtons类继承自CustomControl，用于创建带分类按钮的控件。该类提供了丰富的属性和方法，用于管理和显示分类按钮。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CategoryButtons类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CategoryButtons类的实例（）。"""
    def Assign(self, *args, **kwargs) -> Any:
        """Assign函数用于将一个CategoryButtons实例的属性分配给另一个实例（）。"""
    def DragDrop(self, *args, **kwargs) -> Any:
        """DragDrop函数用于处理拖放操作（）。"""   
    def GenerateDragImage(self, *args, **kwargs) -> Any:
        """GenerateDragImage函数用于生成拖动图像（）。"""  
    def GetButtonAt(self, *args, **kwargs) -> Any:
        """GetButtonAt函数用于获取指定位置的按钮（）。""" 
    def GetButtonRect(self, *args, **kwargs) -> Any:
        """GetButtonRect函数用于获取指定按钮的矩形区域（）。"""
    def GetCategoryAt(self, *args, **kwargs) -> Any:
        """GetCategoryAt函数用于获取指定位置的分类（）。"""
    def GetCategoryRect(self, *args, **kwargs) -> Any:
        """GetCategoryRect函数用于获取指定分类的矩形区域（）。"""
    def GetDragImages(self) -> Any:
        """GetDragImages函数用于获取拖动图像列表（self指向实例本身）。"""
    def GetTargetAt(self, *args, **kwargs) -> Any:
        """GetTargetAt函数用于获取指定位置的目标（）。"""
    def IsEditing(self) -> bool:
        """IsEditing函数用于检查控件是否处于编辑状态（self指向实例本身，返回布尔值）。"""
    def RemoveInsertionPoints(self, *args, **kwargs) -> Any:
        """RemoveInsertionPoints函数用于移除插入点（）。"""
    def ScrollIntoView(self, *args, **kwargs) -> Any:
        """ScrollIntoView函数用于滚动到视图中的指定项（）。"""
    def SetInsertionButton(self, *args, **kwargs) -> Any:
        """SetInsertionButton函数用于设置插入按钮（）。"""
    def UpdateAllButtons(self, *args, **kwargs) -> Any:
        """UpdateAllButtons函数用于更新所有按钮（）。"""
    def UpdateButton(self, *args, **kwargs) -> Any:
        """UpdateButton函数用于更新指定按钮（）。"""
    CurrentCategory: Any
    """CurrentCategory属性用于获取或设置当前选择的分类。该属性返回当前活动的分类对象，或用于设置新的活动分类。"""
    DragButton: Any
    """DragButton属性用于获取或设置当前被拖动的按钮。该属性在拖动操作中指向被拖动的按钮对象。"""
    DragCategory: Any
    """DragCategory属性用于获取或设置当前被拖动的分类。该属性在拖动操作中指向被拖动的分类对象。"""
    DragImageList: Any
    """DragImageList属性用于获取或设置拖动图像列表。该属性定义了在拖动操作中显示的图像列表。"""
    SelectedItem: Any
    """SelectedItem属性用于获取或设置当前选择的项。该属性返回当前选中的按钮或分类对象，或用于设置新的选中项。"""
    FocusedItem: Any
    """FocusedItem属性用于获取或设置当前获得焦点的项。该属性返回当前具有输入焦点的按钮或分类对象，或用于设置新的焦点项。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性定义了控件在其父控件中的对齐方式，如顶部对齐、底部对齐等。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    BackgroundGradientColor: Any
    """BackgroundGradientColor属性用于设置控件背景的渐变颜色。该属性定义了控件背景的渐变起始颜色。"""
    BackgroundGradientDirection: Any
    """BackgroundGradientDirection属性用于设置控件背景的渐变方向。该属性定义了控件背景颜色的渐变方向，如水平渐变或垂直渐变。"""
    BevelEdges: Any
    """BevelEdges属性用于设置控件边缘的斜角。该属性定义了控件哪些边缘具有斜角效果。"""
    BevelInner: Any
    """BevelInner属性用于设置控件内部的斜角。该属性定义了控件内部的斜角效果。"""
    BevelOuter: Any
    """BevelOuter属性用于设置控件外部的斜角。该属性定义了控件外部的斜角效果。"""
    BevelKind: Any
    """BevelKind属性用于设置控件斜角的类型。该属性定义了控件的斜角效果类型，如凸起或凹陷。"""
    BevelWidth: Any
    """BevelWidth属性用于设置控件斜角的宽度。该属性定义了控件斜角的宽度。"""
    BorderWidth: Any
    """BorderWidth属性用于设置控件的边框宽度。该属性定义了控件的边框线宽度。"""
    BorderStyle: Any
    """BorderStyle属性用于设置控件的边框样式。该属性定义了控件的边框线样式，如实线或虚线。"""
    ButtonFlow: Any
    """ButtonFlow属性用于设置按钮的排列方式。该属性定义了按钮在控件中的布局方式，如水平排列或垂直排列。"""
    ButtonHeight: int
    """ButtonHeight属性用于设置按钮的高度。该属性定义了按钮的固定高度值。"""
    ButtonWidth: int
    """ButtonWidth属性用于设置按钮的宽度。该属性定义了按钮的固定宽度值。"""
    ButtonOptions: Any
    """ButtonOptions属性用于设置按钮的选项。该属性定义了按钮的各种配置选项，如是否可拖动、是否显示文本等。"""
    Categories: Any
    """Categories属性用于获取或设置控件的分类集合。该属性定义了控件中包含的所有分类对象。"""
    Color: Any
    """Color属性用于设置控件的背景颜色。该属性定义了控件的整体背景颜色。"""
    Cursor: Any
    """Cursor属性用于设置控件的光标样式。该属性定义了当鼠标悬停在控件上时显示的光标样式。"""
    DockSite: Any
    """DockSite属性用于设置控件是否作为停靠站点。该属性定义了控件是否允许其他控件停靠在其上。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了控件的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了控件是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置控件的字体。该属性定义了控件显示文本的字体样式。"""
    GradientDirection: Any
    """GradientDirection属性用于设置控件的渐变方向。该属性定义了控件背景颜色的渐变方向，如水平渐变或垂直渐变。"""
    Height: Any
    """Height属性用于设置控件的高度。该属性定义了控件的固定高度值。"""
    HotButtonColor: Any
    """HotButtonColor属性用于设置按钮的热点颜色。该属性定义了按钮在鼠标悬停时显示的颜色。"""
    Images: Any
    """Images属性用于设置控件的图像列表。该属性定义了按钮和分类使用的图像集合。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    RegularButtonColor: Any
    """RegularButtonColor属性用于设置按钮的常规颜色。该属性定义了按钮在正常状态下显示的颜色。"""
    SelectedButtonColor: Any
    """SelectedButtonColor属性用于设置按钮的选中颜色。该属性定义了按钮在选中状态下显示的颜色。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称。"""
    Width: Any
    """Width属性用于设置控件的宽度。该属性定义了控件的固定宽度值。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在控件对齐之前触发。该事件处理程序允许开发人员在控件对齐前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在控件对齐时触发。该事件处理程序允许开发人员在控件对齐时执行自定义操作。"""
    OnAfterDrawButton: Any
    """OnAfterDrawButton事件在按钮绘制之后触发。该事件处理程序允许开发人员在按钮绘制完成后执行自定义操作。"""
    OnBeforeDrawButton: Any
    """OnBeforeDrawButton事件在按钮绘制之前触发。该事件处理程序允许开发人员在按钮绘制之前执行自定义操作。"""
    OnButtonClicked: Any
    """OnButtonClicked事件在按钮被点击时触发。该事件处理程序允许开发人员在按钮被点击时执行自定义操作。"""
    OnCancelEdit: Any
    """OnCancelEdit事件在编辑操作被取消时触发。该事件处理程序允许开发人员在编辑操作被取消时执行自定义操作。"""
    OnCategoryCollapse: Any
    """OnCategoryCollapse事件在分类被折叠时触发。该事件处理程序允许开发人员在分类被折叠时执行自定义操作。"""
    OnCategoryClicked: Any
    """OnCategoryClicked事件在分类被点击时触发。该事件处理程序允许开发人员在分类被点击时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnCopyButton: Any
    """OnCopyButton事件在按钮被复制时触发。该事件处理程序允许开发人员在按钮被复制时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在控件停靠放置时触发。该事件处理程序允许开发人员在控件停靠放置时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在控件停靠悬停时触发。该事件处理程序允许开发人员在控件停靠悬停时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnDrawButton: Any
    """OnDrawButton事件在按钮被绘制时触发。该事件处理程序允许开发人员在按钮被绘制时执行自定义操作。"""
    OnDrawIcon: Any
    """OnDrawIcon事件在图标被绘制时触发。该事件处理程序允许开发人员在图标被绘制时执行自定义操作。"""
    OnDrawText: Any
    """OnDrawText事件在文本被绘制时触发。该事件处理程序允许开发人员在文本被绘制时执行自定义操作。"""
    OnEditing: Any
    """OnEditing事件在编辑操作开始时触发。该事件处理程序允许开发人员在编辑操作开始时执行自定义操作。"""
    OnEdited: Any
    """OnEdited事件在编辑操作完成时触发。该事件处理程序允许开发人员在编辑操作完成时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnGetHint: Any
    """OnGetHint事件在控件请求提示信息时触发。该事件处理程序允许开发人员在控件请求提示信息时提供自定义提示。"""
    OnHotButton: Any
    """OnHotButton事件在按钮变为热点时触发。该事件处理程序允许开发人员在按钮变为热点时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在控件检测到键盘按键按下时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在控件检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在控件检测到键盘按键释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件处理程序允许开发人员在控件检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在控件检测到鼠标进入时触发。该事件处理程序允许开发人员在控件检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在控件检测到鼠标离开时触发。该事件处理程序允许开发人员在控件检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标抬起时触发。该事件处理程序允许开发人员在控件检测到鼠标抬起时执行自定义操作。"""
    OnMouseWheel: Any
    """OnMouseWheel事件在控件检测到鼠标滚轮滚动时触发。该事件处理程序允许开发人员在控件检测到鼠标滚轮滚动时执行自定义操作。"""
    OnMouseWheelDown: Any
    """OnMouseWheelDown事件在控件检测到鼠标滚轮向下滚动时触发。该事件处理程序允许开发人员在控件检测到鼠标滚轮向下滚动时执行自定义操作。"""
    OnMouseWheelUp: Any
    """OnMouseWheelUp事件在控件检测到鼠标滚轮向上滚动时触发。该事件处理程序允许开发人员在控件检测到鼠标滚轮向上滚动时执行自定义操作。"""
    OnReorderButton: Any
    """OnReorderButton事件在按钮重新排序时触发。该事件处理程序允许开发人员在按钮重新排序时执行自定义操作。"""
    OnReorderCategory: Any
    """OnReorderCategory事件在分类重新排序时触发。该事件处理程序允许开发人员在分类重新排序时执行自定义操作。"""
    OnSelectedItemChange: Any
    """OnSelectedItemChange事件在选择项变化时触发。该事件处理程序允许开发人员在选择项变化时执行自定义操作。"""
    OnSelectedCategoryChange: Any
    """OnSelectedCategoryChange事件在选择分类变化时触发。该事件处理程序允许开发人员在选择分类变化时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""

class ScrollingWinControl(WinControl):
    """ScrollingWinControl类继承自WinControl，用于创建带滚动功能的窗口控件。该类提供了滚动条和自动滚动功能。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ScrollingWinControl类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁ScrollingWinControl类的实例（）。"""
    def DisableAutoRange(self, *args, **kwargs) -> Any:
        """DisableAutoRange函数用于禁用自动范围调整（）。"""
    def EnableAutoRange(self, *args, **kwargs) -> Any:
        """EnableAutoRange函数用于启用自动范围调整（）。"""
    def ScrollInView(self, *args, **kwargs) -> Any:
        """ScrollInView函数用于将指定的子控件滚动到可视区域（）。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在控件对齐之前触发。该事件处理程序允许开发人员在控件对齐前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在控件对齐时触发。该事件处理程序允许开发人员在控件对齐时执行自定义操作。"""
    HorzScrollBar: Any
    """HorzScrollBar属性用于设置或获取水平滚动条的属性。该属性定义了控件的水平滚动条的相关设置，如位置和可见性。"""
    VertScrollBar: Any
    """VertScrollBar属性用于设置或获取垂直滚动条的属性。该属性定义了控件的垂直滚动条的相关设置，如位置和可见性。"""

class CustomCategoryPanelGroup(ScrollingWinControl):
    """CustomCategoryPanelGroup类继承自ScrollingWinControl，用于创建带分类面板组的控件。该类提供了折叠和展开面板的功能，并支持自定义面板的外观和行为。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomCategoryPanelGroup类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomCategoryPanelGroup类的实例（）。"""
    def CollapseAll(self, *args, **kwargs) -> Any:
        """CollapseAll函数用于折叠所有面板（）。"""
    def CreatePanel(self, *args, **kwargs) -> Any:
        """CreatePanel函数用于创建一个新的面板（返回新创建的面板对象）。"""
    def ExpandAll(self, *args, **kwargs) -> Any:
        """ExpandAll函数用于展开所有面板（）。"""
    ChevronAlignment: Any
    """ChevronAlignment属性用于设置或获取面板组中折叠/展开图标的对齐方式。该属性定义了图标在面板标题中的位置。"""
    ChevronColor: Any
    """ChevronColor属性用于设置或获取面板组中折叠/展开图标的颜色。该属性定义了图标在默认状态下的显示颜色。"""
    ChevronHotColor: Any
    """ChevronHotColor属性用于设置或获取面板组中折叠/展开图标在鼠标悬停时的颜色。该属性定义了图标在鼠标悬停状态下的显示颜色。"""
    Color: Any
    """Color属性用于设置或获取面板组的背景颜色。该属性定义了面板组的整体背景颜色。"""
    GradientBaseColor: Any
    """GradientBaseColor属性用于设置或获取面板组背景渐变的基础颜色。该属性定义了背景渐变的起始颜色。"""
    GradientColor: Any
    """GradientColor属性用于设置或获取面板组背景渐变的终止颜色。该属性定义了背景渐变的结束颜色。"""
    GradientDirection: Any
    """GradientDirection属性用于设置或获取面板组背景渐变的方向。该属性定义了背景颜色的渐变方向，如水平渐变或垂直渐变。"""
    HeaderAlignment: Any
    """HeaderAlignment属性用于设置或获取面板标题的对齐方式。该属性定义了面板标题文本和图标的对齐位置。"""
    HeaderFont: Any
    """HeaderFont属性用于设置或获取面板标题的字体。该属性定义了面板标题显示文本的字体样式。"""
    HeaderHeight: int
    """HeaderHeight属性用于设置或获取面板标题的高度。该属性定义了面板标题的固定高度值。"""
    HeaderImage: Any
    """HeaderImage属性用于设置或获取面板标题的图像。该属性定义了面板标题中显示的图像对象。"""
    HeaderStyle: Any
    """HeaderStyle属性用于设置或获取面板标题的样式。该属性定义了面板标题的外观样式，如是否显示背景、是否有边框等。"""
    Images: Any
    """Images属性用于设置或获取面板组的图像列表。该属性定义了面板组中使用的图像集合。"""
    Panels: Any
    """Panels属性用于获取面板组中的所有面板。该属性返回一个包含所有面板对象的集合。"""

class CategoryPanelGroup(CustomCategoryPanelGroup):
    """CategoryPanelGroup类继承自CustomCategoryPanelGroup，用于创建带分类面板组的控件。该类提供了丰富的属性，支持自定义面板的外观和行为。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性定义了控件在其父控件中的对齐方式，如顶部对齐、底部对齐等。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置控件边缘的斜角。该属性定义了控件哪些边缘具有斜角效果。"""
    BevelInner: Any
    """BevelInner属性用于设置控件内部的斜角。该属性定义了控件内部的斜角效果。"""
    BevelOuter: Any
    """BevelOuter属性用于设置控件外部的斜角。该属性定义了控件外部的斜角效果。"""
    BevelKind: Any
    """BevelKind属性用于设置控件斜角的类型。该属性定义了控件的斜角效果类型，如凸起或凹陷。"""
    BevelWidth: Any
    """BevelWidth属性用于设置控件斜角的宽度。该属性定义了控件斜角的宽度。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的双向模式。该属性定义了控件的文本阅读顺序，如从左到右或从右到左。"""
    ChevronAlignment: Any
    """ChevronAlignment属性用于设置或获取面板组中折叠/展开图标的对齐方式。该属性定义了图标在面板标题中的位置。"""
    ChevronColor: Any
    """ChevronColor属性用于设置或获取面板组中折叠/展开图标的颜色。该属性定义了图标在默认状态下的显示颜色。"""
    ChevronHotColor: Any
    """ChevronHotColor属性用于设置或获取面板组中折叠/展开图标在鼠标悬停时的颜色。该属性定义了图标在鼠标悬停状态下的显示颜色。"""
    Constraints: Any
    """Constraints属性用于设置控件的大小约束。该属性定义了控件的最小和最大大小。"""
    DockSite: Any
    """DockSite属性用于设置控件是否作为停靠站点。该属性定义了控件是否允许其他控件停靠在其上。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了控件的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了控件是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    Color: Any
    """Color属性用于设置或获取面板组的背景颜色。该属性定义了面板组的整体背景颜色。"""
    Ctl3D: Any
    """Ctl3D属性用于设置控件是否具有三维边框效果。该属性定义了控件是否显示三维边框。"""
    Font: Any
    """Font属性用于设置或获取控件的字体。该属性定义了控件显示文本的字体样式。"""
    GradientBaseColor: Any
    """GradientBaseColor属性用于设置或获取面板组背景渐变的基础颜色。该属性定义了背景渐变的起始颜色。"""
    GradientColor: Any
    """GradientColor属性用于设置或获取面板组背景渐变的终止颜色。该属性定义了背景渐变的结束颜色。"""
    GradientDirection: Any
    """GradientDirection属性用于设置或获取面板组背景渐变的方向。该属性定义了背景颜色的渐变方向，如水平渐变或垂直渐变。"""
    HeaderAlignment: Any
    """HeaderAlignment属性用于设置或获取面板标题的对齐方式。该属性定义了面板标题文本和图标的对齐位置。"""
    HeaderFont: Any
    """HeaderFont属性用于设置或获取面板标题的字体。该属性定义了面板标题显示文本的字体样式。"""
    HeaderHeight: Any
    """HeaderHeight属性用于设置或获取面板标题的高度。该属性定义了面板标题的固定高度值。"""
    HeaderImage: Any
    """HeaderImage属性用于设置或获取面板标题的图像。该属性定义了面板标题中显示的图像对象。"""
    HeaderStyle: Any
    """HeaderStyle属性用于设置或获取面板标题的样式。该属性定义了面板标题的外观样式，如是否显示背景、是否有边框等。"""
    Height: Any
    """Height属性用于设置或获取控件的高度。该属性定义了控件的固定高度值。"""
    Images: Any
    """Images属性用于设置或获取面板组的图像列表。该属性定义了面板组中使用的图像集合。"""
    Padding: Any
    """Padding属性用于设置控件的内边距。该属性定义了控件内容与控件边框之间的距离。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的双向模式。该属性定义了控件是否使用与父控件相同的双向文本模式。"""
    ParentBackground: Any
    """ParentBackground属性用于设置控件是否继承父控件的背景。该属性定义了控件是否使用与父控件相同的背景。"""
    ParentColor: Any
    """ParentColor属性用于设置控件是否继承父控件的颜色。该属性定义了控件是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置控件是否继承父控件的三维边框效果。该属性定义了控件是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示信息显示设置。该属性定义了控件是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称。"""
    Width: Any
    """Width属性用于设置或获取控件的宽度。该属性定义了控件的固定宽度值。"""
    OnCanResize: Any
    """OnCanResize事件在控件大小调整之前触发。该事件处理程序允许开发人员在控件大小调整之前执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在控件大小调整时触发。该事件处理程序允许开发人员在控件大小调整时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件处理程序允许开发人员在控件被双击时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在控件停靠放置时触发。该事件处理程序允许开发人员在控件停靠放置时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在控件停靠悬停时触发。该事件处理程序允许开发人员在控件停靠悬停时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在控件获取站点信息时触发。该事件处理程序允许开发人员在控件获取站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件处理程序允许开发人员在控件检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在控件检测到鼠标进入时触发。该事件处理程序允许开发人员在控件检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在控件检测到鼠标离开时触发。该事件处理程序允许开发人员在控件检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标抬起时触发。该事件处理程序允许开发人员在控件检测到鼠标抬起时执行自定义操作。"""
    OnMouseWheel: Any
    """OnMouseWheel事件在控件检测到鼠标滚轮滚动时触发。该事件处理程序允许开发人员在控件检测到鼠标滚轮滚动时执行自定义操作。"""
    OnMouseWheelDown: Any
    """OnMouseWheelDown事件在控件检测到鼠标滚轮向下滚动时触发。该事件处理程序允许开发人员在控件检测到鼠标滚轮向下滚动时执行自定义操作。"""
    OnMouseWheelUp: Any
    """OnMouseWheelUp事件在控件检测到鼠标滚轮向上滚动时触发。该事件处理程序允许开发人员在控件检测到鼠标滚轮向上滚动时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在控件大小变化时触发。该事件处理程序允许开发人员在控件大小变化时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在控件解除停靠时触发。该事件处理程序允许开发人员在控件解除停靠时执行自定义操作。"""

class CustomListBox(CustomMultiSelectListControl):
    """CustomListBox类继承自CustomMultiSelectListControl，用于创建带有多选功能的自定义列表框控件。该类提供了丰富的方法和属性，用于管理和显示列表项。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomListBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomListBox类的实例（）。"""
    def AddItem(self, *args, **kwargs) -> Any:
        """AddItem函数用于向列表框中添加一个新项（）。"""
    def Clear(self, *args, **kwargs) -> Any:
        """Clear函数用于清空列表框中的所有项（）。"""
    def ClearSelection(self, *args, **kwargs) -> Any:
        """ClearSelection函数用于清除列表框中所有选中的项（）。"""
    def CopySelection(self, *args, **kwargs) -> Any:
        """CopySelection函数用于复制列表框中所有选中的项（）。"""
    def DeleteSelected(self, *args, **kwargs) -> Any:
        """DeleteSelected函数用于删除列表框中所有选中的项（）。"""
    def GetCount(self) -> Any:
        """GetCount函数用于获取列表框中的项数（self指向实例本身，返回项的总数）。"""
    def ItemAtPos(self, *args, **kwargs) -> int:
        """ItemAtPos函数用于根据给定的位置获取对应的列表项索引（返回项的索引）。"""
    def ItemRect(self, *args, **kwargs) -> Any:
        """ItemRect函数用于获取指定项的矩形区域（）。"""
    def SelectAll(self, *args, **kwargs) -> Any:
        """SelectAll函数用于选中列表框中的所有项（）。"""
    AutoCompleteDelay: Any
    """AutoCompleteDelay属性用于设置自动完成的延迟时间。该属性定义了输入字符后延迟多少毫秒开始自动完成。"""
    AutoComplete: bool
    """AutoComplete属性用于设置是否启用自动完成功能。该属性定义了在输入字符时是否自动匹配列表项。"""
    Canvas: Any
    """Canvas属性用于获取列表框的画布对象。该属性定义了列表框的绘制表面。"""
    Count: int
    """Count属性用于获取列表框中的项数。该属性返回列表框中的总项数。"""
    Items: Any
    """Items属性用于获取或设置列表框中的项集合。该属性定义了列表框中包含的所有项。"""
    Selected: int
    """Selected属性用于获取或设置列表框中选中的项。该属性定义了当前选中的项的索引值。"""
    ScrollWidth: int
    """ScrollWidth属性用于设置或获取列表框的滚动宽度。该属性定义了列表框的水平滚动范围。"""
    TopIndex: int
    """TopIndex属性用于设置或获取列表框中显示的第一个项的索引。该属性定义了列表框滚动到的项的索引。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""

class CustomCheckListBox(CustomListBox):
    """CustomCheckListBox类继承自CustomListBox，用于创建带复选框功能的自定义列表框控件。该类提供了丰富的方法和属性，用于管理和显示带复选框的列表项。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomCheckListBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomCheckListBox类的实例（）。"""
    def CheckAll(self, *args, **kwargs) -> Any:
        """CheckAll函数用于选中所有列表项（）。"""
    AllowGrayed: bool
    """AllowGrayed属性用于设置是否允许复选框的灰色状态。该属性定义了复选框是否可以有部分选中的状态。"""
    CheckBoxPadding: int
    """CheckBoxPadding属性用于设置复选框与列表项文本之间的间距。该属性定义了复选框和文本之间的距离。"""
    Checked: int
    """Checked属性用于获取或设置列表框中选中的复选框项。该属性定义了当前选中的复选框项的索引值。"""
    Flat: bool
    """Flat属性用于设置复选框是否为扁平样式。该属性定义了复选框的外观是否为扁平风格。"""
    ItemEnabled: int
    """ItemEnabled属性用于获取或设置列表项是否可用。该属性定义了指定索引的列表项是否处于可用状态。"""
    State: Any
    """State属性用于获取或设置复选框的状态。该属性定义了复选框的当前状态，如选中、未选中或灰色状态。"""
    Header: int
    """Header属性用于获取或设置列表框中是否显示标题。该属性定义了标题的显示状态和索引。"""
    HeaderColor: Any
    """HeaderColor属性用于设置标题的文本颜色。该属性定义了标题文本显示的颜色。"""
    HeaderBackgroundColor: Any
    """HeaderBackgroundColor属性用于设置标题的背景颜色。该属性定义了标题背景显示的颜色。"""
    OnClickCheck: Any
    """OnClickCheck事件在复选框被点击时触发。该事件处理程序允许开发人员在复选框被点击时执行自定义操作。"""

class CheckListBox(CustomCheckListBox):
    """CheckListBox类继承自CustomCheckListBox，用于创建带复选框功能的列表框控件。该类提供了丰富的属性，支持自定义列表框的外观和行为。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性定义了控件在其父控件中的对齐方式，如顶部对齐、底部对齐等。"""
    AllowGrayed: Any
    """AllowGrayed属性用于设置是否允许复选框的灰色状态。该属性定义了复选框是否可以有部分选中的状态。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    AutoComplete: Any
    """AutoComplete属性用于设置是否启用自动完成功能。该属性定义了在输入字符时是否自动匹配列表项。"""
    BevelEdges: Any
    """BevelEdges属性用于设置控件边缘的斜角。该属性定义了控件哪些边缘具有斜角效果。"""
    BevelInner: Any
    """BevelInner属性用于设置控件内部的斜角。该属性定义了控件内部的斜角效果。"""
    BevelOuter: Any
    """BevelOuter属性用于设置控件外部的斜角。该属性定义了控件外部的斜角效果。"""
    BevelKind: Any
    """BevelKind属性用于设置控件斜角的类型。该属性定义了控件的斜角效果类型，如凸起或凹陷。"""
    BevelWidth: Any
    """BevelWidth属性用于设置控件斜角的宽度。该属性定义了控件斜角的宽度。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的双向模式。该属性定义了控件的文本阅读顺序，如从左到右或从右到左。"""
    BorderStyle: Any
    """BorderStyle属性用于设置控件的边框样式。该属性定义了控件的边框线样式，如实线或虚线。"""
    Color: Any
    """Color属性用于设置控件的背景颜色。该属性定义了控件的整体背景颜色。"""
    Columns: Any
    """Columns属性用于设置列表框的列数。该属性定义了列表框中的列数。"""
    Constraints: Any
    """Constraints属性用于设置控件的大小约束。该属性定义了控件的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置控件是否具有三维边框效果。该属性定义了控件是否显示三维边框。"""
    CheckBoxPadding: Any
    """CheckBoxPadding属性用于设置复选框与列表项文本之间的间距。该属性定义了复选框和文本之间的距离。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了控件的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了控件是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    Flat: Any
    """Flat属性用于设置复选框是否为扁平样式。该属性定义了复选框的外观是否为扁平风格。"""
    Font: Any
    """Font属性用于设置控件的字体。该属性定义了控件显示文本的字体样式。"""
    HeaderColor: Any
    """HeaderColor属性用于设置标题的文本颜色。该属性定义了标题文本显示的颜色。"""
    HeaderBackgroundColor: Any
    """HeaderBackgroundColor属性用于设置标题的背景颜色。该属性定义了标题背景显示的颜色。"""
    ImeMode: Any
    """ImeMode属性用于设置输入法模式。该属性定义了控件在接收键盘输入时的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置输入法的名称。该属性定义了控件使用的输入法名称。"""
    IntegralHeight: Any
    """IntegralHeight属性用于设置控件是否为整行高度。该属性定义了控件的高度是否为整行高度，以避免部分行显示。"""
    ItemHeight: Any
    """ItemHeight属性用于设置列表项的高度。该属性定义了每个列表项的固定高度值。"""
    Items: Any
    """Items属性用于获取或设置列表框中的项集合。该属性定义了列表框中包含的所有项。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的双向模式。该属性定义了控件是否使用与父控件相同的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置控件是否继承父控件的颜色。该属性定义了控件是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置控件是否继承父控件的三维边框效果。该属性定义了控件是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示信息显示设置。该属性定义了控件是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    ScrollWidth: Any
    """ScrollWidth属性用于设置列表框的滚动宽度。该属性定义了列表框的水平滚动范围。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    Sorted: Any
    """Sorted属性用于设置列表项是否按字母顺序排序。该属性定义了列表项是否自动排序。"""
    Style: Any
    """Style属性用于设置控件的样式。该属性定义了控件的显示和交互样式。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    TabWidth: Any
    """TabWidth属性用于设置列表项的标签宽度。该属性定义了列表项的标签宽度。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnClickCheck: Any
    """OnClickCheck事件在复选框被点击时触发。该事件处理程序允许开发人员在复选框被点击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnData: Any
    """OnData事件在控件需要数据时触发。该事件处理程序允许开发人员在控件请求数据时提供自定义数据。"""
    OnDataFind: Any
    """OnDataFind事件在控件需要查找数据时触发。该事件处理程序允许开发人员在控件请求查找数据时执行自定义查找操作。"""
    OnDataObject: Any
    """OnDataObject事件在控件需要数据对象时触发。该事件处理程序允许开发人员在控件请求数据对象时提供自定义数据对象。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件处理程序允许开发人员在控件被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnDrawItem: Any
    """OnDrawItem事件在列表项被绘制时触发。该事件处理程序允许开发人员在列表项被绘制时执行自定义绘制操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在控件检测到键盘按键按下时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在控件检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在控件检测到键盘按键释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键释放时执行自定义操作。"""
    OnMeasureItem: Any
    """OnMeasureItem事件在控件测量列表项时触发。该事件处理程序允许开发人员在控件测量列表项时执行自定义测量操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件处理程序允许开发人员在控件检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在控件检测到鼠标进入时触发。该事件处理程序允许开发人员在控件检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在控件检测到鼠标离开时触发。该事件处理程序允许开发人员在控件检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标抬起时触发。该事件处理程序允许开发人员在控件检测到鼠标抬起时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""

class ColorGrid(CustomControl):
    """ColorGrid类继承自CustomControl，用于创建带颜色网格功能的控件。该类提供了丰富的方法和属性，用于管理和显示颜色网格。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ColorGrid类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def ColorToIndex(self, *args, **kwargs) -> int:
        """ColorToIndex函数用于将颜色转换为索引（返回颜色的索引值）。"""
    ForegroundColor: Any
    """ForegroundColor属性用于设置或获取前景色。该属性定义了网格的前景颜色。"""
    BackgroundColor: Any
    """BackgroundColor属性用于设置或获取背景色。该属性定义了网格的背景颜色。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    ClickEnablesColor: bool
    """ClickEnablesColor属性用于设置是否在点击时启用颜色选择。该属性定义了用户点击网格时是否启用颜色选择功能。"""
    Constraints: Any
    """Constraints属性用于设置控件的大小约束。该属性定义了控件的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置控件是否具有三维边框效果。该属性定义了控件是否显示三维边框。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了控件是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    GridOrdering: Any
    """GridOrdering属性用于设置网格的排列顺序。该属性定义了网格中颜色的排列方式。"""
    ForegroundIndex: int
    """ForegroundIndex属性用于设置或获取前景色的索引。该属性定义了当前选中的前景颜色的索引值。"""
    BackgroundIndex: int
    """BackgroundIndex属性用于设置或获取背景色的索引。该属性定义了当前选中的背景颜色的索引值。"""
    ForegroundEnabled: bool
    """ForegroundEnabled属性用于设置前景色是否启用。该属性定义了前景颜色选择功能是否启用。"""
    BackgroundEnabled: bool
    """BackgroundEnabled属性用于设置背景色是否启用。该属性定义了背景颜色选择功能是否启用。"""
    Font: Any
    """Font属性用于设置或获取控件的字体。该属性定义了控件显示文本的字体样式。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置控件是否继承父控件的三维边框效果。该属性定义了控件是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示信息显示设置。该属性定义了控件是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    Selection: int
    """Selection属性用于设置或获取当前选中的颜色索引。该属性定义了当前选中的颜色在网格中的索引值。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    OnChange: Any
    """OnChange事件在控件的颜色选择变化时触发。该事件处理程序允许开发人员在颜色选择变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在控件检测到键盘按键按下时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在控件检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在控件检测到键盘按键释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件处理程序允许开发人员在控件检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标抬起时触发。该事件处理程序允许开发人员在控件检测到鼠标抬起时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""

class CustomColorListBox(CustomListBox):
    """CustomColorListBox类继承自CustomListBox，用于创建带颜色列表功能的自定义列表框控件。该类提供了丰富的方法和属性，用于管理和显示颜色列表。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomColorListBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    Style: Any
    """Style属性用于设置或获取颜色列表框的样式。该属性定义了颜色列表框的显示和交互样式。"""
    Colors: Any
    """Colors属性用于获取或设置颜色列表框中的颜色集合。该属性定义了颜色列表框中包含的所有颜色。"""
    ColorNames: Any
    """ColorNames属性用于获取或设置颜色列表框中的颜色名称集合。该属性定义了颜色列表框中包含的所有颜色名称。"""
    Selected: Any
    """Selected属性用于获取或设置颜色列表框中选中的颜色。该属性定义了当前选中的颜色。"""
    DefaultColorColor: Any
    """DefaultColorColor属性用于设置或获取默认颜色的颜色值。该属性定义了颜色列表框中默认颜色的显示颜色。"""
    NoneColorColor: Any
    """NoneColorColor属性用于设置或获取无颜色的颜色值。该属性定义了颜色列表框中无颜色的显示颜色。"""
    OnGetColors: Any
    """OnGetColors事件在需要获取颜色集合时触发。该事件处理程序允许开发人员在需要获取颜色集合时执行自定义操作。"""

class ColorListBox(CustomColorListBox):
    """ColorListBox类继承自CustomColorListBox，用于创建带颜色列表功能的列表框控件。该类提供了丰富的属性，支持自定义颜色列表框的外观和行为。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性定义了控件在其父控件中的对齐方式，如顶部对齐、底部对齐等。"""
    AutoComplete: Any
    """AutoComplete属性用于设置是否启用自动完成功能。该属性定义了在输入字符时是否自动匹配列表项。"""
    DefaultColorColor: Any
    """DefaultColorColor属性用于设置或获取默认颜色的颜色值。该属性定义了颜色列表框中默认颜色的显示颜色。"""
    NoneColorColor: Any
    """NoneColorColor属性用于设置或获取无颜色的颜色值。该属性定义了颜色列表框中无颜色的显示颜色。"""
    Selected: Any
    """Selected属性用于获取或设置颜色列表框中选中的颜色。该属性定义了当前选中的颜色。"""
    Style: Any
    """Style属性用于设置或获取颜色列表框的样式。该属性定义了颜色列表框的显示和交互样式。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置控件边缘的斜角。该属性定义了控件哪些边缘具有斜角效果。"""
    BevelInner: Any
    """BevelInner属性用于设置控件内部的斜角。该属性定义了控件内部的斜角效果。"""
    BevelKind: Any
    """BevelKind属性用于设置控件斜角的类型。该属性定义了控件的斜角效果类型，如凸起或凹陷。"""
    BevelOuter: Any
    """BevelOuter属性用于设置控件外部的斜角。该属性定义了控件外部的斜角效果。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的双向模式。该属性定义了控件的文本阅读顺序，如从左到右或从右到左。"""
    Color: Any
    """Color属性用于设置控件的背景颜色。该属性定义了控件的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置控件的大小约束。该属性定义了控件的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置控件是否具有三维边框效果。该属性定义了控件是否显示三维边框。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置控件的字体。该属性定义了控件显示文本的字体样式。"""
    ItemHeight: Any
    """ItemHeight属性用于设置列表项的高度。该属性定义了每个列表项的固定高度值。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的双向模式。该属性定义了控件是否使用与父控件相同的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置控件是否继承父控件的颜色。该属性定义了控件是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置控件是否继承父控件的三维边框效果。该属性定义了控件是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示信息显示设置。该属性定义了控件是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件处理程序允许开发人员在控件被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnGetColors: Any
    """OnGetColors事件在需要获取颜色集合时触发。该事件处理程序允许开发人员在需要获取颜色集合时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在控件检测到键盘按键按下时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在控件检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在控件检测到键盘按键释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件检测到鼠标激活时触发。该事件处理程序允许开发人员在控件检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在控件检测到鼠标进入时触发。该事件处理程序允许开发人员在控件检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在控件检测到鼠标离开时触发。该事件处理程序允许开发人员在控件检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标抬起时触发。该事件处理程序允许开发人员在控件检测到鼠标抬起时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""

class CustomCombo(CustomListControl):
    """CustomCombo类继承自CustomListControl，用于创建带下拉列表功能的自定义组合框控件。该类提供了丰富的方法和属性，用于管理和显示下拉列表。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomCombo类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomCombo类的实例（）。"""
    def AddItem(self, *args, **kwargs) -> Any:
        """AddItem函数用于向组合框中添加一个新项（）。"""
    def Clear(self, *args, **kwargs) -> Any:
        """Clear函数用于清空组合框中的所有项（）。"""
    def ClearSelection(self, *args, **kwargs) -> Any:
        """ClearSelection函数用于清除组合框中所有选中的项（）。"""
    def CopySelection(self, *args, **kwargs) -> Any:
        """CopySelection函数用于复制组合框中所有选中的项（）。"""
    def DeleteSelected(self, *args, **kwargs) -> Any:
        """DeleteSelected函数用于删除组合框中所有选中的项（）。"""
    def Focused(self) -> Any:
        """Focused函数用于获取组合框是否获得焦点（self指向实例本身，返回组合框是否获得焦点的状态）。"""
    def GetCount(self) -> Any:
        """GetCount函数用于获取组合框中的项数（self指向实例本身，返回项的总数）。"""
    def SelectAll(self, *args, **kwargs) -> Any:
        """SelectAll函数用于选中组合框中的所有项（）。"""
    Canvas: Any
    """Canvas属性用于获取组合框的画布对象。该属性定义了组合框的绘制表面。"""
    DroppedDown: bool
    """DroppedDown属性用于获取或设置组合框的下拉状态。该属性定义了组合框是否处于下拉状态。"""
    Items: Any
    """Items属性用于获取或设置组合框中的项集合。该属性定义了组合框中包含的所有项。"""
    SelLength: int
    """SelLength属性用于获取或设置组合框中选中文本的长度。该属性定义了选中文本的长度。"""
    SelStart: int
    """SelStart属性用于获取或设置组合框中选中文本的起始位置。该属性定义了选中文本的起始位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""

class CustomComboBoxEx(CustomCombo):
    """CustomComboBoxEx类继承自CustomCombo，用于创建扩展的带下拉列表功能的自定义组合框控件。该类提供了丰富的方法和属性，用于管理和显示扩展下拉列表。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomComboBoxEx类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomComboBoxEx类的实例（）。"""
    def Focused(self) -> Any:
        """Focused函数用于获取组合框是否获得焦点（self指向实例本身，返回组合框是否获得焦点的状态）。"""
    def KeyPress(self, *args, **kwargs) -> Any:
        """KeyPress函数用于处理键盘按键事件（）。"""
    AutoCompleteOptions: Any
    """AutoCompleteOptions属性用于设置自动完成功能的选项。该属性定义了组合框自动完成的相关选项。"""
    DropDownCount: int
    """DropDownCount属性用于设置下拉列表中可见项的数量。该属性定义了组合框下拉列表中可见项的最大数量。"""
    Images: Any
    """Images属性用于设置或获取组合框中的图像列表。该属性定义了组合框中使用的图像集合。"""
    ItemsEx: Any
    """ItemsEx属性用于设置或获取扩展项集合。该属性定义了组合框中包含的扩展项。"""
    SelText: str
    """SelText属性用于获取或设置组合框中选中的文本。该属性定义了当前选中的文本。"""
    Style: Any
    """Style属性用于设置或获取组合框的样式。该属性定义了组合框的显示和交互样式。"""
    StyleEx: Any
    """StyleEx属性用于设置或获取组合框的扩展样式。该属性定义了组合框的扩展显示和交互样式。"""
    OnBeginEdit: Any
    """OnBeginEdit事件在组合框开始编辑时触发。该事件处理程序允许开发人员在组合框开始编辑时执行自定义操作。"""
    OnEndEdit: Any
    """OnEndEdit事件在组合框结束编辑时触发。该事件处理程序允许开发人员在组合框结束编辑时执行自定义操作。"""

class ComboBoxEx(CustomComboBoxEx):
    """ComboBoxEx类继承自CustomComboBoxEx，用于创建带扩展下拉列表功能的组合框控件。该类提供了丰富的属性，支持自定义组合框的外观和行为。"""
    Align: Any
    """Align属性用于设置控件的对齐方式。该属性定义了控件在其父控件中的对齐方式，如顶部对齐、底部对齐等。"""
    AutoCompleteOptions: Any
    """AutoCompleteOptions属性用于设置自动完成功能的选项。该属性定义了组合框自动完成的相关选项。"""
    ItemsEx: Any
    """ItemsEx属性用于设置或获取扩展项集合。该属性定义了组合框中包含的扩展项。"""
    Style: Any
    """Style属性用于设置或获取组合框的样式。该属性定义了组合框的显示和交互样式。"""
    StyleEx: Any
    """StyleEx属性用于设置或获取组合框的扩展样式。该属性定义了组合框的扩展显示和交互样式。"""
    Action: Any
    """Action属性用于设置组合框的动作。该属性定义了组合框的关联动作。"""
    Anchors: Any
    """Anchors属性用于设置控件的锚点。该属性定义了控件如何随其父控件的大小变化而调整位置和大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置控件的双向模式。该属性定义了控件的文本阅读顺序，如从左到右或从右到左。"""
    Color: Any
    """Color属性用于设置控件的背景颜色。该属性定义了控件的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置控件的大小约束。该属性定义了控件的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置控件是否具有三维边框效果。该属性定义了控件是否显示三维边框。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置控件是否使用双缓冲。该属性定义了控件是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了控件的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了控件是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置控件是否可用。该属性定义了控件是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置控件的字体。该属性定义了控件显示文本的字体样式。"""
    ImeMode: Any
    """ImeMode属性用于设置输入法模式。该属性定义了控件在接收键盘输入时的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置输入法的名称。该属性定义了控件使用的输入法名称。"""
    ItemHeight: Any
    """ItemHeight属性用于设置列表项的高度。该属性定义了每个列表项的固定高度值。"""
    MaxLength: Any
    """MaxLength属性用于设置组合框中可输入的最大字符数。该属性定义了用户可以输入的最大字符数。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置控件是否继承父控件的双向模式。该属性定义了控件是否使用与父控件相同的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置控件是否继承父控件的颜色。该属性定义了控件是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置控件是否继承父控件的三维边框效果。该属性定义了控件是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置控件是否继承父控件的双缓冲。该属性定义了控件是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置控件是否继承父控件的字体。该属性定义了控件是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置控件是否继承父控件的提示信息显示设置。该属性定义了控件是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置控件的右键菜单。该属性定义了控件右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置控件是否显示提示信息。该属性定义了控件是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置控件的标签顺序。该属性定义了控件在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置控件是否为标签停靠点。该属性定义了控件是否可以通过Tab键获得焦点。"""
    Text: Any
    """Text属性用于获取或设置组合框中的文本。该属性定义了组合框中显示的文本内容。"""
    Touch: Any
    """Touch属性用于设置控件的触摸相关属性。该属性定义了控件如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置控件是否可见。该属性定义了控件是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置控件的样式元素。该属性定义了控件使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置控件的样式名称。该属性定义了控件使用的样式名称。"""
    OnBeginEdit: Any
    """OnBeginEdit事件在组合框开始编辑时触发。该事件处理程序允许开发人员在组合框开始编辑时执行自定义操作。"""
    OnChange: Any
    """OnChange事件在组合框的文本或选择变化时触发。该事件处理程序允许开发人员在组合框的文本或选择变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被单击时触发。该事件处理程序允许开发人员在控件被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件处理程序允许开发人员在控件被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在控件拖放时触发。该事件处理程序允许开发人员在控件被拖放时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在控件被拖动悬停时触发。该事件处理程序允许开发人员在控件被拖动悬停时执行自定义操作。"""
    OnDropDown: Any
    """OnDropDown事件在组合框下拉列表显示时触发。该事件处理程序允许开发人员在组合框下拉列表显示时执行自定义操作。"""
    OnEndEdit: Any
    """OnEndEdit事件在组合框结束编辑时触发。该事件处理程序允许开发人员在组合框结束编辑时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在控件结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在控件结束拖动时触发。该事件处理程序允许开发人员在控件结束拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在控件检测到键盘按键按下时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在控件检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在控件检测到键盘按键释放时触发。该事件处理程序允许开发人员在控件检测到键盘按键释放时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnSelect: Any
    """OnSelect事件在组合框中的项被选中时触发。该事件处理程序允许开发人员在组合框中的项被选中时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在控件开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""
    Images: Any
    """Images属性用于设置或获取组合框中的图像列表。该属性定义了组合框中使用的图像集合。"""
    DropDownCount: Any
    """DropDownCount属性用于设置下拉列表中可见项的数量。该属性定义了组合框下拉列表中可见项的最大数量。"""

class CoolBands(Collection):
    """CoolBands类继承自Collection，用于创建带有CoolBar的集合。该类提供了管理和操作CoolBar集合的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CoolBands类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CoolBands类的实例（）。"""
    def Add(self) -> Any:
        """Add函数用于向CoolBands集合中添加一个新项（self指向实例本身，返回新添加项的引用）。"""
    def FindBand(self, *args, **kwargs) -> Any:
        """FindBand函数用于在CoolBands集合中查找指定的Band（返回找到的Band对象）。"""
    CoolBar: Any
    """CoolBar属性用于获取或设置关联的CoolBar对象。该属性定义了CoolBands集合中的CoolBar。"""
    Items: Any
    """Items属性用于获取或设置CoolBands集合中的项。该属性定义了CoolBands集合中的所有项。"""

class CoolBar(ToolWindow):
    """CoolBar类继承自ToolWindow，用于创建带有工具栏的控件。该类提供了管理和操作工具栏的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CoolBar类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CoolBar类的实例（）。"""
    def FlipChildren(self, *args, **kwargs) -> Any:
        """FlipChildren函数用于翻转CoolBar中的子控件（）。"""
    def ScaleForPPI(self, *args, **kwargs) -> Any:
        """ScaleForPPI函数用于根据PPI（每英寸像素数）缩放CoolBar（）。"""
    Align: Any
    """Align属性用于设置CoolBar的对齐方式。该属性定义了CoolBar在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置CoolBar的锚点。该属性定义了CoolBar如何随其父控件的大小变化而调整位置和大小。"""
    AutoSize: Any
    """AutoSize属性用于设置CoolBar是否自动调整大小。该属性定义了CoolBar是否根据内容自动调整大小。"""
    BandBorderStyle: Any
    """BandBorderStyle属性用于设置CoolBar中Band的边框样式。该属性定义了Band的边框样式。"""
    BandMaximize: Any
    """BandMaximize属性用于设置CoolBar中Band是否最大化。该属性定义了Band是否最大化显示。"""
    Bands: Any
    """Bands属性用于获取或设置CoolBar中的Band集合。该属性定义了CoolBar中包含的所有Band对象。"""
    BorderWidth: Any
    """BorderWidth属性用于设置CoolBar的边框宽度。该属性定义了CoolBar的边框宽度。"""
    Color: Any
    """Color属性用于设置CoolBar的背景颜色。该属性定义了CoolBar的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置CoolBar的大小约束。该属性定义了CoolBar的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置CoolBar是否具有三维边框效果。该属性定义了CoolBar是否显示三维边框。"""
    DockSite: Any
    """DockSite属性用于设置CoolBar是否为停靠站点。该属性定义了CoolBar是否可以作为其他控件的停靠站点。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置CoolBar是否使用双缓冲。该属性定义了CoolBar是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了CoolBar的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了CoolBar是否可以被拖动以及拖动的方式。"""
    EdgeBorders: Any
    """EdgeBorders属性用于设置CoolBar的边缘边框样式。该属性定义了CoolBar的边缘边框样式。"""
    EdgeInner: Any
    """EdgeInner属性用于设置CoolBar的内边缘样式。该属性定义了CoolBar的内边缘样式。"""
    EdgeOuter: Any
    """EdgeOuter属性用于设置CoolBar的外边缘样式。该属性定义了CoolBar的外边缘样式。"""
    Enabled: Any
    """Enabled属性用于设置CoolBar是否可用。该属性定义了CoolBar是否可以响应用户交互。"""
    FixedSize: bool
    """FixedSize属性用于设置CoolBar的大小是否固定。该属性定义了CoolBar的大小是否固定不变。"""
    FixedOrder: bool
    """FixedOrder属性用于设置CoolBar的顺序是否固定。该属性定义了CoolBar中的Band顺序是否固定。"""
    Font: Any
    """Font属性用于设置CoolBar的字体。该属性定义了CoolBar显示文本的字体样式。"""
    Images: Any
    """Images属性用于设置CoolBar中的图像列表。该属性定义了CoolBar中使用的图像集合。"""
    ParentColor: Any
    """ParentColor属性用于设置CoolBar是否继承父控件的颜色。该属性定义了CoolBar是否使用与父控件相同的背景颜色。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置CoolBar是否继承父控件的双缓冲。该属性定义了CoolBar是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置CoolBar是否继承父控件的字体。该属性定义了CoolBar是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置CoolBar是否继承父控件的提示信息显示设置。该属性定义了CoolBar是否使用与父控件相同的提示信息显示设置。"""
    Bitmap: Any
    """Bitmap属性用于设置CoolBar的位图图像。该属性定义了CoolBar的背景图像。"""
    PopupMenu: Any
    """PopupMenu属性用于设置CoolBar的右键菜单。该属性定义了CoolBar右键点击时显示的上下文菜单。"""
    ShowChevron: bool
    """ShowChevron属性用于设置CoolBar是否显示省略号按钮。该属性定义了CoolBar中是否显示省略号按钮用于访问更多内容。"""
    ShowHint: Any
    """ShowHint属性用于设置CoolBar是否显示提示信息。该属性定义了CoolBar是否在鼠标悬停时显示提示信息。"""
    ShowText: bool
    """ShowText属性用于设置CoolBar是否显示文本。该属性定义了CoolBar中的Band是否显示文本。"""
    Touch: Any
    """Touch属性用于设置CoolBar的触摸相关属性。该属性定义了CoolBar如何响应触摸输入。"""
    Vertical: bool
    """Vertical属性用于设置CoolBar是否垂直排列。该属性定义了CoolBar中的Band是否垂直排列。"""
    Visible: Any
    """Visible属性用于设置CoolBar是否可见。该属性定义了CoolBar是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置CoolBar的样式元素。该属性定义了CoolBar使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置CoolBar的样式名称。该属性定义了CoolBar使用的样式名称。"""
    OnChange: Any
    """OnChange事件在CoolBar的状态变化时触发。该事件处理程序允许开发人员在CoolBar的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在CoolBar被单击时触发。该事件处理程序允许开发人员在CoolBar被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在CoolBar弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在CoolBar被双击时触发。该事件处理程序允许开发人员在CoolBar被双击时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在CoolBar进行停靠操作时触发。该事件处理程序允许开发人员在CoolBar进行停靠操作时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在CoolBar进行停靠悬停时触发。该事件处理程序允许开发人员在CoolBar进行停靠悬停时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在CoolBar进行拖放操作时触发。该事件处理程序允许开发人员在CoolBar进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在CoolBar进行拖动悬停时触发。该事件处理程序允许开发人员在CoolBar进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在CoolBar结束停靠操作时触发。该事件处理程序允许开发人员在CoolBar结束停靠操作时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在CoolBar结束拖动操作时触发。该事件处理程序允许开发人员在CoolBar结束拖动操作时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在CoolBar检测到手势时触发。该事件处理程序允许开发人员在CoolBar检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在获取CoolBar的站点信息时触发。该事件处理程序允许开发人员在获取CoolBar的站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在CoolBar检测到鼠标激活时触发。该事件处理程序允许开发人员在CoolBar检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在CoolBar检测到鼠标按下时触发。该事件处理程序允许开发人员在CoolBar检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在CoolBar检测到鼠标进入时触发。该事件处理程序允许开发人员在CoolBar检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在CoolBar检测到鼠标离开时触发。该事件处理程序允许开发人员在CoolBar检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在CoolBar检测到鼠标移动时触发。该事件处理程序允许开发人员在CoolBar检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在CoolBar检测到鼠标抬起时触发。该事件处理程序允许开发人员在CoolBar检测到鼠标抬起时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在CoolBar调整大小时触发。该事件处理程序允许开发人员在CoolBar调整大小时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在CoolBar开始停靠时触发。该事件处理程序允许开发人员在CoolBar开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在CoolBar开始拖动时触发。该事件处理程序允许开发人员在CoolBar开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在CoolBar解除停靠时触发。该事件处理程序允许开发人员在CoolBar解除停靠时执行自定义操作。"""

class BasePickerControl(CustomControl):
    """BasePickerControl类继承自CustomControl，用于创建带下拉选择功能的控件。该类提供了管理和操作选择控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建BasePickerControl类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁BasePickerControl类的实例（）。"""
    def CanModify(self) -> Any:
        """CanModify函数用于检查选择控件是否可以修改（self指向实例本身，返回一个布尔值，指示选择控件是否可以修改）。"""
    def CloseUp(self, *args, **kwargs) -> Any:
        """CloseUp函数用于关闭选择控件的下拉列表（）。"""
    def DropDown(self, *args, **kwargs) -> Any:
        """DropDown函数用于打开选择控件的下拉列表（）。"""
    BorderColor: Any
    """BorderColor属性用于设置选择控件的边框颜色。该属性定义了选择控件的边框颜色。"""
    BorderStyle: Any
    """BorderStyle属性用于设置选择控件的边框样式。该属性定义了选择控件的边框样式。"""
    DropDownCount: int
    """DropDownCount属性用于设置选择控件的下拉列表中可见项的数量。该属性定义了选择控件下拉列表中可见项的最大数量。"""
    HighlightColor: Any
    """HighlightColor属性用于设置选择控件的高亮颜色。该属性定义了选择控件中的高亮颜色。"""
    HotColor: Any
    """HotColor属性用于设置选择控件的热点颜色。该属性定义了选择控件中的热点颜色。"""
    PopupColor: Any
    """PopupColor属性用于设置选择控件的弹出颜色。该属性定义了选择控件下拉列表的背景颜色。"""
    SelectionColor: Any
    """SelectionColor属性用于设置选择控件的选择颜色。该属性定义了选择控件中选中的颜色。"""
    SelectionFontColor: Any
    """SelectionFontColor属性用于设置选择控件的选中文字颜色。该属性定义了选择控件中选中文字的颜色。"""
    ShowOkCancel: bool
    """ShowOkCancel属性用于设置选择控件是否显示确定和取消按钮。该属性定义了选择控件中是否显示确定和取消按钮。"""
    OnChange: Any
    """OnChange事件在选择控件的状态变化时触发。该事件处理程序允许开发人员在选择控件的状态变化时执行自定义操作。"""
    OnCloseUp: Any
    """OnCloseUp事件在选择控件的下拉列表关闭时触发。该事件处理程序允许开发人员在选择控件的下拉列表关闭时执行自定义操作。"""
    OnDrawCell: Any
    """OnDrawCell事件在选择控件的单元格绘制时触发。该事件处理程序允许开发人员在选择控件的单元格绘制时执行自定义操作。"""
    OnDrawPickerCell: Any
    """OnDrawPickerCell事件在选择控件的选择单元格绘制时触发。该事件处理程序允许开发人员在选择控件的选择单元格绘制时执行自定义操作。"""

class CustomDatePicker(BasePickerControl):
    """CustomDatePicker类继承自BasePickerControl，用于创建带日期选择功能的控件。该类提供了管理和操作日期选择的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomDatePicker类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    Date: Any
    """Date属性用于获取或设置日期选择控件中的日期。该属性定义了日期选择控件中显示的日期。"""
    DateFormat: str
    """DateFormat属性用于设置日期选择控件中日期的格式。该属性定义了日期选择控件中日期的显示格式。"""
    DayVisible: bool
    """DayVisible属性用于设置日期选择控件中是否显示天数。该属性定义了日期选择控件中是否显示天数部分。"""
    MaxYear: int
    """MaxYear属性用于设置日期选择控件中可选的最大年份。该属性定义了日期选择控件中可选的最大年份。"""
    MinYear: int
    """MinYear属性用于设置日期选择控件中可选的最小年份。该属性定义了日期选择控件中可选的最小年份。"""
    MonthVisible: bool
    """MonthVisible属性用于设置日期选择控件中是否显示月份。该属性定义了日期选择控件中是否显示月份部分。"""
    YearVisible: bool
    """YearVisible属性用于设置日期选择控件中是否显示年份。该属性定义了日期选择控件中是否显示年份部分。"""

class CustomTimePicker(BasePickerControl):
    """CustomTimePicker类继承自BasePickerControl，用于创建带时间选择功能的控件。该类提供了管理和操作时间选择的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomTimePicker类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    MinuteIncrement: Any
    """MinuteIncrement属性用于设置时间选择控件中分钟的增量。该属性定义了时间选择控件中分钟的增量。"""
    Time: Any
    """Time属性用于获取或设置时间选择控件中的时间。该属性定义了时间选择控件中显示的时间。"""
    TimeFormat: str
    """TimeFormat属性用于设置时间选择控件中时间的格式。该属性定义了时间选择控件中时间的显示格式。"""

class DatePicker(CustomDatePicker):
    """DatePicker类继承自CustomDatePicker，用于创建带日期选择功能的组合控件。该类提供了管理和操作日期选择的方法和属性。"""
    Align: Any
    """Align属性用于设置DatePicker的对齐方式。该属性定义了DatePicker在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置DatePicker的锚点。该属性定义了DatePicker如何随其父控件的大小变化而调整位置和大小。"""
    BorderStyle: Any
    """BorderStyle属性用于设置DatePicker的边框样式。该属性定义了DatePicker的边框样式。"""
    Color: Any
    """Color属性用于设置DatePicker的背景颜色。该属性定义了DatePicker的整体背景颜色。"""
    Date: Any
    """Date属性用于获取或设置DatePicker中的日期。该属性定义了DatePicker中显示的日期。"""
    DateFormat: Any
    """DateFormat属性用于设置DatePicker中日期的格式。该属性定义了DatePicker中日期的显示格式。"""
    DropDownCount: Any
    """DropDownCount属性用于设置DatePicker的下拉列表中可见项的数量。该属性定义了DatePicker下拉列表中可见项的最大数量。"""
    Enabled: Any
    """Enabled属性用于设置DatePicker是否可用。该属性定义了DatePicker是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置DatePicker的字体。该属性定义了DatePicker显示文本的字体样式。"""
    Height: Any
    """Height属性用于设置DatePicker的高度。该属性定义了DatePicker的高度值。"""
    HighlightColor: Any
    """HighlightColor属性用于设置DatePicker的高亮颜色。该属性定义了DatePicker中的高亮颜色。"""
    MaxYear: Any
    """MaxYear属性用于设置DatePicker中可选的最大年份。该属性定义了DatePicker中可选的最大年份。"""
    MinYear: Any
    """MinYear属性用于设置DatePicker中可选的最小年份。该属性定义了DatePicker中可选的最小年份。"""
    PopupColor: Any
    """PopupColor属性用于设置DatePicker的弹出颜色。该属性定义了DatePicker下拉列表的背景颜色。"""
    PopupMenu: Any
    """PopupMenu属性用于设置DatePicker的右键菜单。该属性定义了DatePicker右键点击时显示的上下文菜单。"""
    SelectionColor: Any
    """SelectionColor属性用于设置DatePicker的选择颜色。该属性定义了DatePicker中选中的颜色。"""
    SelectionFontColor: Any
    """SelectionFontColor属性用于设置DatePicker的选中文字颜色。该属性定义了DatePicker中选中文字的颜色。"""
    ShowHint: Any
    """ShowHint属性用于设置DatePicker是否显示提示信息。该属性定义了DatePicker是否在鼠标悬停时显示提示信息。"""
    ShowOkCancel: Any
    """ShowOkCancel属性用于设置DatePicker是否显示确定和取消按钮。该属性定义了DatePicker中是否显示确定和取消按钮。"""
    StyleElements: Any
    """StyleElements属性用于设置DatePicker的样式元素。该属性定义了DatePicker使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置DatePicker的样式名称。该属性定义了DatePicker使用的样式名称。"""
    TabOrder: Any
    """TabOrder属性用于设置DatePicker的标签顺序。该属性定义了DatePicker在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置DatePicker是否为标签停靠点。该属性定义了DatePicker是否可以通过Tab键获得焦点。"""
    Width: Any
    """Width属性用于设置DatePicker的宽度。该属性定义了DatePicker的宽度值。"""
    OnChange: Any
    """OnChange事件在DatePicker的状态变化时触发。该事件处理程序允许开发人员在DatePicker的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在DatePicker被单击时触发。该事件处理程序允许开发人员在DatePicker被单击时执行自定义操作。"""
    OnCloseUp: Any
    """OnCloseUp事件在DatePicker的下拉列表关闭时触发。该事件处理程序允许开发人员在DatePicker的下拉列表关闭时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在DatePicker被双击时触发。该事件处理程序允许开发人员在DatePicker被双击时执行自定义操作。"""
    OnDrawCell: Any
    """OnDrawCell事件在DatePicker的单元格绘制时触发。该事件处理程序允许开发人员在DatePicker的单元格绘制时执行自定义操作。"""
    OnDrawPickerCell: Any
    """OnDrawPickerCell事件在DatePicker的选择单元格绘制时触发。该事件处理程序允许开发人员在DatePicker的选择单元格绘制时执行自定义操作。"""

class TimePicker(CustomTimePicker):
    """TimePicker类继承自CustomTimePicker，用于创建带时间选择功能的组合控件。该类提供了管理和操作时间选择的方法和属性。"""
    Align: Any
    """Align属性用于设置TimePicker的对齐方式。该属性定义了TimePicker在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置TimePicker的锚点。该属性定义了TimePicker如何随其父控件的大小变化而调整位置和大小。"""
    BorderStyle: Any
    """BorderStyle属性用于设置TimePicker的边框样式。该属性定义了TimePicker的边框样式。"""
    Color: Any
    """Color属性用于设置TimePicker的背景颜色。该属性定义了TimePicker的整体背景颜色。"""
    DropDownCount: Any
    """DropDownCount属性用于设置TimePicker的下拉列表中可见项的数量。该属性定义了TimePicker下拉列表中可见项的最大数量。"""
    Enabled: Any
    """Enabled属性用于设置TimePicker是否可用。该属性定义了TimePicker是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置TimePicker的字体。该属性定义了TimePicker显示文本的字体样式。"""
    Height: Any
    """Height属性用于设置TimePicker的高度。该属性定义了TimePicker的高度值。"""
    HighlightColor: Any
    """HighlightColor属性用于设置TimePicker的高亮颜色。该属性定义了TimePicker中的高亮颜色。"""
    MinuteIncrement: Any
    """MinuteIncrement属性用于设置时间选择控件中分钟的增量。该属性定义了时间选择控件中分钟的增量。"""
    PopupColor: Any
    """PopupColor属性用于设置TimePicker的弹出颜色。该属性定义了TimePicker下拉列表的背景颜色。"""
    PopupMenu: Any
    """PopupMenu属性用于设置TimePicker的右键菜单。该属性定义了TimePicker右键点击时显示的上下文菜单。"""
    SelectionColor: Any
    """SelectionColor属性用于设置TimePicker的选择颜色。该属性定义了TimePicker中选中的颜色。"""
    SelectionFontColor: Any
    """SelectionFontColor属性用于设置TimePicker的选中文字颜色。该属性定义了TimePicker中选中文字的颜色。"""
    ShowHint: Any
    """ShowHint属性用于设置TimePicker是否显示提示信息。该属性定义了TimePicker是否在鼠标悬停时显示提示信息。"""
    ShowOkCancel: Any
    """ShowOkCancel属性用于设置TimePicker是否显示确定和取消按钮。该属性定义了TimePicker中是否显示确定和取消按钮。"""
    StyleElements: Any
    """StyleElements属性用于设置TimePicker的样式元素。该属性定义了TimePicker使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置TimePicker的样式名称。该属性定义了TimePicker使用的样式名称。"""
    TabOrder: Any
    """TabOrder属性用于设置TimePicker的标签顺序。该属性定义了TimePicker在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置TimePicker是否为标签停靠点。该属性定义了TimePicker是否可以通过Tab键获得焦点。"""
    Time: Any
    """Time属性用于获取或设置TimePicker中的时间。该属性定义了TimePicker中显示的时间。"""
    TimeFormat: Any
    """TimeFormat属性用于设置TimePicker中时间的格式。该属性定义了TimePicker中时间的显示格式。"""
    Width: Any
    """Width属性用于设置TimePicker的宽度。该属性定义了TimePicker的宽度值。"""
    OnChange: Any
    """OnChange事件在TimePicker的状态变化时触发。该事件处理程序允许开发人员在TimePicker的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在TimePicker被单击时触发。该事件处理程序允许开发人员在TimePicker被单击时执行自定义操作。"""
    OnCloseUp: Any
    """OnCloseUp事件在TimePicker的下拉列表关闭时触发。该事件处理程序允许开发人员在TimePicker的下拉列表关闭时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在TimePicker被双击时触发。该事件处理程序允许开发人员在TimePicker被双击时执行自定义操作。"""
    OnDrawCell: Any
    """OnDrawCell事件在TimePicker的单元格绘制时触发。该事件处理程序允许开发人员在TimePicker的单元格绘制时执行自定义操作。"""
    OnDrawPickerCell: Any
    """OnDrawPickerCell事件在TimePicker的选择单元格绘制时触发。该事件处理程序允许开发人员在TimePicker的选择单元格绘制时执行自定义操作。"""

class DirectoryOutline(CustomOutline):
    """DirectoryOutline类继承自CustomOutline，用于创建带目录大纲功能的控件。该类提供了管理和操作目录大纲的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建DirectoryOutline类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def ForceCase(self, *args, **kwargs) -> str:
        """ForceCase函数用于强制设置目录大纲中的字符大小写（返回处理后的字符串）。"""
    Drive: Any
    """Drive属性用于设置或获取目录大纲的驱动器。该属性定义了目录大纲中显示的驱动器。"""
    Directory: Any
    """Directory属性用于设置或获取目录大纲的目录。该属性定义了目录大纲中显示的目录路径。"""
    Lines: Any
    """Lines属性用于获取或设置目录大纲中的行。该属性定义了目录大纲中的所有行。"""
    Align: Any
    """Align属性用于设置DirectoryOutline的对齐方式。该属性定义了DirectoryOutline在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置DirectoryOutline的锚点。该属性定义了DirectoryOutline如何随其父控件的大小变化而调整位置和大小。"""
    BorderStyle: Any
    """BorderStyle属性用于设置DirectoryOutline的边框样式。该属性定义了DirectoryOutline的边框样式。"""
    Color: Any
    """Color属性用于设置DirectoryOutline的背景颜色。该属性定义了DirectoryOutline的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置DirectoryOutline的大小约束。该属性定义了DirectoryOutline的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置DirectoryOutline是否具有三维边框效果。该属性定义了DirectoryOutline是否显示三维边框。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了DirectoryOutline的拖动行为类型，如拖动控件或拖动其内容。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了DirectoryOutline是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置DirectoryOutline是否可用。该属性定义了DirectoryOutline是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置DirectoryOutline的字体。该属性定义了DirectoryOutline显示文本的字体样式。"""
    ItemHeight: Any
    """ItemHeight属性用于设置目录大纲项的高度。该属性定义了每个目录大纲项的固定高度值。"""
    Options: Any
    """Options属性用于设置目录大纲的选项。该属性定义了目录大纲的各种显示和交互选项。"""
    ParentColor: Any
    """ParentColor属性用于设置DirectoryOutline是否继承父控件的颜色。该属性定义了DirectoryOutline是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置DirectoryOutline是否继承父控件的三维边框效果。该属性定义了DirectoryOutline是否使用与父控件相同的三维边框。"""
    ParentFont: Any
    """ParentFont属性用于设置DirectoryOutline是否继承父控件的字体。该属性定义了DirectoryOutline是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置DirectoryOutline是否继承父控件的提示信息显示设置。该属性定义了DirectoryOutline是否使用与父控件相同的提示信息显示设置。"""
    PictureClosed: Any
    """PictureClosed属性用于设置目录大纲中关闭状态的图标。该属性定义了目录大纲中显示的关闭状态图标。"""
    PictureLeaf: Any
    """PictureLeaf属性用于设置目录大纲中叶子节点的图标。该属性定义了目录大纲中显示的叶子节点图标。"""
    PictureOpen: Any
    """PictureOpen属性用于设置目录大纲中打开状态的图标。该属性定义了目录大纲中显示的打开状态图标。"""
    PopupMenu: Any
    """PopupMenu属性用于设置DirectoryOutline的右键菜单。该属性定义了DirectoryOutline右键点击时显示的上下文菜单。"""
    ScrollBars: Any
    """ScrollBars属性用于设置DirectoryOutline的滚动条。该属性定义了DirectoryOutline是否显示滚动条以及滚动条的样式。"""
    Style: Any
    """Style属性用于设置DirectoryOutline的样式。该属性定义了DirectoryOutline的显示和交互样式。"""
    ShowHint: Any
    """ShowHint属性用于设置DirectoryOutline是否显示提示信息。该属性定义了DirectoryOutline是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置DirectoryOutline的标签顺序。该属性定义了DirectoryOutline在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置DirectoryOutline是否为标签停靠点。该属性定义了DirectoryOutline是否可以通过Tab键获得焦点。"""
    TextCase: Any
    """TextCase属性用于设置目录大纲中文本的大小写。该属性定义了目录大纲中文本的大小写显示。"""
    Visible: Any
    """Visible属性用于设置DirectoryOutline是否可见。该属性定义了DirectoryOutline是否在界面上显示。"""
    OnChange: Any
    """OnChange事件在DirectoryOutline的状态变化时触发。该事件处理程序允许开发人员在DirectoryOutline的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在DirectoryOutline被单击时触发。该事件处理程序允许开发人员在DirectoryOutline被单击时执行自定义操作。"""
    OnCollapse: Any
    """OnCollapse事件在目录大纲项被折叠时触发。该事件处理程序允许开发人员在目录大纲项被折叠时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在DirectoryOutline被双击时触发。该事件处理程序允许开发人员在DirectoryOutline被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在DirectoryOutline进行拖放操作时触发。该事件处理程序允许开发人员在DirectoryOutline进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在DirectoryOutline进行拖动悬停时触发。该事件处理程序允许开发人员在DirectoryOutline进行拖动悬停时执行自定义操作。"""
    OnDrawItem: Any
    """OnDrawItem事件在目录大纲项被绘制时触发。该事件处理程序允许开发人员在目录大纲项被绘制时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在DirectoryOutline结束停靠操作时触发。该事件处理程序允许开发人员在DirectoryOutline结束停靠操作时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在DirectoryOutline结束拖动操作时触发。该事件处理程序允许开发人员在DirectoryOutline结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在DirectoryOutline获得焦点时触发。该事件处理程序允许开发人员在DirectoryOutline获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在DirectoryOutline失去焦点时触发。该事件处理程序允许开发人员在DirectoryOutline失去焦点时执行自定义操作。"""
    OnExpand: Any
    """OnExpand事件在目录大纲项被展开时触发。该事件处理程序允许开发人员在目录大纲项被展开时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在DirectoryOutline检测到键盘按键按下时触发。该事件处理程序允许开发人员在DirectoryOutline检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在DirectoryOutline检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在DirectoryOutline检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在DirectoryOutline检测到键盘按键释放时触发。该事件处理程序允许开发人员在DirectoryOutline检测到键盘按键释放时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在DirectoryOutline检测到鼠标按下时触发。该事件处理程序允许开发人员在DirectoryOutline检测到鼠标按下时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在DirectoryOutline检测到鼠标移动时触发。该事件处理程序允许开发人员在DirectoryOutline检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在DirectoryOutline检测到鼠标抬起时触发。该事件处理程序允许开发人员在DirectoryOutline检测到鼠标抬起时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在DirectoryOutline开始停靠时触发。该事件处理程序允许开发人员在DirectoryOutline开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在DirectoryOutline开始拖动时触发。该事件处理程序允许开发人员在DirectoryOutline开始拖动时执行自定义操作。"""

class FileListBox(CustomListBox):
    """FileListBox类继承自CustomListBox，用于创建带文件列表功能的控件。该类提供了管理和操作文件列表的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建FileListBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁FileListBox类的实例（）。"""
    def Update(self, *args, **kwargs) -> Any:
        """Update函数用于更新文件列表框的内容（）。"""
    def ApplyFilePath(self, *args, **kwargs) -> Any:
        """ApplyFilePath函数用于将文件路径应用到文件列表框中（）。"""
    Drive: Any
    """Drive属性用于设置或获取文件列表框的驱动器。该属性定义了文件列表框中显示的驱动器。"""
    Directory: str
    """Directory属性用于设置或获取文件列表框的目录。该属性定义了文件列表框中显示的目录路径。"""
    FileName: str
    """FileName属性用于设置或获取文件列表框中的文件名。该属性定义了文件列表框中选中的文件名。"""
    Align: Any
    """Align属性用于设置FileListBox的对齐方式。该属性定义了FileListBox在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置FileListBox的锚点。该属性定义了FileListBox如何随其父控件的大小变化而调整位置和大小。"""
    AutoComplete: Any
    """AutoComplete属性用于设置文件列表框是否启用自动完成功能。该属性定义了文件列表框的自动完成行为。"""
    BevelEdges: Any
    """BevelEdges属性用于设置文件列表框的斜角边缘。该属性定义了文件列表框的斜角边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置文件列表框的内斜角。该属性定义了文件列表框的内斜角样式。"""
    BevelKind: Any
    """BevelKind属性用于设置文件列表框的斜角类型。该属性定义了文件列表框的斜角样式类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置文件列表框的外斜角。该属性定义了文件列表框的外斜角样式。"""
    Color: Any
    """Color属性用于设置文件列表框的背景颜色。该属性定义了文件列表框的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置文件列表框的大小约束。该属性定义了文件列表框的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置文件列表框是否具有三维边框效果。该属性定义了文件列表框是否显示三维边框。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置文件列表框是否使用双缓冲。该属性定义了文件列表框是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了文件列表框是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置文件列表框是否可用。该属性定义了文件列表框是否可以响应用户交互。"""
    ExtendedSelect: Any
    """ExtendedSelect属性用于设置文件列表框是否启用扩展选择功能。该属性定义了文件列表框是否可以进行扩展选择。"""
    FileEdit: Any
    """FileEdit属性用于设置文件列表框的文件编辑控件。该属性定义了文件列表框中的文件编辑控件。"""
    FileType: Any
    """FileType属性用于设置文件列表框的文件类型。该属性定义了文件列表框中显示的文件类型。"""
    Font: Any
    """Font属性用于设置文件列表框的字体。该属性定义了文件列表框显示文本的字体样式。"""
    ImeMode: Any
    """ImeMode属性用于设置输入法模式。该属性定义了文件列表框在接收键盘输入时的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置输入法的名称。该属性定义了文件列表框使用的输入法名称。"""
    IntegralHeight: Any
    """IntegralHeight属性用于设置文件列表框是否启用整行显示。该属性定义了文件列表框中是否显示完整行。"""
    ItemHeight: Any
    """ItemHeight属性用于设置文件列表框的项高度。该属性定义了每个文件列表项的固定高度值。"""
    Mask: str
    """Mask属性用于设置文件列表框中的文件掩码。该属性定义了文件列表框中显示的文件掩码。"""
    MultiSelect: Any
    """MultiSelect属性用于设置文件列表框是否启用多选功能。该属性定义了文件列表框是否允许多选。"""
    ParentColor: Any
    """ParentColor属性用于设置文件列表框是否继承父控件的颜色。该属性定义了文件列表框是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置文件列表框是否继承父控件的三维边框效果。该属性定义了文件列表框是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置文件列表框是否继承父控件的双缓冲。该属性定义了文件列表框是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置文件列表框是否继承父控件的字体。该属性定义了文件列表框是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置文件列表框是否继承父控件的提示信息显示设置。该属性定义了文件列表框是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置文件列表框的右键菜单。该属性定义了文件列表框右键点击时显示的上下文菜单。"""
    ShowGlyphs: bool
    """ShowGlyphs属性用于设置文件列表框是否显示图标。该属性定义了文件列表框中是否显示文件图标。"""
    ShowHint: Any
    """ShowHint属性用于设置文件列表框是否显示提示信息。该属性定义了文件列表框是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置文件列表框的标签顺序。该属性定义了文件列表框在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置文件列表框是否为标签停靠点。该属性定义了文件列表框是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置文件列表框的触摸相关属性。该属性定义了文件列表框如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置文件列表框是否可见。该属性定义了文件列表框是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置文件列表框的样式元素。该属性定义了文件列表框使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置文件列表框的样式名称。该属性定义了文件列表框使用的样式名称。"""
    OnChange: Any
    """OnChange事件在文件列表框的状态变化时触发。该事件处理程序允许开发人员在文件列表框的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在文件列表框被单击时触发。该事件处理程序允许开发人员在文件列表框被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在文件列表框弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在文件列表框被双击时触发。该事件处理程序允许开发人员在文件列表框被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在文件列表框进行拖放操作时触发。该事件处理程序允许开发人员在文件列表框进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在文件列表框进行拖动悬停时触发。该事件处理程序允许开发人员在文件列表框进行拖动悬停时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在文件列表框结束拖动操作时触发。该事件处理程序允许开发人员在文件列表框结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在文件列表框获得焦点时触发。该事件处理程序允许开发人员在文件列表框获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在文件列表框失去焦点时触发。该事件处理程序允许开发人员在文件列表框失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在文件列表框检测到手势时触发。该事件处理程序允许开发人员在文件列表框检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在文件列表框检测到键盘按键按下时触发。该事件处理程序允许开发人员在文件列表框检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在文件列表框检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在文件列表框检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在文件列表框检测到键盘按键释放时触发。该事件处理程序允许开发人员在文件列表框检测到键盘按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在文件列表框检测到鼠标激活时触发。该事件处理程序允许开发人员在文件列表框检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在文件列表框检测到鼠标按下时触发。该事件处理程序允许开发人员在文件列表框检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在文件列表框检测到鼠标进入时触发。该事件处理程序允许开发人员在文件列表框检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在文件列表框检测到鼠标离开时触发。该事件处理程序允许开发人员在文件列表框检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在文件列表框检测到鼠标移动时触发。该事件处理程序允许开发人员在文件列表框检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在文件列表框检测到鼠标抬起时触发。该事件处理程序允许开发人员在文件列表框检测到鼠标抬起时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在文件列表框开始拖动时触发。该事件处理程序允许开发人员在文件列表框开始拖动时执行自定义操作。"""

class DirectoryListBox(CustomListBox):
    """DirectoryListBox类继承自CustomListBox，用于创建带目录列表功能的控件。该类提供了管理和操作目录列表的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建DirectoryListBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁DirectoryListBox类的实例（）。"""
    def DisplayCase(self, *args, **kwargs) -> str:
        """DisplayCase函数用于设置目录列表框中的字符显示大小写（返回处理后的字符串）。"""
    def FileCompareText(self, *args, **kwargs) -> int:
        """FileCompareText函数用于比较文件文本（返回比较结果）。"""
    def GetItemPath(self, *args, **kwargs) -> str:
        """GetItemPath函数用于获取目录列表框中项的路径（返回项的路径）。"""
    def OpenCurrent(self, *args, **kwargs) -> Any:
        """OpenCurrent函数用于打开目录列表框中当前选中的项（）。"""
    def Update(self, *args, **kwargs) -> Any:
        """Update函数用于更新目录列表框的内容（）。"""
    Drive: Any
    """Drive属性用于设置或获取目录列表框的驱动器。该属性定义了目录列表框中显示的驱动器。"""
    Directory: str
    """Directory属性用于设置或获取目录列表框的目录。该属性定义了目录列表框中显示的目录路径。"""
    PreserveCase: bool
    """PreserveCase属性用于设置目录列表框中文件名的大小写是否保持不变。该属性定义了目录列表框中文件名的大小写显示。"""
    CaseSensitive: bool
    """CaseSensitive属性用于设置目录列表框的大小写敏感性。该属性定义了目录列表框中文件名的大小写是否敏感。"""
    Align: Any
    """Align属性用于设置DirectoryListBox的对齐方式。该属性定义了DirectoryListBox在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置DirectoryListBox的锚点。该属性定义了DirectoryListBox如何随其父控件的大小变化而调整位置和大小。"""
    AutoComplete: Any
    """AutoComplete属性用于设置目录列表框是否启用自动完成功能。该属性定义了目录列表框的自动完成行为。"""
    BevelEdges: Any
    """BevelEdges属性用于设置目录列表框的斜角边缘。该属性定义了目录列表框的斜角边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置目录列表框的内斜角。该属性定义了目录列表框的内斜角样式。"""
    BevelKind: Any
    """BevelKind属性用于设置目录列表框的斜角类型。该属性定义了目录列表框的斜角样式类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置目录列表框的外斜角。该属性定义了目录列表框的外斜角样式。"""
    Color: Any
    """Color属性用于设置目录列表框的背景颜色。该属性定义了目录列表框的整体背景颜色。"""
    Columns: Any
    """Columns属性用于设置目录列表框的列数。该属性定义了目录列表框中显示的列数。"""
    Constraints: Any
    """Constraints属性用于设置目录列表框的大小约束。该属性定义了目录列表框的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置目录列表框是否具有三维边框效果。该属性定义了目录列表框是否显示三维边框。"""
    DirLabel: Any
    """DirLabel属性用于设置目录列表框的目录标签。该属性定义了目录列表框中显示的目录标签。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置目录列表框是否使用双缓冲。该属性定义了目录列表框是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了目录列表框是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置目录列表框是否可用。该属性定义了目录列表框是否可以响应用户交互。"""
    FileList: Any
    """FileList属性用于设置目录列表框的文件列表。该属性定义了目录列表框中显示的文件列表。"""
    Font: Any
    """Font属性用于设置目录列表框的字体。该属性定义了目录列表框显示文本的字体样式。"""
    ImeMode: Any
    """ImeMode属性用于设置输入法模式。该属性定义了目录列表框在接收键盘输入时的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置输入法的名称。该属性定义了目录列表框使用的输入法名称。"""
    IntegralHeight: Any
    """IntegralHeight属性用于设置目录列表框是否启用整行显示。该属性定义了目录列表框中是否显示完整行。"""
    ItemHeight: Any
    """ItemHeight属性用于设置目录列表框的项高度。该属性定义了每个目录列表项的固定高度值。"""
    ParentColor: Any
    """ParentColor属性用于设置目录列表框是否继承父控件的颜色。该属性定义了目录列表框是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置目录列表框是否继承父控件的三维边框效果。该属性定义了目录列表框是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置目录列表框是否继承父控件的双缓冲。该属性定义了目录列表框是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置目录列表框是否继承父控件的字体。该属性定义了目录列表框是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置目录列表框是否继承父控件的提示信息显示设置。该属性定义了目录列表框是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置目录列表框的右键菜单。该属性定义了目录列表框右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置目录列表框是否显示提示信息。该属性定义了目录列表框是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置目录列表框的标签顺序。该属性定义了目录列表框在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置目录列表框是否为标签停靠点。该属性定义了目录列表框是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置目录列表框的触摸相关属性。该属性定义了目录列表框如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置目录列表框是否可见。该属性定义了目录列表框是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置目录列表框的样式元素。该属性定义了目录列表框使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置目录列表框的样式名称。该属性定义了目录列表框使用的样式名称。"""
    OnChange: Any
    """OnChange事件在目录列表框的状态变化时触发。该事件处理程序允许开发人员在目录列表框的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在目录列表框被单击时触发。该事件处理程序允许开发人员在目录列表框被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在目录列表框弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在目录列表框被双击时触发。该事件处理程序允许开发人员在目录列表框被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在目录列表框进行拖放操作时触发。该事件处理程序允许开发人员在目录列表框进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在目录列表框进行拖动悬停时触发。该事件处理程序允许开发人员在目录列表框进行拖动悬停时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在目录列表框结束拖动操作时触发。该事件处理程序允许开发人员在目录列表框结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在目录列表框获得焦点时触发。该事件处理程序允许开发人员在目录列表框获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在目录列表框失去焦点时触发。该事件处理程序允许开发人员在目录列表框失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在目录列表框检测到手势时触发。该事件处理程序允许开发人员在目录列表框检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在目录列表框检测到键盘按键按下时触发。该事件处理程序允许开发人员在目录列表框检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在目录列表框检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在目录列表框检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在目录列表框检测到键盘按键释放时触发。该事件处理程序允许开发人员在目录列表框检测到键盘按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在目录列表框检测到鼠标激活时触发。该事件处理程序允许开发人员在目录列表框检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在目录列表框检测到鼠标按下时触发。该事件处理程序允许开发人员在目录列表框检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在目录列表框检测到鼠标进入时触发。该事件处理程序允许开发人员在目录列表框检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在目录列表框检测到鼠标离开时触发。该事件处理程序允许开发人员在目录列表框检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在目录列表框检测到鼠标移动时触发。该事件处理程序允许开发人员在目录列表框检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在目录列表框检测到鼠标抬起时触发。该事件处理程序允许开发人员在目录列表框检测到鼠标抬起时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在目录列表框开始拖动时触发。该事件处理程序允许开发人员在目录列表框开始拖动时执行自定义操作。"""

class DriveComboBox(CustomComboBox):
    """DriveComboBox类继承自CustomComboBox，用于创建带驱动器选择功能的组合控件。该类提供了管理和操作驱动器选择的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建DriveComboBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁DriveComboBox类的实例（）。"""
    Text: Any
    """Text属性用于获取或设置DriveComboBox的文本内容。该属性定义了DriveComboBox中显示的文本。"""
    Drive: Any
    """Drive属性用于获取或设置DriveComboBox的驱动器。该属性定义了DriveComboBox中选择的驱动器。"""
    Align: Any
    """Align属性用于设置DriveComboBox的对齐方式。该属性定义了DriveComboBox在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置DriveComboBox的锚点。该属性定义了DriveComboBox如何随其父控件的大小变化而调整位置和大小。"""
    AutoComplete: Any
    """AutoComplete属性用于设置DriveComboBox是否启用自动完成功能。该属性定义了DriveComboBox的自动完成行为。"""
    AutoDropDown: Any
    """AutoDropDown属性用于设置DriveComboBox是否在输入时自动显示下拉列表。该属性定义了DriveComboBox的自动下拉行为。"""
    BevelEdges: Any
    """BevelEdges属性用于设置DriveComboBox的斜角边缘。该属性定义了DriveComboBox的斜角边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置DriveComboBox的内斜角。该属性定义了DriveComboBox的内斜角样式。"""
    BevelKind: Any
    """BevelKind属性用于设置DriveComboBox的斜角类型。该属性定义了DriveComboBox的斜角样式类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置DriveComboBox的外斜角。该属性定义了DriveComboBox的外斜角样式。"""
    Color: Any
    """Color属性用于设置DriveComboBox的背景颜色。该属性定义了DriveComboBox的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置DriveComboBox的大小约束。该属性定义了DriveComboBox的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置DriveComboBox是否具有三维边框效果。该属性定义了DriveComboBox是否显示三维边框。"""
    DirList: Any
    """DirList属性用于获取或设置DriveComboBox关联的目录列表框。该属性定义了DriveComboBox关联的目录列表框对象。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置DriveComboBox是否使用双缓冲。该属性定义了DriveComboBox是否使用双缓冲技术来减少闪烁。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了DriveComboBox是否可以被拖动以及拖动的方式。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    Enabled: Any
    """Enabled属性用于设置DriveComboBox是否可用。该属性定义了DriveComboBox是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置DriveComboBox的字体。该属性定义了DriveComboBox显示文本的字体样式。"""
    ImeMode: Any
    """ImeMode属性用于设置输入法模式。该属性定义了DriveComboBox在接收键盘输入时的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置输入法的名称。该属性定义了DriveComboBox使用的输入法名称。"""
    ParentColor: Any
    """ParentColor属性用于设置DriveComboBox是否继承父控件的颜色。该属性定义了DriveComboBox是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置DriveComboBox是否继承父控件的三维边框效果。该属性定义了DriveComboBox是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置DriveComboBox是否继承父控件的双缓冲。该属性定义了DriveComboBox是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置DriveComboBox是否继承父控件的字体。该属性定义了DriveComboBox是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置DriveComboBox是否继承父控件的提示信息显示设置。该属性定义了DriveComboBox是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置DriveComboBox的右键菜单。该属性定义了DriveComboBox右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置DriveComboBox是否显示提示信息。该属性定义了DriveComboBox是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置DriveComboBox的标签顺序。该属性定义了DriveComboBox在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置DriveComboBox是否为标签停靠点。该属性定义了DriveComboBox是否可以通过Tab键获得焦点。"""
    TextCase: Any
    """TextCase属性用于设置DriveComboBox中文本的大小写。该属性定义了DriveComboBox中文本的大小写显示。"""
    Touch: Any
    """Touch属性用于设置DriveComboBox的触摸相关属性。该属性定义了DriveComboBox如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置DriveComboBox是否可见。该属性定义了DriveComboBox是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置DriveComboBox的样式元素。该属性定义了DriveComboBox使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置DriveComboBox的样式名称。该属性定义了DriveComboBox使用的样式名称。"""
    OnChange: Any
    """OnChange事件在DriveComboBox的状态变化时触发。该事件处理程序允许开发人员在DriveComboBox的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在DriveComboBox被单击时触发。该事件处理程序允许开发人员在DriveComboBox被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在DriveComboBox弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在DriveComboBox被双击时触发。该事件处理程序允许开发人员在DriveComboBox被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在DriveComboBox进行拖放操作时触发。该事件处理程序允许开发人员在DriveComboBox进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在DriveComboBox进行拖动悬停时触发。该事件处理程序允许开发人员在DriveComboBox进行拖动悬停时执行自定义操作。"""
    OnDropDown: Any
    """OnDropDown事件在DriveComboBox的下拉列表展开时触发。该事件处理程序允许开发人员在DriveComboBox的下拉列表展开时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在DriveComboBox结束拖动操作时触发。该事件处理程序允许开发人员在DriveComboBox结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在DriveComboBox获得焦点时触发。该事件处理程序允许开发人员在DriveComboBox获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在DriveComboBox失去焦点时触发。该事件处理程序允许开发人员在DriveComboBox失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在DriveComboBox检测到手势时触发。该事件处理程序允许开发人员在DriveComboBox检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在DriveComboBox检测到键盘按键按下时触发。该事件处理程序允许开发人员在DriveComboBox检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在DriveComboBox检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在DriveComboBox检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在DriveComboBox检测到键盘按键释放时触发。该事件处理程序允许开发人员在DriveComboBox检测到键盘按键释放时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在DriveComboBox检测到鼠标进入时触发。该事件处理程序允许开发人员在DriveComboBox检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在DriveComboBox检测到鼠标离开时触发。该事件处理程序允许开发人员在DriveComboBox检测到鼠标离开时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在DriveComboBox开始拖动时触发。该事件处理程序允许开发人员在DriveComboBox开始拖动时执行自定义操作。"""

class FilterComboBox(CustomComboBox):
    """FilterComboBox类继承自CustomComboBox，用于创建带过滤功能的组合控件。该类提供了管理和操作过滤功能的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建FilterComboBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁FilterComboBox类的实例（）。"""
    Mask: str
    """Mask属性用于获取或设置FilterComboBox的文件掩码。该属性定义了FilterComboBox中显示的文件掩码。"""
    Text: Any
    """Text属性用于获取或设置FilterComboBox的文本内容。该属性定义了FilterComboBox中显示的文本。"""
    Align: Any
    """Align属性用于设置FilterComboBox的对齐方式。该属性定义了FilterComboBox在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置FilterComboBox的锚点。该属性定义了FilterComboBox如何随其父控件的大小变化而调整位置和大小。"""
    AutoComplete: Any
    """AutoComplete属性用于设置FilterComboBox是否启用自动完成功能。该属性定义了FilterComboBox的自动完成行为。"""
    AutoDropDown: Any
    """AutoDropDown属性用于设置FilterComboBox是否在输入时自动显示下拉列表。该属性定义了FilterComboBox的自动下拉行为。"""
    BevelEdges: Any
    """BevelEdges属性用于设置FilterComboBox的斜角边缘。该属性定义了FilterComboBox的斜角边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置FilterComboBox的内斜角。该属性定义了FilterComboBox的内斜角样式。"""
    BevelKind: Any
    """BevelKind属性用于设置FilterComboBox的斜角类型。该属性定义了FilterComboBox的斜角样式类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置FilterComboBox的外斜角。该属性定义了FilterComboBox的外斜角样式。"""
    Color: Any
    """Color属性用于设置FilterComboBox的背景颜色。该属性定义了FilterComboBox的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置FilterComboBox的大小约束。该属性定义了FilterComboBox的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置FilterComboBox是否具有三维边框效果。该属性定义了FilterComboBox是否显示三维边框。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置FilterComboBox是否使用双缓冲。该属性定义了FilterComboBox是否使用双缓冲技术来减少闪烁。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了FilterComboBox是否可以被拖动以及拖动的方式。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    Enabled: Any
    """Enabled属性用于设置FilterComboBox是否可用。该属性定义了FilterComboBox是否可以响应用户交互。"""
    FileList: Any
    """FileList属性用于设置FilterComboBox的文件列表。该属性定义了FilterComboBox中显示的文件列表。"""
    Filter: str
    """Filter属性用于设置FilterComboBox的过滤器。该属性定义了FilterComboBox中使用的文件过滤器。"""
    Font: Any
    """Font属性用于设置FilterComboBox的字体。该属性定义了FilterComboBox显示文本的字体样式。"""
    ImeName: Any
    """ImeName属性用于设置输入法的名称。该属性定义了FilterComboBox使用的输入法名称。"""
    ImeMode: Any
    """ImeMode属性用于设置输入法模式。该属性定义了FilterComboBox在接收键盘输入时的输入法模式。"""
    ParentColor: Any
    """ParentColor属性用于设置FilterComboBox是否继承父控件的颜色。该属性定义了FilterComboBox是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置FilterComboBox是否继承父控件的三维边框效果。该属性定义了FilterComboBox是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置FilterComboBox是否继承父控件的双缓冲。该属性定义了FilterComboBox是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置FilterComboBox是否继承父控件的字体。该属性定义了FilterComboBox是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置FilterComboBox是否继承父控件的提示信息显示设置。该属性定义了FilterComboBox是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置FilterComboBox的右键菜单。该属性定义了FilterComboBox右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置FilterComboBox是否显示提示信息。该属性定义了FilterComboBox是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置FilterComboBox的标签顺序。该属性定义了FilterComboBox在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置FilterComboBox是否为标签停靠点。该属性定义了FilterComboBox是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置FilterComboBox的触摸相关属性。该属性定义了FilterComboBox如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置FilterComboBox是否可见。该属性定义了FilterComboBox是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置FilterComboBox的样式元素。该属性定义了FilterComboBox使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置FilterComboBox的样式名称。该属性定义了FilterComboBox使用的样式名称。"""
    OnChange: Any
    """OnChange事件在FilterComboBox的状态变化时触发。该事件处理程序允许开发人员在FilterComboBox的状态变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在FilterComboBox被单击时触发。该事件处理程序允许开发人员在FilterComboBox被单击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在FilterComboBox弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在FilterComboBox被双击时触发。该事件处理程序允许开发人员在FilterComboBox被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在FilterComboBox进行拖放操作时触发。该事件处理程序允许开发人员在FilterComboBox进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在FilterComboBox进行拖动悬停时触发。该事件处理程序允许开发人员在FilterComboBox进行拖动悬停时执行自定义操作。"""
    OnDropDown: Any
    """OnDropDown事件在FilterComboBox的下拉列表展开时触发。该事件处理程序允许开发人员在FilterComboBox的下拉列表展开时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在FilterComboBox结束拖动操作时触发。该事件处理程序允许开发人员在FilterComboBox结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在FilterComboBox获得焦点时触发。该事件处理程序允许开发人员在FilterComboBox获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在FilterComboBox失去焦点时触发。该事件处理程序允许开发人员在FilterComboBox失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在FilterComboBox检测到手势时触发。该事件处理程序允许开发人员在FilterComboBox检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在FilterComboBox检测到键盘按键按下时触发。该事件处理程序允许开发人员在FilterComboBox检测到键盘按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在FilterComboBox检测到键盘按键按下并释放时触发。该事件处理程序允许开发人员在FilterComboBox检测到键盘按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在FilterComboBox检测到键盘按键释放时触发。该事件处理程序允许开发人员在FilterComboBox检测到键盘按键释放时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在FilterComboBox检测到鼠标进入时触发。该事件处理程序允许开发人员在FilterComboBox检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在FilterComboBox检测到鼠标离开时触发。该事件处理程序允许开发人员在FilterComboBox检测到鼠标离开时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在FilterComboBox开始拖动时触发。该事件处理程序允许开发人员在FilterComboBox开始拖动时执行自定义操作。"""

class FileSaveDialog(Component):
    """FileSaveDialog类继承自Component，用于创建文件保存对话框控件。该类提供了管理和操作文件保存对话框的方法和属性。"""
    ClientGuid: Any
    """ClientGuid属性用于获取或设置文件保存对话框的客户端GUID。该属性定义了文件保存对话框的客户端GUID。"""
    DefaultExtension: Any
    """DefaultExtension属性用于获取或设置文件保存对话框的默认扩展名。该属性定义了文件保存对话框的默认文件扩展名。"""
    DefaultFolder: Any
    """DefaultFolder属性用于获取或设置文件保存对话框的默认文件夹。该属性定义了文件保存对话框的默认文件夹路径。"""
    FavoriteLinks: Any
    """FavoriteLinks属性用于获取或设置文件保存对话框的收藏夹链接。该属性定义了文件保存对话框中的收藏夹链接。"""
    FileName: Any
    """FileName属性用于获取或设置文件保存对话框的文件名。该属性定义了文件保存对话框中显示的文件名。"""
    FileNameLabel: Any
    """FileNameLabel属性用于获取或设置文件保存对话框的文件名标签。该属性定义了文件保存对话框中的文件名标签。"""
    FileTypes: Any
    """FileTypes属性用于获取或设置文件保存对话框的文件类型。该属性定义了文件保存对话框中显示的文件类型。"""
    FileTypeIndex: Any
    """FileTypeIndex属性用于获取或设置文件保存对话框的文件类型索引。该属性定义了文件保存对话框中选中的文件类型索引。"""
    OkButtonLabel: Any
    """OkButtonLabel属性用于获取或设置文件保存对话框的确定按钮标签。该属性定义了文件保存对话框中确定按钮的显示文本。"""
    Options: Any
    """Options属性用于获取或设置文件保存对话框的选项。该属性定义了文件保存对话框的各种选项。"""
    Title: Any
    """Title属性用于获取或设置文件保存对话框的标题。该属性定义了文件保存对话框的标题文本。"""
    OnExecute: Any
    """OnExecute事件在文件保存对话框执行时触发。该事件处理程序允许开发人员在文件保存对话框执行时执行自定义操作。"""
    OnFileOkClick: Any
    """OnFileOkClick事件在文件保存对话框的确定按钮被点击时触发。该事件处理程序允许开发人员在文件保存对话框的确定按钮被点击时执行自定义操作。"""
    OnFolderChange: Any
    """OnFolderChange事件在文件保存对话框的文件夹发生变化时触发。该事件处理程序允许开发人员在文件保存对话框的文件夹发生变化时执行自定义操作。"""
    OnFolderChanging: Any
    """OnFolderChanging事件在文件保存对话框的文件夹即将发生变化时触发。该事件处理程序允许开发人员在文件保存对话框的文件夹即将发生变化时执行自定义操作。"""
    OnOverwrite: Any
    """OnOverwrite事件在文件保存对话框检测到文件覆盖时触发。该事件处理程序允许开发人员在文件保存对话框检测到文件覆盖时执行自定义操作。"""
    OnSelectionChange: Any
    """OnSelectionChange事件在文件保存对话框的文件选择发生变化时触发。该事件处理程序允许开发人员在文件保存对话框的文件选择发生变化时执行自定义操作。"""
    OnShareViolation: Any
    """OnShareViolation事件在文件保存对话框检测到文件共享冲突时触发。该事件处理程序允许开发人员在文件保存对话框检测到文件共享冲突时执行自定义操作。"""
    OnTypeChange: Any
    """OnTypeChange事件在文件保存对话框的文件类型发生变化时触发。该事件处理程序允许开发人员在文件保存对话框的文件类型发生变化时执行自定义操作。"""
    def __init__(self, *args, **kwargs) -> None:
        """初始化自身。请参阅 help(type(self)) 以获取准确的签名。"""
    def Execute(self) -> Any:
        """TFileSaveDialog.Execute()

        显示对话框"""
    def __contains__(self, other) -> bool:
        """返回对象本身是否包含参数 other。

        用于定义对象是否包含另一个对象的行为。当我们在对象上使用 in 关键字进行成员检测时，Python 会调用该对象的 __contains__ 方法。"""
    def __delattr__(self, name) -> Any:
        """用于在删除对象的属性时触发。当您使用delattr()函数或del语句删除对象的属性时，该方法将被调用。"""
    def __eq__(self, other) -> bool:
        """返回对象本身是否等于参数 other。

        用于定义对象之间的等价性比较。当你在Python中使用 == 操作符来比较两个对象时，Python会尝试调用这两个对象的 __eq__ 方法。"""
    def __ge__(self, other) -> bool:
        """返回对象本身是否大于或等于参数 other。

        用于定义对象之间的“大于或等于”比较操作。当你在代码中使用>=操作符来比较两个对象时，Python会调用这个方法。"""
    def __getitem__(self, index) -> Any:
        """返回对象本身的索引。

        用于定义当对象使用索引操作符（[]）时的行为。"""
    def __gt__(self, other) -> bool:
        """返回对象本身是否大于参数 other。

        当你使用 > 运算符来比较两个对象时，Python会调用这个对象的 __gt__ 方法。"""
    def __iter__(self) -> Any:
        """用于定义一个可迭代对象。"""
    def __le__(self, other) -> bool:
        """返回对象本身是否小于或等于参数 other。

        当使用 <= 运算符比较两个对象时，这个方法会被调用。这个方法的定义通常位于类中，并接受两个参数：self 和 other。self 代表当前对象，而 other 代表与当前对象进行比较的另一个对象。
        该方法应该返回一个布尔值（True 或 False），表示当前对象是否小于或等于另一个对象。"""
    def __len__(self) -> int:
        """返回对象本身的长度。

        当你尝试对一个对象使用内置的 len() 函数时，这个方法会被调用。该方法应该返回一个整数，表示对象的长度。"""
    def __lt__(self, other) -> bool:
        """返回对象本身是否小于参数 other。

        当你在两个对象之间使用 < 运算符进行比较时，Python会尝试调用这个特殊方法。如果这个方法被定义，Python会用这个方法的返回值（True 或 False）来决定比较的结果。"""
    def __ne__(self, other) -> bool:
        """返回对象本身是否不等于参数 other。

        当你在一个类中实现这个方法时，你可以自定义当两个该类的对象使用 != 操作符进行比较时的行为。这个方法应该返回一个布尔值（True 或 False），表示调用对象是否不等于参数 other。"""
    def __setattr__(self, name, value) -> Any:
        """用于自定义对象的属性访问和赋值行为。

        self：当前对象的引用。
        name：属性的名称（字符串形式）。
        value：赋予属性的值。"""

class CustomTaskDialog(Component):
    """CustomTaskDialog类继承自Component，用于创建自定义任务对话框控件。该类提供了管理和操作任务对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomTaskDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomTaskDialog类的实例（）。"""
    def Execute(self) -> Any:
        """Execute函数用于执行任务对话框并返回结果（self指向实例本身，返回任务对话框的执行结果）。"""
    Button: Any
    """Button属性用于获取或设置任务对话框中的按钮。该属性定义了任务对话框中的按钮对象。"""
    Buttons: Any
    """Buttons属性用于获取或设置任务对话框中的按钮集合。该属性定义了任务对话框中的所有按钮对象。"""
    Caption: str
    """Caption属性用于获取或设置任务对话框的标题。该属性定义了任务对话框的标题文本。"""
    CommonButtons: Any
    """CommonButtons属性用于获取或设置任务对话框中的常用按钮。该属性定义了任务对话框中显示的常用按钮。"""
    CustomFooterIcon: Any
    """CustomFooterIcon属性用于获取或设置任务对话框的自定义页脚图标。该属性定义了任务对话框中的自定义页脚图标。"""
    CustomMainIcon: Any
    """CustomMainIcon属性用于获取或设置任务对话框的自定义主图标。该属性定义了任务对话框中的自定义主图标。"""
    DefaultButton: Any
    """DefaultButton属性用于获取或设置任务对话框的默认按钮。该属性定义了任务对话框中默认的按钮对象。"""
    ExpandButtonCaption: str
    """ExpandButtonCaption属性用于获取或设置任务对话框的展开按钮标题。该属性定义了任务对话框中展开按钮的显示文本。"""
    Expanded: bool
    """Expanded属性用于获取或设置任务对话框的展开状态。该属性定义了任务对话框是否处于展开状态。"""
    ExpandedText: str
    """ExpandedText属性用于获取或设置任务对话框的展开文本。该属性定义了任务对话框中展开部分的显示文本。"""
    Flags: Any
    """Flags属性用于获取或设置任务对话框的标志。该属性定义了任务对话框的各种标志位。"""
    FooterIcon: Any
    """FooterIcon属性用于获取或设置任务对话框的页脚图标。该属性定义了任务对话框中的页脚图标对象。"""
    FooterText: str
    """FooterText属性用于获取或设置任务对话框的页脚文本。该属性定义了任务对话框中的页脚显示文本。"""
    Handle: Any
    """Handle属性用于获取任务对话框的句柄。该属性定义了任务对话框的窗口句柄。"""
    HelpContext: int
    """HelpContext属性用于获取或设置任务对话框的帮助上下文。该属性定义了任务对话框的帮助上下文ID。"""
    MainIcon: Any
    """MainIcon属性用于获取或设置任务对话框的主图标。该属性定义了任务对话框中的主图标对象。"""
    ModalResult: Any
    """ModalResult属性用于获取或设置任务对话框的模态结果。该属性定义了任务对话框的模态结果值。"""
    ProgressBar: Any
    """ProgressBar属性用于获取或设置任务对话框中的进度条。该属性定义了任务对话框中的进度条对象。"""
    RadioButton: Any
    """RadioButton属性用于获取或设置任务对话框中的单选按钮。该属性定义了任务对话框中的单选按钮对象。"""
    RadioButtons: Any
    """RadioButtons属性用于获取或设置任务对话框中的单选按钮集合。该属性定义了任务对话框中的所有单选按钮对象。"""
    Text: str
    """Text属性用于获取或设置任务对话框的文本内容。该属性定义了任务对话框中显示的文本。"""
    Title: str
    """Title属性用于获取或设置任务对话框的标题文本。该属性定义了任务对话框的标题显示文本。"""
    URL: str
    """URL属性用于获取或设置任务对话框的链接地址。该属性定义了任务对话框中的链接URL。"""
    VerificationText: str
    """VerificationText属性用于获取或设置任务对话框的验证文本。该属性定义了任务对话框中的验证显示文本。"""
    OnButtonClicked: Any
    """OnButtonClicked事件在任务对话框中的按钮被点击时触发。该事件处理程序允许开发人员在任务对话框中的按钮被点击时执行自定义操作。"""
    OnDialogConstructed: Any
    """OnDialogConstructed事件在任务对话框构建完成时触发。该事件处理程序允许开发人员在任务对话框构建完成时执行自定义操作。"""
    OnDialogCreated: Any
    """OnDialogCreated事件在任务对话框创建时触发。该事件处理程序允许开发人员在任务对话框创建时执行自定义操作。"""
    OnDialogDestroyed: Any
    """OnDialogDestroyed事件在任务对话框销毁时触发。该事件处理程序允许开发人员在任务对话框销毁时执行自定义操作。"""
    OnExpanded: Any
    """OnExpanded事件在任务对话框展开时触发。该事件处理程序允许开发人员在任务对话框展开时执行自定义操作。"""
    OnHyperlinkClicked: Any
    """OnHyperlinkClicked事件在任务对话框中的超链接被点击时触发。该事件处理程序允许开发人员在任务对话框中的超链接被点击时执行自定义操作。"""
    OnNavigated: Any
    """OnNavigated事件在任务对话框中的导航发生时触发。该事件处理程序允许开发人员在任务对话框中的导航发生时执行自定义操作。"""
    OnRadioButtonClicked: Any
    """OnRadioButtonClicked事件在任务对话框中的单选按钮被点击时触发。该事件处理程序允许开发人员在任务对话框中的单选按钮被点击时执行自定义操作。"""
    OnTimer: Any
    """OnTimer事件在任务对话框的计时器触发时触发。该事件处理程序允许开发人员在任务对话框的计时器触发时执行自定义操作。"""
    OnVerificationClicked: Any
    """OnVerificationClicked事件在任务对话框中的验证控件被点击时触发。该事件处理程序允许开发人员在任务对话框中的验证控件被点击时执行自定义操作。"""

class TaskDialog(CustomTaskDialog):
    """TaskDialog类继承自CustomTaskDialog，用于创建标准任务对话框控件。该类提供了管理和操作标准任务对话框的方法和属性。"""
    Buttons: Any
    """Buttons属性用于获取或设置任务对话框中的按钮集合。该属性定义了任务对话框中的所有按钮对象。"""
    Caption: Any
    """Caption属性用于获取或设置任务对话框的标题。该属性定义了任务对话框的标题文本。"""
    CommonButtons: Any
    """CommonButtons属性用于获取或设置任务对话框中的常用按钮。该属性定义了任务对话框中显示的常用按钮。"""
    CustomFooterIcon: Any
    """CustomFooterIcon属性用于获取或设置任务对话框的自定义页脚图标。该属性定义了任务对话框中的自定义页脚图标。"""
    CustomMainIcon: Any
    """CustomMainIcon属性用于获取或设置任务对话框的自定义主图标。该属性定义了任务对话框中的自定义主图标。"""
    DefaultButton: Any
    """DefaultButton属性用于获取或设置任务对话框的默认按钮。该属性定义了任务对话框中默认的按钮对象。"""
    ExpandButtonCaption: Any
    """ExpandButtonCaption属性用于获取或设置任务对话框的展开按钮标题。该属性定义了任务对话框中展开按钮的显示文本。"""
    ExpandedText: Any
    """ExpandedText属性用于获取或设置任务对话框的展开文本。该属性定义了任务对话框中展开部分的显示文本。"""
    Flags: Any
    """Flags属性用于获取或设置任务对话框的标志。该属性定义了任务对话框的各种标志位。"""
    FooterIcon: Any
    """FooterIcon属性用于获取或设置任务对话框的页脚图标。该属性定义了任务对话框中的页脚图标对象。"""
    FooterText: Any
    """FooterText属性用于获取或设置任务对话框的页脚文本。该属性定义了任务对话框中的页脚显示文本。"""
    HelpContext: Any
    """HelpContext属性用于获取或设置任务对话框的帮助上下文。该属性定义了任务对话框的帮助上下文ID。"""
    MainIcon: Any
    """MainIcon属性用于获取或设置任务对话框的主图标。该属性定义了任务对话框中的主图标对象。"""
    ProgressBar: Any
    """ProgressBar属性用于获取或设置任务对话框中的进度条。该属性定义了任务对话框中的进度条对象。"""
    RadioButtons: Any
    """RadioButtons属性用于获取或设置任务对话框中的单选按钮集合。该属性定义了任务对话框中的所有单选按钮对象。"""
    Text: Any
    """Text属性用于获取或设置任务对话框的文本内容。该属性定义了任务对话框中显示的文本。"""
    Title: Any
    """Title属性用于获取或设置任务对话框的标题文本。该属性定义了任务对话框的标题显示文本。"""
    VerificationText: Any
    """VerificationText属性用于获取或设置任务对话框的验证文本。该属性定义了任务对话框中的验证显示文本。"""
    OnButtonClicked: Any
    """OnButtonClicked事件在任务对话框中的按钮被点击时触发。该事件处理程序允许开发人员在任务对话框中的按钮被点击时执行自定义操作。"""
    OnDialogConstructed: Any
    """OnDialogConstructed事件在任务对话框构建完成时触发。该事件处理程序允许开发人员在任务对话框构建完成时执行自定义操作。"""
    OnDialogCreated: Any
    """OnDialogCreated事件在任务对话框创建时触发。该事件处理程序允许开发人员在任务对话框创建时执行自定义操作。"""
    OnDialogDestroyed: Any
    """OnDialogDestroyed事件在任务对话框销毁时触发。该事件处理程序允许开发人员在任务对话框销毁时执行自定义操作。"""
    OnExpanded: Any
    """OnExpanded事件在任务对话框展开时触发。该事件处理程序允许开发人员在任务对话框展开时执行自定义操作。"""
    OnHyperlinkClicked: Any
    """OnHyperlinkClicked事件在任务对话框中的超链接被点击时触发。该事件处理程序允许开发人员在任务对话框中的超链接被点击时执行自定义操作。"""
    OnNavigated: Any
    """OnNavigated事件在任务对话框中的导航发生时触发。该事件处理程序允许开发人员在任务对话框中的导航发生时执行自定义操作。"""
    OnRadioButtonClicked: Any
    """OnRadioButtonClicked事件在任务对话框中的单选按钮被点击时触发。该事件处理程序允许开发人员在任务对话框中的单选按钮被点击时执行自定义操作。"""
    OnTimer: Any
    """OnTimer事件在任务对话框的计时器触发时触发。该事件处理程序允许开发人员在任务对话框的计时器触发时执行自定义操作。"""
    OnVerificationClicked: Any
    """OnVerificationClicked事件在任务对话框中的验证控件被点击时触发。该事件处理程序允许开发人员在任务对话框中的验证控件被点击时执行自定义操作。"""

class CustomPanel(CustomControl):
    """CustomPanel类继承自CustomControl，用于创建自定义面板控件。该类提供了管理和操作面板的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomPanel类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def GetControlsAlignment(self) -> Any:
        """GetControlsAlignment函数用于获取面板中控件的对齐方式（self指向实例本身，返回控件的对齐方式）。"""
    ParentBackground: Any
    """ParentBackground属性用于设置面板是否继承父控件的背景。该属性定义了面板是否使用与父控件相同的背景。"""

class CustomFlowPanel(CustomPanel):
    """CustomFlowPanel类继承自CustomPanel，用于创建带流布局功能的面板控件。该类提供了管理和操作流布局面板的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomFlowPanel类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomFlowPanel类的实例（）。"""
    def GetChildren(self, *args, **kwargs) -> Any:
        """GetChildren函数用于获取流布局面板的所有子控件（返回子控件列表）。"""
    def GetControlIndex(self, *args, **kwargs) -> int:
        """GetControlIndex函数用于获取指定控件在流布局面板中的索引（返回控件的索引值）。"""
    def SetControlIndex(self, *args, **kwargs) -> Any:
        """SetControlIndex函数用于设置控件在流布局面板中的索引（）。"""
    def FlipChildren(self, *args, **kwargs) -> Any:
        """FlipChildren函数用于翻转流布局面板中的子控件（）。"""
    AutoWrap: bool
    """AutoWrap属性用于设置流布局面板是否自动换行。该属性定义了流布局面板中的控件是否在超出边界时自动换行。"""
    FlowStyle: Any
    """FlowStyle属性用于设置流布局面板的布局样式。该属性定义了流布局面板中的控件排列方式。"""

class FlowPanel(CustomFlowPanel):
    """FlowPanel类继承自CustomFlowPanel，用于创建带流布局功能的面板控件。该类提供了管理和操作流布局面板的方法和属性。"""
    Align: Any
    """Align属性用于设置FlowPanel的对齐方式。该属性定义了FlowPanel在其父控件中的对齐方式。"""
    Alignment: Any
    """Alignment属性用于设置FlowPanel的内容对齐方式。该属性定义了FlowPanel中子控件的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置FlowPanel的锚点。该属性定义了FlowPanel如何随其父控件的大小变化而调整位置和大小。"""
    AutoSize: Any
    """AutoSize属性用于设置FlowPanel是否自动调整大小。该属性定义了FlowPanel是否根据其内容自动调整大小。"""
    AutoWrap: Any
    """AutoWrap属性用于设置FlowPanel是否自动换行。该属性定义了FlowPanel中的控件是否在超出边界时自动换行。"""
    BevelEdges: Any
    """BevelEdges属性用于设置FlowPanel的斜角边缘。该属性定义了FlowPanel的斜角边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置FlowPanel的内斜角。该属性定义了FlowPanel的内斜角样式。"""
    BevelKind: Any
    """BevelKind属性用于设置FlowPanel的斜角类型。该属性定义了FlowPanel的斜角样式类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置FlowPanel的外斜角。该属性定义了FlowPanel的外斜角样式。"""
    BevelWidth: Any
    """BevelWidth属性用于设置FlowPanel的斜角宽度。该属性定义了FlowPanel的斜角宽度大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置FlowPanel的双向文本模式。该属性定义了FlowPanel中显示的文本方向。"""
    BorderWidth: Any
    """BorderWidth属性用于设置FlowPanel的边框宽度。该属性定义了FlowPanel的边框宽度大小。"""
    BorderStyle: Any
    """BorderStyle属性用于设置FlowPanel的边框样式。该属性定义了FlowPanel的边框样式。"""
    Caption: Any
    """Caption属性用于设置FlowPanel的标题。该属性定义了FlowPanel中显示的标题文本。"""
    Color: Any
    """Color属性用于设置FlowPanel的背景颜色。该属性定义了FlowPanel的整体背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置FlowPanel的大小约束。该属性定义了FlowPanel的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置FlowPanel是否具有三维边框效果。该属性定义了FlowPanel是否显示三维边框。"""
    UseDockManager: Any
    """UseDockManager属性用于设置FlowPanel是否使用停靠管理器。该属性定义了FlowPanel是否启用停靠管理功能。"""
    DockSite: Any
    """DockSite属性用于设置FlowPanel是否作为停靠站点。该属性定义了FlowPanel是否允许其他控件停靠。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置FlowPanel是否使用双缓冲。该属性定义了FlowPanel是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了FlowPanel的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了FlowPanel是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置FlowPanel是否可用。该属性定义了FlowPanel是否可以响应用户交互。"""
    FlowStyle: Any
    """FlowStyle属性用于设置FlowPanel的布局样式。该属性定义了FlowPanel中子控件的排列方式。"""
    FullRepaint: Any
    """FullRepaint属性用于设置FlowPanel是否进行完整重绘。该属性定义了FlowPanel是否在重绘时重新绘制整个控件。"""
    Font: Any
    """Font属性用于设置FlowPanel的字体。该属性定义了FlowPanel显示文本的字体样式。"""
    Locked: Any
    """Locked属性用于设置FlowPanel是否锁定。该属性定义了FlowPanel是否可以被移动或调整大小。"""
    Padding: Any
    """Padding属性用于设置FlowPanel的内边距。该属性定义了FlowPanel内容与边框之间的距离。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置FlowPanel是否继承父控件的双向文本模式。该属性定义了FlowPanel是否使用与父控件相同的双向文本模式。"""
    ParentBackground: Any
    """ParentBackground属性用于设置FlowPanel是否继承父控件的背景。该属性定义了FlowPanel是否使用与父控件相同的背景。"""
    ParentColor: Any
    """ParentColor属性用于设置FlowPanel是否继承父控件的颜色。该属性定义了FlowPanel是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置FlowPanel是否继承父控件的三维边框效果。该属性定义了FlowPanel是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置FlowPanel是否继承父控件的双缓冲。该属性定义了FlowPanel是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置FlowPanel是否继承父控件的字体。该属性定义了FlowPanel是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置FlowPanel是否继承父控件的提示信息显示设置。该属性定义了FlowPanel是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置FlowPanel的右键菜单。该属性定义了FlowPanel右键点击时显示的上下文菜单。"""
    ShowCaption: Any
    """ShowCaption属性用于设置FlowPanel是否显示标题。该属性定义了FlowPanel是否显示标题文本。"""
    ShowHint: Any
    """ShowHint属性用于设置FlowPanel是否显示提示信息。该属性定义了FlowPanel是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置FlowPanel的标签顺序。该属性定义了FlowPanel在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置FlowPanel是否为标签停靠点。该属性定义了FlowPanel是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置FlowPanel的触摸相关属性。该属性定义了FlowPanel如何响应触摸输入。"""
    VerticalAlignment: Any
    """VerticalAlignment属性用于设置FlowPanel的垂直对齐方式。该属性定义了FlowPanel中内容的垂直对齐方式。"""
    Visible: Any
    """Visible属性用于设置FlowPanel是否可见。该属性定义了FlowPanel是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置FlowPanel的样式元素。该属性定义了FlowPanel使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置FlowPanel的样式名称。该属性定义了FlowPanel使用的样式名称。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在FlowPanel插入对齐之前触发。该事件处理程序允许开发人员在FlowPanel插入对齐之前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在FlowPanel对齐位置时触发。该事件处理程序允许开发人员在FlowPanel对齐位置时执行自定义操作。"""
    OnCanResize: Any
    """OnCanResize事件在FlowPanel检测到可以调整大小时触发。该事件处理程序允许开发人员在FlowPanel检测到可以调整大小时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在FlowPanel被单击时触发。该事件处理程序允许开发人员在FlowPanel被单击时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在FlowPanel约束调整大小时触发。该事件处理程序允许开发人员在FlowPanel约束调整大小时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在FlowPanel弹出右键菜单时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在FlowPanel停靠时触发。该事件处理程序允许开发人员在FlowPanel停靠时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在FlowPanel进行停靠悬停时触发。该事件处理程序允许开发人员在FlowPanel进行停靠悬停时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在FlowPanel被双击时触发。该事件处理程序允许开发人员在FlowPanel被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在FlowPanel进行拖放操作时触发。该事件处理程序允许开发人员在FlowPanel进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在FlowPanel进行拖动悬停时触发。该事件处理程序允许开发人员在FlowPanel进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在FlowPanel结束停靠时触发。该事件处理程序允许开发人员在FlowPanel结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在FlowPanel结束拖动操作时触发。该事件处理程序允许开发人员在FlowPanel结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在FlowPanel获得焦点时触发。该事件处理程序允许开发人员在FlowPanel获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在FlowPanel失去焦点时触发。该事件处理程序允许开发人员在FlowPanel失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在FlowPanel检测到手势时触发。该事件处理程序允许开发人员在FlowPanel检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在FlowPanel获取站点信息时触发。该事件处理程序允许开发人员在FlowPanel获取站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在FlowPanel检测到鼠标激活时触发。该事件处理程序允许开发人员在FlowPanel检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在FlowPanel检测到鼠标按下时触发。该事件处理程序允许开发人员在FlowPanel检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在FlowPanel检测到鼠标进入时触发。该事件处理程序允许开发人员在FlowPanel检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在FlowPanel检测到鼠标离开时触发。该事件处理程序允许开发人员在FlowPanel检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在FlowPanel检测到鼠标移动时触发。该事件处理程序允许开发人员在FlowPanel检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在FlowPanel检测到鼠标抬起时触发。该事件处理程序允许开发人员在FlowPanel检测到鼠标抬起时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在FlowPanel调整大小时触发。该事件处理程序允许开发人员在FlowPanel调整大小时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在FlowPanel开始停靠时触发。该事件处理程序允许开发人员在FlowPanel开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在FlowPanel开始拖动时触发。该事件处理程序允许开发人员在FlowPanel开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在FlowPanel解除停靠时触发。该事件处理程序允许开发人员在FlowPanel解除停靠时执行自定义操作。"""

class CommonDialog(Component):
    """CommonDialog类继承自Component，用于创建通用对话框控件。该类提供了管理和操作通用对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CommonDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CommonDialog类的实例（）。"""
    def Execute(self) -> Any:
        """Execute函数用于执行通用对话框并返回结果（self指向实例本身，返回通用对话框的执行结果）。"""
    def DefaultHandler(self, *args, **kwargs) -> Any:
        """DefaultHandler函数用于处理通用对话框的默认事件（）。"""
    Handle: Any
    """Handle属性用于获取通用对话框的句柄。该属性定义了通用对话框的窗口句柄。"""
    Ctl3D: bool
    """Ctl3D属性用于设置通用对话框是否具有三维边框效果。该属性定义了通用对话框是否显示三维边框。"""
    HelpContext: Any
    """HelpContext属性用于获取或设置通用对话框的帮助上下文。该属性定义了通用对话框的帮助上下文ID。"""
    OnClose: Any
    """OnClose事件在通用对话框关闭时触发。该事件处理程序允许开发人员在通用对话框关闭时执行自定义操作。"""
    OnShow: Any
    """OnShow事件在通用对话框显示时触发。该事件处理程序允许开发人员在通用对话框显示时执行自定义操作。"""

class FontDialog(CommonDialog):
    """FontDialog类继承自CommonDialog，用于创建字体选择对话框控件。该类提供了管理和操作字体选择对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建FontDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁FontDialog类的实例（）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行字体选择对话框并返回结果（返回字体选择对话框的执行结果）。"""
    Font: Any
    """Font属性用于获取或设置字体选择对话框中的字体。该属性定义了字体选择对话框中显示的字体对象。"""
    Device: Any
    """Device属性用于获取或设置字体选择对话框中的设备。该属性定义了字体选择对话框中显示的设备类型。"""
    MinFontSize: int
    """MinFontSize属性用于获取或设置字体选择对话框中的最小字体大小。该属性定义了字体选择对话框中允许选择的最小字体大小。"""
    MaxFontSize: int
    """MaxFontSize属性用于获取或设置字体选择对话框中的最大字体大小。该属性定义了字体选择对话框中允许选择的最大字体大小。"""
    Options: Any
    """Options属性用于获取或设置字体选择对话框的选项。该属性定义了字体选择对话框的各种选项。"""
    OnApply: Any
    """OnApply事件在字体选择对话框应用更改时触发。该事件处理程序允许开发人员在字体选择对话框应用更改时执行自定义操作。"""

class ColorDialog(CommonDialog):
    """ColorDialog类继承自CommonDialog，用于创建颜色选择对话框控件。该类提供了管理和操作颜色选择对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ColorDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁ColorDialog类的实例（）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行颜色选择对话框并返回结果（返回颜色选择对话框的执行结果）。"""
    Color: Any
    """Color属性用于获取或设置颜色选择对话框中的颜色。该属性定义了颜色选择对话框中显示的颜色对象。"""
    Ctl3D: Any
    """Ctl3D属性用于设置颜色选择对话框是否具有三维边框效果。该属性定义了颜色选择对话框是否显示三维边框。"""
    CustomColors: Any
    """CustomColors属性用于获取或设置颜色选择对话框中的自定义颜色。该属性定义了颜色选择对话框中显示的自定义颜色集合。"""
    Options: Any
    """Options属性用于获取或设置颜色选择对话框的选项。该属性定义了颜色选择对话框的各种选项。"""

class PrintDialog(CommonDialog):
    """PrintDialog类继承自CommonDialog，用于创建打印对话框控件。该类提供了管理和操作打印对话框的方法和属性。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行打印对话框并返回结果（返回打印对话框的执行结果）。"""
    Collate: bool
    """Collate属性用于设置打印对话框中的打印顺序。该属性定义了打印对话框是否进行顺序打印。"""
    Copies: int
    """Copies属性用于设置打印对话框中的打印份数。该属性定义了打印对话框中显示的打印份数。"""
    FromPage: int
    """FromPage属性用于设置打印对话框中的起始页码。该属性定义了打印对话框中打印的起始页码。"""
    MinPage: int
    """MinPage属性用于设置打印对话框中的最小页码。该属性定义了打印对话框中允许打印的最小页码。"""
    MaxPage: int
    """MaxPage属性用于设置打印对话框中的最大页码。该属性定义了打印对话框中允许打印的最大页码。"""
    Options: Any
    """Options属性用于获取或设置打印对话框的选项。该属性定义了打印对话框的各种选项。"""
    PrintToFile: bool
    """PrintToFile属性用于设置打印对话框是否打印到文件。该属性定义了打印对话框是否将打印结果保存到文件。"""
    PrintRange: Any
    """PrintRange属性用于设置打印对话框中的打印范围。该属性定义了打印对话框中显示的打印范围选项。"""
    ToPage: int
    """ToPage属性用于设置打印对话框中的结束页码。该属性定义了打印对话框中打印的结束页码。"""

class PrinterSetupDialog(CommonDialog):
    """PrinterSetupDialog类继承自CommonDialog，用于创建打印机设置对话框控件。该类提供了管理和操作打印机设置对话框的方法和属性。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行打印机设置对话框并返回结果（返回打印机设置对话框的执行结果）。"""

class FindDialog(CommonDialog):
    """FindDialog类继承自CommonDialog，用于创建查找对话框控件。该类提供了管理和操作查找对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建FindDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁FindDialog类的实例（）。"""
    def CloseDialog(self, *args, **kwargs) -> Any:
        """CloseDialog函数用于关闭查找对话框（）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行查找对话框并返回结果（返回查找对话框的执行结果）。"""
    Left: int
    """Left属性用于设置查找对话框的左边距。该属性定义了查找对话框距离屏幕左边的距离。"""
    Position: Any
    """Position属性用于设置查找对话框的显示位置。该属性定义了查找对话框在屏幕上的显示位置。"""
    Top: int
    """Top属性用于设置查找对话框的上边距。该属性定义了查找对话框距离屏幕顶部的距离。"""
    FindText: str
    """FindText属性用于获取或设置查找对话框中的查找文本。该属性定义了查找对话框中显示的查找字符串。"""
    Options: Any
    """Options属性用于获取或设置查找对话框的选项。该属性定义了查找对话框的各种选项。"""
    OnFind: Any
    """OnFind事件在查找对话框进行查找操作时触发。该事件处理程序允许开发人员在查找对话框进行查找操作时执行自定义操作。"""

class ReplaceDialog(FindDialog):
    """ReplaceDialog类继承自FindDialog，用于创建替换对话框控件。该类提供了管理和操作替换对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ReplaceDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    ReplaceText: Any
    """ReplaceText属性用于获取或设置替换对话框中的替换文本。该属性定义了替换对话框中显示的替换字符串。"""
    OnReplace: Any
    """OnReplace事件在替换对话框进行替换操作时触发。该事件处理程序允许开发人员在替换对话框进行替换操作时执行自定义操作。"""

class PageSetupDialog(CommonDialog):
    """PageSetupDialog类继承自CommonDialog，用于创建页面设置对话框控件。该类提供了管理和操作页面设置对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建PageSetupDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行页面设置对话框并返回结果（返回页面设置对话框的执行结果）。"""
    def GetDefaults(self) -> bool:
        """GetDefaults函数用于获取页面设置对话框的默认设置（self指向实例本身，返回页面设置对话框的默认设置）。"""
    PageSetupDlgRec: Any
    """PageSetupDlgRec属性用于获取或设置页面设置对话框的记录。该属性定义了页面设置对话框中的记录对象。"""
    MinMarginLeft: int
    """MinMarginLeft属性用于获取或设置页面设置对话框中的左边距最小值。该属性定义了页面设置对话框中允许设置的最小左边距。"""
    MinMarginTop: int
    """MinMarginTop属性用于获取或设置页面设置对话框中的上边距最小值。该属性定义了页面设置对话框中允许设置的最小上边距。"""
    MinMarginRight: int
    """MinMarginRight属性用于获取或设置页面设置对话框中的右边距最小值。该属性定义了页面设置对话框中允许设置的最小右边距。"""
    MinMarginBottom: int
    """MinMarginBottom属性用于获取或设置页面设置对话框中的下边距最小值。该属性定义了页面设置对话框中允许设置的最小下边距。"""
    MarginLeft: int
    """MarginLeft属性用于获取或设置页面设置对话框中的左边距。该属性定义了页面设置对话框中显示的左边距。"""
    MarginTop: int
    """MarginTop属性用于获取或设置页面设置对话框中的上边距。该属性定义了页面设置对话框中显示的上边距。"""
    MarginRight: int
    """MarginRight属性用于获取或设置页面设置对话框中的右边距。该属性定义了页面设置对话框中显示的右边距。"""
    MarginBottom: int
    """MarginBottom属性用于获取或设置页面设置对话框中的下边距。该属性定义了页面设置对话框中显示的下边距。"""
    Options: Any
    """Options属性用于获取或设置页面设置对话框的选项。该属性定义了页面设置对话框的各种选项。"""
    PageWidth: int
    """PageWidth属性用于获取或设置页面设置对话框中的页面宽度。该属性定义了页面设置对话框中显示的页面宽度。"""
    PageHeight: int
    """PageHeight属性用于获取或设置页面设置对话框中的页面高度。该属性定义了页面设置对话框中显示的页面高度。"""
    Units: Any
    """Units属性用于获取或设置页面设置对话框中的单位。该属性定义了页面设置对话框中显示的单位类型。"""
    BeforePaint: Any
    """BeforePaint事件在页面设置对话框绘制之前触发。该事件处理程序允许开发人员在页面设置对话框绘制之前执行自定义操作。"""
    OnDrawFullPage: Any
    """OnDrawFullPage事件在页面设置对话框绘制整个页面时触发。该事件处理程序允许开发人员在页面设置对话框绘制整个页面时执行自定义操作。"""
    OnDrawMinMargin: Any
    """OnDrawMinMargin事件在页面设置对话框绘制最小边距时触发。该事件处理程序允许开发人员在页面设置对话框绘制最小边距时执行自定义操作。"""
    OnDrawMargin: Any
    """OnDrawMargin事件在页面设置对话框绘制边距时触发。该事件处理程序允许开发人员在页面设置对话框绘制边距时执行自定义操作。"""
    OnDrawGreekText: Any
    """OnDrawGreekText事件在页面设置对话框绘制希腊文文本时触发。该事件处理程序允许开发人员在页面设置对话框绘制希腊文文本时执行自定义操作。"""
    OnDrawEnvStamp: Any
    """OnDrawEnvStamp事件在页面设置对话框绘制信封邮票时触发。该事件处理程序允许开发人员在页面设置对话框绘制信封邮票时执行自定义操作。"""
    OnDrawRetAddress: Any
    """OnDrawRetAddress事件在页面设置对话框绘制回邮地址时触发。该事件处理程序允许开发人员在页面设置对话框绘制回邮地址时执行自定义操作。"""

class GraphicControl(Control):
    """GraphicControl类继承自Control，用于创建图形控件。该类提供了管理和操作图形控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建GraphicControl类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁GraphicControl类的实例（）。"""

class Gauge(GraphicControl):
    """Gauge类继承自GraphicControl，用于创建进度条控件。该类提供了管理和操作进度条的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建Gauge类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def AddProgress(self, *args, **kwargs) -> Any:
        """AddProgress函数用于增加进度条的进度（）。"""
    PercentDone: Any
    """PercentDone属性用于获取或设置进度条的完成百分比。该属性定义了进度条当前完成的百分比。"""
    Align: Any
    """Align属性用于设置Gauge的对齐方式。该属性定义了Gauge在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置Gauge的锚点。该属性定义了Gauge如何随其父控件的大小变化而调整位置和大小。"""
    BackColor: Any
    """BackColor属性用于设置Gauge的背景颜色。该属性定义了Gauge的背景颜色。"""
    BorderStyle: Any
    """BorderStyle属性用于设置Gauge的边框样式。该属性定义了Gauge的边框样式。"""
    Color: Any
    """Color属性用于设置Gauge的颜色。该属性定义了Gauge的前景颜色。"""
    Constraints: Any
    """Constraints属性用于设置Gauge的大小约束。该属性定义了Gauge的最小和最大大小。"""
    Enabled: Any
    """Enabled属性用于设置Gauge是否可用。该属性定义了Gauge是否可以响应用户交互。"""
    ForeColor: Any
    """ForeColor属性用于设置Gauge的前景颜色。该属性定义了Gauge的前景颜色。"""
    Font: Any
    """Font属性用于设置Gauge的字体。该属性定义了Gauge显示文本的字体样式。"""
    Kind: Any
    """Kind属性用于设置Gauge的类型。该属性定义了Gauge的类型，如进度条或其他样式。"""
    MinValue: Any
    """MinValue属性用于设置Gauge的最小值。该属性定义了Gauge的最小进度值。"""
    MaxValue: Any
    """MaxValue属性用于设置Gauge的最大值。该属性定义了Gauge的最大进度值。"""
    ParentColor: Any
    """ParentColor属性用于设置Gauge是否继承父控件的颜色。该属性定义了Gauge是否使用与父控件相同的前景颜色。"""
    ParentFont: Any
    """ParentFont属性用于设置Gauge是否继承父控件的字体。该属性定义了Gauge是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置Gauge是否继承父控件的提示信息显示设置。该属性定义了Gauge是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置Gauge的右键菜单。该属性定义了Gauge右键点击时显示的上下文菜单。"""
    Progress: Any
    """Progress属性用于获取或设置Gauge的当前进度。该属性定义了Gauge当前的进度值。"""
    ShowHint: Any
    """ShowHint属性用于设置Gauge是否显示提示信息。该属性定义了Gauge是否在鼠标悬停时显示提示信息。"""
    ShowText: bool
    """ShowText属性用于设置Gauge是否显示文本。该属性定义了Gauge上是否显示进度文本。"""
    Visible: Any
    """Visible属性用于设置Gauge是否可见。该属性定义了Gauge是否在界面上显示。"""

class CustomGridPanel(CustomPanel):
    """CustomGridPanel类继承自CustomPanel，用于创建自定义网格面板控件。该类提供了管理和操作网格面板的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomGridPanel类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomGridPanel类的实例（）。"""
    def BeginUpdate(self, *args, **kwargs) -> Any:
        """BeginUpdate函数用于开始更新网格面板（）。"""
    def EndUpdate(self, *args, **kwargs) -> Any:
        """EndUpdate函数用于结束更新网格面板（）。"""
    def ScaleForPPI(self, *args, **kwargs) -> Any:
        """ScaleForPPI函数用于根据PPI缩放网格面板（）。"""
    def GetChildren(self, *args, **kwargs) -> Any:
        """GetChildren函数用于获取网格面板的所有子控件（返回子控件列表）。"""
    def IsColumnEmpty(self, *args, **kwargs) -> bool:
        """IsColumnEmpty函数用于检查指定列是否为空（返回布尔值）。"""
    def IsRowEmpty(self, *args, **kwargs) -> bool:
        """IsRowEmpty函数用于检查指定行是否为空（返回布尔值）。"""
    def UpdateControlsColumn(self, *args, **kwargs) -> Any:
        """UpdateControlsColumn函数用于更新指定列的控件（）。"""
    def UpdateControlsRow(self, *args, **kwargs) -> Any:
        """UpdateControlsRow函数用于更新指定行的控件（）。"""
    def FlipChildren(self, *args, **kwargs) -> Any:
        """FlipChildren函数用于翻转网格面板中的子控件（）。"""
    ColumnSpanIndex: int
    """ColumnSpanIndex属性用于获取或设置网格面板中的列跨越索引。该属性定义了网格面板中控件跨越的列索引。"""
    CellCount: int
    """CellCount属性用于获取或设置网格面板中的单元格数量。该属性定义了网格面板中包含的单元格总数。"""
    CellSize: Any
    """CellSize属性用于获取或设置网格面板中单元格的大小。该属性定义了网格面板中单元格的宽度和高度。"""
    CellRect: Any
    """CellRect属性用于获取或设置网格面板中单元格的矩形区域。该属性定义了网格面板中单元格的矩形范围。"""
    RecalcCellSizesEnabled: bool
    """RecalcCellSizesEnabled属性用于设置是否启用单元格大小重新计算。该属性定义了网格面板是否重新计算单元格大小。"""
    RecalcCellPercentsEnabled: bool
    """RecalcCellPercentsEnabled属性用于设置是否启用单元格百分比重新计算。该属性定义了网格面板是否重新计算单元格的百分比大小。"""
    ColumnCollection: Any
    """ColumnCollection属性用于获取或设置网格面板中的列集合。该属性定义了网格面板中包含的所有列对象。"""
    ControlCollection: Any
    """ControlCollection属性用于获取或设置网格面板中的控件集合。该属性定义了网格面板中包含的所有控件对象。"""
    ExpandStyle: Any
    """ExpandStyle属性用于获取或设置网格面板的展开样式。该属性定义了网格面板中控件的展开方式。"""
    RowCollection: Any
    """RowCollection属性用于获取或设置网格面板中的行集合。该属性定义了网格面板中包含的所有行对象。"""
    RowSpanIndex: int
    """RowSpanIndex属性用于获取或设置网格面板中的行跨越索引。该属性定义了网格面板中控件跨越的行索引。"""

class GridPanel(CustomGridPanel):
    """GridPanel类继承自CustomGridPanel，用于创建网格面板控件。该类提供了管理和操作网格面板的方法和属性。"""
    DockManager: Any
    """DockManager属性用于获取或设置网格面板的停靠管理器。该属性定义了网格面板是否使用停靠管理功能。"""
    Align: Any
    """Align属性用于设置GridPanel的对齐方式。该属性定义了GridPanel在其父控件中的对齐方式。"""
    Alignment: Any
    """Alignment属性用于设置GridPanel的内容对齐方式。该属性定义了GridPanel中子控件的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置GridPanel的锚点。该属性定义了GridPanel如何随其父控件的大小变化而调整位置和大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置GridPanel的斜角边缘。该属性定义了GridPanel的斜角边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置GridPanel的内斜角。该属性定义了GridPanel的内斜角样式。"""
    BevelKind: Any
    """BevelKind属性用于设置GridPanel的斜角类型。该属性定义了GridPanel的斜角样式类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置GridPanel的外斜角。该属性定义了GridPanel的外斜角样式。"""
    BevelWidth: Any
    """BevelWidth属性用于设置GridPanel的斜角宽度。该属性定义了GridPanel的斜角宽度大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置GridPanel的双向文本模式。该属性定义了GridPanel中显示的文本方向。"""
    BorderWidth: Any
    """BorderWidth属性用于设置GridPanel的边框宽度。该属性定义了GridPanel的边框宽度大小。"""
    BorderStyle: Any
    """BorderStyle属性用于设置GridPanel的边框样式。该属性定义了GridPanel的边框样式。"""
    Caption: Any
    """Caption属性用于设置GridPanel的标题。该属性定义了GridPanel中显示的标题文本。"""
    Color: Any
    """Color属性用于设置GridPanel的背景颜色。该属性定义了GridPanel的整体背景颜色。"""
    ColumnCollection: Any
    """ColumnCollection属性用于获取或设置网格面板中的列集合。该属性定义了网格面板中包含的所有列对象。"""
    Constraints: Any
    """Constraints属性用于设置GridPanel的大小约束。该属性定义了GridPanel的最小和最大大小。"""
    ControlCollection: Any
    """ControlCollection属性用于获取或设置网格面板中的控件集合。该属性定义了网格面板中包含的所有控件对象。"""
    Ctl3D: Any
    """Ctl3D属性用于设置GridPanel是否具有三维边框效果。该属性定义了GridPanel是否显示三维边框。"""
    UseDockManager: Any
    """UseDockManager属性用于设置GridPanel是否使用停靠管理器。该属性定义了GridPanel是否启用停靠管理功能。"""
    DockSite: Any
    """DockSite属性用于设置GridPanel是否作为停靠站点。该属性定义了GridPanel是否允许其他控件停靠。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置GridPanel是否使用双缓冲。该属性定义了GridPanel是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了GridPanel的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了GridPanel是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置GridPanel是否可用。该属性定义了GridPanel是否可以响应用户交互。"""
    ExpandStyle: Any
    """ExpandStyle属性用于获取或设置网格面板的展开样式。该属性定义了网格面板中控件的展开方式。"""
    FullRepaint: Any
    """FullRepaint属性用于设置GridPanel是否进行完整重绘。该属性定义了GridPanel是否在重绘时重新绘制整个控件。"""
    Font: Any
    """Font属性用于设置GridPanel的字体。该属性定义了GridPanel显示文本的字体样式。"""
    Locked: Any
    """Locked属性用于设置GridPanel是否锁定。该属性定义了GridPanel是否可以被移动或调整大小。"""
    Padding: Any
    """Padding属性用于设置GridPanel的内边距。该属性定义了GridPanel内容与边框之间的距离。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置GridPanel是否继承父控件的双向文本模式。该属性定义了GridPanel是否使用与父控件相同的双向文本模式。"""
    ParentBackground: Any
    """ParentBackground属性用于设置GridPanel是否继承父控件的背景。该属性定义了GridPanel是否使用与父控件相同的背景。"""
    ParentColor: Any
    """ParentColor属性用于设置GridPanel是否继承父控件的颜色。该属性定义了GridPanel是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置GridPanel是否继承父控件的三维边框效果。该属性定义了GridPanel是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置GridPanel是否继承父控件的双缓冲。该属性定义了GridPanel是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置GridPanel是否继承父控件的字体。该属性定义了GridPanel是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置GridPanel是否继承父控件的提示信息显示设置。该属性定义了GridPanel是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置GridPanel的右键菜单。该属性定义了GridPanel右键点击时显示的上下文菜单。"""
    RowCollection: Any
    """RowCollection属性用于获取或设置网格面板中的行集合。该属性定义了网格面板中包含的所有行对象。"""
    ShowCaption: Any
    """ShowCaption属性用于设置GridPanel是否显示标题。该属性定义了GridPanel是否显示标题文本。"""
    ShowHint: Any
    """ShowHint属性用于设置GridPanel是否显示提示信息。该属性定义了GridPanel是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置GridPanel的标签顺序。该属性定义了GridPanel在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置GridPanel是否为标签停靠点。该属性定义了GridPanel是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置GridPanel的触摸相关属性。该属性定义了GridPanel如何响应触摸输入。"""
    VerticalAlignment: Any
    """VerticalAlignment属性用于设置GridPanel的垂直对齐方式。该属性定义了GridPanel中内容的垂直对齐方式。"""
    Visible: Any
    """Visible属性用于设置GridPanel是否可见。该属性定义了GridPanel是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置GridPanel的样式元素。该属性定义了GridPanel使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置GridPanel的样式名称。该属性定义了GridPanel使用的样式名称。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在GridPanel插入对齐之前触发。该事件处理程序允许开发人员在GridPanel插入对齐之前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在GridPanel对齐位置时触发。该事件处理程序允许开发人员在GridPanel对齐位置时执行自定义操作。"""
    OnCanResize: Any
    """OnCanResize事件在GridPanel检测到可以调整大小时触发。该事件处理程序允许开发人员在GridPanel检测到可以调整大小时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在GridPanel被单击时触发。该事件处理程序允许开发人员在GridPanel被单击时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在GridPanel约束调整大小时触发。该事件处理程序允许开发人员在GridPanel约束调整大小时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在GridPanel弹出右键菜单时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在GridPanel停靠时触发。该事件处理程序允许开发人员在GridPanel停靠时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在GridPanel进行停靠悬停时触发。该事件处理程序允许开发人员在GridPanel进行停靠悬停时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在GridPanel被双击时触发。该事件处理程序允许开发人员在GridPanel被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在GridPanel进行拖放操作时触发。该事件处理程序允许开发人员在GridPanel进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在GridPanel进行拖动悬停时触发。该事件处理程序允许开发人员在GridPanel进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在GridPanel结束停靠时触发。该事件处理程序允许开发人员在GridPanel结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在GridPanel结束拖动操作时触发。该事件处理程序允许开发人员在GridPanel结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在GridPanel获得焦点时触发。该事件处理程序允许开发人员在GridPanel获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在GridPanel失去焦点时触发。该事件处理程序允许开发人员在GridPanel失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在GridPanel检测到手势时触发。该事件处理程序允许开发人员在GridPanel检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在GridPanel获取站点信息时触发。该事件处理程序允许开发人员在GridPanel获取站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在GridPanel检测到鼠标激活时触发。该事件处理程序允许开发人员在GridPanel检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在GridPanel检测到鼠标按下时触发。该事件处理程序允许开发人员在GridPanel检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在GridPanel检测到鼠标进入时触发。该事件处理程序允许开发人员在GridPanel检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在GridPanel检测到鼠标离开时触发。该事件处理程序允许开发人员在GridPanel检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在GridPanel检测到鼠标移动时触发。该事件处理程序允许开发人员在GridPanel检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在GridPanel检测到鼠标抬起时触发。该事件处理程序允许开发人员在GridPanel检测到鼠标抬起时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在GridPanel调整大小时触发。该事件处理程序允许开发人员在GridPanel调整大小时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在GridPanel开始停靠时触发。该事件处理程序允许开发人员在GridPanel开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在GridPanel开始拖动时触发。该事件处理程序允许开发人员在GridPanel开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在GridPanel解除停靠时触发。该事件处理程序允许开发人员在GridPanel解除停靠时执行自定义操作。"""

class HeaderSection(CollectionItem):
    """HeaderSection类继承自CollectionItem，用于创建表头部分控件。该类提供了管理和操作表头部分的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建HeaderSection类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Assign(self, *args, **kwargs) -> Any:
        """Assign函数用于分配HeaderSection类的实例（）。"""
    def ParentBiDiModeChanged(self, *args, **kwargs) -> Any:
        """ParentBiDiModeChanged函数用于处理父双向文本模式更改（）。"""
    def UseRightToLeftAlignment(self) -> bool:
        """UseRightToLeftAlignment函数用于检查是否使用从右到左的对齐方式（self指向实例本身，返回布尔值）。"""
    def UseRightToLeftReading(self) -> bool:
        """UseRightToLeftReading函数用于检查是否使用从右到左的阅读方式（self指向实例本身，返回布尔值）。"""
    Left: int
    """Left属性用于获取或设置表头部分的左边距。该属性定义了表头部分的左边距值。"""
    Right: int
    """Right属性用于获取或设置表头部分的右边距。该属性定义了表头部分的右边距值。"""
    Alignment: Any
    """Alignment属性用于获取或设置表头部分的对齐方式。该属性定义了表头部分中内容的对齐方式。"""
    AllowClick: bool
    """AllowClick属性用于设置是否允许点击表头部分。该属性定义了表头部分是否响应点击事件。"""
    AutoSize: bool
    """AutoSize属性用于设置表头部分是否自动调整大小。该属性定义了表头部分是否根据内容自动调整大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置表头部分的双向文本模式。该属性定义了表头部分中显示的文本方向。"""
    CheckBox: bool
    """CheckBox属性用于设置表头部分是否包含复选框。该属性定义了表头部分是否显示复选框。"""
    Checked: bool
    """Checked属性用于获取或设置表头部分的复选框状态。该属性定义了表头部分的复选框是否被选中。"""
    FixedWidth: bool
    """FixedWidth属性用于设置表头部分的宽度是否固定。该属性定义了表头部分的宽度是否可以调整。"""
    ImageIndex: Any
    """ImageIndex属性用于获取或设置表头部分的图像索引。该属性定义了表头部分中显示的图像索引。"""
    ImageName: Any
    """ImageName属性用于获取或设置表头部分的图像名称。该属性定义了表头部分中显示的图像名称。"""
    MaxWidth: int
    """MaxWidth属性用于获取或设置表头部分的最大宽度。该属性定义了表头部分的最大宽度值。"""
    MinWidth: int
    """MinWidth属性用于获取或设置表头部分的最小宽度。该属性定义了表头部分的最小宽度值。"""
    ParentBiDiMode: bool
    """ParentBiDiMode属性用于设置表头部分是否继承父控件的双向文本模式。该属性定义了表头部分是否使用与父控件相同的双向文本模式。"""
    Style: Any
    """Style属性用于获取或设置表头部分的样式。该属性定义了表头部分的显示样式。"""
    Text: str
    """Text属性用于获取或设置表头部分的文本。该属性定义了表头部分中显示的文本内容。"""
    Width: int
    """Width属性用于获取或设置表头部分的宽度。该属性定义了表头部分的宽度值。"""

class HeaderSections(Collection):
    """HeaderSections类继承自Collection，用于创建表头部分集合控件。该类提供了管理和操作表头部分集合的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建HeaderSections类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Add(self) -> Any:
        """Add函数用于向表头部分集合中添加新项（self指向实例本身，返回新添加的项）。"""
    def AddItem(self, *args, **kwargs) -> Any:
        """AddItem函数用于向表头部分集合中添加指定项（）。"""
    def Insert(self, *args, **kwargs) -> Any:
        """Insert函数用于在表头部分集合中插入新项（）。"""
    Items: Any
    """Items属性用于获取或设置表头部分集合中的所有项。该属性定义了表头部分集合中包含的所有项对象。"""
    HeaderControl: Any
    """HeaderControl属性用于获取或设置表头部分集合的控件。该属性定义了表头部分集合所关联的控件对象。"""

class CustomHeaderControl(WinControl):
    """CustomHeaderControl类继承自WinControl，用于创建自定义表头控件。该类提供了管理和操作表头控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomHeaderControl类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomHeaderControl类的实例（）。"""
    Canvas: Any
    """Canvas属性用于获取或设置表头控件的画布对象。该属性定义了表头控件的绘制区域。"""
    def FlipChildren(self, *args, **kwargs) -> Any:
        """FlipChildren函数用于翻转表头控件中的子控件（）。"""
    Align: Any
    """Align属性用于设置表头控件的对齐方式。该属性定义了表头控件在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置表头控件的锚点。该属性定义了表头控件如何随其父控件的大小变化而调整位置和大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置表头控件的双向文本模式。该属性定义了表头控件中显示的文本方向。"""
    BorderWidth: Any
    """BorderWidth属性用于设置表头控件的边框宽度。该属性定义了表头控件的边框宽度大小。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了表头控件的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了表头控件是否可以被拖动以及拖动的方式。"""
    DragReorder: bool
    """DragReorder属性用于设置是否允许拖动重新排序。该属性定义了表头控件是否支持通过拖动重新排序。"""
    FullDrag: bool
    """FullDrag属性用于设置是否启用完整拖动。该属性定义了表头控件在拖动过程中是否显示实时拖动效果。"""
    HotTrack: bool
    """HotTrack属性用于设置是否启用热点跟踪。该属性定义了表头控件在鼠标悬停时是否显示热点效果。"""
    Enabled: Any
    """Enabled属性用于设置表头控件是否可用。该属性定义了表头控件是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置表头控件的字体。该属性定义了表头控件显示文本的字体样式。"""
    Images: Any
    """Images属性用于获取或设置表头控件的图像列表。该属性定义了表头控件中使用的图像列表。"""
    Constraints: Any
    """Constraints属性用于设置表头控件的大小约束。该属性定义了表头控件的最小和最大大小。"""
    Sections: Any
    """Sections属性用于获取或设置表头控件的部分集合。该属性定义了表头控件中包含的所有部分对象。"""
    Style: Any
    """Style属性用于设置表头控件的样式。该属性定义了表头控件的显示样式。"""
    OnCreateSectionClass: Any
    """OnCreateSectionClass事件在创建表头部分类时触发。该事件处理程序允许开发人员在创建表头部分类时执行自定义操作。"""
    OnDrawSection: Any
    """OnDrawSection事件在绘制表头部分时触发。该事件处理程序允许开发人员在绘制表头部分时执行自定义操作。"""
    OnSectionClick: Any
    """OnSectionClick事件在点击表头部分时触发。该事件处理程序允许开发人员在点击表头部分时执行自定义操作。"""
    OnSectionCheck: Any
    """OnSectionCheck事件在勾选表头部分时触发。该事件处理程序允许开发人员在勾选表头部分时执行自定义操作。"""
    OnSectionDrag: Any
    """OnSectionDrag事件在拖动表头部分时触发。该事件处理程序允许开发人员在拖动表头部分时执行自定义操作。"""
    OnSectionEndDrag: Any
    """OnSectionEndDrag事件在结束拖动表头部分时触发。该事件处理程序允许开发人员在结束拖动表头部分时执行自定义操作。"""
    OnSectionResize: Any
    """OnSectionResize事件在调整表头部分大小时触发。该事件处理程序允许开发人员在调整表头部分大小时执行自定义操作。"""
    OnSectionTrack: Any
    """OnSectionTrack事件在跟踪表头部分时触发。该事件处理程序允许开发人员在跟踪表头部分时执行自定义操作。"""
    CheckBoxes: bool
    """CheckBoxes属性用于设置表头部分是否包含复选框。该属性定义了表头部分是否显示复选框。"""
    NoSizing: bool
    """NoSizing属性用于设置表头部分是否禁止调整大小。该属性定义了表头部分是否可以调整大小。"""
    OverFlow: bool
    """OverFlow属性用于设置表头部分是否溢出显示。该属性定义了表头部分是否允许溢出显示。"""

class HeaderControl(CustomHeaderControl):
    """HeaderControl类继承自CustomHeaderControl，用于创建表头控件。该类提供了管理和操作表头控件的方法和属性。"""
    Align: Any
    """Align属性用于设置HeaderControl的对齐方式。该属性定义了HeaderControl在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置HeaderControl的锚点。该属性定义了HeaderControl如何随其父控件的大小变化而调整位置和大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置HeaderControl的双向文本模式。该属性定义了HeaderControl中显示的文本方向。"""
    BorderWidth: Any
    """BorderWidth属性用于设置HeaderControl的边框宽度。该属性定义了HeaderControl的边框宽度大小。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置HeaderControl是否使用双缓冲。该属性定义了HeaderControl是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了HeaderControl的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了HeaderControl是否可以被拖动以及拖动的方式。"""
    DragReorder: Any
    """DragReorder属性用于设置是否允许拖动重新排序。该属性定义了HeaderControl是否支持通过拖动重新排序。"""
    Enabled: Any
    """Enabled属性用于设置HeaderControl是否可用。该属性定义了HeaderControl是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置HeaderControl的字体。该属性定义了HeaderControl显示文本的字体样式。"""
    FullDrag: Any
    """FullDrag属性用于设置是否启用完整拖动。该属性定义了HeaderControl在拖动过程中是否显示实时拖动效果。"""
    HotTrack: Any
    """HotTrack属性用于设置是否启用热点跟踪。该属性定义了HeaderControl在鼠标悬停时是否显示热点效果。"""
    Images: Any
    """Images属性用于获取或设置HeaderControl的图像列表。该属性定义了HeaderControl中使用的图像列表。"""
    Constraints: Any
    """Constraints属性用于设置HeaderControl的大小约束。该属性定义了HeaderControl的最小和最大大小。"""
    Sections: Any
    """Sections属性用于获取或设置HeaderControl的部分集合。该属性定义了HeaderControl中包含的所有部分对象。"""
    ShowHint: Any
    """ShowHint属性用于设置HeaderControl是否显示提示信息。该属性定义了HeaderControl是否在鼠标悬停时显示提示信息。"""
    Style: Any
    """Style属性用于设置HeaderControl的样式。该属性定义了HeaderControl的显示样式。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置HeaderControl是否继承父控件的双向文本模式。该属性定义了HeaderControl是否使用与父控件相同的双向文本模式。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置HeaderControl是否继承父控件的双缓冲。该属性定义了HeaderControl是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置HeaderControl是否继承父控件的字体。该属性定义了HeaderControl是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置HeaderControl是否继承父控件的提示信息显示设置。该属性定义了HeaderControl是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置HeaderControl的右键菜单。该属性定义了HeaderControl右键点击时显示的上下文菜单。"""
    Touch: Any
    """Touch属性用于设置HeaderControl的触摸相关属性。该属性定义了HeaderControl如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置HeaderControl是否可见。该属性定义了HeaderControl是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置HeaderControl的样式元素。该属性定义了HeaderControl使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置HeaderControl的样式名称。该属性定义了HeaderControl使用的样式名称。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在HeaderControl弹出右键菜单时执行自定义操作。"""
    OnCreateSectionClass: Any
    """OnCreateSectionClass事件在创建表头部分类时触发。该事件处理程序允许开发人员在创建表头部分类时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在HeaderControl进行拖放操作时触发。该事件处理程序允许开发人员在HeaderControl进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在HeaderControl进行拖动悬停时触发。该事件处理程序允许开发人员在HeaderControl进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在HeaderControl结束停靠时触发。该事件处理程序允许开发人员在HeaderControl结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在HeaderControl结束拖动操作时触发。该事件处理程序允许开发人员在HeaderControl结束拖动操作时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在HeaderControl检测到手势时触发。该事件处理程序允许开发人员在HeaderControl检测到手势时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在HeaderControl检测到鼠标激活时触发。该事件处理程序允许开发人员在HeaderControl检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在HeaderControl检测到鼠标按下时触发。该事件处理程序允许开发人员在HeaderControl检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在HeaderControl检测到鼠标进入时触发。该事件处理程序允许开发人员在HeaderControl检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在HeaderControl检测到鼠标离开时触发。该事件处理程序允许开发人员在HeaderControl检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在HeaderControl检测到鼠标移动时触发。该事件处理程序允许开发人员在HeaderControl检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在HeaderControl检测到鼠标抬起时触发。该事件处理程序允许开发人员在HeaderControl检测到鼠标抬起时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在HeaderControl调整大小时触发。该事件处理程序允许开发人员在HeaderControl调整大小时执行自定义操作。"""
    OnDrawSection: Any
    """OnDrawSection事件在绘制表头部分时触发。该事件处理程序允许开发人员在绘制表头部分时执行自定义操作。"""
    OnSectionClick: Any
    """OnSectionClick事件在点击表头部分时触发。该事件处理程序允许开发人员在点击表头部分时执行自定义操作。"""
    OnSectionResize: Any
    """OnSectionResize事件在调整表头部分大小时触发。该事件处理程序允许开发人员在调整表头部分大小时执行自定义操作。"""
    OnSectionTrack: Any
    """OnSectionTrack事件在跟踪表头部分时触发。该事件处理程序允许开发人员在跟踪表头部分时执行自定义操作。"""
    OnSectionDrag: Any
    """OnSectionDrag事件在拖动表头部分时触发。该事件处理程序允许开发人员在拖动表头部分时执行自定义操作。"""
    OnSectionEndDrag: Any
    """OnSectionEndDrag事件在结束拖动表头部分时触发。该事件处理程序允许开发人员在结束拖动表头部分时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在HeaderControl开始停靠时触发。该事件处理程序允许开发人员在HeaderControl开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在HeaderControl开始拖动时触发。该事件处理程序允许开发人员在HeaderControl开始拖动时执行自定义操作。"""

class CustomHotKey(WinControl):
    """CustomHotKey类继承自WinControl，用于创建自定义热键控件。该类提供了管理和操作热键控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomHotKey类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""

class HotKey(CustomHotKey):
    """HotKey类继承自CustomHotKey，用于创建热键控件。该类提供了管理和操作热键控件的方法和属性。"""
    Anchors: Any
    """Anchors属性用于设置HotKey的锚点。该属性定义了HotKey如何随其父控件的大小变化而调整位置和大小。"""
    AutoSize: Any
    """AutoSize属性用于设置HotKey是否自动调整大小。该属性定义了HotKey是否根据内容自动调整大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置HotKey的双向文本模式。该属性定义了HotKey中显示的文本方向。"""
    Constraints: Any
    """Constraints属性用于设置HotKey的大小约束。该属性定义了HotKey的最小和最大大小。"""
    Enabled: Any
    """Enabled属性用于设置HotKey是否可用。该属性定义了HotKey是否可以响应用户交互。"""
    Hint: Any
    """Hint属性用于设置HotKey的提示信息。该属性定义了HotKey在鼠标悬停时显示的提示信息。"""
    HotKey: Any
    """HotKey属性用于获取或设置热键。该属性定义了HotKey控件的热键值。"""
    InvalidKeys: Any
    """InvalidKeys属性用于设置无效的热键组合。该属性定义了HotKey控件中不允许使用的热键组合。"""
    Modifiers: Any
    """Modifiers属性用于设置热键的修饰符。该属性定义了HotKey控件的热键修饰符，如Ctrl、Alt等。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置HotKey是否继承父控件的双向文本模式。该属性定义了HotKey是否使用与父控件相同的双向文本模式。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置HotKey是否继承父控件的提示信息显示设置。该属性定义了HotKey是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置HotKey的右键菜单。该属性定义了HotKey右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置HotKey是否显示提示信息。该属性定义了HotKey是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置HotKey的标签顺序。该属性定义了HotKey在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置HotKey是否为标签停靠点。该属性定义了HotKey是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置HotKey的触摸相关属性。该属性定义了HotKey如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置HotKey是否可见。该属性定义了HotKey是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置HotKey的样式元素。该属性定义了HotKey使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置HotKey的样式名称。该属性定义了HotKey使用的样式名称。"""
    OnChange: Any
    """OnChange事件在HotKey的值发生变化时触发。该事件处理程序允许开发人员在HotKey的值发生变化时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在HotKey弹出右键菜单时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在HotKey获得焦点时触发。该事件处理程序允许开发人员在HotKey获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在HotKey失去焦点时触发。该事件处理程序允许开发人员在HotKey失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在HotKey检测到手势时触发。该事件处理程序允许开发人员在HotKey检测到手势时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在HotKey检测到鼠标激活时触发。该事件处理程序允许开发人员在HotKey检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在HotKey检测到鼠标按下时触发。该事件处理程序允许开发人员在HotKey检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在HotKey检测到鼠标进入时触发。该事件处理程序允许开发人员在HotKey检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在HotKey检测到鼠标离开时触发。该事件处理程序允许开发人员在HotKey检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在HotKey检测到鼠标移动时触发。该事件处理程序允许开发人员在HotKey检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在HotKey检测到鼠标抬起时触发。该事件处理程序允许开发人员在HotKey检测到鼠标抬起时执行自定义操作。"""

class CustomJumpList(Component):
    """CustomJumpList类继承自Component，用于创建自定义跳转列表控件。该类提供了管理和操作跳转列表控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomJumpList类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomJumpList类的实例（）。"""
    def AddToRecent(self, *args, **kwargs) -> Any:
        """AddToRecent过程用于将项目添加到最近列表（）。"""
    def RemoveFromRecent(self, *args, **kwargs) -> Any:
        """RemoveFromRecent函数用于从最近列表中移除项目（）。"""
    def RemoveAllFromRecent(self, *args, **kwargs) -> bool:
        """RemoveAllFromRecent函数用于从最近列表中移除所有项目（返回布尔值）。"""
    def GetRecentList(self, *args, **kwargs) -> Any:
        """GetRecentList函数用于获取最近列表（返回最近列表对象）。"""
    def GetFrequentList(self, *args, **kwargs) -> Any:
        """GetFrequentList函数用于获取常用列表（返回常用列表对象）。"""
    def AddCategory(self, *args, **kwargs) -> int:
        """AddCategory函数用于向跳转列表中添加类别（返回类别索引）。"""
    def AddTask(self, *args, **kwargs) -> Any:
        """AddTask函数用于向跳转列表中添加任务（返回任务对象）。"""
    def AddTaskSeparator(self, *args, **kwargs) -> Any:
        """AddTaskSeparator函数用于向跳转列表中添加任务分隔符（返回任务分隔符对象）。"""
    def AddItemToCategory(self, *args, **kwargs) -> Any:
        """AddItemToCategory函数用于向类别中添加项目（返回项目对象）。"""
    def UpdateList(self, *args, **kwargs) -> bool:
        """UpdateList函数用于更新跳转列表（返回布尔值）。"""
    def DeleteList(self, *args, **kwargs) -> bool:
        """DeleteList函数用于删除跳转列表（返回布尔值）。"""
    AutoRefresh: bool
    """AutoRefresh属性用于设置跳转列表是否自动刷新。该属性定义了跳转列表是否在更改后自动刷新。"""
    Enabled: bool
    """Enabled属性用于设置跳转列表是否启用。该属性定义了跳转列表是否可以响应用户交互。"""
    ApplicationID: str
    """ApplicationID属性用于设置跳转列表的应用程序ID。该属性定义了跳转列表所属的应用程序ID。"""
    CustomCategories: Any
    """CustomCategories属性用于获取或设置跳转列表的自定义类别。该属性定义了跳转列表中包含的所有自定义类别对象。"""
    ShowRecent: bool
    """ShowRecent属性用于设置是否显示最近列表。该属性定义了跳转列表中是否显示最近列表。"""
    ShowFrequent: bool
    """ShowFrequent属性用于设置是否显示常用列表。该属性定义了跳转列表中是否显示常用列表。"""
    TaskList: Any
    """TaskList属性用于获取或设置跳转列表的任务列表。该属性定义了跳转列表中包含的所有任务对象。"""
    OnItemDeleted: Any
    """OnItemDeleted事件在跳转列表中的项目被删除时触发。该事件处理程序允许开发人员在跳转列表中的项目被删除时执行自定义操作。"""
    OnListUpdateError: Any
    """OnListUpdateError事件在跳转列表更新出错时触发。该事件处理程序允许开发人员在跳转列表更新出错时执行自定义操作。"""
    OnItemsLoaded: Any
    """OnItemsLoaded事件在跳转列表中的项目加载完成时触发。该事件处理程序允许开发人员在跳转列表中的项目加载完成时执行自定义操作。"""

class JumpList(CustomJumpList):
    """JumpList类继承自CustomJumpList，用于创建跳转列表控件。该类提供了管理和操作跳转列表控件的方法和属性。"""
    AutoRefresh: Any
    """AutoRefresh属性用于设置跳转列表是否自动刷新。该属性定义了跳转列表是否在更改后自动刷新。"""
    Enabled: Any
    """Enabled属性用于设置跳转列表是否启用。该属性定义了跳转列表是否可以响应用户交互。"""
    ApplicationID: Any
    """ApplicationID属性用于设置跳转列表的应用程序ID。该属性定义了跳转列表所属的应用程序ID。"""
    CustomCategories: Any
    """CustomCategories属性用于获取或设置跳转列表的自定义类别。该属性定义了跳转列表中包含的所有自定义类别对象。"""
    ShowRecent: Any
    """ShowRecent属性用于设置是否显示最近列表。该属性定义了跳转列表中是否显示最近列表。"""
    ShowFrequent: Any
    """ShowFrequent属性用于设置是否显示常用列表。该属性定义了跳转列表中是否显示常用列表。"""
    TaskList: Any
    """TaskList属性用于获取或设置跳转列表的任务列表。该属性定义了跳转列表中包含的所有任务对象。"""
    OnItemDeleted: Any
    """OnItemDeleted事件在跳转列表中的项目被删除时触发。该事件处理程序允许开发人员在跳转列表中的项目被删除时执行自定义操作。"""
    OnListUpdateError: Any
    """OnListUpdateError事件在跳转列表更新出错时触发。该事件处理程序允许开发人员在跳转列表更新出错时执行自定义操作。"""
    OnItemsLoaded: Any
    """OnItemsLoaded事件在跳转列表中的项目加载完成时触发。该事件处理程序允许开发人员在跳转列表中的项目加载完成时执行自定义操作。"""

class CustomMaskEdit(CustomEdit):
    """CustomMaskEdit类继承自CustomEdit，用于创建自定义掩码编辑控件。该类提供了管理和操作掩码编辑控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomMaskEdit类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def ValidateEdit(self, *args, **kwargs) -> Any:
        """ValidateEdit函数用于验证编辑内容（）。"""
    def Clear(self, *args, **kwargs) -> Any:
        """Clear函数用于清除编辑内容（）。"""
    def GetTextLen(self) -> int:
        """GetTextLen函数用于获取文本长度（self指向实例本身，返回文本长度）。"""
    IsMasked: bool
    """IsMasked属性用于获取或设置掩码编辑控件是否启用掩码。该属性定义了掩码编辑控件是否使用掩码。"""
    EditText: str
    """EditText属性用于获取或设置编辑控件的文本。该属性定义了编辑控件中显示的文本内容。"""
    Text: Any
    """Text属性用于获取或设置掩码编辑控件的文本。该属性定义了掩码编辑控件中显示的文本内容。"""

class MaskEdit(CustomMaskEdit):
    """MaskEdit类继承自CustomMaskEdit，用于创建掩码编辑控件。该类提供了管理和操作掩码编辑控件的方法和属性。"""
    Align: Any
    """Align属性用于设置MaskEdit的对齐方式。该属性定义了MaskEdit在其父控件中的对齐方式。"""
    Alignment: Any
    """Alignment属性用于设置MaskEdit的对齐方式。该属性定义了MaskEdit中内容的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置MaskEdit的锚点。该属性定义了MaskEdit如何随其父控件的大小变化而调整位置和大小。"""
    AutoSelect: Any
    """AutoSelect属性用于设置MaskEdit是否自动选择文本。该属性定义了MaskEdit在获得焦点时是否自动选择全部文本。"""
    AutoSize: Any
    """AutoSize属性用于设置MaskEdit是否自动调整大小。该属性定义了MaskEdit是否根据内容自动调整大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置MaskEdit的边框边缘。该属性定义了MaskEdit的边框边缘样式。"""
    BevelInner: Any
    """BevelInner属性用于设置MaskEdit的内部边框样式。该属性定义了MaskEdit的内部边框样式。"""
    BevelOuter: Any
    """BevelOuter属性用于设置MaskEdit的外部边框样式。该属性定义了MaskEdit的外部边框样式。"""
    BevelKind: Any
    """BevelKind属性用于设置MaskEdit的边框类型。该属性定义了MaskEdit的边框类型。"""
    BevelWidth: Any
    """BevelWidth属性用于设置MaskEdit的边框宽度。该属性定义了MaskEdit的边框宽度大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置MaskEdit的双向文本模式。该属性定义了MaskEdit中显示的文本方向。"""
    BorderStyle: Any
    """BorderStyle属性用于设置MaskEdit的边框样式。该属性定义了MaskEdit的边框样式。"""
    CharCase: Any
    """CharCase属性用于设置MaskEdit的字符大小写。该属性定义了MaskEdit中显示的字符是否自动转换为大写或小写。"""
    Color: Any
    """Color属性用于设置MaskEdit的背景颜色。该属性定义了MaskEdit的背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置MaskEdit的大小约束。该属性定义了MaskEdit的最小和最大大小。"""
    Ctl3D: Any
    """Ctl3D属性用于设置MaskEdit的三维效果。该属性定义了MaskEdit是否显示三维边框效果。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置MaskEdit是否使用双缓冲。该属性定义了MaskEdit是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了MaskEdit的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了MaskEdit是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置MaskEdit是否可用。该属性定义了MaskEdit是否可以响应用户交互。"""
    EditMask: Any
    """EditMask属性用于获取或设置MaskEdit的编辑掩码。该属性定义了MaskEdit使用的掩码模式。"""
    Font: Any
    """Font属性用于设置MaskEdit的字体。该属性定义了MaskEdit显示文本的字体样式。"""
    ImeMode: Any
    """ImeMode属性用于设置MaskEdit的输入法模式。该属性定义了MaskEdit的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置MaskEdit的输入法名称。该属性定义了MaskEdit使用的输入法名称。"""
    MaxLength: Any
    """MaxLength属性用于设置MaskEdit的最大文本长度。该属性定义了MaskEdit中可输入的最大字符数。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置MaskEdit是否继承父控件的双向文本模式。该属性定义了MaskEdit是否使用与父控件相同的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置MaskEdit是否继承父控件的颜色。该属性定义了MaskEdit是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置MaskEdit是否继承父控件的三维边框效果。该属性定义了MaskEdit是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置MaskEdit是否继承父控件的双缓冲。该属性定义了MaskEdit是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置MaskEdit是否继承父控件的字体。该属性定义了MaskEdit是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置MaskEdit是否继承父控件的提示信息显示设置。该属性定义了MaskEdit是否使用与父控件相同的提示信息显示设置。"""
    PasswordChar: Any
    """PasswordChar属性用于设置MaskEdit的密码字符。该属性定义了MaskEdit中显示的密码字符。"""
    PopupMenu: Any
    """PopupMenu属性用于设置MaskEdit的右键菜单。该属性定义了MaskEdit右键点击时显示的上下文菜单。"""
    ReadOnly: Any
    """ReadOnly属性用于设置MaskEdit是否只读。该属性定义了MaskEdit是否只能读取而不能编辑。"""
    ShowHint: Any
    """ShowHint属性用于设置MaskEdit是否显示提示信息。该属性定义了MaskEdit是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置MaskEdit的标签顺序。该属性定义了MaskEdit在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置MaskEdit是否为标签停靠点。该属性定义了MaskEdit是否可以通过Tab键获得焦点。"""
    Text: Any
    """Text属性用于获取或设置MaskEdit的文本。该属性定义了MaskEdit中显示的文本内容。"""
    TextHint: Any
    """TextHint属性用于设置MaskEdit的文本提示。该属性定义了MaskEdit在没有文本时显示的提示信息。"""
    Touch: Any
    """Touch属性用于设置MaskEdit的触摸相关属性。该属性定义了MaskEdit如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置MaskEdit是否可见。该属性定义了MaskEdit是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置MaskEdit的样式元素。该属性定义了MaskEdit使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置MaskEdit的样式名称。该属性定义了MaskEdit使用的样式名称。"""
    OnChange: Any
    """OnChange事件在MaskEdit的值发生变化时触发。该事件处理程序允许开发人员在MaskEdit的值发生变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在MaskEdit被点击时触发。该事件处理程序允许开发人员在MaskEdit被点击时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在MaskEdit被双击时触发。该事件处理程序允许开发人员在MaskEdit被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在MaskEdit进行拖放操作时触发。该事件处理程序允许开发人员在MaskEdit进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在MaskEdit进行拖动悬停时触发。该事件处理程序允许开发人员在MaskEdit进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在MaskEdit结束停靠时触发。该事件处理程序允许开发人员在MaskEdit结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在MaskEdit结束拖动操作时触发。该事件处理程序允许开发人员在MaskEdit结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在MaskEdit获得焦点时触发。该事件处理程序允许开发人员在MaskEdit获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在MaskEdit失去焦点时触发。该事件处理程序允许开发人员在MaskEdit失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在MaskEdit检测到手势时触发。该事件处理程序允许开发人员在MaskEdit检测到手势时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在MaskEdit检测到按键按下时触发。该事件处理程序允许开发人员在MaskEdit检测到按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在MaskEdit检测到按键按下并释放时触发。该事件处理程序允许开发人员在MaskEdit检测到按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在MaskEdit检测到按键释放时触发。该事件处理程序允许开发人员在MaskEdit检测到按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在MaskEdit检测到鼠标激活时触发。该事件处理程序允许开发人员在MaskEdit检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在MaskEdit检测到鼠标按下时触发。该事件处理程序允许开发人员在MaskEdit检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在MaskEdit检测到鼠标进入时触发。该事件处理程序允许开发人员在MaskEdit检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在MaskEdit检测到鼠标离开时触发。该事件处理程序允许开发人员在MaskEdit检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在MaskEdit检测到鼠标移动时触发。该事件处理程序允许开发人员在MaskEdit检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在MaskEdit检测到鼠标抬起时触发。该事件处理程序允许开发人员在MaskEdit检测到鼠标抬起时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在MaskEdit开始停靠时触发。该事件处理程序允许开发人员在MaskEdit开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在MaskEdit开始拖动时触发。该事件处理程序允许开发人员在MaskEdit开始拖动时执行自定义操作。"""

class CommonCalendar(WinControl):
    """CommonCalendar类继承自WinControl，用于创建通用日历控件。该类提供了管理和操作日历控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CommonCalendar类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CommonCalendar类的实例（）。"""
    def BoldDays(self, *args, **kwargs) -> Any:
        """BoldDays函数用于设置某些日期加粗显示（）。"""

class MonthCalendar(CommonCalendar):
    """MonthCalendar类继承自CommonCalendar，用于创建月日历控件。该类提供了管理和操作月日历控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建MonthCalendar类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    Align: Any
    """Align属性用于设置MonthCalendar的对齐方式。该属性定义了MonthCalendar在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置MonthCalendar的锚点。该属性定义了MonthCalendar如何随其父控件的大小变化而调整位置和大小。"""
    AutoSize: Any
    """AutoSize属性用于设置MonthCalendar是否自动调整大小。该属性定义了MonthCalendar是否根据内容自动调整大小。"""
    BorderWidth: Any
    """BorderWidth属性用于设置MonthCalendar的边框宽度。该属性定义了MonthCalendar的边框宽度大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置MonthCalendar的双向文本模式。该属性定义了MonthCalendar中显示的文本方向。"""
    CalColors: Any
    """CalColors属性用于获取或设置MonthCalendar的日历颜色。该属性定义了MonthCalendar中显示的各个部分的颜色。"""
    Constraints: Any
    """Constraints属性用于设置MonthCalendar的大小约束。该属性定义了MonthCalendar的最小和最大大小。"""
    MultiSelect: Any
    """MultiSelect属性用于设置MonthCalendar是否允许多选。该属性定义了MonthCalendar是否支持多选日期。"""
    Date: Any
    """Date属性用于获取或设置MonthCalendar的当前日期。该属性定义了MonthCalendar中显示的当前日期。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置MonthCalendar是否使用双缓冲。该属性定义了MonthCalendar是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了MonthCalendar的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了MonthCalendar是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置MonthCalendar是否可用。该属性定义了MonthCalendar是否可以响应用户交互。"""
    EndDate: Any
    """EndDate属性用于获取或设置MonthCalendar的结束日期。该属性定义了MonthCalendar中显示的结束日期。"""
    FirstDayOfWeek: Any
    """FirstDayOfWeek属性用于设置MonthCalendar的每周的第一天。该属性定义了MonthCalendar中每周的起始日。"""
    Font: Any
    """Font属性用于设置MonthCalendar的字体。该属性定义了MonthCalendar显示文本的字体样式。"""
    ImeMode: Any
    """ImeMode属性用于设置MonthCalendar的输入法模式。该属性定义了MonthCalendar的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置MonthCalendar的输入法名称。该属性定义了MonthCalendar使用的输入法名称。"""
    MaxDate: Any
    """MaxDate属性用于获取或设置MonthCalendar的最大日期。该属性定义了MonthCalendar中显示的最大日期。"""
    MaxSelectRange: Any
    """MaxSelectRange属性用于设置MonthCalendar的最大选择范围。该属性定义了MonthCalendar中可选择的最大日期范围。"""
    MinDate: Any
    """MinDate属性用于获取或设置MonthCalendar的最小日期。该属性定义了MonthCalendar中显示的最小日期。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置MonthCalendar是否继承父控件的双向文本模式。该属性定义了MonthCalendar是否使用与父控件相同的双向文本模式。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置MonthCalendar是否继承父控件的双缓冲。该属性定义了MonthCalendar是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置MonthCalendar是否继承父控件的字体。该属性定义了MonthCalendar是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置MonthCalendar是否继承父控件的提示信息显示设置。该属性定义了MonthCalendar是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置MonthCalendar的右键菜单。该属性定义了MonthCalendar右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置MonthCalendar是否显示提示信息。该属性定义了MonthCalendar是否在鼠标悬停时显示提示信息。"""
    ShowToday: Any
    """ShowToday属性用于设置MonthCalendar是否显示今天的日期。该属性定义了MonthCalendar是否在日历中显示今天的日期。"""
    ShowTodayCircle: Any
    """ShowTodayCircle属性用于设置MonthCalendar是否在今天的日期周围绘制一个圆圈。该属性定义了MonthCalendar是否在今天的日期周围绘制一个圆圈。"""
    TabOrder: Any
    """TabOrder属性用于设置MonthCalendar的标签顺序。该属性定义了MonthCalendar在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置MonthCalendar是否为标签停靠点。该属性定义了MonthCalendar是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置MonthCalendar的触摸相关属性。该属性定义了MonthCalendar如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置MonthCalendar是否可见。该属性定义了MonthCalendar是否在界面上显示。"""
    WeekNumbers: Any
    """WeekNumbers属性用于设置MonthCalendar是否显示周数。该属性定义了MonthCalendar是否在日历中显示每周的周数。"""
    OnClick: Any
    """OnClick事件在MonthCalendar被点击时触发。该事件处理程序允许开发人员在MonthCalendar被点击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在MonthCalendar弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在MonthCalendar被双击时触发。该事件处理程序允许开发人员在MonthCalendar被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在MonthCalendar进行拖放操作时触发。该事件处理程序允许开发人员在MonthCalendar进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在MonthCalendar进行拖动悬停时触发。该事件处理程序允许开发人员在MonthCalendar进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在MonthCalendar结束停靠时触发。该事件处理程序允许开发人员在MonthCalendar结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在MonthCalendar结束拖动操作时触发。该事件处理程序允许开发人员在MonthCalendar结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在MonthCalendar获得焦点时触发。该事件处理程序允许开发人员在MonthCalendar获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在MonthCalendar失去焦点时触发。该事件处理程序允许开发人员在MonthCalendar失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在MonthCalendar检测到手势时触发。该事件处理程序允许开发人员在MonthCalendar检测到手势时执行自定义操作。"""
    OnGetMonthInfo: Any
    """OnGetMonthInfo事件在获取月信息时触发。该事件处理程序允许开发人员在MonthCalendar获取月信息时执行自定义操作。"""
    OnGetMonthBoldInfo: Any
    """OnGetMonthBoldInfo事件在获取月加粗信息时触发。该事件处理程序允许开发人员在MonthCalendar获取月加粗信息时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在MonthCalendar检测到按键按下时触发。该事件处理程序允许开发人员在MonthCalendar检测到按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在MonthCalendar检测到按键按下并释放时触发。该事件处理程序允许开发人员在MonthCalendar检测到按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在MonthCalendar检测到按键释放时触发。该事件处理程序允许开发人员在MonthCalendar检测到按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在MonthCalendar检测到鼠标激活时触发。该事件处理程序允许开发人员在MonthCalendar检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在MonthCalendar检测到鼠标按下时触发。该事件处理程序允许开发人员在MonthCalendar检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在MonthCalendar检测到鼠标进入时触发。该事件处理程序允许开发人员在MonthCalendar检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在MonthCalendar检测到鼠标离开时触发。该事件处理程序允许开发人员在MonthCalendar检测到鼠标离开时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在MonthCalendar开始停靠时触发。该事件处理程序允许开发人员在MonthCalendar开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在MonthCalendar开始拖动时触发。该事件处理程序允许开发人员在MonthCalendar开始拖动时执行自定义操作。"""

class CustomNumberBox(CustomEdit):
    """CustomNumberBox类继承自CustomEdit，用于创建自定义数字输入控件。该类提供了管理和操作数字输入控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomNumberBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomNumberBox类的实例（）。"""
    Mode: Any
    """Mode属性用于设置CustomNumberBox的模式。该属性定义了CustomNumberBox的工作模式。"""
    Value: Any
    """Value属性用于获取或设置CustomNumberBox的值。该属性定义了CustomNumberBox中显示的值。"""
    ValueInt: int
    """ValueInt属性用于获取或设置CustomNumberBox的整数值。该属性定义了CustomNumberBox中显示的整数值。"""
    ValueFloat: Any
    """ValueFloat属性用于获取或设置CustomNumberBox的浮点值。该属性定义了CustomNumberBox中显示的浮点值。"""
    ValueCurrency: Any
    """ValueCurrency属性用于获取或设置CustomNumberBox的货币值。该属性定义了CustomNumberBox中显示的货币值。"""
    CurrencyString: str
    """CurrencyString属性用于获取或设置CustomNumberBox的货币字符串。该属性定义了CustomNumberBox中显示的货币字符串。"""
    CurrencyFormat: Any
    """CurrencyFormat属性用于获取或设置CustomNumberBox的货币格式。该属性定义了CustomNumberBox中显示的货币格式。"""
    DisplayFormat: str
    """DisplayFormat属性用于获取或设置CustomNumberBox的显示格式。该属性定义了CustomNumberBox中显示的格式。"""
    MinValue: Any
    """MinValue属性用于获取或设置CustomNumberBox的最小值。该属性定义了CustomNumberBox中可以输入的最小值。"""
    MaxValue: Any
    """MaxValue属性用于获取或设置CustomNumberBox的最大值。该属性定义了CustomNumberBox中可以输入的最大值。"""
    Decimal: Any
    """Decimal属性用于获取或设置CustomNumberBox的小数位数。该属性定义了CustomNumberBox中显示的小数位数。"""
    SmallStep: Any
    """SmallStep属性用于获取或设置CustomNumberBox的小步长。该属性定义了CustomNumberBox中值变化的小步长。"""
    LargeStep: Any
    """LargeStep属性用于获取或设置CustomNumberBox的大步长。该属性定义了CustomNumberBox中值变化的大步长。"""
    AcceptExpressions: bool
    """AcceptExpressions属性用于设置CustomNumberBox是否接受表达式。该属性定义了CustomNumberBox是否可以输入表达式。"""
    SpinButtonOptions: Any
    """SpinButtonOptions属性用于获取或设置CustomNumberBox的旋转按钮选项。该属性定义了CustomNumberBox中旋转按钮的行为。"""
    UseNaNValue: bool
    """UseNaNValue属性用于设置CustomNumberBox是否使用NaN值。该属性定义了CustomNumberBox是否可以显示NaN值。"""
    UseMouseWheel: bool
    """UseMouseWheel属性用于设置CustomNumberBox是否使用鼠标滚轮。该属性定义了CustomNumberBox是否可以通过鼠标滚轮改变值。"""
    UseUpDownKeys: bool
    """UseUpDownKeys属性用于设置CustomNumberBox是否使用上下箭头键。该属性定义了CustomNumberBox是否可以通过上下箭头键改变值。"""
    Wrap: bool
    """Wrap属性用于设置CustomNumberBox是否环绕。该属性定义了CustomNumberBox在达到最大值或最小值时是否环绕到另一个极限值。"""
    NegativeValueColor: Any
    """NegativeValueColor属性用于获取或设置CustomNumberBox的负值颜色。该属性定义了CustomNumberBox中显示负值时的颜色。"""
    OnChangeValue: Any
    """OnChangeValue事件在CustomNumberBox的值发生变化时触发。该事件处理程序允许开发人员在CustomNumberBox的值发生变化时执行自定义操作。"""
    OnEvaluateExpression: Any
    """OnEvaluateExpression事件在CustomNumberBox评估表达式时触发。该事件处理程序允许开发人员在CustomNumberBox评估表达式时执行自定义操作。"""
    OnValidateChar: Any
    """OnValidateChar事件在CustomNumberBox验证字符时触发。该事件处理程序允许开发人员在CustomNumberBox验证字符时执行自定义操作。"""

class NumberBox(CustomNumberBox):
    """NumberBox类继承自CustomNumberBox，用于创建数字输入控件。该类提供了管理和操作数字输入控件的方法和属性。"""
    AcceptExpressions: Any
    """AcceptExpressions属性用于设置NumberBox是否接受表达式。该属性定义了NumberBox是否可以输入表达式。"""
    Align: Any
    """Align属性用于设置NumberBox的对齐方式。该属性定义了NumberBox在其父控件中的对齐方式。"""
    Alignment: Any
    """Alignment属性用于设置NumberBox的对齐方式。该属性定义了NumberBox中内容的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置NumberBox的锚点。该属性定义了NumberBox如何随其父控件的大小变化而调整位置和大小。"""
    AutoSelect: Any
    """AutoSelect属性用于设置NumberBox是否自动选择文本。该属性定义了NumberBox在获得焦点时是否自动选择全部文本。"""
    AutoSize: Any
    """AutoSize属性用于设置NumberBox是否自动调整大小。该属性定义了NumberBox是否根据内容自动调整大小。"""
    BiDiMode: Any
    """BiDiMode属性用于设置NumberBox的双向文本模式。该属性定义了NumberBox中显示的文本方向。"""
    BorderStyle: Any
    """BorderStyle属性用于设置NumberBox的边框样式。该属性定义了NumberBox的边框样式。"""
    CharCase: Any
    """CharCase属性用于设置NumberBox的字符大小写。该属性定义了NumberBox中显示的字符是否自动转换为大写或小写。"""
    Color: Any
    """Color属性用于设置NumberBox的背景颜色。该属性定义了NumberBox的背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置NumberBox的大小约束。该属性定义了NumberBox的最小和最大大小。"""
    CurrencyString: Any
    """CurrencyString属性用于获取或设置NumberBox的货币字符串。该属性定义了NumberBox中显示的货币字符串。"""
    CurrencyFormat: Any
    """CurrencyFormat属性用于获取或设置NumberBox的货币格式。该属性定义了NumberBox中显示的货币格式。"""
    Decimal: Any
    """Decimal属性用于获取或设置NumberBox的小数位数。该属性定义了NumberBox中显示的小数位数。"""
    DisplayFormat: Any
    """DisplayFormat属性用于获取或设置NumberBox的显示格式。该属性定义了NumberBox中显示的格式。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了NumberBox的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了NumberBox是否可以被拖动以及拖动的方式。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置NumberBox是否使用双缓冲。该属性定义了NumberBox是否使用双缓冲技术来减少闪烁。"""
    Enabled: Any
    """Enabled属性用于设置NumberBox是否可用。该属性定义了NumberBox是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置NumberBox的字体。该属性定义了NumberBox显示文本的字体样式。"""
    HideSelection: Any
    """HideSelection属性用于设置NumberBox是否隐藏选定文本。该属性定义了NumberBox在失去焦点时是否隐藏选定文本。"""
    ImeMode: Any
    """ImeMode属性用于设置NumberBox的输入法模式。该属性定义了NumberBox的输入法模式。"""
    ImeName: Any
    """ImeName属性用于设置NumberBox的输入法名称。该属性定义了NumberBox使用的输入法名称。"""
    LargeStep: Any
    """LargeStep属性用于获取或设置NumberBox的大步长。该属性定义了NumberBox中值变化的大步长。"""
    Mode: Any
    """Mode属性用于设置NumberBox的模式。该属性定义了NumberBox的工作模式。"""
    MinValue: Any
    """MinValue属性用于获取或设置NumberBox的最小值。该属性定义了NumberBox中可以输入的最小值。"""
    MaxValue: Any
    """MaxValue属性用于获取或设置NumberBox的最大值。该属性定义了NumberBox中可以输入的最大值。"""
    MaxLength: Any
    """MaxLength属性用于设置NumberBox的最大文本长度。该属性定义了NumberBox中可输入的最大字符数。"""
    OEMConvert: Any
    """OEMConvert属性用于设置NumberBox是否进行OEM字符转换。该属性定义了NumberBox是否将字符转换为OEM字符集。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置NumberBox是否继承父控件的双向文本模式。该属性定义了NumberBox是否使用与父控件相同的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置NumberBox是否继承父控件的颜色。该属性定义了NumberBox是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置NumberBox是否继承父控件的三维边框效果。该属性定义了NumberBox是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置NumberBox是否继承父控件的双缓冲。该属性定义了NumberBox是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置NumberBox是否继承父控件的字体。该属性定义了NumberBox是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置NumberBox是否继承父控件的提示信息显示设置。该属性定义了NumberBox是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置NumberBox的右键菜单。该属性定义了NumberBox右键点击时显示的上下文菜单。"""
    ReadOnly: Any
    """ReadOnly属性用于设置NumberBox是否只读。该属性定义了NumberBox是否只能读取而不能编辑。"""
    SmallStep: Any
    """SmallStep属性用于获取或设置NumberBox的小步长。该属性定义了NumberBox中值变化的小步长。"""
    ShowHint: Any
    """ShowHint属性用于设置NumberBox是否显示提示信息。该属性定义了NumberBox是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置NumberBox的标签顺序。该属性定义了NumberBox在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置NumberBox是否为标签停靠点。该属性定义了NumberBox是否可以通过Tab键获得焦点。"""
    TextHint: Any
    """TextHint属性用于设置NumberBox的文本提示。该属性定义了NumberBox在没有文本时显示的提示信息。"""
    Touch: Any
    """Touch属性用于设置NumberBox的触摸相关属性。该属性定义了NumberBox如何响应触摸输入。"""
    Value: Any
    """Value属性用于获取或设置NumberBox的值。该属性定义了NumberBox中显示的值。"""
    Visible: Any
    """Visible属性用于设置NumberBox是否可见。该属性定义了NumberBox是否在界面上显示。"""
    SpinButtonOptions: Any
    """SpinButtonOptions属性用于获取或设置NumberBox的旋转按钮选项。该属性定义了NumberBox中旋转按钮的行为。"""
    StyleElements: Any
    """StyleElements属性用于设置NumberBox的样式元素。该属性定义了NumberBox使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置NumberBox的样式名称。该属性定义了NumberBox使用的样式名称。"""
    UseNaNValue: Any
    """UseNaNValue属性用于设置NumberBox是否使用NaN值。该属性定义了NumberBox是否可以显示NaN值。"""
    UseMouseWheel: Any
    """UseMouseWheel属性用于设置NumberBox是否使用鼠标滚轮。该属性定义了NumberBox是否可以通过鼠标滚轮改变值。"""
    UseUpDownKeys: Any
    """UseUpDownKeys属性用于设置NumberBox是否使用上下箭头键。该属性定义了NumberBox是否可以通过上下箭头键改变值。"""
    Wrap: Any
    """Wrap属性用于设置NumberBox是否环绕。该属性定义了NumberBox在达到最大值或最小值时是否环绕到另一个极限值。"""
    NegativeValueColor: Any
    """NegativeValueColor属性用于获取或设置NumberBox的负值颜色。该属性定义了NumberBox中显示负值时的颜色。"""
    OnChange: Any
    """OnChange事件在NumberBox的值发生变化时触发。该事件处理程序允许开发人员在NumberBox的值发生变化时执行自定义操作。"""
    OnChangeValue: Any
    """OnChangeValue事件在NumberBox的值发生变化时触发。该事件处理程序允许开发人员在NumberBox的值发生变化时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在NumberBox被点击时触发。该事件处理程序允许开发人员在NumberBox被点击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在NumberBox弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在NumberBox被双击时触发。该事件处理程序允许开发人员在NumberBox被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在NumberBox进行拖放操作时触发。该事件处理程序允许开发人员在NumberBox进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在NumberBox进行拖动悬停时触发。该事件处理程序允许开发人员在NumberBox进行拖动悬停时执行自定义操作。"""
    OnEvaluateExpression: Any
    """OnEvaluateExpression事件在NumberBox评估表达式时触发。该事件处理程序允许开发人员在NumberBox评估表达式时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在NumberBox结束停靠时触发。该事件处理程序允许开发人员在NumberBox结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在NumberBox结束拖动操作时触发。该事件处理程序允许开发人员在NumberBox结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在NumberBox获得焦点时触发。该事件处理程序允许开发人员在NumberBox获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在NumberBox失去焦点时触发。该事件处理程序允许开发人员在NumberBox失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在NumberBox检测到手势时触发。该事件处理程序允许开发人员在NumberBox检测到手势时执行自定义操作。"""
    OnValidateChar: Any
    """OnValidateChar事件在NumberBox验证字符时触发。该事件处理程序允许开发人员在NumberBox验证字符时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在NumberBox检测到按键按下时触发。该事件处理程序允许开发人员在NumberBox检测到按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在NumberBox检测到按键按下并释放时触发。该事件处理程序允许开发人员在NumberBox检测到按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在NumberBox检测到按键释放时触发。该事件处理程序允许开发人员在NumberBox检测到按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在NumberBox检测到鼠标激活时触发。该事件处理程序允许开发人员在NumberBox检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在NumberBox检测到鼠标按下时触发。该事件处理程序允许开发人员在NumberBox检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在NumberBox检测到鼠标进入时触发。该事件处理程序允许开发人员在NumberBox检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在NumberBox检测到鼠标离开时触发。该事件处理程序允许开发人员在NumberBox检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在NumberBox检测到鼠标移动时触发。该事件处理程序允许开发人员在NumberBox检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在NumberBox检测到鼠标抬起时触发。该事件处理程序允许开发人员在NumberBox检测到鼠标抬起时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在NumberBox开始停靠时触发。该事件处理程序允许开发人员在NumberBox开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在NumberBox开始拖动时触发。该事件处理程序允许开发人员在NumberBox开始拖动时执行自定义操作。"""

class OpenPictureDialog(OpenDialog):
    """OpenPictureDialog类继承自OpenDialog，用于创建打开图片对话框。该类提供了管理和操作打开图片对话框的方法和属性。"""
    Filter: Any
    """Filter属性用于设置OpenPictureDialog的文件过滤器。该属性定义了OpenPictureDialog中显示的文件类型过滤器。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建OpenPictureDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行OpenPictureDialog的打开操作（）。"""

class SavePictureDialog(OpenPictureDialog):
    """SavePictureDialog类继承自OpenPictureDialog，用于创建保存图片对话框。该类提供了管理和操作保存图片对话框的方法和属性。"""
    def Execute(self) -> Any:
        """Execute函数用于执行SavePictureDialog的保存操作（self指向实例本身，返回操作结果）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行SavePictureDialog的保存操作（）。"""

class OpenTextFileDialog(OpenDialog):
    """OpenTextFileDialog类继承自OpenDialog，用于创建打开文本文件对话框。该类提供了管理和操作打开文本文件对话框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建OpenTextFileDialog类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁OpenTextFileDialog类的实例（）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行OpenTextFileDialog的打开操作（）。"""
    Encodings: Any
    """Encodings属性用于获取或设置OpenTextFileDialog的编码列表。该属性定义了OpenTextFileDialog中显示的编码列表。"""
    EncodingIndex: int
    """EncodingIndex属性用于获取或设置OpenTextFileDialog的编码索引。该属性定义了OpenTextFileDialog中选中的编码索引。"""
    ShowEncodingList: bool
    """ShowEncodingList属性用于设置OpenTextFileDialog是否显示编码列表。该属性定义了OpenTextFileDialog是否显示编码列表。"""

class SaveTextFileDialog(OpenTextFileDialog):
    """SaveTextFileDialog类继承自OpenTextFileDialog，用于创建保存文本文件对话框。该类提供了管理和操作保存文本文件对话框的方法和属性。"""
    def Execute(self) -> Any:
        """Execute函数用于执行SaveTextFileDialog的保存操作（self指向实例本身，返回操作结果）。"""
    def Execute(self, *args, **kwargs) -> Any:
        """Execute函数用于执行SaveTextFileDialog的保存操作（）。"""

class CustomOutline(CustomGrid):
    """CustomOutline类继承自CustomGrid，用于创建自定义大纲控件。该类提供了管理和操作大纲控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomOutline类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomOutline类的实例（）。"""
    def Add(self, *args, **kwargs) -> Any:
        """Add函数用于向CustomOutline添加项目（）。"""
    def AddChild(self, *args, **kwargs) -> Any:
        """AddChild函数用于向CustomOutline添加子项目（）。"""
    def AddChildObject(self, *args, **kwargs) -> Any:
        """AddChildObject函数用于向CustomOutline添加带对象的子项目（）。"""
    def AddObject(self, *args, **kwargs) -> Any:
        """AddObject函数用于向CustomOutline添加带对象的项目（）。"""
    def Insert(self, *args, **kwargs) -> Any:
        """Insert函数用于在CustomOutline中插入项目（）。"""
    def InsertObject(self, *args, **kwargs) -> Any:
        """InsertObject函数用于在CustomOutline中插入带对象的项目（）。"""
    def Delete(self, *args, **kwargs) -> Any:
        """Delete函数用于从CustomOutline中删除项目（）。"""
    def GetDataItem(self, *args, **kwargs) -> Any:
        """GetDataItem函数用于获取CustomOutline中的数据项（）。"""
    def GetItem(self, *args, **kwargs) -> Any:
        """GetItem函数用于获取CustomOutline中的项目（）。"""
    def GetNodeDisplayWidth(self, *args, **kwargs) -> int:
        """GetNodeDisplayWidth函数用于获取CustomOutline中节点的显示宽度（返回节点的显示宽度）。"""
    def GetTextItem(self, *args, **kwargs) -> Any:
        """GetTextItem函数用于获取CustomOutline中的文本项（）。"""
    def GetVisibleNode(self, *args, **kwargs) -> Any:
        """GetVisibleNode函数用于获取CustomOutline中的可见节点（）。"""
    def FullExpand(self, *args, **kwargs) -> Any:
        """FullExpand函数用于展开CustomOutline中的所有节点（）。"""
    def FullCollapse(self, *args, **kwargs) -> Any:
        """FullCollapse函数用于折叠CustomOutline中的所有节点（）。"""
    def LoadFromFile(self, *args, **kwargs) -> Any:
        """LoadFromFile函数用于从文件加载CustomOutline的内容（）。"""
    def LoadFromStream(self, *args, **kwargs) -> Any:
        """LoadFromStream函数用于从流加载CustomOutline的内容（）。"""
    def SaveToFile(self, *args, **kwargs) -> Any:
        """SaveToFile函数用于将CustomOutline的内容保存到文件（）。"""
    def SaveToStream(self, *args, **kwargs) -> Any:
        """SaveToStream函数用于将CustomOutline的内容保存到流（）。"""
    def BeginUpdate(self, *args, **kwargs) -> Any:
        """BeginUpdate函数用于开始更新CustomOutline（）。"""
    def EndUpdate(self, *args, **kwargs) -> Any:
        """EndUpdate函数用于结束更新CustomOutline（）。"""
    def SetUpdateState(self, *args, **kwargs) -> Any:
        """SetUpdateState函数用于设置CustomOutline的更新状态（）。"""
    def Clear(self, *args, **kwargs) -> Any:
        """Clear函数用于清除CustomOutline中的所有项目（）。"""
    ItemCount: Any
    """ItemCount属性用于获取CustomOutline中的项目数量。该属性定义了CustomOutline中包含的项目数量。"""
    Items: Any
    """Items属性用于获取或设置CustomOutline中的项目集合。该属性定义了CustomOutline中包含的项目对象集合。"""
    SelectedItem: Any
    """SelectedItem属性用于获取或设置CustomOutline中选定的项目。该属性定义了CustomOutline中当前选定的项目。"""
    Row: Any
    """Row属性用于获取或设置CustomOutline中的行。该属性定义了CustomOutline中当前操作的行。"""
    Canvas: Any
    """Canvas属性用于获取CustomOutline的画布对象。该属性定义了CustomOutline的绘图画布。"""

class Outline(CustomOutline):
    """Outline类继承自CustomOutline，用于创建大纲控件。该类提供了管理和操作大纲控件的方法和属性。"""
    Lines: Any
    """Lines属性用于获取或设置Outline中的行集合。该属性定义了Outline中包含的行对象集合。"""
    OutlineStyle: Any
    """OutlineStyle属性用于获取或设置Outline的样式。该属性定义了Outline的显示样式。"""
    OnExpand: Any
    """OnExpand事件在Outline中的节点被展开时触发。该事件处理程序允许开发人员在Outline节点被展开时执行自定义操作。"""
    OnCollapse: Any
    """OnCollapse事件在Outline中的节点被折叠时触发。该事件处理程序允许开发人员在Outline节点被折叠时执行自定义操作。"""
    Options: Any
    """Options属性用于获取或设置Outline的选项。该属性定义了Outline的各种选项设置。"""
    Style: Any
    """Style属性用于获取或设置Outline的样式。该属性定义了Outline的显示样式。"""
    ItemHeight: Any
    """ItemHeight属性用于获取或设置Outline中项目的高度。该属性定义了Outline中每个项目的显示高度。"""
    OnDrawItem: Any
    """OnDrawItem事件在Outline中的项目被绘制时触发。该事件处理程序允许开发人员在Outline项目被绘制时执行自定义操作。"""
    Align: Any
    """Align属性用于设置Outline的对齐方式。该属性定义了Outline在其父控件中的对齐方式。"""
    Enabled: Any
    """Enabled属性用于设置Outline是否可用。该属性定义了Outline是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置Outline的字体。该属性定义了Outline显示文本的字体样式。"""
    Color: Any
    """Color属性用于设置Outline的背景颜色。该属性定义了Outline的背景颜色。"""
    ParentColor: Any
    """ParentColor属性用于设置Outline是否继承父控件的颜色。该属性定义了Outline是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置Outline是否继承父控件的三维边框效果。该属性定义了Outline是否使用与父控件相同的三维边框。"""
    Ctl3D: Any
    """Ctl3D属性用于设置Outline的三维边框效果。该属性定义了Outline的三维边框样式。"""
    TabOrder: Any
    """TabOrder属性用于设置Outline的标签顺序。该属性定义了Outline在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置Outline是否为标签停靠点。该属性定义了Outline是否可以通过Tab键获得焦点。"""
    Visible: Any
    """Visible属性用于设置Outline是否可见。该属性定义了Outline是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置Outline的样式元素。该属性定义了Outline使用哪些样式元素进行绘制。"""
    OnClick: Any
    """OnClick事件在Outline被点击时触发。该事件处理程序允许开发人员在Outline被点击时执行自定义操作。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置Outline是否使用双缓冲。该属性定义了Outline是否使用双缓冲技术来减少闪烁。"""
    DragMode: Any
    """DragMode属性用于设置拖动的模式。该属性定义了Outline是否可以被拖动以及拖动的方式。"""
    DragKind: Any
    """DragKind属性用于设置拖动的类型。该属性定义了Outline的拖动类型。"""
    DragCursor: Any
    """DragCursor属性用于设置拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置Outline是否继承父控件的双缓冲。该属性定义了Outline是否使用与父控件相同的双缓冲技术。"""
    Touch: Any
    """Touch属性用于设置Outline的触摸相关属性。该属性定义了Outline如何响应触摸输入。"""
    OnDragDrop: Any
    """OnDragDrop事件在Outline进行拖放操作时触发。该事件处理程序允许开发人员在Outline进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在Outline进行拖动悬停时触发。该事件处理程序允许开发人员在Outline进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在Outline结束停靠时触发。该事件处理程序允许开发人员在Outline结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在Outline结束拖动操作时触发。该事件处理程序允许开发人员在Outline结束拖动操作时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在Outline开始停靠时触发。该事件处理程序允许开发人员在Outline开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在Outline开始拖动时触发。该事件处理程序允许开发人员在Outline开始拖动时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在Outline获得焦点时触发。该事件处理程序允许开发人员在Outline获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在Outline失去焦点时触发。该事件处理程序允许开发人员在Outline失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在Outline检测到手势时触发。该事件处理程序允许开发人员在Outline检测到手势时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在Outline检测到鼠标激活时触发。该事件处理程序允许开发人员在Outline检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在Outline检测到鼠标按下时触发。该事件处理程序允许开发人员在Outline检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在Outline检测到鼠标进入时触发。该事件处理程序允许开发人员在Outline检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在Outline检测到鼠标离开时触发。该事件处理程序允许开发人员在Outline检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在Outline检测到鼠标移动时触发。该事件处理程序允许开发人员在Outline检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在Outline检测到鼠标抬起时触发。该事件处理程序允许开发人员在Outline检测到鼠标抬起时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在Outline被双击时触发。该事件处理程序允许开发人员在Outline被双击时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在Outline检测到按键按下时触发。该事件处理程序允许开发人员在Outline检测到按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在Outline检测到按键按下并释放时触发。该事件处理程序允许开发人员在Outline检测到按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在Outline检测到按键释放时触发。该事件处理程序允许开发人员在Outline检测到按键释放时执行自定义操作。"""
    BorderStyle: Any
    """BorderStyle属性用于设置Outline的边框样式。该属性定义了Outline的边框样式。"""
    ItemSeparator: Any
    """ItemSeparator属性用于设置Outline中项目的分隔符。该属性定义了Outline中项目之间的分隔符。"""
    PicturePlus: Any
    """PicturePlus属性用于设置Outline中展开图标的图片。该属性定义了Outline中用于展开节点的图标。"""
    PictureMinus: Any
    """PictureMinus属性用于设置Outline中折叠图标的图片。该属性定义了Outline中用于折叠节点的图标。"""
    PictureOpen: Any
    """PictureOpen属性用于设置Outline中打开图标的图片。该属性定义了Outline中用于表示打开状态的图标。"""
    PictureClosed: Any
    """PictureClosed属性用于设置Outline中关闭图标的图片。该属性定义了Outline中用于表示关闭状态的图标。"""
    PictureLeaf: Any
    """PictureLeaf属性用于设置Outline中叶节点图标的图片。该属性定义了Outline中用于表示叶节点的图标。"""
    ParentFont: Any
    """ParentFont属性用于设置Outline是否继承父控件的字体。该属性定义了Outline是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置Outline是否继承父控件的提示信息显示设置。该属性定义了Outline是否使用与父控件相同的提示信息显示设置。"""
    ShowHint: Any
    """ShowHint属性用于设置Outline是否显示提示信息。该属性定义了Outline是否在鼠标悬停时显示提示信息。"""
    PopupMenu: Any
    """PopupMenu属性用于设置Outline的右键菜单。该属性定义了Outline右键点击时显示的上下文菜单。"""
    ScrollBars: Any
    """ScrollBars属性用于设置Outline的滚动条。该属性定义了Outline是否显示滚动条以及滚动条的样式。"""
    OnContextPopup: Any
    """OnContextPopup事件在Outline弹出右键菜单时触发。该事件处理程序允许开发人员在Outline弹出右键菜单时执行自定义操作。"""

class PageScroller(WinControl):
    """PageScroller类继承自WinControl，用于创建页面滚动器。该类提供了管理和操作页面滚动器的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建PageScroller类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def GetButtonState(self, *args, **kwargs) -> Any:
        """GetButtonState函数用于获取PageScroller按钮的状态（返回按钮的状态）。"""
    Align: Any
    """Align属性用于设置PageScroller的对齐方式。该属性定义了PageScroller在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置PageScroller的锚点。该属性定义了PageScroller在其父控件中的位置保持方式。"""
    AutoScroll: bool
    """AutoScroll属性用于设置PageScroller是否自动滚动。该属性定义了PageScroller是否在内容超出范围时自动滚动。"""
    BorderWidth: Any
    """BorderWidth属性用于设置PageScroller的边框宽度。该属性定义了PageScroller的边框宽度。"""
    ButtonSize: int
    """ButtonSize属性用于设置PageScroller按钮的大小。该属性定义了PageScroller中按钮的大小。"""
    Color: Any
    """Color属性用于设置PageScroller的背景颜色。该属性定义了PageScroller的背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置PageScroller的约束。该属性定义了PageScroller的最小和最大尺寸。"""
    Control: Any
    """Control属性用于获取或设置PageScroller的控件。该属性定义了PageScroller中包含的控件。"""
    DockSite: Any
    """DockSite属性用于设置PageScroller是否作为停靠站点。该属性定义了PageScroller是否可以停靠其他控件。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置PageScroller是否使用双缓冲。该属性定义了PageScroller是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置PageScroller拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置PageScroller的拖动类型。该属性定义了PageScroller的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置PageScroller的拖动模式。该属性定义了PageScroller是否可以被拖动以及拖动的方式。"""
    DragScroll: bool
    """DragScroll属性用于设置PageScroller是否在拖动时滚动。该属性定义了PageScroller在拖动操作时是否自动滚动。"""
    Enabled: Any
    """Enabled属性用于设置PageScroller是否可用。该属性定义了PageScroller是否可以响应用户交互。"""
    Font: Any
    """Font属性用于设置PageScroller的字体。该属性定义了PageScroller显示文本的字体样式。"""
    Margin: int
    """Margin属性用于设置PageScroller的边距。该属性定义了PageScroller的边距大小。"""
    Orientation: Any
    """Orientation属性用于设置PageScroller的方向。该属性定义了PageScroller的滚动方向（水平或垂直）。"""
    ParentBackground: Any
    """ParentBackground属性用于设置PageScroller是否继承父控件的背景。该属性定义了PageScroller是否使用与父控件相同的背景。"""
    ParentColor: Any
    """ParentColor属性用于设置PageScroller是否继承父控件的颜色。该属性定义了PageScroller是否使用与父控件相同的背景颜色。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置PageScroller是否继承父控件的双缓冲。该属性定义了PageScroller是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置PageScroller是否继承父控件的字体。该属性定义了PageScroller是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置PageScroller是否继承父控件的提示信息显示设置。该属性定义了PageScroller是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置PageScroller的右键菜单。该属性定义了PageScroller右键点击时显示的上下文菜单。"""
    Position: int
    """Position属性用于设置PageScroller的位置。该属性定义了PageScroller当前的位置。"""
    ShowHint: Any
    """ShowHint属性用于设置PageScroller是否显示提示信息。该属性定义了PageScroller是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置PageScroller的标签顺序。该属性定义了PageScroller在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置PageScroller是否为标签停靠点。该属性定义了PageScroller是否可以通过Tab键获得焦点。"""
    Visible: Any
    """Visible属性用于设置PageScroller是否可见。该属性定义了PageScroller是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置PageScroller的样式元素。该属性定义了PageScroller使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置PageScroller的样式名称。该属性定义了PageScroller使用的样式名称。"""
    OnClick: Any
    """OnClick事件在PageScroller被点击时触发。该事件处理程序允许开发人员在PageScroller被点击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在PageScroller弹出右键菜单时触发。该事件处理程序允许开发人员在PageScroller弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在PageScroller被双击时触发。该事件处理程序允许开发人员在PageScroller被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在PageScroller进行拖放操作时触发。该事件处理程序允许开发人员在PageScroller进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在PageScroller进行拖动悬停时触发。该事件处理程序允许开发人员在PageScroller进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在PageScroller结束停靠时触发。该事件处理程序允许开发人员在PageScroller结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在PageScroller结束拖动操作时触发。该事件处理程序允许开发人员在PageScroller结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在PageScroller获得焦点时触发。该事件处理程序允许开发人员在PageScroller获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在PageScroller失去焦点时触发。该事件处理程序允许开发人员在PageScroller失去焦点时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在PageScroller检测到按键按下时触发。该事件处理程序允许开发人员在PageScroller检测到按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在PageScroller检测到按键按下并释放时触发。该事件处理程序允许开发人员在PageScroller检测到按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在PageScroller检测到按键释放时触发。该事件处理程序允许开发人员在PageScroller检测到按键释放时执行自定义操作。"""
    OnMouseWheel: Any
    """OnMouseWheel事件在PageScroller检测到鼠标滚轮时触发。该事件处理程序允许开发人员在PageScroller检测到鼠标滚轮时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在PageScroller大小改变时触发。该事件处理程序允许开发人员在PageScroller大小改变时执行自定义操作。"""
    OnScroll: Any
    """OnScroll事件在PageScroller滚动时触发。该事件处理程序允许开发人员在PageScroller滚动时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在PageScroller开始停靠时触发。该事件处理程序允许开发人员在PageScroller开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在PageScroller开始拖动时触发。该事件处理程序允许开发人员在PageScroller开始拖动时执行自定义操作。"""

class PopupActionBar(PopupMenu):
    """PopupActionBar类继承自PopupMenu，用于创建弹出动作栏。该类提供了管理和操作弹出动作栏的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建PopupActionBar类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Popup(self, *args, **kwargs) -> Any:
        """Popup函数用于显示PopupActionBar的弹出菜单（返回弹出结果）。"""
    MenuActive: bool
    """MenuActive属性用于获取或设置PopupActionBar菜单的激活状态。该属性定义了PopupActionBar是否处于激活状态。"""
    PopupMenu: Any
    """PopupMenu属性用于设置PopupActionBar的右键菜单。该属性定义了PopupActionBar右键点击时显示的上下文菜单。"""
    Style: Any
    """Style属性用于获取或设置PopupActionBar的样式。该属性定义了PopupActionBar的显示样式。"""
    OnGetControlClass: Any
    """OnGetControlClass事件在PopupActionBar获取控件类时触发。该事件处理程序允许开发人员在PopupActionBar获取控件类时执行自定义操作。"""

class ProgressBar(WinControl):
    """ProgressBar类继承自WinControl，用于创建进度条控件。该类提供了管理和操作进度条的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ProgressBar类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def StepIt(self, *args, **kwargs) -> Any:
        """StepIt函数用于使ProgressBar前进一步（返回操作结果）。"""
    def StepBy(self, *args, **kwargs) -> Any:
        """StepBy函数用于使ProgressBar前进指定的步数（返回操作结果）。"""
    Align: Any
    """Align属性用于设置ProgressBar的对齐方式。该属性定义了ProgressBar在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置ProgressBar的锚点。该属性定义了ProgressBar在其父控件中的位置保持方式。"""
    BorderWidth: Any
    """BorderWidth属性用于设置ProgressBar的边框宽度。该属性定义了ProgressBar的边框宽度。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置ProgressBar是否使用双缓冲。该属性定义了ProgressBar是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置ProgressBar拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置ProgressBar的拖动类型。该属性定义了ProgressBar的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置ProgressBar的拖动模式。该属性定义了ProgressBar是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置ProgressBar是否可用。该属性定义了ProgressBar是否可以响应用户交互。"""
    Hint: Any
    """Hint属性用于设置ProgressBar的提示信息。该属性定义了当鼠标悬停在ProgressBar上时显示的提示信息。"""
    Constraints: Any
    """Constraints属性用于设置ProgressBar的约束。该属性定义了ProgressBar的最小和最大尺寸。"""
    Min: int
    """Min属性用于设置ProgressBar的最小值。该属性定义了ProgressBar的最小进度值。"""
    Max: int
    """Max属性用于设置ProgressBar的最大值。该属性定义了ProgressBar的最大进度值。"""
    Orientation: Any
    """Orientation属性用于设置ProgressBar的方向。该属性定义了ProgressBar的进度条方向（水平或垂直）。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置ProgressBar是否继承父控件的双缓冲。该属性定义了ProgressBar是否使用与父控件相同的双缓冲技术。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置ProgressBar是否继承父控件的提示信息显示设置。该属性定义了ProgressBar是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置ProgressBar的右键菜单。该属性定义了ProgressBar右键点击时显示的上下文菜单。"""
    Position: int
    """Position属性用于设置ProgressBar的当前位置。该属性定义了ProgressBar的当前进度值。"""
    Smooth: bool
    """Smooth属性用于设置ProgressBar是否使用平滑模式。该属性定义了ProgressBar是否以平滑方式显示进度。"""
    Style: Any
    """Style属性用于获取或设置ProgressBar的样式。该属性定义了ProgressBar的显示样式。"""
    MarqueeInterval: int
    """MarqueeInterval属性用于设置ProgressBar的跑马灯间隔时间。该属性定义了ProgressBar的跑马灯模式的刷新间隔时间。"""
    BarColor: Any
    """BarColor属性用于设置ProgressBar的进度条颜色。该属性定义了ProgressBar的进度条显示颜色。"""
    BackgroundColor: Any
    """BackgroundColor属性用于设置ProgressBar的背景颜色。该属性定义了ProgressBar的背景显示颜色。"""
    SmoothReverse: bool
    """SmoothReverse属性用于设置ProgressBar是否使用平滑反向模式。该属性定义了ProgressBar是否以平滑方式反向显示进度。"""
    Step: int
    """Step属性用于设置ProgressBar的步长。该属性定义了ProgressBar每次前进的步长值。"""
    State: Any
    """State属性用于设置ProgressBar的状态。该属性定义了ProgressBar的当前状态。"""
    ShowHint: Any
    """ShowHint属性用于设置ProgressBar是否显示提示信息。该属性定义了ProgressBar是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置ProgressBar的标签顺序。该属性定义了ProgressBar在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置ProgressBar是否为标签停靠点。该属性定义了ProgressBar是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置ProgressBar的触摸相关属性。该属性定义了ProgressBar如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置ProgressBar是否可见。该属性定义了ProgressBar是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置ProgressBar的样式元素。该属性定义了ProgressBar使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置ProgressBar的样式名称。该属性定义了ProgressBar使用的样式名称。"""
    OnChange: Any
    """OnChange事件在ProgressBar的进度发生变化时触发。该事件处理程序允许开发人员在ProgressBar的进度发生变化时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在ProgressBar弹出右键菜单时触发。该事件处理程序允许开发人员在ProgressBar弹出右键菜单时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在ProgressBar进行拖放操作时触发。该事件处理程序允许开发人员在ProgressBar进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在ProgressBar进行拖动悬停时触发。该事件处理程序允许开发人员在ProgressBar进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在ProgressBar结束停靠时触发。该事件处理程序允许开发人员在ProgressBar结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在ProgressBar结束拖动操作时触发。该事件处理程序允许开发人员在ProgressBar结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在ProgressBar获得焦点时触发。该事件处理程序允许开发人员在ProgressBar获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在ProgressBar失去焦点时触发。该事件处理程序允许开发人员在ProgressBar失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在ProgressBar检测到手势时触发。该事件处理程序允许开发人员在ProgressBar检测到手势时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在ProgressBar检测到鼠标激活时触发。该事件处理程序允许开发人员在ProgressBar检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在ProgressBar检测到鼠标按下时触发。该事件处理程序允许开发人员在ProgressBar检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在ProgressBar检测到鼠标进入时触发。该事件处理程序允许开发人员在ProgressBar检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在ProgressBar检测到鼠标离开时触发。该事件处理程序允许开发人员在ProgressBar检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在ProgressBar检测到鼠标移动时触发。该事件处理程序允许开发人员在ProgressBar检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在ProgressBar检测到鼠标抬起时触发。该事件处理程序允许开发人员在ProgressBar检测到鼠标抬起时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在ProgressBar开始停靠时触发。该事件处理程序允许开发人员在ProgressBar开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在ProgressBar开始拖动时触发。该事件处理程序允许开发人员在ProgressBar开始拖动时执行自定义操作。"""

class ScrollBox(ScrollingWinControl):
    """ScrollBox类继承自ScrollingWinControl，用于创建可滚动的控件容器。该类提供了管理和操作滚动框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ScrollBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    Align: Any
    """Align属性用于设置ScrollBox的对齐方式。该属性定义了ScrollBox在其父控件中的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置ScrollBox的锚点。该属性定义了ScrollBox在其父控件中的位置保持方式。"""
    AutoScroll: Any
    """AutoScroll属性用于设置ScrollBox是否自动滚动。该属性定义了ScrollBox在内容超出范围时是否自动滚动。"""
    AutoSize: Any
    """AutoSize属性用于设置ScrollBox是否自动调整大小。该属性定义了ScrollBox是否根据内容自动调整自身大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置ScrollBox的斜边样式。该属性定义了ScrollBox的斜边样式。"""
    BevelInner: Any
    """BevelInner属性用于设置ScrollBox的内斜边样式。该属性定义了ScrollBox的内斜边样式。"""
    BevelOuter: Any
    """BevelOuter属性用于设置ScrollBox的外斜边样式。该属性定义了ScrollBox的外斜边样式。"""
    BevelKind: Any
    """BevelKind属性用于设置ScrollBox的斜边类型。该属性定义了ScrollBox的斜边类型。"""
    BevelWidth: Any
    """BevelWidth属性用于设置ScrollBox的斜边宽度。该属性定义了ScrollBox的斜边宽度。"""
    BiDiMode: Any
    """BiDiMode属性用于设置ScrollBox的文本方向。该属性定义了ScrollBox的文本方向（从左到右或从右到左）。"""
    BorderStyle: Any
    """BorderStyle属性用于设置ScrollBox的边框样式。该属性定义了ScrollBox的边框样式。"""
    Constraints: Any
    """Constraints属性用于设置ScrollBox的约束。该属性定义了ScrollBox的最小和最大尺寸。"""
    DockSite: Any
    """DockSite属性用于设置ScrollBox是否作为停靠站点。该属性定义了ScrollBox是否可以停靠其他控件。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置ScrollBox是否使用双缓冲。该属性定义了ScrollBox是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置ScrollBox拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置ScrollBox的拖动类型。该属性定义了ScrollBox的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置ScrollBox的拖动模式。该属性定义了ScrollBox是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置ScrollBox是否可用。该属性定义了ScrollBox是否可以响应用户交互。"""
    Color: Any
    """Color属性用于设置ScrollBox的背景颜色。该属性定义了ScrollBox的背景颜色。"""
    Ctl3D: Any
    """Ctl3D属性用于设置ScrollBox的三维边框效果。该属性定义了ScrollBox的三维边框样式。"""
    Font: Any
    """Font属性用于设置ScrollBox的字体。该属性定义了ScrollBox显示文本的字体样式。"""
    Padding: Any
    """Padding属性用于设置ScrollBox的内边距。该属性定义了ScrollBox内容与边框之间的距离。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置ScrollBox是否继承父控件的文本方向。该属性定义了ScrollBox是否使用与父控件相同的文本方向。"""
    ParentBackground: Any
    """ParentBackground属性用于设置ScrollBox是否继承父控件的背景。该属性定义了ScrollBox是否使用与父控件相同的背景。"""
    ParentColor: Any
    """ParentColor属性用于设置ScrollBox是否继承父控件的颜色。该属性定义了ScrollBox是否使用与父控件相同的背景颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置ScrollBox是否继承父控件的三维边框效果。该属性定义了ScrollBox是否使用与父控件相同的三维边框。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置ScrollBox是否继承父控件的双缓冲。该属性定义了ScrollBox是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置ScrollBox是否继承父控件的字体。该属性定义了ScrollBox是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置ScrollBox是否继承父控件的提示信息显示设置。该属性定义了ScrollBox是否使用与父控件相同的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置ScrollBox的右键菜单。该属性定义了ScrollBox右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置ScrollBox是否显示提示信息。该属性定义了ScrollBox是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置ScrollBox的标签顺序。该属性定义了ScrollBox在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置ScrollBox是否为标签停靠点。该属性定义了ScrollBox是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置ScrollBox的触摸相关属性。该属性定义了ScrollBox如何响应触摸输入。"""
    Visible: Any
    """Visible属性用于设置ScrollBox是否可见。该属性定义了ScrollBox是否在界面上显示。"""
    StyleElements: Any
    """StyleElements属性用于设置ScrollBox的样式元素。该属性定义了ScrollBox使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置ScrollBox的样式名称。该属性定义了ScrollBox使用的样式名称。"""
    OnCanResize: Any
    """OnCanResize事件在ScrollBox大小可以调整时触发。该事件处理程序允许开发人员在ScrollBox大小可以调整时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在ScrollBox被点击时触发。该事件处理程序允许开发人员在ScrollBox被点击时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在ScrollBox约束大小调整时触发。该事件处理程序允许开发人员在ScrollBox约束大小调整时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在ScrollBox弹出右键菜单时触发。该事件处理程序允许开发人员在ScrollBox弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在ScrollBox被双击时触发。该事件处理程序允许开发人员在ScrollBox被双击时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在ScrollBox进行停靠操作时触发。该事件处理程序允许开发人员在ScrollBox进行停靠操作时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在ScrollBox进行停靠悬停时触发。该事件处理程序允许开发人员在ScrollBox进行停靠悬停时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在ScrollBox进行拖放操作时触发。该事件处理程序允许开发人员在ScrollBox进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在ScrollBox进行拖动悬停时触发。该事件处理程序允许开发人员在ScrollBox进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在ScrollBox结束停靠时触发。该事件处理程序允许开发人员在ScrollBox结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在ScrollBox结束拖动操作时触发。该事件处理程序允许开发人员在ScrollBox结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在ScrollBox获得焦点时触发。该事件处理程序允许开发人员在ScrollBox获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在ScrollBox失去焦点时触发。该事件处理程序允许开发人员在ScrollBox失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在ScrollBox检测到手势时触发。该事件处理程序允许开发人员在ScrollBox检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在ScrollBox获取站点信息时触发。该事件处理程序允许开发人员在ScrollBox获取站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在ScrollBox检测到鼠标激活时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在ScrollBox检测到鼠标按下时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在ScrollBox检测到鼠标进入时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标进入时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在ScrollBox检测到鼠标离开时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标离开时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在ScrollBox检测到鼠标移动时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在ScrollBox检测到鼠标抬起时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标抬起时执行自定义操作。"""
    OnMouseWheel: Any
    """OnMouseWheel事件在ScrollBox检测到鼠标滚轮时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标滚轮时执行自定义操作。"""
    OnMouseWheelDown: Any
    """OnMouseWheelDown事件在ScrollBox检测到鼠标滚轮向下时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标滚轮向下时执行自定义操作。"""
    OnMouseWheelUp: Any
    """OnMouseWheelUp事件在ScrollBox检测到鼠标滚轮向上时触发。该事件处理程序允许开发人员在ScrollBox检测到鼠标滚轮向上时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在ScrollBox大小改变时触发。该事件处理程序允许开发人员在ScrollBox大小改变时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在ScrollBox开始停靠时触发。该事件处理程序允许开发人员在ScrollBox开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在ScrollBox开始拖动时触发。该事件处理程序允许开发人员在ScrollBox开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在ScrollBox解除停靠时触发。该事件处理程序允许开发人员在ScrollBox解除停靠时执行自定义操作。"""

class SearchBox(Edit):
    """SearchBox类继承自Edit，用于创建搜索框控件。该类提供了管理和操作搜索框的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建SearchBox类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁SearchBox类的实例并释放相关资源，包括可变数量的位置和关键字参数。"""
    ButtonWidth: int
    """ButtonWidth属性用于获取或设置SearchBox的按钮宽度。该属性定义了按钮的宽度。"""
    SearchIndicator: Any
    """SearchIndicator属性用于获取或设置SearchBox的搜索指示器。该属性定义了搜索指示器的显示内容。"""
    OnInvokeSearch: Any
    """OnInvokeSearch属性用于获取或设置SearchBox的搜索调用事件。该属性定义了在搜索时触发的事件。"""

class ShellResources(Component):
    """ShellResources类用于管理Shell相关的资源。"""

class CustomSplitView(CustomPanel):
    """一个继承自 CustomPanel 的自定义拆分视图面板。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomSplitView类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Open(self, *args, **kwargs) -> Any:
        """Open函数用于打开CustomSplitView实例。"""
    def Close(self, *args, **kwargs) -> Any:
        """Close函数用于关闭CustomSplitView实例。"""
    DockManager: Any
    """DockManager属性用于获取或设置CustomSplitView的停靠管理器。"""

class SplitView(CustomSplitView):
    """SplitView类继承自CustomSplitView，用于创建拆分视图控件。该类提供了管理和操作拆分视图的方法和属性。"""
    AnimationDelay: Any
    """AnimationDelay属性用于设置拆分视图打开和关闭时动画的延迟时间。该属性定义了动画在开始前的等待时间，以毫秒为单位。"""
    AnimationStep: Any
    """AnimationStep属性用于设置拆分视图打开和关闭时动画的步长。该属性定义了动画每一步的变化量，以像素为单位。"""
    BevelEdges: Any
    """BevelEdges属性用于设置拆分视图的斜边。该属性定义了拆分视图的四个边角是否显示斜边效果。"""
    BevelInner: Any
    """BevelInner属性用于设置拆分视图的内斜边。该属性定义了拆分视图内部边框的斜边样式。"""
    BevelKind: Any
    """BevelKind属性用于设置拆分视图的斜边类型。该属性定义了斜边的样式，例如凸起或凹陷。"""
    BevelOuter: Any
    """BevelOuter属性用于设置拆分视图的外斜边。该属性定义了拆分视图外部边框的斜边样式。"""
    BevelWidth: Any
    """BevelWidth属性用于设置拆分视图斜边的宽度。该属性定义了斜边的厚度，以像素为单位。"""
    BiDiMode: Any
    """BiDiMode属性用于设置拆分视图的双向文本模式。该属性定义了文本的显示方向，例如从左到右或从右到左。"""
    BorderWidth: Any
    """BorderWidth属性用于设置拆分视图的边框宽度。该属性定义了边框的厚度，以像素为单位。"""
    BorderStyle: Any
    """BorderStyle属性用于设置拆分视图的边框样式。该属性定义了边框的外观，例如实线或虚线。"""
    CloseStyle: Any
    """CloseStyle属性用于设置拆分视图的关闭样式。该属性定义了拆分视图关闭时的动画和效果。"""
    Color: Any
    """Color属性用于设置拆分视图的背景颜色。该属性定义了拆分视图的填充颜色。"""
    CompactWidth: Any
    """CompactWidth属性用于设置拆分视图的紧凑宽度。该属性定义了拆分视图在紧凑模式下的宽度，以像素为单位。"""
    Constraints: Any
    """Constraints属性用于设置拆分视图的约束条件。该属性定义了拆分视图的最小和最大尺寸。"""
    DisplayMode: Any
    """DisplayMode属性用于设置拆分视图的显示模式。该属性定义了拆分视图是始终显示、自动隐藏还是根据需要显示。"""
    UseDockManager: Any
    """UseDockManager属性用于设置是否使用停靠管理器。该属性定义了拆分视图是否允许其他控件停靠。"""
    DockSite: Any
    """DockSite属性用于设置拆分视图是否作为停靠站点。该属性定义了拆分视图是否可以停靠其他控件。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置拆分视图是否使用双缓冲。该属性定义了拆分视图是否使用双缓冲技术来减少闪烁。"""
    DragCursor: Any
    """DragCursor属性用于设置拆分视图拖动时的光标。该属性定义了在拖动操作中显示的光标样式。"""
    DragKind: Any
    """DragKind属性用于设置拆分视图的拖动类型。该属性定义了拆分视图的拖动类型，例如拖动窗口或拖动控件。"""
    DragMode: Any
    """DragMode属性用于设置拆分视图的拖动模式。该属性定义了拆分视图是否可以被拖动以及拖动的方式。"""
    Enabled: Any
    """Enabled属性用于设置拆分视图是否可用。该属性定义了拆分视图是否可以响应用户交互。"""
    FullRepaint: Any
    """FullRepaint属性用于设置拆分视图是否完全重绘。该属性定义了在尺寸变化时是否重绘整个视图。"""
    Font: Any
    """Font属性用于设置拆分视图的字体。该属性定义了拆分视图显示文本的字体样式。"""
    Locked: Any
    """Locked属性用于设置拆分视图是否锁定。该属性定义了拆分视图是否可以被移动或调整大小。"""
    Opened: Any
    """Opened属性用于获取拆分视图的打开状态。该属性定义了拆分视图当前是否处于打开状态。"""
    OpenedWidth: Any
    """OpenedWidth属性用于设置拆分视图在打开状态下的宽度。该属性定义了拆分视图在打开时的宽度，以像素为单位。"""
    Padding: Any
    """Padding属性用于设置拆分视图的内边距。该属性定义了内容与拆分视图边框之间的距离。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置拆分视图是否继承父控件的双向文本模式。该属性定义了拆分视图是否使用与父控件相同的文本方向。"""
    ParentBackground: Any
    """ParentBackground属性用于设置拆分视图是否继承父控件的背景。该属性定义了拆分视图是否使用与父控件相同的背景颜色。"""
    ParentColor: Any
    """ParentColor属性用于设置拆分视图是否继承父控件的颜色。该属性定义了拆分视图是否使用与父控件相同的背景颜色。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置拆分视图是否继承父控件的双缓冲。该属性定义了拆分视图是否使用与父控件相同的双缓冲技术。"""
    ParentFont: Any
    """ParentFont属性用于设置拆分视图是否继承父控件的字体。该属性定义了拆分视图是否使用与父控件相同的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置拆分视图是否继承父控件的提示信息显示设置。该属性定义了拆分视图是否使用与父控件相同的提示信息显示设置。"""
    Placement: Any
    """Placement属性用于设置拆分视图的位置。该属性定义了拆分视图在父控件中的位置和对齐方式。"""
    PopupMenu: Any
    """PopupMenu属性用于设置拆分视图的右键菜单。该属性定义了拆分视图右键点击时显示的上下文菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置拆分视图是否显示提示信息。该属性定义了拆分视图是否在鼠标悬停时显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置拆分视图的标签顺序。该属性定义了拆分视图在Tab键循环中的位置。"""
    TabStop: Any
    """TabStop属性用于设置拆分视图是否为标签停靠点。该属性定义了拆分视图是否可以通过Tab键获得焦点。"""
    Touch: Any
    """Touch属性用于设置拆分视图的触摸操作。该属性定义了拆分视图是否支持触摸输入。"""
    UseAnimation: Any
    """UseAnimation属性用于设置拆分视图是否使用动画效果。该属性定义了拆分视图在打开和关闭时是否显示动画。"""
    Visible: Any
    """Visible属性用于设置拆分视图是否可见。该属性定义了拆分视图是否在界面上显示。"""
    Width: Any
    """Width属性用于设置拆分视图的宽度。该属性定义了拆分视图的当前宽度，以像素为单位。"""
    StyleElements: Any
    """StyleElements属性用于设置拆分视图的样式元素。该属性定义了拆分视图使用哪些样式元素进行绘制。"""
    StyleName: Any
    """StyleName属性用于设置拆分视图的样式名称。该属性定义了拆分视图使用的样式名称。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在拆分视图对齐前触发。该事件处理程序允许开发人员在拆分视图对齐前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在拆分视图对齐时触发。该事件处理程序允许开发人员在拆分视图对齐时执行自定义操作。"""
    OnCanResize: Any
    """OnCanResize事件在拆分视图调整大小前触发。该事件处理程序允许开发人员在拆分视图调整大小前执行自定义操作。"""
    OnClick: Any
    """OnClick事件在拆分视图被点击时触发。该事件处理程序允许开发人员在拆分视图被点击时执行自定义操作。"""
    OnClosed: Any
    """OnClosed事件在拆分视图关闭后触发。该事件处理程序允许开发人员在拆分视图关闭后执行自定义操作。"""
    OnClosing: Any
    """OnClosing事件在拆分视图关闭前触发。该事件处理程序允许开发人员在拆分视图关闭前执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在拆分视图受限调整大小时触发。该事件处理程序允许开发人员在拆分视图受限调整大小时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在拆分视图弹出右键菜单时触发。该事件处理程序允许开发人员在拆分视图弹出右键菜单时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在拆分视图停靠控件时触发。该事件处理程序允许开发人员在拆分视图停靠控件时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在拆分视图上方拖动停靠控件时触发。该事件处理程序允许开发人员在拆分视图上方拖动停靠控件时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在拆分视图被双击时触发。该事件处理程序允许开发人员在拆分视图被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在拆分视图进行拖放操作时触发。该事件处理程序允许开发人员在拆分视图进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在拆分视图进行拖动悬停时触发。该事件处理程序允许开发人员在拆分视图进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在拆分视图结束停靠时触发。该事件处理程序允许开发人员在拆分视图结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在拆分视图结束拖动操作时触发。该事件处理程序允许开发人员在拆分视图结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在拆分视图获得焦点时触发。该事件处理程序允许开发人员在拆分视图获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在拆分视图失去焦点时触发。该事件处理程序允许开发人员在拆分视图失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在拆分视图检测到手势时触发。该事件处理程序允许开发人员在拆分视图检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在拆分视图获取站点信息时触发。该事件处理程序允许开发人员在拆分视图获取站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在拆分视图鼠标激活时触发。该事件处理程序允许开发人员在拆分视图鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在拆分视图检测到鼠标按下时触发。该事件处理程序允许开发人员在拆分视图检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在鼠标进入拆分视图时触发。该事件处理程序允许开发人员在鼠标进入拆分视图时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在鼠标离开拆分视图时触发。该事件处理程序允许开发人员在鼠标离开拆分视图时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在拆分视图检测到鼠标移动时触发。该事件处理程序允许开发人员在拆分视图检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在拆分视图检测到鼠标释放时触发。该事件处理程序允许开发人员在拆分视图检测到鼠标释放时执行自定义操作。"""
    OnOpened: Any
    """OnOpened事件在拆分视图完全打开时触发。该事件处理程序允许开发人员在拆分视图完全打开时执行自定义操作。"""
    OnOpening: Any
    """OnOpening事件在拆分视图开始打开时触发。该事件处理程序允许开发人员在拆分视图开始打开时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在拆分视图大小改变时触发。该事件处理程序允许开发人员在拆分视图大小改变时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在拆分视图开始停靠时触发。该事件处理程序允许开发人员在拆分视图开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在拆分视图开始拖动时触发。该事件处理程序允许开发人员在拆分视图开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在拆分视图取消停靠时触发。该事件处理程序允许开发人员在拆分视图取消停靠时执行自定义操作。"""

class CustomStackPanel(CustomPanel):
    """CustomStackPanel类继承自CustomPanel，用于创建自定义堆栈面板。该类提供了管理和操作自定义堆栈面板的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomStackPanel类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomStackPanel类的实例并释放其资源（返回销毁操作的结果）。"""
    def GetChildren(self, *args, **kwargs) -> Any:
        """GetChildren函数用于获取CustomStackPanel的子控件（返回子控件）。"""
    ControlCollection: Any
    """ControlCollection属性用于管理CustomStackPanel的控件集合。"""
    ControlHorizontalPositioning: Any
    """ControlHorizontalPositioning属性用于设置CustomStackPanel控件的水平定位方式。"""
    ControlIndexAControl: Any
    """ControlIndexAControl属性用于获取或设置CustomStackPanel控件的索引。"""
    ControlVerticalPositioning: Any
    """ControlVerticalPositioning属性用于设置CustomStackPanel控件的垂直定位方式。"""
    HorizontalPositioning: Any
    """HorizontalPositioning属性用于设置CustomStackPanel的水平定位方式。"""
    Orientation: Any
    """Orientation属性用于设置CustomStackPanel的方向。"""
    Spacing: int
    """Spacing属性用于设置CustomStackPanel的间距。"""
    VerticalPositioning: Any
    """VerticalPositioning属性用于设置CustomStackPanel的垂直定位方式。"""

class StackPanel(CustomStackPanel):
    """StackPanel类继承自CustomStackPanel，用于创建堆栈面板。该类提供了管理和操作堆栈面板的方法和属性。"""
    Align: Any
    """Align属性用于设置StackPanel的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置StackPanel的锚点。"""
    AutoSize: Any
    """AutoSize属性用于设置StackPanel是否自动调整大小。"""
    BevelEdges: Any
    """BevelEdges属性用于设置StackPanel的斜边。"""
    BevelInner: Any
    """BevelInner属性用于设置StackPanel的内斜边。"""
    BevelKind: Any
    """BevelKind属性用于设置StackPanel的斜边类型。"""
    BevelOuter: Any
    """BevelOuter属性用于设置StackPanel的外斜边。"""
    BevelWidth: Any
    """BevelWidth属性用于设置StackPanel的斜边宽度。"""
    BiDiMode: Any
    """BiDiMode属性用于设置StackPanel的双向文本模式。"""
    BorderStyle: Any
    """BorderStyle属性用于设置StackPanel的边框样式。"""
    BorderWidth: Any
    """BorderWidth属性用于设置StackPanel的边框宽度。"""
    Color: Any
    """Color属性用于设置StackPanel的背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置StackPanel的约束条件。"""
    ControlCollection: Any
    """ControlCollection属性用于管理StackPanel的控件集合。"""
    Ctl3D: Any
    """Ctl3D属性用于设置StackPanel的3D效果。"""
    DockSite: Any
    """DockSite属性用于设置StackPanel是否作为停靠站点。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置StackPanel是否使用双缓冲。"""
    DragCursor: Any
    """DragCursor属性用于设置StackPanel拖动时的光标。"""
    DragKind: Any
    """DragKind属性用于设置StackPanel的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置StackPanel的拖动模式。"""
    Enabled: Any
    """Enabled属性用于设置StackPanel是否可用。"""
    Font: Any
    """Font属性用于设置StackPanel的字体。"""
    FullRepaint: Any
    """FullRepaint属性用于设置StackPanel是否完全重绘。"""
    Height: Any
    """Height属性用于设置StackPanel的高度。"""
    HorizontalPositioning: Any
    """HorizontalPositioning属性用于设置StackPanel的水平定位方式。"""
    Locked: Any
    """Locked属性用于设置StackPanel是否锁定。"""
    Orientation: Any
    """Orientation属性用于设置StackPanel的方向。"""
    Padding: Any
    """Padding属性用于设置StackPanel的内边距。"""
    ParentBackground: Any
    """ParentBackground属性用于设置StackPanel是否继承父控件的背景。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置StackPanel是否继承父控件的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置StackPanel是否继承父控件的颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置StackPanel是否继承父控件的3D效果。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置StackPanel是否继承父控件的双缓冲。"""
    ParentFont: Any
    """ParentFont属性用于设置StackPanel是否继承父控件的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置StackPanel是否继承父控件的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置StackPanel的右键菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置StackPanel是否显示提示信息。"""
    Spacing: Any
    """Spacing属性用于设置StackPanel的间距。"""
    StyleElements: Any
    """StyleElements属性用于设置StackPanel的样式元素。"""
    StyleName: Any
    """StyleName属性用于设置StackPanel的样式名称。"""
    TabOrder: Any
    """TabOrder属性用于设置StackPanel的标签顺序。"""
    TabStop: Any
    """TabStop属性用于设置StackPanel是否为标签停靠点。"""
    Touch: Any
    """Touch属性用于设置StackPanel的触摸操作。"""
    UseDockManager: Any
    """UseDockManager属性用于设置是否使用停靠管理器。"""
    VerticalPositioning: Any
    """VerticalPositioning属性用于设置StackPanel的垂直定位方式。"""
    Visible: Any
    """Visible属性用于设置StackPanel是否可见。"""
    Width: Any
    """Width属性用于设置StackPanel的宽度。"""
    OnAlignInsertBefore: Any
    """OnAlignInsertBefore事件在对齐前触发。该事件处理程序允许开发人员在控件对齐前执行自定义操作。"""
    OnAlignPosition: Any
    """OnAlignPosition事件在对齐时触发。该事件处理程序允许开发人员在控件对齐时执行自定义操作。"""
    OnCanResize: Any
    """OnCanResize事件在调整大小前触发。该事件处理程序允许开发人员在控件调整大小前执行自定义操作。"""
    OnClick: Any
    """OnClick事件在控件被点击时触发。该事件处理程序允许开发人员在控件被点击时执行自定义操作。"""
    OnConstrainedResize: Any
    """OnConstrainedResize事件在受限调整大小时触发。该事件处理程序允许开发人员在控件受限调整大小时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在弹出右键菜单时触发。该事件处理程序允许开发人员在控件弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在控件被双击时触发。该事件处理程序允许开发人员在控件被双击时执行自定义操作。"""
    OnDockDrop: Any
    """OnDockDrop事件在停靠控件时触发。该事件处理程序允许开发人员在控件停靠时执行自定义操作。"""
    OnDockOver: Any
    """OnDockOver事件在控件上方拖动停靠控件时触发。该事件处理程序允许开发人员在控件上方拖动停靠控件时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在进行拖放操作时触发。该事件处理程序允许开发人员在控件进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在进行拖动悬停时触发。该事件处理程序允许开发人员在控件进行拖动悬停时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在结束停靠时触发。该事件处理程序允许开发人员在控件结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在结束拖动操作时触发。该事件处理程序允许开发人员在控件结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在控件获得焦点时触发。该事件处理程序允许开发人员在控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在控件失去焦点时触发。该事件处理程序允许开发人员在控件失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在控件检测到手势时触发。该事件处理程序允许开发人员在控件检测到手势时执行自定义操作。"""
    OnGetSiteInfo: Any
    """OnGetSiteInfo事件在获取站点信息时触发。该事件处理程序允许开发人员在控件获取站点信息时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在控件鼠标激活时触发。该事件处理程序允许开发人员在控件鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在控件检测到鼠标按下时触发。该事件处理程序允许开发人员在控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在鼠标进入控件时触发。该事件处理程序允许开发人员在鼠标进入控件时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在鼠标离开控件时触发。该事件处理程序允许开发人员在鼠标离开控件时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在控件检测到鼠标移动时触发。该事件处理程序允许开发人员在控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在控件检测到鼠标释放时触发。该事件处理程序允许开发人员在控件检测到鼠标释放时执行自定义操作。"""
    OnResize: Any
    """OnResize事件在控件大小改变时触发。该事件处理程序允许开发人员在控件大小改变时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在开始停靠时触发。该事件处理程序允许开发人员在控件开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在控件开始拖动时触发。该事件处理程序允许开发人员在控件开始拖动时执行自定义操作。"""
    OnUnDock: Any
    """OnUnDock事件在控件取消停靠时触发。该事件处理程序允许开发人员在控件取消停靠时执行自定义操作。"""

class TabbedNotebook(CustomTabControl):
    """TabbedNotebook类继承自CustomTabControl，用于创建带标签的笔记本控件。该类提供了管理和操作带标签笔记本的方法和属性。"""
    def CMTabFontChanged(self, *args, **kwargs) -> Any:
        """CMTabFontChanged函数在标签字体改变时触发（返回操作结果）。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建TabbedNotebook类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁TabbedNotebook类的实例并释放其资源（返回销毁操作的结果）。"""
    def GetChildren(self, *args, **kwargs) -> Any:
        """GetChildren函数用于获取TabbedNotebook的子控件（返回子控件）。"""
    def GetIndexForPage(self, *args, **kwargs) -> int:
        """GetIndexForPage函数用于获取指定页面的索引（返回页面索引）。"""
    TopFont: Any
    """TopFont属性用于设置TabbedNotebook顶部的字体样式。"""
    def TabFontChanged(self, *args, **kwargs) -> Any:
        """TabFontChanged函数在标签字体改变时触发（返回操作结果）。"""
    ActivePage: str
    """ActivePage属性用于获取或设置TabbedNotebook的当前活动页面。"""
    Align: Any
    """Align属性用于设置TabbedNotebook的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置TabbedNotebook的锚点。"""
    Constraints: Any
    """Constraints属性用于设置TabbedNotebook的约束条件。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置TabbedNotebook是否使用双缓冲。"""
    Enabled: Any
    """Enabled属性用于设置TabbedNotebook是否可用。"""
    PageIndex: int
    """PageIndex属性用于获取或设置TabbedNotebook的当前页面索引。"""
    Pages: Any
    """Pages属性用于管理TabbedNotebook的页面集合。"""
    Font: Any
    """Font属性用于设置TabbedNotebook的字体。"""
    TabsPerRow: int
    """TabsPerRow属性用于设置TabbedNotebook每行显示的标签数。"""
    TabFont: Any
    """TabFont属性用于设置TabbedNotebook标签的字体。"""
    Touch: Any
    """Touch属性用于设置TabbedNotebook的触摸操作。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置TabbedNotebook是否继承父控件的双缓冲。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置TabbedNotebook是否继承父控件的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置TabbedNotebook的右键菜单。"""
    ShowHint: Any
    """ShowHint属性用于设置TabbedNotebook是否显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置TabbedNotebook的标签顺序。"""
    TabStop: Any
    """TabStop属性用于设置TabbedNotebook是否为标签停靠点。"""
    Visible: Any
    """Visible属性用于设置TabbedNotebook是否可见。"""
    StyleElements: Any
    """StyleElements属性用于设置TabbedNotebook的样式元素。"""
    StyleName: Any
    """StyleName属性用于设置TabbedNotebook的样式名称。"""
    OnClick: Any
    """OnClick事件在TabbedNotebook被点击时触发。该事件处理程序允许开发人员在TabbedNotebook被点击时执行自定义操作。"""
    OnChange: Any
    """OnChange事件在TabbedNotebook内容改变时触发。该事件处理程序允许开发人员在TabbedNotebook内容改变时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在TabbedNotebook弹出右键菜单时触发。该事件处理程序允许开发人员在TabbedNotebook弹出右键菜单时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在TabbedNotebook获得焦点时触发。该事件处理程序允许开发人员在TabbedNotebook获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在TabbedNotebook失去焦点时触发。该事件处理程序允许开发人员在TabbedNotebook失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在TabbedNotebook检测到手势时触发。该事件处理程序允许开发人员在TabbedNotebook检测到手势时执行自定义操作。"""

class CustomTaskbar(TaskbarBase):
    """CustomTaskbar类继承自TaskbarBase，用于创建自定义任务栏。该类提供了管理和操作自定义任务栏的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomTaskbar类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomTaskbar类的实例并释放其资源（返回销毁操作的结果）。"""
    def Initialize(self, *args, **kwargs) -> Any:
        """Initialize函数用于初始化CustomTaskbar类的实例（返回初始化操作的结果）。"""
    def DoThumbButtonNotify(self, *args, **kwargs) -> Any:
        """DoThumbButtonNotify函数在任务栏缩略按钮通知时触发（返回通知操作的结果）。"""
    def DoThumbPreviewRequest(self, *args, **kwargs) -> Any:
        """DoThumbPreviewRequest函数在任务栏缩略图预览请求时触发（返回请求操作的结果）。"""
    def DoWindowPreviewRequest(self, *args, **kwargs) -> Any:
        """DoWindowPreviewRequest函数在窗口预览请求时触发（返回请求操作的结果）。"""
    def UnregisterTab(self, *args, **kwargs) -> Any:
        """UnregisterTab函数用于取消注册任务栏标签（返回取消注册操作的结果）。"""
    def ApplyButtonsChanges(self, *args, **kwargs) -> Any:
        """ApplyButtonsChanges函数用于应用任务栏按钮的更改（返回更改操作的结果）。"""
    def GetMainWindowHwnd(self) -> Any:
        """GetMainWindowHwnd函数用于获取主窗口句柄（self指向实例本身，返回主窗口句柄）。"""
    def GetOverlayHIcon(self) -> Any:
        """GetOverlayHIcon函数用于获取覆盖图标句柄（self指向实例本身，返回覆盖图标句柄）。"""
    def ActivateTab(self) -> Any:
        """ActivateTab函数用于激活任务栏标签（self指向实例本身，返回激活操作的结果）。"""
    TaskBarButtons: Any
    """TaskBarButtons属性用于管理任务栏按钮集合。"""
    OverlayIcon: Any
    """OverlayIcon属性用于设置任务栏覆盖图标。"""
    OnThumbPreviewRequest: Any
    """OnThumbPreviewRequest事件在任务栏缩略图预览请求时触发。该事件处理程序允许开发人员在任务栏缩略图预览请求时执行自定义操作。"""
    OnWindowPreviewItemRequest: Any
    """OnWindowPreviewItemRequest事件在窗口预览请求时触发。该事件处理程序允许开发人员在窗口预览请求时执行自定义操作。"""
    OnThumbButtonClick: Any
    """OnThumbButtonClick事件在任务栏缩略按钮点击时触发。该事件处理程序允许开发人员在任务栏缩略按钮点击时执行自定义操作。"""

class Taskbar(CustomTaskbar):
    """Taskbar类继承自CustomTaskbar，用于创建任务栏。该类提供了管理和操作任务栏的方法和属性。"""
    TaskBarButtons: Any
    """TaskBarButtons属性用于管理任务栏按钮集合。"""
    ProgressState: Any
    """ProgressState属性用于设置任务栏进度状态。"""
    ProgressMaxValue: Any
    """ProgressMaxValue属性用于设置任务栏进度的最大值。"""
    ProgressValue: Any
    """ProgressValue属性用于设置任务栏当前进度值。"""
    OverlayIcon: Any
    """OverlayIcon属性用于设置任务栏覆盖图标。"""
    OverlayHint: Any
    """OverlayHint属性用于设置任务栏覆盖图标提示。"""
    PreviewClipRegion: Any
    """PreviewClipRegion属性用于设置任务栏预览剪辑区域。"""
    TabProperties: Any
    """TabProperties属性用于管理任务栏标签属性。"""
    ToolTip: Any
    """ToolTip属性用于设置任务栏工具提示。"""
    OnThumbPreviewRequest: Any
    """OnThumbPreviewRequest事件在任务栏缩略图预览请求时触发。该事件处理程序允许开发人员在任务栏缩略图预览请求时执行自定义操作。"""
    OnWindowPreviewItemRequest: Any
    """OnWindowPreviewItemRequest事件在窗口预览请求时触发。该事件处理程序允许开发人员在窗口预览请求时执行自定义操作。"""
    OnThumbButtonClick: Any
    """OnThumbButtonClick事件在任务栏缩略按钮点击时触发。该事件处理程序允许开发人员在任务栏缩略按钮点击时执行自定义操作。"""

class CustomTrayIcon(Component):
    """CustomTrayIcon类继承自Component，用于创建自定义托盘图标。该类提供了管理和操作自定义托盘图标的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomTrayIcon类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomTrayIcon类的实例并释放其资源（返回销毁操作的结果）。"""
    def Refresh(self, *args, **kwargs) -> Any:
        """Refresh函数用于刷新CustomTrayIcon（返回刷新操作的结果）。"""
    def SetDefaultIcon(self, *args, **kwargs) -> Any:
        """SetDefaultIcon函数用于设置默认图标（返回设置操作的结果）。"""
    def ShowBalloonHint(self, *args, **kwargs) -> Any:
        """ShowBalloonHint函数用于显示气球提示（返回显示操作的结果）。"""
    Animate: bool
    """Animate属性用于设置托盘图标是否动画。"""
    AnimateInterval: Any
    """AnimateInterval属性用于设置托盘图标动画的时间间隔。"""
    Hint: str
    """Hint属性用于设置托盘图标的提示信息。"""
    BalloonHint: str
    """BalloonHint属性用于设置托盘图标的气球提示信息。"""
    BalloonTitle: str
    """BalloonTitle属性用于设置托盘图标的气球提示标题。"""
    BalloonTimeout: int
    """BalloonTimeout属性用于设置托盘图标的气球提示显示时间。"""
    BalloonFlags: Any
    """BalloonFlags属性用于设置托盘图标的气球提示标志。"""
    Icon: Any
    """Icon属性用于设置托盘图标。"""
    Icons: Any
    """Icons属性用于管理托盘图标的集合。"""
    IconIndex: int
    """IconIndex属性用于设置托盘图标的索引。"""
    PopupMenu: Any
    """PopupMenu属性用于设置托盘图标的右键菜单。"""
    Visible: bool
    """Visible属性用于设置托盘图标是否可见。"""
    OnBalloonClick: Any
    """OnBalloonClick事件在托盘图标气球提示被点击时触发。该事件处理程序允许开发人员在托盘图标气球提示被点击时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在托盘图标被点击时触发。该事件处理程序允许开发人员在托盘图标被点击时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在托盘图标被双击时触发。该事件处理程序允许开发人员在托盘图标被双击时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在托盘图标检测到鼠标移动时触发。该事件处理程序允许开发人员在托盘图标检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在托盘图标检测到鼠标释放时触发。该事件处理程序允许开发人员在托盘图标检测到鼠标释放时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在托盘图标检测到鼠标按下时触发。该事件处理程序允许开发人员在托盘图标检测到鼠标按下时执行自定义操作。"""
    OnAnimate: Any
    """OnAnimate事件在托盘图标动画时触发。该事件处理程序允许开发人员在托盘图标动画时执行自定义操作。"""

class TrayIcon(CustomTrayIcon):
    """TrayIcon类继承自CustomTrayIcon，用于创建托盘图标。该类提供了管理和操作托盘图标的方法和属性。"""
    Animate: Any
    """Animate属性用于设置托盘图标是否动画。"""
    AnimateInterval: Any
    """AnimateInterval属性用于设置托盘图标动画的时间间隔。"""
    Hint: Any
    """Hint属性用于设置托盘图标的提示信息。"""
    BalloonHint: Any
    """BalloonHint属性用于设置托盘图标的气球提示信息。"""
    BalloonTitle: Any
    """BalloonTitle属性用于设置托盘图标的气球提示标题。"""
    BalloonTimeout: Any
    """BalloonTimeout属性用于设置托盘图标的气球提示显示时间。"""
    BalloonFlags: Any
    """BalloonFlags属性用于设置托盘图标的气球提示标志。"""
    Icon: Any
    """Icon属性用于设置托盘图标。"""
    Icons: Any
    """Icons属性用于管理托盘图标的集合。"""
    IconIndex: Any
    """IconIndex属性用于设置托盘图标的索引。"""
    PopupMenu: Any
    """PopupMenu属性用于设置托盘图标的右键菜单。"""
    Visible: Any
    """Visible属性用于设置托盘图标是否可见。"""
    OnBalloonClick: Any
    """OnBalloonClick事件在托盘图标气球提示被点击时触发。该事件处理程序允许开发人员在托盘图标气球提示被点击时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在托盘图标被点击时触发。该事件处理程序允许开发人员在托盘图标被点击时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在托盘图标被双击时触发。该事件处理程序允许开发人员在托盘图标被双击时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在托盘图标检测到鼠标移动时触发。该事件处理程序允许开发人员在托盘图标检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在托盘图标检测到鼠标释放时触发。该事件处理程序允许开发人员在托盘图标检测到鼠标释放时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在托盘图标检测到鼠标按下时触发。该事件处理程序允许开发人员在托盘图标检测到鼠标按下时执行自定义操作。"""
    OnAnimate: Any
    """OnAnimate事件在托盘图标动画时触发。该事件处理程序允许开发人员在托盘图标动画时执行自定义操作。"""

class CustomUpDown(WinControl):
    """CustomUpDown类继承自WinControl，用于创建自定义上下控件。该类提供了管理和操作自定义上下控件的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomUpDown类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""

class UpDown(CustomUpDown):
    """UpDown类继承自CustomUpDown，用于创建上下控件。该类提供了管理和操作上下控件的方法和属性。"""
    AlignButton: Any
    """AlignButton属性用于设置上下控件按钮的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置上下控件的锚点。"""
    Associate: Any
    """Associate属性用于设置上下控件关联的控件。"""
    ArrowKeys: Any
    """ArrowKeys属性用于设置上下控件是否响应箭头键。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置上下控件是否使用双缓冲。"""
    Enabled: Any
    """Enabled属性用于设置上下控件是否可用。"""
    Hint: Any
    """Hint属性用于设置上下控件的提示信息。"""
    Min: Any
    """Min属性用于设置上下控件的最小值。"""
    Max: Any
    """Max属性用于设置上下控件的最大值。"""
    Increment: Any
    """Increment属性用于设置上下控件的增量值。"""
    Constraints: Any
    """Constraints属性用于设置上下控件的约束条件。"""
    Orientation: Any
    """Orientation属性用于设置上下控件的方向。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置上下控件是否继承父控件的双缓冲。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置上下控件是否继承父控件的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置上下控件的右键菜单。"""
    Position: Any
    """Position属性用于设置上下控件的位置。"""
    ShowHint: Any
    """ShowHint属性用于设置上下控件是否显示提示信息。"""
    TabOrder: Any
    """TabOrder属性用于设置上下控件的标签顺序。"""
    TabStop: Any
    """TabStop属性用于设置上下控件是否为标签停靠点。"""
    Thousands: Any
    """Thousands属性用于设置上下控件是否显示千位分隔符。"""
    Visible: Any
    """Visible属性用于设置上下控件是否可见。"""
    Wrap: Any
    """Wrap属性用于设置上下控件是否循环。"""
    StyleElements: Any
    """StyleElements属性用于设置上下控件的样式元素。"""
    StyleName: Any
    """StyleName属性用于设置上下控件的样式名称。"""
    OnChanging: Any
    """OnChanging事件在上下控件的值改变前触发。该事件处理程序允许开发人员在上下控件的值改变前执行自定义操作。"""
    OnChangingEx: Any
    """OnChangingEx事件在上下控件的值扩展改变前触发。该事件处理程序允许开发人员在上下控件的值扩展改变前执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在上下控件弹出右键菜单时触发。该事件处理程序允许开发人员在上下控件弹出右键菜单时执行自定义操作。"""
    OnClick: Any
    """OnClick事件在上下控件被点击时触发。该事件处理程序允许开发人员在上下控件被点击时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在上下控件获得焦点时触发。该事件处理程序允许开发人员在上下控件获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在上下控件失去焦点时触发。该事件处理程序允许开发人员在上下控件失去焦点时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在上下控件鼠标激活时触发。该事件处理程序允许开发人员在上下控件鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在上下控件检测到鼠标按下时触发。该事件处理程序允许开发人员在上下控件检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在鼠标进入上下控件时触发。该事件处理程序允许开发人员在鼠标进入上下控件时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在鼠标离开上下控件时触发。该事件处理程序允许开发人员在鼠标离开上下控件时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在上下控件检测到鼠标移动时触发。该事件处理程序允许开发人员在上下控件检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在上下控件检测到鼠标释放时触发。该事件处理程序允许开发人员在上下控件检测到鼠标释放时执行自定义操作。"""

class ValueListEditor(CustomDrawGrid):
    """ValueListEditor类继承自CustomDrawGrid，用于创建值列表编辑器。该类提供了管理和操作值列表编辑器的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建ValueListEditor类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁ValueListEditor类的实例并释放其资源（返回销毁操作的结果）。"""
    def DeleteRow(self, *args, **kwargs) -> Any:
        """DeleteRow函数用于删除值列表编辑器中的一行（返回删除操作的结果）。"""
    def FindRow(self, *args, **kwargs) -> bool:
        """FindRow函数用于查找值列表编辑器中的一行（返回查找结果）。"""
    def InsertRow(self, *args, **kwargs) -> int:
        """InsertRow函数用于在值列表编辑器中插入一行（返回插入操作的结果）。"""
    def Refresh(self, *args, **kwargs) -> Any:
        """Refresh函数用于刷新值列表编辑器（返回刷新操作的结果）。"""
    def RestoreCurrentRow(self) -> bool:
        """RestoreCurrentRow函数用于恢复当前行（self指向实例本身，返回恢复操作的结果）。"""
    Cells: Any
    """Cells属性用于获取或设置值列表编辑器中的单元格。"""
    ColCount: Any
    """ColCount属性用于获取或设置值列表编辑器的列数。"""
    ItemProps: Any
    """ItemProps属性用于管理值列表编辑器的项属性。"""
    Keys: Any
    """Keys属性用于获取或设置值列表编辑器中的键。"""
    RowCount: int
    """RowCount属性用于获取或设置值列表编辑器的行数。"""
    Values: str
    """Values属性用于获取或设置值列表编辑器中的值。"""
    VisibleColCount: Any
    """VisibleColCount属性用于获取值列表编辑器中可见列的数量。"""
    VisibleRowCount: Any
    """VisibleRowCount属性用于获取值列表编辑器中可见行的数量。"""
    Align: Any
    """Align属性用于设置值列表编辑器的对齐方式。"""
    Anchors: Any
    """Anchors属性用于设置值列表编辑器的锚点。"""
    BiDiMode: Any
    """BiDiMode属性用于设置值列表编辑器的双向文本模式。"""
    BorderStyle: Any
    """BorderStyle属性用于设置值列表编辑器的边框样式。"""
    Color: Any
    """Color属性用于设置值列表编辑器的背景颜色。"""
    Constraints: Any
    """Constraints属性用于设置值列表编辑器的约束条件。"""
    Ctl3D: Any
    """Ctl3D属性用于设置值列表编辑器的3D效果。"""
    DefaultColWidth: Any
    """DefaultColWidth属性用于设置值列表编辑器的默认列宽。"""
    DefaultDrawing: Any
    """DefaultDrawing属性用于设置值列表编辑器是否使用默认绘图。"""
    DefaultRowHeight: Any
    """DefaultRowHeight属性用于设置值列表编辑器的默认行高。"""
    DisplayOptions: Any
    """DisplayOptions属性用于设置值列表编辑器的显示选项。"""
    DoubleBuffered: Any
    """DoubleBuffered属性用于设置值列表编辑器是否使用双缓冲。"""
    DragCursor: Any
    """DragCursor属性用于设置值列表编辑器拖动时的光标。"""
    DragKind: Any
    """DragKind属性用于设置值列表编辑器的拖动类型。"""
    DragMode: Any
    """DragMode属性用于设置值列表编辑器的拖动模式。"""
    DrawingStyle: Any
    """DrawingStyle属性用于设置值列表编辑器的绘图样式。"""
    DropDownRows: int
    """DropDownRows属性用于设置值列表编辑器下拉列表的行数。"""
    Enabled: Any
    """Enabled属性用于设置值列表编辑器是否可用。"""
    FixedColor: Any
    """FixedColor属性用于设置值列表编辑器固定单元格的颜色。"""
    FixedCols: Any
    """FixedCols属性用于设置值列表编辑器固定列的数量。"""
    Font: Any
    """Font属性用于设置值列表编辑器的字体。"""
    GradientEndColor: Any
    """GradientEndColor属性用于设置值列表编辑器渐变结束颜色。"""
    GradientStartColor: Any
    """GradientStartColor属性用于设置值列表编辑器渐变开始颜色。"""
    GridLineWidth: Any
    """GridLineWidth属性用于设置值列表编辑器的网格线宽度。"""
    KeyOptions: Any
    """KeyOptions属性用于设置值列表编辑器的键选项。"""
    Options: Any
    """Options属性用于设置值列表编辑器的选项。"""
    ParentBiDiMode: Any
    """ParentBiDiMode属性用于设置值列表编辑器是否继承父控件的双向文本模式。"""
    ParentColor: Any
    """ParentColor属性用于设置值列表编辑器是否继承父控件的颜色。"""
    ParentCtl3D: Any
    """ParentCtl3D属性用于设置值列表编辑器是否继承父控件的3D效果。"""
    ParentDoubleBuffered: Any
    """ParentDoubleBuffered属性用于设置值列表编辑器是否继承父控件的双缓冲。"""
    ParentFont: Any
    """ParentFont属性用于设置值列表编辑器是否继承父控件的字体。"""
    ParentShowHint: Any
    """ParentShowHint属性用于设置值列表编辑器是否继承父控件的提示信息显示设置。"""
    PopupMenu: Any
    """PopupMenu属性用于设置值列表编辑器的右键菜单。"""
    ScrollBars: Any
    """ScrollBars属性用于设置值列表编辑器的滚动条。"""
    ShowHint: Any
    """ShowHint属性用于设置值列表编辑器是否显示提示信息。"""
    Strings: Any
    """Strings属性用于管理值列表编辑器中的字符串。"""
    TabOrder: Any
    """TabOrder属性用于设置值列表编辑器的标签顺序。"""
    TitleCaptions: Any
    """TitleCaptions属性用于设置值列表编辑器的标题。"""
    Touch: Any
    """Touch属性用于设置值列表编辑器的触摸操作。"""
    Visible: Any
    """Visible属性用于设置值列表编辑器是否可见。"""
    StyleElements: Any
    """StyleElements属性用于设置值列表编辑器的样式元素。"""
    StyleName: Any
    """StyleName属性用于设置值列表编辑器的样式名称。"""
    OnClick: Any
    """OnClick事件在值列表编辑器被点击时触发。该事件处理程序允许开发人员在值列表编辑器被点击时执行自定义操作。"""
    OnContextPopup: Any
    """OnContextPopup事件在值列表编辑器弹出右键菜单时触发。该事件处理程序允许开发人员在值列表编辑器弹出右键菜单时执行自定义操作。"""
    OnDblClick: Any
    """OnDblClick事件在值列表编辑器被双击时触发。该事件处理程序允许开发人员在值列表编辑器被双击时执行自定义操作。"""
    OnDragDrop: Any
    """OnDragDrop事件在值列表编辑器进行拖放操作时触发。该事件处理程序允许开发人员在值列表编辑器进行拖放操作时执行自定义操作。"""
    OnDragOver: Any
    """OnDragOver事件在值列表编辑器进行拖动悬停时触发。该事件处理程序允许开发人员在值列表编辑器进行拖动悬停时执行自定义操作。"""
    OnDrawCell: Any
    """OnDrawCell事件在值列表编辑器绘制单元格时触发。该事件处理程序允许开发人员在值列表编辑器绘制单元格时执行自定义操作。"""
    OnEditButtonClick: Any
    """OnEditButtonClick事件在值列表编辑器编辑按钮被点击时触发。该事件处理程序允许开发人员在值列表编辑器编辑按钮被点击时执行自定义操作。"""
    OnEndDock: Any
    """OnEndDock事件在值列表编辑器结束停靠时触发。该事件处理程序允许开发人员在值列表编辑器结束停靠时执行自定义操作。"""
    OnEndDrag: Any
    """OnEndDrag事件在值列表编辑器结束拖动操作时触发。该事件处理程序允许开发人员在值列表编辑器结束拖动操作时执行自定义操作。"""
    OnEnter: Any
    """OnEnter事件在值列表编辑器获得焦点时触发。该事件处理程序允许开发人员在值列表编辑器获得焦点时执行自定义操作。"""
    OnExit: Any
    """OnExit事件在值列表编辑器失去焦点时触发。该事件处理程序允许开发人员在值列表编辑器失去焦点时执行自定义操作。"""
    OnGesture: Any
    """OnGesture事件在值列表编辑器检测到手势时触发。该事件处理程序允许开发人员在值列表编辑器检测到手势时执行自定义操作。"""
    OnGetEditMask: Any
    """OnGetEditMask事件在值列表编辑器获取编辑掩码时触发。该事件处理程序允许开发人员在值列表编辑器获取编辑掩码时执行自定义操作。"""
    OnGetEditText: Any
    """OnGetEditText事件在值列表编辑器获取编辑文本时触发。该事件处理程序允许开发人员在值列表编辑器获取编辑文本时执行自定义操作。"""
    OnGetPickList: Any
    """OnGetPickList事件在值列表编辑器获取选择列表时触发。该事件处理程序允许开发人员在值列表编辑器获取选择列表时执行自定义操作。"""
    OnKeyDown: Any
    """OnKeyDown事件在值列表编辑器检测到按键按下时触发。该事件处理程序允许开发人员在值列表编辑器检测到按键按下时执行自定义操作。"""
    OnKeyPress: Any
    """OnKeyPress事件在值列表编辑器检测到按键按下并释放时触发。该事件处理程序允许开发人员在值列表编辑器检测到按键按下并释放时执行自定义操作。"""
    OnKeyUp: Any
    """OnKeyUp事件在值列表编辑器检测到按键释放时触发。该事件处理程序允许开发人员在值列表编辑器检测到按键释放时执行自定义操作。"""
    OnMouseActivate: Any
    """OnMouseActivate事件在值列表编辑器鼠标激活时触发。该事件处理程序允许开发人员在值列表编辑器鼠标激活时执行自定义操作。"""
    OnMouseDown: Any
    """OnMouseDown事件在值列表编辑器检测到鼠标按下时触发。该事件处理程序允许开发人员在值列表编辑器检测到鼠标按下时执行自定义操作。"""
    OnMouseEnter: Any
    """OnMouseEnter事件在鼠标进入值列表编辑器时触发。该事件处理程序允许开发人员在鼠标进入值列表编辑器时执行自定义操作。"""
    OnMouseLeave: Any
    """OnMouseLeave事件在鼠标离开值列表编辑器时触发。该事件处理程序允许开发人员在鼠标离开值列表编辑器时执行自定义操作。"""
    OnMouseMove: Any
    """OnMouseMove事件在值列表编辑器检测到鼠标移动时触发。该事件处理程序允许开发人员在值列表编辑器检测到鼠标移动时执行自定义操作。"""
    OnMouseUp: Any
    """OnMouseUp事件在值列表编辑器检测到鼠标释放时触发。该事件处理程序允许开发人员在值列表编辑器检测到鼠标释放时执行自定义操作。"""
    OnMouseWheelDown: Any
    """OnMouseWheelDown事件在值列表编辑器检测到鼠标滚轮向下时触发。该事件处理程序允许开发人员在值列表编辑器检测到鼠标滚轮向下时执行自定义操作。"""
    OnMouseWheelUp: Any
    """OnMouseWheelUp事件在值列表编辑器检测到鼠标滚轮向上时触发。该事件处理程序允许开发人员在值列表编辑器检测到鼠标滚轮向上时执行自定义操作。"""
    OnRowMoved: Any
    """OnRowMoved事件在值列表编辑器行移动时触发。该事件处理程序允许开发人员在值列表编辑器行移动时执行自定义操作。"""
    OnSelectCell: Any
    """OnSelectCell事件在值列表编辑器选择单元格时触发。该事件处理程序允许开发人员在值列表编辑器选择单元格时执行自定义操作。"""
    OnSetEditText: Any
    """OnSetEditText事件在值列表编辑器设置编辑文本时触发。该事件处理程序允许开发人员在值列表编辑器设置编辑文本时执行自定义操作。"""
    OnStartDock: Any
    """OnStartDock事件在值列表编辑器开始停靠时触发。该事件处理程序允许开发人员在值列表编辑器开始停靠时执行自定义操作。"""
    OnStartDrag: Any
    """OnStartDrag事件在值列表编辑器开始拖动时触发。该事件处理程序允许开发人员在值列表编辑器开始拖动时执行自定义操作。"""
    OnStringsChange: Any
    """OnStringsChange事件在值列表编辑器中的字符串更改时触发。该事件处理程序允许开发人员在值列表编辑器中的字符串更改时执行自定义操作。"""
    OnStringsChanging: Any
    """OnStringsChanging事件在值列表编辑器中的字符串更改前触发。该事件处理程序允许开发人员在值列表编辑器中的字符串更改前执行自定义操作。"""
    OnTopLeftChanged: Any
    """OnTopLeftChanged事件在值列表编辑器顶部和左侧改变时触发。该事件处理程序允许开发人员在值列表编辑器顶部和左侧改变时执行自定义操作。"""
    OnValidate: Any
    """OnValidate事件在值列表编辑器验证时触发。该事件处理程序允许开发人员在值列表编辑器验证时执行自定义操作。"""

class CustomActionBarColorMap(Component):
    """CustomActionBarColorMap类继承自Component，用于创建自定义动作栏颜色映射。该类提供了管理和操作自定义动作栏颜色映射的方法和属性。"""
    def Create(self, AOwner: Component) -> None:
        """Create函数用于创建CustomActionBarColorMap类的实例并初始化其状态（self指向实例本身，AOwner为组件的所有者）。"""
    def Destroy(self, *args, **kwargs) -> Any:
        """Destroy函数用于销毁CustomActionBarColorMap类的实例并释放其资源（返回销毁操作的结果）。"""
    def Assign(self, *args, **kwargs) -> Any:
        """Assign函数用于分配颜色映射（返回分配操作的结果）。"""
    def UpdateColors(self, *args, **kwargs) -> Any:
        """UpdateColors函数用于更新颜色映射（返回更新操作的结果）。"""
    BtnFrameColor: Any
    """BtnFrameColor属性用于设置按钮框架颜色。"""
    BtnSelectedColor: Any
    """BtnSelectedColor属性用于设置按钮选中颜色。"""
    BtnSelectedFont: Any
    """BtnSelectedFont属性用于设置按钮选中文字的字体颜色。"""
    Color: Any
    """Color属性用于设置动作栏的颜色。"""
    DesignFocus: Any
    """DesignFocus属性用于设置设计模式下的焦点颜色。"""
    DisabledColor: Any
    """DisabledColor属性用于设置禁用状态下的颜色。"""
    DisabledFontColor: Any
    """DisabledFontColor属性用于设置禁用状态下的字体颜色。"""
    DisabledFontShadow: Any
    """DisabledFontShadow属性用于设置禁用状态下的字体阴影颜色。"""
    FontColor: Any
    """FontColor属性用于设置动作栏的字体颜色。"""
    FrameTopLeftInner: Any
    """FrameTopLeftInner属性用于设置框架左上角的内侧颜色。"""
    FrameTopLeftOuter: Any
    """FrameTopLeftOuter属性用于设置框架左上角的外侧颜色。"""
    FrameBottomRightInner: Any
    """FrameBottomRightInner属性用于设置框架右下角的内侧颜色。"""
    FrameBottomRightOuter: Any
    """FrameBottomRightOuter属性用于设置框架右下角的外侧颜色。"""
    HighlightColor: Any
    """HighlightColor属性用于设置高亮颜色。"""
    HotColor: Any
    """HotColor属性用于设置热点颜色。"""
    HotFontColor: Any
    """HotFontColor属性用于设置热点字体颜色。"""
    MenuColor: Any
    """MenuColor属性用于设置菜单颜色。"""
    SelectedColor: Any
    """SelectedColor属性用于设置选中颜色。"""
    SelectedFontColor: Any
    """SelectedFontColor属性用于设置选中文字的字体颜色。"""
    ShadowColor: Any
    """ShadowColor属性用于设置阴影颜色。"""
    UnusedColor: Any
    """UnusedColor属性用于设置未使用的颜色。"""
    OnColorChange: Any
    """OnColorChange事件在颜色更改时触发。该事件处理程序允许开发人员在颜色更改时执行自定义操作。"""

class XPColorMap(CustomActionBarColorMap):
    """XPColorMap类继承自CustomActionBarColorMap，用于创建XP风格的颜色映射。该类提供了管理和操作XP风格颜色映射的方法和属性。"""
    def UpdateColors(self, *args, **kwargs) -> Any:
        """UpdateColors函数用于更新XP风格的颜色映射（返回更新操作的结果）。"""
    ShadowColor: Any
    """ShadowColor属性用于设置XP风格的阴影颜色。"""
    Color: Any
    """Color属性用于设置XP风格的颜色。"""
    DisabledColor: Any
    """DisabledColor属性用于设置XP风格的禁用颜色。"""
    DisabledFontColor: Any
    """DisabledFontColor属性用于设置XP风格的禁用字体颜色。"""
    DisabledFontShadow: Any
    """DisabledFontShadow属性用于设置XP风格的禁用字体阴影颜色。"""
    FontColor: Any
    """FontColor属性用于设置XP风格的字体颜色。"""
    HighlightColor: Any
    """HighlightColor属性用于设置XP风格的高亮颜色。"""
    HotColor: Any
    """HotColor属性用于设置XP风格的热点颜色。"""
    HotFontColor: Any
    """HotFontColor属性用于设置XP风格的热点字体颜色。"""
    MenuColor: Any
    """MenuColor属性用于设置XP风格的菜单颜色。"""
    FrameTopLeftInner: Any
    """FrameTopLeftInner属性用于设置XP风格框架左上角的内侧颜色。"""
    FrameTopLeftOuter: Any
    """FrameTopLeftOuter属性用于设置XP风格框架左上角的外侧颜色。"""
    FrameBottomRightInner: Any
    """FrameBottomRightInner属性用于设置XP风格框架右下角的内侧颜色。"""
    FrameBottomRightOuter: Any
    """FrameBottomRightOuter属性用于设置XP风格框架右下角的外侧颜色。"""
    BtnFrameColor: Any
    """BtnFrameColor属性用于设置XP风格的按钮框架颜色。"""
    BtnSelectedColor: Any
    """BtnSelectedColor属性用于设置XP风格的按钮选中颜色。"""
    BtnSelectedFont: Any
    """BtnSelectedFont属性用于设置XP风格的按钮选中文字的字体颜色。"""
    SelectedColor: Any
    """SelectedColor属性用于设置XP风格的选中颜色。"""
    SelectedFontColor: Any
    """SelectedFontColor属性用于设置XP风格的选中文字的字体颜色。"""
    UnusedColor: Any
    """UnusedColor属性用于设置XP风格的未使用颜色。"""
    OnColorChange: Any
    """OnColorChange事件在XP风格颜色更改时触发。该事件处理程序允许开发人员在XP风格颜色更改时执行自定义操作。"""

class StandardColorMap(CustomActionBarColorMap):
    """StandardColorMap类继承自CustomActionBarColorMap，用于创建标准颜色映射。该类提供了管理和操作标准颜色映射的方法和属性。"""
    def UpdateColors(self, *args, **kwargs) -> Any:
        """UpdateColors函数用于更新标准颜色映射（返回更新操作的结果）。"""
    HighlightColor: Any
    """HighlightColor属性用于设置标准颜色映射的高亮颜色。"""
    UnusedColor: Any
    """UnusedColor属性用于设置标准颜色映射的未使用颜色。"""
    BtnFrameColor: Any
    """BtnFrameColor属性用于设置标准颜色映射的按钮框架颜色。"""
    BtnSelectedColor: Any
    """BtnSelectedColor属性用于设置标准颜色映射的按钮选中颜色。"""
    BtnSelectedFont: Any
    """BtnSelectedFont属性用于设置标准颜色映射的按钮选中文字的字体颜色。"""
    Color: Any
    """Color属性用于设置标准颜色映射的颜色。"""
    DisabledFontColor: Any
    """DisabledFontColor属性用于设置标准颜色映射的禁用字体颜色。"""
    DisabledFontShadow: Any
    """DisabledFontShadow属性用于设置标准颜色映射的禁用字体阴影颜色。"""
    FontColor: Any
    """FontColor属性用于设置标准颜色映射的字体颜色。"""
    HotColor: Any
    """HotColor属性用于设置标准颜色映射的热点颜色。"""
    HotFontColor: Any
    """HotFontColor属性用于设置标准颜色映射的热点字体颜色。"""
    MenuColor: Any
    """MenuColor属性用于设置标准颜色映射的菜单颜色。"""
    FrameTopLeftInner: Any
    """FrameTopLeftInner属性用于设置标准颜色映射框架左上角的内侧颜色。"""
    FrameTopLeftOuter: Any
    """FrameTopLeftOuter属性用于设置标准颜色映射框架左上角的外侧颜色。"""
    FrameBottomRightInner: Any
    """FrameBottomRightInner属性用于设置标准颜色映射框架右下角的内侧颜色。"""
    FrameBottomRightOuter: Any
    """FrameBottomRightOuter属性用于设置标准颜色映射框架右下角的外侧颜色。"""
    DisabledColor: Any
    """DisabledColor属性用于设置标准颜色映射的禁用颜色。"""
    SelectedColor: Any
    """SelectedColor属性用于设置标准颜色映射的选中颜色。"""
    SelectedFontColor: Any
    """SelectedFontColor属性用于设置标准颜色映射的选中文字的字体颜色。"""
    ShadowColor: Any
    """ShadowColor属性用于设置标准颜色映射的阴影颜色。"""
    OnColorChange: Any
    """OnColorChange事件在标准颜色映射颜色更改时触发。该事件处理程序允许开发人员在标准颜色映射颜色更改时执行自定义操作。"""

class TwilightColorMap(CustomActionBarColorMap):
    """TwilightColorMap类继承自CustomActionBarColorMap，用于创建黄昏风格的颜色映射。该类提供了管理和操作黄昏风格颜色映射的方法和属性。"""
    def UpdateColors(self, *args, **kwargs) -> Any:
        """UpdateColors函数用于更新黄昏风格的颜色映射（返回更新操作的结果）。"""
    Color: Any
    """Color属性用于设置黄昏风格的颜色。"""
    DisabledFontColor: Any
    """DisabledFontColor属性用于设置黄昏风格的禁用字体颜色。"""
    DisabledFontShadow: Any
    """DisabledFontShadow属性用于设置黄昏风格的禁用字体阴影颜色。"""
    FontColor: Any
    """FontColor属性用于设置黄昏风格的字体颜色。"""
    HighlightColor: Any
    """HighlightColor属性用于设置黄昏风格的高亮颜色。"""
    HotColor: Any
    """HotColor属性用于设置黄昏风格的热点颜色。"""
    HotFontColor: Any
    """HotFontColor属性用于设置黄昏风格的热点字体颜色。"""
    FrameTopLeftInner: Any
    """FrameTopLeftInner属性用于设置黄昏风格框架左上角的内侧颜色。"""
    FrameTopLeftOuter: Any
    """FrameTopLeftOuter属性用于设置黄昏风格框架左上角的外侧颜色。"""
    FrameBottomRightInner: Any
    """FrameBottomRightInner属性用于设置黄昏风格框架右下角的内侧颜色。"""
    FrameBottomRightOuter: Any
    """FrameBottomRightOuter属性用于设置黄昏风格框架右下角的外侧颜色。"""
    BtnFrameColor: Any
    """BtnFrameColor属性用于设置黄昏风格的按钮框架颜色。"""
    BtnSelectedColor: Any
    """BtnSelectedColor属性用于设置黄昏风格的按钮选中颜色。"""
    BtnSelectedFont: Any
    """BtnSelectedFont属性用于设置黄昏风格的按钮选中文字的字体颜色。"""
    MenuColor: Any
    """MenuColor属性用于设置黄昏风格的菜单颜色。"""
    DisabledColor: Any
    """DisabledColor属性用于设置黄昏风格的禁用颜色。"""
    SelectedColor: Any
    """SelectedColor属性用于设置黄昏风格的选中颜色。"""
    SelectedFontColor: Any
    """SelectedFontColor属性用于设置黄昏风格的选中文字的字体颜色。"""
    ShadowColor: Any
    """ShadowColor属性用于设置黄昏风格的阴影颜色。"""
    UnusedColor: Any
    """UnusedColor属性用于设置黄昏风格的未使用颜色。"""
    OnColorChange: Any
    """OnColorChange事件在黄昏风格颜色更改时触发。该事件处理程序允许开发人员在黄昏风格颜色更改时执行自定义操作。"""


def Abort() -> Any:
    """引发静默异常。

    Abort 的主要作用是中止程序的运行，同时产生一个不报错的异常信息。"""
def CreateComponent(ComponentClass, Owner) -> Any:
    """创建组件（组件类，所有者）

    创建一个由 Owner 拥有的 ComponentClass 类型的组件"""
def FreeConsole(*args, **kwargs) -> Any:
    """FreeConsole_Wrapper()

    用于释放与该进程关联的 MS-DOS 控制台。在某些情况下，应用程序可能希望在运行时释放与控制台的关联，以便能够更灵活地控制其用户界面。这时，可以使用FreeConsole函数。"""
def GetProcessDpiAwareness() -> Any:
    """GetProcessDpiAwareness()

    用于获取指定进程的DPI（每英寸点数）感知级别。DPI感知级别越高，应用程序对高分辨率显示器的支持就越好，显示效果也会更加清晰和细腻。"""
def IsDpiAware(*args, **kwargs) -> Any:
    """IsDPIAware()

    IsDpiAware用于检测应用程序是否意识到系统的高DPI设置。
    IsDpiAware函数返回一个布尔值，指示应用程序是否意识到系统的高DPI设置。如果应用程序意识到高DPI设置，那么它就可以使用更高质量的渲染技术来绘制界面元素，从而获得更好的显示效果。"""
def SetHighDpiAware() -> Any:
    """SetHighDpiAware()

    自动设置最适合进程的 DPI（每英寸点数） 感知。"""
def SetProcessDpiAwareness() -> Any:
    """SetProcessDpiAwareness()

    SetProcessDpiAwareness 函数是用于设置进程默认的 DPI（每英寸点数）感知级别。DPI 感知是应用程序对其运行环境的 DPI 设置进行识别的能力，它允许应用程序在高分辨率屏幕上正确缩放和呈现其内容。"""
def ShowMessage(*args, **kwargs) -> Any:
    """ShowMessage_Wrapper()

    ShowMessage 函数通常将自定义消息显示为一个简单的消息框，通知用户某些信息或状态。
    ShowMessage 只提供基本的消息显示功能，不支持自定义消息框的标题、按钮类型、图标等。如果需要更高级的消息框定制功能，可以使用 Application.MessageBox 函数。"""
def StyleServices(*args, **kwargs) -> Any:
    """StyleServices_Wrapper()

    StyleServices提供了一套服务和功能，允许开发者自定义和修改应用程序中控件的外观和感觉。"""

class auCustomHTTP(Component):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Read(self, *args, **kwargs) -> bool:
        """ """
    def ReadRange(self, *args, **kwargs) -> Any:
        """ """
    def Upload(self, *args, **kwargs) -> bool:
        """ """
    def BeginPrepareUpload -> bool:
        """ """
    def UploadStream(self, *args, **kwargs) -> Any:
        """ """
    def UploadString(self, *args, **kwargs) -> Any:
        """ """
    def UploadInteger(self, *args, **kwargs) -> Any:
        """ """
    def UploadBoolean(self, *args, **kwargs) -> Any:
        """ """
    def UploadPicture(self, *args, **kwargs) -> Any:
        """ """
    def UploadThumbnailedPicture(self, *args, **kwargs) -> Any:
        """ """
    def EndPrepareUpload(self, *args, **kwargs) -> Any:
        """ """
    def Abort(self, *args, **kwargs) -> Any:
        """ """
    def Pause(self, *args, **kwargs) -> Any:
        """ """
    def Resume -> bool:
        """ """
    def IsGlobalOffline -> bool:
        """ """
    Username: str
    """ """
    Password: str
    """ """
    Busy: bool
    """ """
    ThreadBusy: bool
    """ """
    FreeOnTerminate: bool
    """ """
    FileName: str
    """ """
    HostName: str
    """ """
    Thread: Any
    """ """
    AcceptTypes: str
    """ """
    AddHeaders: Any
    """ """
    Agent: str
    """ """
    Proxy: Any
    """ """
    ShowGoOnlineMessage: bool
    """ """
    CacheOptions: Any
    """ """
    InternetOptions: Any
    """ """
    OutputFileName: str
    """ """
    OutputFileAttributes: Any
    """ """
    URL: str
    """ """
    POSTData: str
    """ """
    Range: Any
    """ """
    Referer: str
    """ """
    RequestMethod: Any
    """ """
    Timeouts: Any
    """ """
    TransferBufferSize: Any
    """ """
    WorkOffline: bool
    """ """
    Data: Any
    """ """
    Suspended: bool
    """ """
    ThreadPriority: Any
    """ """
    WaitThread: bool
    """ """
    WaitTimeout: int
    """ """
    OnBeforeSendRequest: Any
    """ """
    OnHeaderInfo: Any
    """ """
    OnDone: Any
    """ """
    OnProgress: Any
    """ """
    OnStatusChanged: Any
    """ """
    OnRedirected: Any
    """ """
    OnUploadProgress: Any
    """ """
    OnUploadFieldRequest: Any
    """ """
    OnAnyError: Any
    """ """
    OnAborted: Any
    """ """
    OnConnLost: Any
    """ """
    OnDoneInterrupted: Any
    """ """
    OnOutputFileError: Any
    """ """
    OnPasswordRequest: Any
    """ """
    OnProxyAuthenticationRequest: Any
    """ """
    OnHostUnreachable: Any
    """ """
    OnHTTPError: Any
    """ """
    OnWaitTimeoutExpired: Any
    """ """
    OnBeforeCreateFile: Any
    """ """
    OnAfterCreateFile: Any
    """ """
class auAutoUpgrader(auCustomHTTP):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Loaded(self, *args, **kwargs) -> Any:
        """ """
    def CheckUpdate(self, *args, **kwargs) -> bool:
        """ """
    def Abort(self, *args, **kwargs) -> Any:
        """ """
    def RestartApplication(self, *args, **kwargs) -> Any:
        """ """
    def DeleteTemporaryFiles(self, *args, **kwargs) -> Any:
        """ """
    Aborted: bool
    """ """
    DownloadQueue: Any
    """ """
    QInfoStage: bool
    """ """
    Restarting: bool
    """ """
    Proxy: Any
    """ """
    InternetOptions: Any
    """ """
    ThreadPriority: Any
    """ """
    TransferBufferSize: Any
    """ """
    HTTPUsername: str
    """ """
    HTTPPassword: str
    """ """
    OnProxyAuthenticationRequest: Any
    """ """
    AutoCheck: bool
    """ """
    AutoCheckDelay: int
    """ """
    CacheOptions: Any
    """ """
    InfoFile: Any
    """ """
    InfoFileURL: str
    """ """
    RestartParams: str
    """ """
    MiscFilesUpgrade: Any
    """ """
    VersionControl: Any
    """ """
    VersionDate: str
    """ """
    VersionDateAutoSet: bool
    """ """
    VersionNumber: str
    """ """
    ShowMessages: Any
    """ """
    Wizard: Any
    """ """
    OnBeginUpgrade: Any
    """ """
    OnEndUpgrade: Any
    """ """
    OnLaterUpgrade: Any
    """ """
    OnProgress: Any
    """ """
    OnFileStart: Any
    """ """
    OnFileDone: Any
    """ """
    OnDoOwnCloseAppMethod: Any
    """ """
    OnAfterRestart: Any
    """ """
    OnAborted: Any
    """ """
    OnConnLost: Any
    """ """
    OnHostUnreachable: Any
    """ """
    OnNoUpdateAvailable: Any
    """ """
    OnNoInfoFile: Any
    """ """
    OnLostFile: Any
    """ """
    OnPasswordRequest: Any
    """ """
class auHTTP(auCustomHTTP):
    """ """
    AcceptTypes: Any
    """ """
    AddHeaders: Any
    """ """
    Agent: Any
    """ """
    Proxy: Any
    """ """
    URL: Any
    """ """
    Username: Any
    """ """
    CacheOptions: Any
    """ """
    InternetOptions: Any
    """ """
    OutputFileName: Any
    """ """
    OutputFileAttributes: Any
    """ """
    Password: Any
    """ """
    POSTData: Any
    """ """
    Range: Any
    """ """
    Referer: Any
    """ """
    RequestMethod: Any
    """ """
    ShowGoOnlineMessage: Any
    """ """
    Suspended: Any
    """ """
    Timeouts: Any
    """ """
    ThreadPriority: Any
    """ """
    TransferBufferSize: Any
    """ """
    WaitThread: Any
    """ """
    WaitTimeout: Any
    """ """
    WorkOffline: Any
    """ """
    OnBeforeSendRequest: Any
    """ """
    OnHeaderInfo: Any
    """ """
    OnDone: Any
    """ """
    OnDoneInterrupted: Any
    """ """
    OnOutputFileError: Any
    """ """
    OnProgress: Any
    """ """
    OnStatusChanged: Any
    """ """
    OnRedirected: Any
    """ """
    OnUploadProgress: Any
    """ """
    OnUploadFieldRequest: Any
    """ """
    OnAnyError: Any
    """ """
    OnAborted: Any
    """ """
    OnConnLost: Any
    """ """
    OnHTTPError: Any
    """ """
    OnHostUnreachable: Any
    """ """
    OnPasswordRequest: Any
    """ """
    OnProxyAuthenticationRequest: Any
    """ """
    OnWaitTimeoutExpired: Any
    """ """
class auCustomThread(Component):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Execute -> bool:
        """ """
    def ExecuteAndWaitForEvent(self, *args, **kwargs) -> Any:
        """ """
    def Synchronize(self, *args, **kwargs) -> Any:
        """ """
    def SynchronizeEx(self, *args, **kwargs) -> Any:
        """ """
    def Suspend(self, *args, **kwargs) -> Any:
        """ """
    def Resume(self, *args, **kwargs) -> Any:
        """ """
    def Terminate(self, *args, **kwargs) -> Any:
        """ """
    def WaitFor -> Any:
        """ """
    def WaitForEvent(self, *args, **kwargs) -> bool:
        """ """
    def Handle -> Any:
        """ """
    def Running -> bool:
        """ """
    def RunningAndNotSuspended -> bool:
        """ """
    Terminated: bool
    """ """
    ThreadID: Any
    """ """
    ReturnValue: int
    """ """
    FreeOwnerOnTerminate: bool
    """ """
    HandleExceptions: bool
    """ """
    Priority: Any
    """ """
    Suspended: bool
    """ """
    WaitThread: bool
    """ """
    WaitTimeout: Any
    """ """
    OnException: Any
    """ """
    OnExecute: Any
    """ """
    OnTerminate: Any
    """ """
    OnWaitTimeoutExpired: Any
    """ """
class auThread(auCustomThread):
    """ """
    HandleExceptions: Any
    """ """
    Priority: Any
    """ """
    Suspended: Any
    """ """
    WaitThread: Any
    """ """
    WaitTimeout: Any
    """ """
    OnException: Any
    """ """
    OnExecute: Any
    """ """
    OnTerminate: Any
    """ """
    OnWaitTimeoutExpired: Any
    """ """

class AiOpenAssistant(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def LoadAssistant(self, *args, **kwargs) -> bool:
        """ """
    def AddMessage(self, *args, **kwargs) -> Any:
        """ """
    def GetLasMessage -> Any:
        """ """
    def GetResponse -> str:
        """ """
    def CreateNewAssistant -> bool:
        """ """
    def RemoveAssistant -> bool:
        """ """
    def ApplyUpdates -> bool:
        """ """
    def RemoveThread -> bool:
        """ """
    def CreateNewThread(self, *args, **kwargs) -> bool:
        """ """
    def CancelRun(self, *args, **kwargs) -> Any:
        """ """
    def UploadAssistantFile(self, *args, **kwargs) -> Any:
        """ """
    def UploadFile(self, *args, **kwargs) -> Any:
        """ """
    def DeleteFile(self, *args, **kwargs) -> bool:
        """ """
    def DownloadFile(self, *args, **kwargs) -> Any:
        """ """
    def ListFiles -> str:
        """ """
    def ListFilesArray -> Any:
        """ """
    def GetAssistantsList -> str:
        """ """
    def GetModelsList -> str:
        """ """
    def Addfunction(self, *args, **kwargs) -> Any:
        """ """
    def Addfunction(self, *args, **kwargs) -> Any:
        """ """
    def Addfunction(self, *args, **kwargs) -> Any:
        """ """
    def Addfunction(self, *args, **kwargs) -> Any:
        """ """
    Assistant: Any
    """ """
    ThRead: Any
    """ """
    AiRun: Any
    """ """
    Status: str
    """ """
    Busy: Any
    """ """
    Metadata: Any
    """ """
    def Funciones -> Any:
        """ """
    Funciones: Any
    """ """
    def OnCallToolfunction -> Any:
        """ """
    OnCallToolfunction: Any
    """ """
    OnStatusChange: Any
    """ """
    OnResponse: Any
    """ """
    OnBeforeResponse: Any
    """ """
    Asynchronous: bool
    """ """
    ApiKey: str
    """ """
    AssistantName: str
    """ """
    AssistantId: str
    """ """
    ThReadId: str
    """ """
    Active: bool
    """ """
    AutoRemoveThread: bool
    """ """
    Model: str
    """ """
    Instructions: Any
    """ """
    CodeFilesIds: Any
    """ """
    VectorStoreIds: Any
    """ """
    Code_Interpreter: bool
    """ """
    FileSearch: bool
    """ """
    Tools: Any
    """ """
    Temperature: Any
    """ """
    Top_P: Any
    """ """
    Url: str
    """ """

class AiOpenChat(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def AddMessageAndRun(self, *args, **kwargs) -> Any:
        """ """
    def AddMessage(self, *args, **kwargs) -> Any:
        """ """
    def NewMessage(self, *args, **kwargs) -> Any:
        """ """
    def Run(self, *args, **kwargs) -> Any:
        """ """
    def GetLastMessage -> Any:
        """ """
    def RemoveMesage(self, *args, **kwargs) -> Any:
        """ """
    def RemoveMesage(self, *args, **kwargs) -> Any:
        """ """
    def AddToMemory(self, *args, **kwargs) -> Any:
        """ """
    def RemoveFromMemory(self, *args, **kwargs) -> Any:
        """ """
    def NewChat(self, *args, **kwargs) -> Any:
        """ """
    def Abort(self, *args, **kwargs) -> Any:
        """ """
    def function GetModels(self, *args, **kwargs) -> Any:
        """ """
    def GetModels -> Any:
        """ """
    def GetMessages -> Any:
        """ """
    def publicChatToSend  -> str:
        """ """
    Messages: Any
    """ """
    LastError: str
    """ """
    ApiKey: str
    """ """
    Model: str
    """ """
    Frequency_penalty: Any
    """ """
    Logit_bias: str
    """ """
    Logprobs: bool
    """ """
    Top_logprobs: str
    """ """
    Max_tokens: Any
    """ """
    N: Any
    """ """
    Presence_penalty: Any
    """ """
    Response_format: Any
    """ """
    Seed: Any
    """ """
    Stop: str
    """ """
    Asynchronous: bool
    """ """
    Temperature: Any
    """ """
    Top_p: Any
    """ """
    Tools: Any
    """ """
    Tool_choice: str
    """ """
    Tool_Active: bool
    """ """
    User: str
    """ """
    InitialInstructions: Any
    """ """
    Prompt_tokens: Any
    """ """
    Completion_tokens: Any
    """ """
    Total_tokens: Any
    """ """
    LastContent: Any
    """ """
    LastPrompt: Any
    """ """
    Busy: Any
    """ """
    OnReceiveData: Any
    """ """
    OnReceiveDataEnd: Any
    """ """
    OnAddMessage: Any
    """ """
    def OnCallToolfunction -> Any:
        """ """
    OnCallToolfunction: Any
    """ """
    OnBeforeSendMessage: Any
    """ """
    OnInitChat: Any
    """ """
    Url: str
    """ """
    AIChatConfig: Any
    """ """
    ResponseTimeOut: Any
    """ """
    Memory: Any
    """ """
    def functions -> Any:
        """ """
    functions: Any
    """ """
    def Aifunctions -> Any:
        """ """
    Aifunctions: Any
    """ """
    OnProcessMediaFile: Any
    """ """

class AiOllamaChat(AiOpenChat):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Run(self, *args, **kwargs) -> Any:
        """ """

class AiEmbeddings(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def CreateEmbedding(self, *args, **kwargs) -> Any:
        """ """
    def ParseEmbedding(self, *args, **kwargs) -> Any:
        """ """
    def ToJsonArray -> Any:
        """ """
    def function ToJsonArray(self, *args, **kwargs) -> Any:
        """ """
    def function Magnitude(self, *args, **kwargs) -> Any:
        """ """
    def function DotProduct(self, *args, **kwargs) -> Any:
        """ """
    def function CosineSimilarity(self, *args, **kwargs) -> Any:
        """ """
    Data: Any
    """ """
    ApiKey: str
    """ """
    Model: str
    """ """
    prompt_tokens: int
    """ """
    total_tokens: int
    """ """
    Url: str
    """ """
    Dimensions: int
    """ """

class AiOlamalEmbeddings(AiEmbeddings):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def CreateEmbedding(self, *args, **kwargs) -> Any:
        """ """
    def ParseEmbedding(self, *args, **kwargs) -> Any:
        """ """

class AiGroqChat(AiOpenChat):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """

class AiClaudeChat(AiOpenChat):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Run(self, *args, **kwargs) -> Any:
        """ """

class AiRagChat(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def AskToAi(self, *args, **kwargs) -> Any:
        """ """
    def AskToAi(self, *args, **kwargs) -> Any:
        """ """
    def AskToAi(self, *args, **kwargs) -> Any:
        """ """
    Chat: Any
    """ """
    DataVec: Any
    """ """

class AiDataVec(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def SaveToStream(self, *args, **kwargs) -> Any:
        """ """
    def LoadFromStream(self, *args, **kwargs) -> Any:
        """ """
    def SaveToFile(self, *args, **kwargs) -> Any:
        """ """
    def LoadFromFile(self, *args, **kwargs) -> Any:
        """ """
    def Connect(self, *args, **kwargs) -> bool:
        """ """
    def Search(self, *args, **kwargs) -> Any:
        """ """
    def Search(self, *args, **kwargs) -> Any:
        """ """
    def BuildIndex(self, *args, **kwargs) -> Any:
        """ """
    def AddItem(self, *args, **kwargs) -> Any:
        """ """
    def AddItem(self, *args, **kwargs) -> Any:
        """ """
    def AddItemsFromJSonArray(self, *args, **kwargs) -> Any:
        """ """
    def AddItemsFromPlainText(self, *args, **kwargs) -> Any:
        """ """
    def CreateEmbeddingNode(self, *args, **kwargs) -> Any:
        """ """
    def Count -> int:
        """ """
    def Clear(self, *args, **kwargs) -> Any:
        """ """
    RagIndex: Any
    """ """
    Active: bool
    """ """
    Items: Any
    """ """
    OnDataVecAddItem: Any
    """ """
    OnDataVecSearch: Any
    """ """
    Embeddings: Any
    """ """
    Model: str
    """ """
    Dim: int
    """ """
    NameVec: str
    """ """
    Description: str
    """ """

class AiPrompts(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def IndexOf(self, *args, **kwargs) -> int:
        """ """
    def GetString(self, *args, **kwargs) -> str:
        """ """
    def AddString(self, *args, **kwargs) -> Any:
        """ """
    def GetTemplate(self, *args, **kwargs) -> Any:
        """ """
    def GetTemplate(self, *args, **kwargs) -> Any:
        """ """
    def GetTemplate(self, *args, **kwargs) -> Any:
        """ """
    Items: Any
    """ """

class AIGraph(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Run(self, *args, **kwargs) -> str:
        """ """
    def Abort(self, *args, **kwargs) -> Any:
        """ """
    Busy: bool
    """ """
    StartNode: Any
    """ """
    EndNode: Any
    """ """
    OnPrint: Any
    """ """
    AiPrompts: Any
    """ """
    OnEnd: Any
    """ """

class AIGraphNode(AIGraphBase):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Print(self, *args, **kwargs) -> Any:
        """ """
    Error: bool
    """ """
    MsgError: str
    """ """
    Input: str
    """ """
    Output: str
    """ """
    Next: Any
    """ """
    Graph: Any
    """ """
    OnExecute: Any
    """ """
    PromptName: str
    """ """

class AIGraphLink(AIGraphBase):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Print(self, *args, **kwargs) -> Any:
        """ """
    def DoExecute(self, *args, **kwargs) -> Any:
        """ """
    NextA: Any
    """ """
    NextB: Any
    """ """
    NextC: Any
    """ """
    NextD: Any
    """ """
    NextNo: Any
    """ """
    Graph: Any
    """ """
    OnExecute: Any
    """ """
    MaxCicles: int
    """ """
    property Response: str
    """ """

class AiGeminiChat(AiOpenChat):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Run(self, *args, **kwargs) -> Any:
        """ """

class AiAudio(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Speech(self, *args, **kwargs) -> Any:
        """ """
    def Transcription(self, *args, **kwargs) -> str:
        """ """
    def Translation(self, *args, **kwargs) -> str:
        """ """
    ApiKey: str
    """ """
    Url: str
    """ """
    Model: str
    """ """
    Voice: str
    """ """
    Format: str
    """ """
    Languaje: str
    """ """
    Speed: Any
    """ """
    Temperature: Any
    """ """
    ResponseFormat: str
    """ """
    Quality: str
    """ """
    timestamp_granularities: str
    """ """

class AiDalle(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Generate(self, *args, **kwargs) -> Any:
        """ """
    def Edit(self, *args, **kwargs) -> Any:
        """ """
    def Variation(self, *args, **kwargs) -> Any:
        """ """
    Url: str
    """ """
    ApiKey: str
    """ """
    Revised_Prompt: str
    """ """
    Images: Any
    """ """
    Prompt: Any
    """ """
    ResponseFormat: Any
    """ """
    HdQuality: bool
    """ """
    StyleFormat: Any
    """ """
    UseDalle3: bool
    """ """
    User: str
    """ """

class AiEmbeddings(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def CreateEmbedding(self, *args, **kwargs) -> Any:
        """ """
    def ParseEmbedding(self, *args, **kwargs) -> Any:
        """ """
    def ToJsonArray -> Any:
        """ """
    def function ToJsonArray(self, *args, **kwargs) -> Any:
        """ """
    def function Magnitude(self, *args, **kwargs) -> Any:
        """ """
    def function DotProduct(self, *args, **kwargs) -> Any:
        """ """
    def function CosineSimilarity(self, *args, **kwargs) -> Any:
        """ """
    Data: Any
    """ """
    ApiKey: str
    """ """
    Model: str
    """ """
    prompt_tokens: int
    """ """
    total_tokens: int
    """ """
    Url: str
    """ """
    Dimensions: int
    """ """

class AiVision(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def GenerateByUrl(self, *args, **kwargs) -> str:
        """ """
    def GenerateByBase64(self, *args, **kwargs) -> str:
        """ """
    def GenerateByStream(self, *args, **kwargs) -> str:
        """ """
    ApiKey: str
    """ """
    id: str
    """ """
    Model: str
    """ """
    Finish_reason: str
    """ """
    role: str
    """ """
    Content: str
    """ """
    Prompt_Tokenes: int
    """ """
    completion_tokens: int
    """ """
    total_tokens: int
    """ """
    Url: str
    """ """

class AiChatConfig(Component):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    UrlApi: str
    """ """
    ApiKey: str
    """ """
    Model: str
    """ """
    Description: str
    """ """
    Max_tokens: Any
    """ """
    N: Any
    """ """
    Presence_penalty: Any
    """ """
    Response_format: Any
    """ """
    Seed: Any
    """ """
    Stop: str
    """ """
    Temperature: Any
    """ """
    Top_p: Any
    """ """
    Tool_choice: str
    """ """
    Tool_Active: bool
    """ """
    InitialInstructions: Any
    """ """

class Aifunctions(Component):
    """ """
    def = Class(self, *args, **kwargs) -> Any:
        """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def GetTools -> Any:
        """ """
    def DoCallfunction(self, *args, **kwargs) -> Any:
        """ """
    def functions -> Any:
        """ """
    functions: Any
    """ """

class AiMistralChat(AiOpenChat):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def AddMessageFimAndRun(self, *args, **kwargs) -> Any:
        """ """

class AiMistralEmbeddings(AiEmbeddings):
    """ """
    def Create(self, AOwner: Component) -> None:
        """ """
    def CreateEmbedding(self, *args, **kwargs) -> Any:
        """ """

class PJDropFiles(CustomControl):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Paint(self, *args, **kwargs) -> Any:
        """ """
    Count: int
    """ """
    Files: str
    """ """
    FileName: str
    """ """
    IsFolder: bool
    """ """
    DropPoint: Any
    """ """
    DropControl: Any
    """ """
    Enabled: bool
    """ """
    Align: Any
    """ """
    Anchors: Any
    """ """
    Constraints: Any
    """ """
    ParentShowHint: bool
    """ """
    ShowHint: bool
    """ """
    TabOrder: int
    """ """
    TabStop: bool
    """ """
    Visible: bool
    """ """
    Width: int
    """ """
    Height: int
    """ """
    Filter: Any
    """ """
    ForegroundOnDrop: bool
    """ """
    Options: Any
    """ """
    PassThrough: bool
    """ """
    OnBeforeDrop: Any
    """ """
    OnDropFiles: Any
    """ """
    OnFileFilter: Any
    """ """

class PJSubClassedDropFiles(Component):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    Count: int
    """ """
    DropControl : Any
    """ """
    DropPoint: Any
    """ """
    FileName: str
    """ """
    Files: str
    """ """
    IsFolder: bool
    """ """
    Enabled: bool
    """ """
    Filter: Any
    """ """
    ForegroundOnDrop: bool
    """ """
    Options: Any
    """ """
    OnBeforeDrop: Any
    """ """
    OnDropFiles: Any
    """ """
    OnFileFilter: Any
    """ """

class PJFormDropFiles(PJSubClassedDropFiles):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """

class PJCtrlDropFiles(PJSubClassedDropFiles):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    ManagedControl: Any
    """ """
    PassThrough: bool
    """ """

class PJExtFileFilter(Component):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Accept(self, *args, **kwargs) -> bool:
        """ """
    Extensions: str
    """ """
    Style: Any
    """ """

class PJWildCardFileFilter(Component):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def Accept(self, *args, **kwargs) -> bool:
        """ """
    WildCard: str
    """ """

class OleControl(WinControl):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def Destroy(self, *args, **kwargs) -> Any:
        """ """
    def BrowseProperties(self, *args, **kwargs) -> Any:
        """ """
    def DefaultHandler(self, *args, **kwargs) -> Any:
        """ """
    def DoObjectVerb(self, *args, **kwargs) -> Any:
        """ """
    def GetEnumPropDesc(self, *args, **kwargs) -> Any:
        """ """
    def GetHelpContext(self, *args, **kwargs) -> int:
        """ """
    def GetObjectVerbs(self, *args, **kwargs) -> Any:
        """ """
    def GetPropDisplayString(self, *args, **kwargs) -> str:
        """ """
    def GetPropDisplayStrings(self, *args, **kwargs) -> Any:
        """ """
    def IsCustomProperty(self, *args, **kwargs) -> bool:
        """ """
    def IsPropPageProperty(self, *args, **kwargs) -> bool:
        """ """
    def SetBounds(self, *args, **kwargs) -> Any:
        """ """
    def SetPropDisplayString(self, *args, **kwargs) -> Any:
        """ """
    def ShowAboutBox(self, *args, **kwargs) -> Any:
        """ """
    OleObject: Any
    """ """
    PerPropBrowsing: Any
    """ """
    DefaultDispatch: Any
    """ """
    TabStop: bool
    """ """
    Anchors: Any
    """ """
    ServiceQuery: Any
    """ """

class WebBrowser(OleControl):
    """ """
    def Create(self, AOwner) -> None:
        """ """
    def SetFocus(self, *args, **kwargs) -> Any:
        """ """
    def GoBack(self, *args, **kwargs) -> Any:
        """ """
    def GoForward(self, *args, **kwargs) -> Any:
        """ """
    def GoHome(self, *args, **kwargs) -> Any:
        """ """
    def GoSearch(self, *args, **kwargs) -> Any:
        """ """
    def Navigate(self, *args, **kwargs) -> Any:
        """ """
    def Navigate(self, *args, **kwargs) -> Any:
        """ """
    def Navigate(self, *args, **kwargs) -> Any:
        """ """
    def Navigate(self, *args, **kwargs) -> Any:
        """ """
    def Navigate(self, *args, **kwargs) -> Any:
        """ """
    def Refresh(self, *args, **kwargs) -> Any:
        """ """
    def Refresh2(self, *args, **kwargs) -> Any:
        """ """
    def Refresh2(self, *args, **kwargs) -> Any:
        """ """
    def Stop(self, *args, **kwargs) -> Any:
        """ """
    def Quit(self, *args, **kwargs) -> Any:
        """ """
    def ClientToWindow(self, *args, **kwargs) -> Any:
        """ """
    def PutProperty(self, *args, **kwargs) -> Any:
        """ """
    def GetProperty(self, *args, **kwargs) -> Any:
        """ """
    def Navigate2(self, *args, **kwargs) -> Any:
        """ """
    def Navigate2(self, *args, **kwargs) -> Any:
        """ """
    def Navigate2(self, *args, **kwargs) -> Any:
        """ """
    def Navigate2(self, *args, **kwargs) -> Any:
        """ """
    def Navigate2(self, *args, **kwargs) -> Any:
        """ """
    def QueryStatusWB(self, *args, **kwargs) -> Any:
        """ """
    def ExecWB(self, *args, **kwargs) -> Any:
        """ """
    def ExecWB(self, *args, **kwargs) -> Any:
        """ """
    def ExecWB(self, *args, **kwargs) -> Any:
        """ """
    def ShowBrowserBar(self, *args, **kwargs) -> Any:
        """ """
    def ShowBrowserBar(self, *args, **kwargs) -> Any:
        """ """
    def ShowBrowserBar(self, *args, **kwargs) -> Any:
        """ """
    ActiveEngine: Any
    """ """
    ControlInterface: Any
    """ """
    DefaultInterface: Any
    """ """
    Application: Any
    """ """
    Parent: Any
    """ """
    Container: Any
    """ """
    Document: Any
    """ """
    TopLevelContainer: Any
    """ """
    type_: Any
    """ """
    LocationName: Any
    """ """
    LocationURL: Any
    """ """
    Busy: Any
    """ """
    Name: Any
    """ """
    HWND: Any
    """ """
    FullName: Any
    """ """
    Path: Any
    """ """
    ReadyState: Any
    """ """
    EdgeBrowserExecutableFolder: str
    """ """
    EdgeUserDataFolder: str
    """ """
    Anchors: Any
    """ """
    TabStop: bool
    """ """
    Align: Any
    """ """
    DragCursor: Any
    """ """
    DragMode: Any
    """ """
    ParentShowHint: bool
    """ """
    PopupMenu: Any
    """ """
    ShowHint: bool
    """ """
    TabOrder: int
    """ """
    StyleElements: Any
    """ """
    OnDragDrop: Any
    """ """
    OnDragOver: Any
    """ """
    OnEndDrag: Any
    """ """
    OnEnter: Any
    """ """
    OnExit: Any
    """ """
    OnStartDrag: Any
    """ """
    SelectedEngine: Any
    """ """
    Visible: bool
    """ """
    StatusBar: Any
    """ """
    StatusText: Any
    """ """
    ToolBar: int
    """ """
    MenuBar: Any
    """ """
    FullScreen: Any
    """ """
    Offline: Any
    """ """
    Silent: Any
    """ """
    RegisterAsBrowser: Any
    """ """
    RegisterAsDropTarget: Any
    """ """
    TheaterMode: Any
    """ """
    AddressBar: Any
    """ """
    Resizable: Any
    """ """
    OnStatusTextChange: Any
    """ """
    OnProgressChange: Any
    """ """
    OnCommandStateChange: Any
    """ """
    OnDownloadBegin: Any
    """ """
    OnDownloadComplete: Any
    """ """
    OnTitleChange: Any
    """ """
    OnPropertyChange: Any
    """ """
    OnBeforeNavigate2: Any
    """ """
    OnNewWindow2: Any
    """ """
    OnNavigateComplete2: Any
    """ """
    OnDocumentComplete: Any
    """ """
    OnQuit: Any
    """ """
    OnVisible: Any
    """ """
    OnToolBar: Any
    """ """
    OnMenuBar: Any
    """ """
    OnStatusBar: Any
    """ """
    OnFullScreen: Any
    """ """
    OnTheaterMode: Any
    """ """
    OnWindowSetResizable: Any
    """ """
    OnWindowSetLeft: Any
    """ """
    OnWindowSetTop: Any
    """ """
    OnWindowSetWidth: Any
    """ """
    OnWindowSetHeight: Any
    """ """
    OnWindowClosing: Any
    """ """
    OnClientToHostWindow: Any
    """ """
    OnSetSecureLockIcon: Any
    """ """
    OnFileDownload: Any
    """ """
    OnNavigateError: Any
    """ """
    OnPrintTemplateInstantiation: Any
    """ """
    OnPrintTemplateTeardown: Any
    """ """
    OnUpdatePageStatus: Any
    """ """
    OnPrivacyImpactedStateChange: Any
    """ """
    OnNewWindow3: Any
    """ """
    OnSetPhishingFilterStatus: Any
    """ """
    OnWindowStateChanged: Any
    """ """
    OnNewProcess: Any
    """ """
    OnThirdPartyUrlBlocked: Any
    """ """
    OnRedirectXDomainBlocked: Any
    """ """
    OnBeforeScriptExecute: Any
    """ """
    OnWebWorkerStarted: Any
    """ """
    OnWebWorkerFinsihed: Any
    """ """
    OnShowScriptError: Any
    """ """
